webpackJsonp([36,39],Array(480).concat([
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.ContentLayoutCenter = exports.ContentLayoutWest = exports.ContentLayoutEast = exports.ContentLayoutNorth = undefined;
	
	var _switch = __webpack_require__(481);
	
	var _switch2 = _interopRequireDefault(_switch);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _class, _temp, _class2, _temp2, _class3, _temp3;
	
	__webpack_require__(484);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(158);
	
	var _propTypes = __webpack_require__(160);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _icon = __webpack_require__(477);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _redux = __webpack_require__(177);
	
	var _actions = __webpack_require__(272);
	
	__webpack_require__(486);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var northHeight = 0;
	var navHeight = 0;
	var widthLimit = 1280;
	
	var ContentLayoutNorth = (_temp = _class = function (_React$Component) {
	    _inherits(ContentLayoutNorth, _React$Component);
	
	    function ContentLayoutNorth(props) {
	        _classCallCheck(this, ContentLayoutNorth);
	
	        var _this = _possibleConstructorReturn(this, (ContentLayoutNorth.__proto__ || Object.getPrototypeOf(ContentLayoutNorth)).call(this, props));
	
	        northHeight = _this.props.height == 0 ? 0 : _this.props.height || 100;
	        return _this;
	    }
	
	    _createClass(ContentLayoutNorth, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (northHeight !== nextProps.height) {
	                northHeight = nextProps.height == 0 ? 0 : nextProps.height || 100;
	            }
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            northHeight = 0;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var props = this.props;
	
	            return _react2["default"].createElement(
	                'div',
	                { className: 'content-layout-north', style: props.scroll ? { height: this.props.height, overflowX: 'auto' } : { height: this.props.height } },
	                props.children
	            );
	        }
	    }]);
	
	    return ContentLayoutNorth;
	}(_react2["default"].Component), _class.propTypes = {
	    height: _propTypes2["default"].number.isRequired
	}, _temp);
	var ContentLayoutEast = (_temp2 = _class2 = function (_React$Component2) {
	    _inherits(ContentLayoutEast, _React$Component2);
	
	    function ContentLayoutEast(props) {
	        _classCallCheck(this, ContentLayoutEast);
	
	        var _this2 = _possibleConstructorReturn(this, (ContentLayoutEast.__proto__ || Object.getPrototypeOf(ContentLayoutEast)).call(this, props));
	
	        _this2.props.eastWidthChange(_this2.props.width == 0 ? 0 : _this2.props.width || 440);
	        _this2.state = {
	            height: 0,
	            isShow: false
	        };
	        return _this2;
	    }
	
	    _createClass(ContentLayoutEast, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (nextProps.browser.height !== undefined || nextProps.height !== undefined) {
	                var browserHeight = nextProps.browser.height;
	                var browserWidth = nextProps.browser.width < widthLimit ? widthLimit : nextProps.browser.width;
	                var height = nextProps.height || browserHeight - northHeight - navHeight;
	                this.setState({
	                    height: height,
	                    isShow: browserWidth < widthLimit ? false : !nextProps.layout.switchState ? false : true
	                });
	            }
	            if (nextProps.layout.eastWidth !== nextProps.width) {
	                nextProps.eastWidthChange(nextProps.width == 0 ? 0 : nextProps.width);
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var props = this.props;
	
	            var browserHeight = props.browser.height;
	            var height = props.height || browserHeight - northHeight - navHeight;
	            this.setState({
	                height: height,
	                isShow: true
	            });
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            this.props.eastWidthChange(0);
	        }
	    }, {
	        key: 'switchChange',
	        value: function switchChange(checked) {
	            var props = this.props;
	
	            props.switchState(checked);
	            this.setState({
	                isShow: checked
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var props = this.props,
	                state = this.state;
	
	            return _react2["default"].createElement(
	                'div',
	                { style: { position: 'relative' } },
	                props.layout.eastWidth !== 0 && props.browser.width >= widthLimit && props.layout.switchState && _react2["default"].createElement(
	                    'div',
	                    { className: 'east-switch-cls' },
	                    _react2["default"].createElement(_switch2["default"], { defaultChecked: true, size: 'small', onChange: this.switchChange.bind(this) }),
	                    '\u53F3\u4FA7\u4FE1\u606F'
	                ),
	                _react2["default"].createElement(
	                    'div',
	                    { className: 'content-layout-east', style: {
	                            width: props.layout.eastWidth,
	                            height: state.height,
	                            display: !state.isShow ? 'none' : 'block',
	                            overflowY: props.overflowY
	                        } },
	                    props.children
	                )
	            );
	        }
	    }]);
	
	    return ContentLayoutEast;
	}(_react2["default"].Component), _class2.propTypes = {
	    width: _propTypes2["default"].number.isRequired,
	    overflowY: _propTypes2["default"].string
	}, _temp2);
	var ContentLayoutWest = (_temp3 = _class3 = function (_React$Component3) {
	    _inherits(ContentLayoutWest, _React$Component3);
	
	    function ContentLayoutWest(props) {
	        _classCallCheck(this, ContentLayoutWest);
	
	        var _this3 = _possibleConstructorReturn(this, (ContentLayoutWest.__proto__ || Object.getPrototypeOf(ContentLayoutWest)).call(this, props));
	
	        _this3.props.westWidthChange(_this3.props.width || 440);
	        _this3.state = {
	            height: 0
	        };
	        return _this3;
	    }
	
	    _createClass(ContentLayoutWest, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (nextProps.browser.height !== undefined) {
	                var browserHeight = nextProps.browser.height;
	                var browserWidth = nextProps.browser.width;
	                var height = browserHeight - northHeight - navHeight;
	                this.setState({
	                    height: height
	                });
	            }
	            if (nextProps.layout.westWidth !== nextProps.width) {
	                nextProps.westWidthChange(nextProps.width == 0 ? 0 : nextProps.width);
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var props = this.props;
	
	            var browserHeight = props.browser.height;
	            var height = browserHeight - northHeight - navHeight;
	            this.setState({
	                height: height
	            });
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            this.props.westWidthChange(0);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var props = this.props,
	                state = this.state;
	
	            return _react2["default"].createElement(
	                'div',
	                { className: 'content-layout-west', style: {
	                        width: props.layout.westWidth,
	                        height: state.height,
	                        overflowY: props.overflowY
	                    } },
	                props.children
	            );
	        }
	    }]);
	
	    return ContentLayoutWest;
	}(_react2["default"].Component), _class3.propTypes = {
	    width: _propTypes2["default"].number.isRequired,
	    overflowY: _propTypes2["default"].string
	}, _temp3);
	
	var ContentLayoutCenter = function (_React$Component4) {
	    _inherits(ContentLayoutCenter, _React$Component4);
	
	    function ContentLayoutCenter(props) {
	        _classCallCheck(this, ContentLayoutCenter);
	
	        var _this4 = _possibleConstructorReturn(this, (ContentLayoutCenter.__proto__ || Object.getPrototypeOf(ContentLayoutCenter)).call(this, props));
	
	        _this4.state = {
	            height: 0,
	            marginRight: 0,
	            marginLeft: 0
	        };
	        return _this4;
	    }
	
	    _createClass(ContentLayoutCenter, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (nextProps.browser.height !== undefined) {
	                var browserHeight = nextProps.browser.height;
	                var browserWidth = nextProps.browser.width;
	                var height = 0;
	                if (nextProps.navHeight) {
	                    navHeight = nextProps.navHeight;
	                    height = browserHeight - northHeight - navHeight;
	                } else {
	                    height = browserHeight - northHeight;
	                }
	                this.setState({
	                    height: height,
	                    marginRight: browserWidth < widthLimit ? 0 : !nextProps.layout.switchState ? 0 : nextProps.layout.eastWidth,
	                    marginLeft: browserWidth < widthLimit ? 0 : nextProps.layout.westWidth
	                });
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var props = this.props;
	
	            var browserHeight = props.browser.height;
	            var browserWidth = props.browser.width;
	            var height = 0;
	            if (props.navHeight) {
	                navHeight = props.navHeight;
	                height = browserHeight - northHeight - navHeight;
	            } else {
	                height = browserHeight - northHeight;
	            }
	            this.setState({
	                height: height,
	                marginRight: browserWidth < widthLimit ? 0 : props.layout.eastWidth,
	                marginLeft: browserWidth < widthLimit ? 0 : props.layout.westWidth
	            });
	            if (this.props.refCallback) {
	                this.props.refCallback(this.refs.target);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var props = this.props,
	                state = this.state;
	
	            return _react2["default"].createElement(
	                'div',
	                { className: 'content-layout-center', ref: 'target', style: { marginLeft: state.marginLeft, marginRight: state.marginRight, height: state.height } },
	                props.children
	            );
	        }
	    }]);
	
	    return ContentLayoutCenter;
	}(_react2["default"].Component);
	
	exports.ContentLayoutNorth = ContentLayoutNorth = (0, _reactRedux.connect)(function (state) {
	    return { browser: state.browser };
	})(ContentLayoutNorth);
	
	exports.ContentLayoutEast = ContentLayoutEast = (0, _reactRedux.connect)(function (state) {
	    return { browser: state.browser, layout: state.layout };
	}, function (dispatch) {
	    return (0, _redux.bindActionCreators)({ switchState: _actions.switchState, eastWidthChange: _actions.eastWidthChange }, dispatch);
	})(ContentLayoutEast);
	
	exports.ContentLayoutWest = ContentLayoutWest = (0, _reactRedux.connect)(function (state) {
	    return { browser: state.browser, layout: state.layout };
	}, function (dispatch) {
	    return (0, _redux.bindActionCreators)({ westWidthChange: _actions.westWidthChange }, dispatch);
	})(ContentLayoutWest);
	
	exports.ContentLayoutCenter = ContentLayoutCenter = (0, _reactRedux.connect)(function (state) {
	    return { browser: state.browser, layout: state.layout };
	})(ContentLayoutCenter);
	
	exports.ContentLayoutNorth = ContentLayoutNorth;
	exports.ContentLayoutEast = ContentLayoutEast;
	exports.ContentLayoutWest = ContentLayoutWest;
	exports.ContentLayoutCenter = ContentLayoutCenter;

/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class, _temp;
	
	var _rcSwitch = __webpack_require__(482);
	
	var _rcSwitch2 = _interopRequireDefault(_rcSwitch);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Switch = (_temp = _class = function (_React$Component) {
	  _inherits(Switch, _React$Component);
	
	  function Switch() {
	    _classCallCheck(this, Switch);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Switch.prototype.render = function render() {
	    var _classNames;
	
	    var _props = this.props,
	        prefixCls = _props.prefixCls,
	        size = _props.size,
	        className = _props.className;
	
	    var cls = (0, _classnames2["default"])((_classNames = {}, _defineProperty(_classNames, className, !!className), _defineProperty(_classNames, prefixCls + '-small', size === 'small'), _classNames));
	    return _react2["default"].createElement(_rcSwitch2["default"], _extends({ className: cls }, this.props));
	  };
	
	  return Switch;
	}(_react2["default"].Component), _class.defaultProps = {
	  prefixCls: 'ant-switch'
	}, _temp);
	exports["default"] = Switch;
	module.exports = exports['default'];

/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(483);

/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(160);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var classNames = __webpack_require__(393);
	
	function noop() {}
	
	var Switch = function (_Component) {
	  _inherits(Switch, _Component);
	
	  function Switch(props) {
	    _classCallCheck(this, Switch);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	    var checked = false;
	    if ('checked' in props) {
	      checked = !!props.checked;
	    } else {
	      checked = !!props.defaultChecked;
	    }
	    _this.state = { checked: checked };
	    return _this;
	  }
	
	  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if ('checked' in nextProps) {
	      this.setState({
	        checked: !!nextProps.checked
	      });
	    }
	  };
	
	  Switch.prototype.setChecked = function setChecked(checked) {
	    if (!('checked' in this.props)) {
	      this.setState({
	        checked: checked
	      });
	    }
	    this.props.onChange(checked);
	  };
	
	  Switch.prototype.toggle = function toggle() {
	    var checked = !this.state.checked;
	    this.setChecked(checked);
	  };
	
	  Switch.prototype.handleKeyDown = function handleKeyDown(e) {
	    if (e.keyCode === 37) {
	      this.setChecked(false);
	    }
	    if (e.keyCode === 39) {
	      this.setChecked(true);
	    }
	  };
	
	  // Handle auto focus when click switch in Chrome
	
	
	  Switch.prototype.handleMouseUp = function handleMouseUp(e) {
	    if (this.refs.node) {
	      this.refs.node.blur();
	    }
	    if (this.props.onMouseUp) {
	      this.props.onMouseUp(e);
	    }
	  };
	
	  Switch.prototype.render = function render() {
	    var _classNames;
	
	    var _props = this.props,
	        className = _props.className,
	        prefixCls = _props.prefixCls,
	        disabled = _props.disabled,
	        checkedChildren = _props.checkedChildren,
	        unCheckedChildren = _props.unCheckedChildren,
	        restProps = _objectWithoutProperties(_props, ['className', 'prefixCls', 'disabled', 'checkedChildren', 'unCheckedChildren']);
	
	    var checked = this.state.checked;
	    var switchClassName = classNames((_classNames = {}, _defineProperty(_classNames, className, !!className), _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, prefixCls + '-checked', checked), _defineProperty(_classNames, prefixCls + '-disabled', disabled), _classNames));
	    return _react2["default"].createElement(
	      'span',
	      _extends({}, restProps, {
	        className: switchClassName,
	        tabIndex: disabled ? -1 : 0,
	        ref: 'node',
	        onKeyDown: this.handleKeyDown.bind(this),
	        onClick: disabled ? noop : this.toggle.bind(this),
	        onMouseUp: this.handleMouseUp.bind(this)
	      }),
	      _react2["default"].createElement(
	        'span',
	        { className: prefixCls + '-inner' },
	        checked ? checkedChildren : unCheckedChildren
	      )
	    );
	  };
	
	  return Switch;
	}(_react.Component);
	
	Switch.propTypes = {
	  className: _propTypes2["default"].string,
	  prefixCls: _propTypes2["default"].string,
	  disabled: _propTypes2["default"].bool,
	  checkedChildren: _propTypes2["default"].any,
	  unCheckedChildren: _propTypes2["default"].any,
	  onChange: _propTypes2["default"].func,
	  onMouseUp: _propTypes2["default"].func,
	  checked: _propTypes2["default"].bool,
	  defaultChecked: _propTypes2["default"].bool
	};
	
	Switch.defaultProps = {
	  prefixCls: 'rc-switch',
	  checkedChildren: null,
	  unCheckedChildren: null,
	  className: '',
	  defaultChecked: false,
	  onChange: noop
	};
	
	exports["default"] = Switch;
	module.exports = exports['default'];

/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(399);
	
	__webpack_require__(485);

/***/ }),
/* 485 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 486 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	__webpack_require__(488);
	
	var _icon = __webpack_require__(477);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _store = __webpack_require__(263);
	
	var _store2 = _interopRequireDefault(_store);
	
	var _redux = __webpack_require__(177);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	    }
	
	    // 传参数作为通用模板
	
	
	    _createClass(App, [{
	        key: 'render',
	        value: function render() {
	            var props = this.props;
	
	            var dom = [];
	            for (var i = 0; i < props.list.length; i++) {
	                dom.push(_react2["default"].createElement(
	                    'span',
	                    { className: 'first', key: i },
	                    props.list[i]
	                ));
	                if (i !== props.list.length - 1) {
	                    dom.push(_react2["default"].createElement(
	                        'span',
	                        { key: i + 'divider' },
	                        '/'
	                    ));
	                }
	            }
	            return _react2["default"].createElement(
	                'div',
	                { className: 'top-path' },
	                props.backUrl && _react2["default"].createElement(
	                    'a',
	                    { className: 'go-back', href: props.backUrl },
	                    _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-arrow-left', title: '\u8FD4\u56DE' })
	                ),
	                props.goBack && _react2["default"].createElement(
	                    'label',
	                    { className: 'go-back', onClick: props.goBack.bind(props) },
	                    _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-arrow-left', title: '\u8FD4\u56DE' })
	                ),
	                dom
	            );
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	exports["default"] = App;

/***/ }),
/* 488 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 489 */,
/* 490 */,
/* 491 */,
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Input = __webpack_require__(493);
	
	var _Input2 = _interopRequireDefault(_Input);
	
	var _Group = __webpack_require__(499);
	
	var _Group2 = _interopRequireDefault(_Group);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	_Input2["default"].Group = _Group2["default"];
	exports["default"] = _Input2["default"];
	module.exports = exports['default'];

/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class, _temp;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _calculateNodeHeight = __webpack_require__(494);
	
	var _calculateNodeHeight2 = _interopRequireDefault(_calculateNodeHeight);
	
	var _object = __webpack_require__(495);
	
	var _object2 = _interopRequireDefault(_object);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	function fixControlledValue(value) {
	  if (typeof value === 'undefined' || value === null) {
	    return '';
	  }
	  return value;
	}
	
	function onNextFrame(cb) {
	  if (window.requestAnimationFrame) {
	    return window.requestAnimationFrame(cb);
	  }
	  return window.setTimeout(cb, 1);
	}
	
	function clearNextFrameAction(nextFrameId) {
	  if (window.cancelAnimationFrame) {
	    window.cancelAnimationFrame(nextFrameId);
	  } else {
	    window.clearTimeout(nextFrameId);
	  }
	}
	
	var Input = (_temp = _class = function (_Component) {
	  _inherits(Input, _Component);
	
	  function Input(props) {
	    _classCallCheck(this, Input);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));
	
	    _this.handleKeyDown = function (e) {
	      if (e.keyCode === 13) {
	        _this.props.onPressEnter(e);
	      }
	      _this.props.onKeyDown(e);
	    };
	
	    _this.handleTextareaChange = function (e) {
	      if (!('value' in _this.props)) {
	        _this.resizeTextarea();
	      }
	      _this.props.onChange(e);
	    };
	
	    _this.resizeTextarea = function () {
	      var _this$props = _this.props,
	          type = _this$props.type,
	          autosize = _this$props.autosize;
	
	      if (type !== 'textarea' || !autosize || !_this.refs.input) {
	        return;
	      }
	      var minRows = autosize ? autosize.minRows : null;
	      var maxRows = autosize ? autosize.maxRows : null;
	      var textareaStyles = (0, _calculateNodeHeight2["default"])(_this.refs.input, false, minRows, maxRows);
	      _this.setState({ textareaStyles: textareaStyles });
	    };
	
	    _this.state = {
	      textareaStyles: null
	    };
	    return _this;
	  }
	
	  Input.prototype.componentDidMount = function componentDidMount() {
	    this.resizeTextarea();
	  };
	
	  Input.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    // Re-render with the new content then recalculate the height as required.
	    if (this.props.value !== nextProps.value) {
	      if (this.nextFrameActionId) {
	        clearNextFrameAction(this.nextFrameActionId);
	      }
	      this.nextFrameActionId = onNextFrame(this.resizeTextarea);
	    }
	  };
	
	  Input.prototype.renderLabledInput = function renderLabledInput(children) {
	    var _classNames;
	
	    var props = this.props;
	    var wrapperClassName = props.prefixCls + '-group';
	    var addonClassName = wrapperClassName + '-addon';
	    var addonBefore = props.addonBefore ? _react2["default"].createElement(
	      'span',
	      { className: addonClassName },
	      props.addonBefore
	    ) : null;
	
	    var addonAfter = props.addonAfter ? _react2["default"].createElement(
	      'span',
	      { className: addonClassName },
	      props.addonAfter
	    ) : null;
	
	    var className = (0, _classnames2["default"])((_classNames = {}, _defineProperty(_classNames, props.prefixCls + '-wrapper', true), _defineProperty(_classNames, wrapperClassName, addonBefore || addonAfter), _classNames));
	
	    return _react2["default"].createElement(
	      'span',
	      { className: className },
	      addonBefore,
	      children,
	      addonAfter
	    );
	  };
	
	  Input.prototype.renderInput = function renderInput() {
	    var _classNames2;
	
	    var props = _extends({}, this.props);
	
	    // Fix https://fb.me/react-unknown-prop
	    var otherProps = (0, _object2["default"])(this.props, ['prefixCls', 'onPressEnter', 'autosize', 'addonBefore', 'addonAfter']);
	
	    var prefixCls = props.prefixCls;
	    if (!props.type) {
	      return props.children;
	    }
	
	    var inputClassName = (0, _classnames2["default"])((_classNames2 = {}, _defineProperty(_classNames2, prefixCls, true), _defineProperty(_classNames2, prefixCls + '-sm', props.size === 'small'), _defineProperty(_classNames2, prefixCls + '-lg', props.size === 'large'), _defineProperty(_classNames2, props.className, !!props.className), _classNames2));
	
	    if ('value' in props) {
	      otherProps.value = fixControlledValue(props.value);
	      // Input elements must be either controlled or uncontrolled,
	      // specify either the value prop, or the defaultValue prop, but not both.
	      delete otherProps.defaultValue;
	    }
	
	    switch (props.type) {
	      case 'textarea':
	        return _react2["default"].createElement('textarea', _extends({}, otherProps, {
	          style: _extends({}, props.style, this.state.textareaStyles),
	          className: inputClassName,
	          onKeyDown: this.handleKeyDown,
	          onChange: this.handleTextareaChange,
	          ref: 'input'
	        }));
	      default:
	        return _react2["default"].createElement('input', _extends({}, otherProps, {
	          className: inputClassName,
	          onKeyDown: this.handleKeyDown,
	          ref: 'input'
	        }));
	    }
	  };
	
	  Input.prototype.render = function render() {
	    return this.renderLabledInput(this.renderInput());
	  };
	
	  return Input;
	}(_react.Component), _class.defaultProps = {
	  defaultValue: '',
	  disabled: false,
	  prefixCls: 'ant-input',
	  type: 'text',
	  onPressEnter: function onPressEnter() {},
	  onKeyDown: function onKeyDown() {},
	  onChange: function onChange() {},
	
	  autosize: false
	}, _class.propTypes = {
	  type: _react.PropTypes.string,
	  id: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
	  size: _react.PropTypes.oneOf(['small', 'default', 'large']),
	  disabled: _react.PropTypes.bool,
	  value: _react.PropTypes.any,
	  defaultValue: _react.PropTypes.any,
	  className: _react.PropTypes.string,
	  addonBefore: _react.PropTypes.node,
	  addonAfter: _react.PropTypes.node,
	  prefixCls: _react.PropTypes.string,
	  autosize: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.object]),
	  onPressEnter: _react.PropTypes.func,
	  onKeyDown: _react.PropTypes.func
	}, _temp);
	exports["default"] = Input;
	module.exports = exports['default'];

/***/ }),
/* 494 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = calculateNodeHeight;
	// Thanks to https://github.com/andreypopp/react-textarea-autosize/
	
	/**
	 * calculateNodeHeight(uiTextNode, useCache = false)
	 */
	
	var HIDDEN_TEXTAREA_STYLE = '\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n';
	
	var SIZING_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing'];
	
	var computedStyleCache = {};
	var hiddenTextarea = void 0;
	
	function computedStyle(node) {
	  return window.getComputedStyle ? getComputedStyle(node) : node.currentStyle;
	}
	
	function getStylePropertyValue(style, prop) {
	  var value = void 0;
	  if (style) {
	    value = window.getComputedStyle ? style.getPropertyValue(prop) : style[prop.replace(/-(\w)/gi, function (word, letter) {
	      return letter.toUpperCase();
	    })];
	  }
	  return value;
	}
	
	function calculateNodeStyling(node) {
	  var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  var nodeRef = node.getAttribute('id') || node.getAttribute('data-reactid') || node.getAttribute('name');
	
	  if (useCache && computedStyleCache[nodeRef]) {
	    return computedStyleCache[nodeRef];
	  }
	
	  var style = computedStyle(node);
	
	  var boxSizing = getStylePropertyValue(style, 'box-sizing') || getStylePropertyValue(style, '-moz-box-sizing') || getStylePropertyValue(style, '-webkit-box-sizing');
	
	  var paddingSize = parseFloat(getStylePropertyValue(style, 'padding-bottom')) + parseFloat(getStylePropertyValue(style, 'padding-top'));
	
	  var borderSize = parseFloat(getStylePropertyValue(style, 'border-bottom-width')) + parseFloat(getStylePropertyValue(style, 'border-top-width'));
	
	  var sizingStyle = SIZING_STYLE.map(function (name) {
	    return name + ':' + getStylePropertyValue(style, name);
	  }).join(';');
	
	  var nodeInfo = {
	    sizingStyle: sizingStyle,
	    paddingSize: paddingSize,
	    borderSize: borderSize,
	    boxSizing: boxSizing
	  };
	
	  if (useCache && nodeRef) {
	    computedStyleCache[nodeRef] = nodeInfo;
	  }
	
	  return nodeInfo;
	}
	
	function calculateNodeHeight(uiTextNode) {
	  var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	  var minRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	  var maxRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
	
	  if (!hiddenTextarea) {
	    hiddenTextarea = document.createElement('textarea');
	    document.body.appendChild(hiddenTextarea);
	  }
	
	  // Copy all CSS properties that have an impact on the height of the content in
	  // the textbox
	
	  var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache),
	      paddingSize = _calculateNodeStyling.paddingSize,
	      borderSize = _calculateNodeStyling.borderSize,
	      boxSizing = _calculateNodeStyling.boxSizing,
	      sizingStyle = _calculateNodeStyling.sizingStyle;
	
	  // Need to have the overflow attribute to hide the scrollbar otherwise
	  // text-lines will not calculated properly as the shadow will technically be
	  // narrower for content
	
	
	  hiddenTextarea.setAttribute('style', sizingStyle + ';' + HIDDEN_TEXTAREA_STYLE);
	  hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';
	
	  var minHeight = -Infinity;
	  var maxHeight = Infinity;
	  var height = hiddenTextarea.scrollHeight;
	
	  if (boxSizing === 'border-box') {
	    // border-box: add border, since height = content + padding + border
	    height = height + borderSize;
	  } else if (boxSizing === 'content-box') {
	    // remove padding, since height = content
	    height = height - paddingSize;
	  }
	
	  if (minRows !== null || maxRows !== null) {
	    // measure height of a textarea with a single row
	    hiddenTextarea.value = '';
	    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
	    if (minRows !== null) {
	      minHeight = singleRowHeight * minRows;
	      if (boxSizing === 'border-box') {
	        minHeight = minHeight + paddingSize + borderSize;
	      }
	      height = Math.max(minHeight, height);
	    }
	    if (maxRows !== null) {
	      maxHeight = singleRowHeight * maxRows;
	      if (boxSizing === 'border-box') {
	        maxHeight = maxHeight + paddingSize + borderSize;
	      }
	      height = Math.min(maxHeight, height);
	    }
	  }
	  return { height: height, minHeight: minHeight, maxHeight: maxHeight };
	}
	module.exports = exports['default'];

/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * object.omit <https://github.com/jonschlinkert/object.omit>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	var isObject = __webpack_require__(496);
	var forOwn = __webpack_require__(497);
	
	module.exports = function omit(obj, keys) {
	  if (!isObject(obj)) return {};
	
	  keys = [].concat.apply([], [].slice.call(arguments, 1));
	  var last = keys[keys.length - 1];
	  var res = {}, fn;
	
	  if (typeof last === 'function') {
	    fn = keys.pop();
	  }
	
	  var isFunction = typeof fn === 'function';
	  if (!keys.length && !isFunction) {
	    return obj;
	  }
	
	  forOwn(obj, function(value, key) {
	    if (keys.indexOf(key) === -1) {
	
	      if (!isFunction) {
	        res[key] = value;
	      } else if (fn(value, key, obj)) {
	        res[key] = value;
	      }
	    }
	  });
	  return res;
	};


/***/ }),
/* 496 */
/***/ (function(module, exports) {

	/*!
	 * is-extendable <https://github.com/jonschlinkert/is-extendable>
	 *
	 * Copyright (c) 2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	module.exports = function isExtendable(val) {
	  return typeof val !== 'undefined' && val !== null
	    && (typeof val === 'object' || typeof val === 'function');
	};


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * for-own <https://github.com/jonschlinkert/for-own>
	 *
	 * Copyright (c) 2014-2017, Jon Schlinkert.
	 * Released under the MIT License.
	 */
	
	'use strict';
	
	var forIn = __webpack_require__(498);
	var hasOwn = Object.prototype.hasOwnProperty;
	
	module.exports = function forOwn(obj, fn, thisArg) {
	  forIn(obj, function(val, key) {
	    if (hasOwn.call(obj, key)) {
	      return fn.call(thisArg, obj[key], key, obj);
	    }
	  });
	};


/***/ }),
/* 498 */
/***/ (function(module, exports) {

	/*!
	 * for-in <https://github.com/jonschlinkert/for-in>
	 *
	 * Copyright (c) 2014-2017, Jon Schlinkert.
	 * Released under the MIT License.
	 */
	
	'use strict';
	
	module.exports = function forIn(obj, fn, thisArg) {
	  for (var key in obj) {
	    if (fn.call(thisArg, obj[key], key, obj) === false) {
	      break;
	    }
	  }
	};


/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = Group;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function Group(props) {
	  var className = (0, _classnames2["default"])(_defineProperty({
	    'ant-input-group': true,
	    'ant-input-group-lg': props.size === 'large',
	    'ant-input-group-sm': props.size === 'small'
	  }, props.className, !!props.className));
	  return _react2["default"].createElement(
	    'span',
	    { className: className, style: props.style },
	    props.children
	  );
	}
	
	Group.propTypes = {
	  children: _react2["default"].PropTypes.any
	};
	module.exports = exports['default'];

/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _rcNotification = __webpack_require__(501);
	
	var _rcNotification2 = _interopRequireDefault(_rcNotification);
	
	var _icon = __webpack_require__(394);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var defaultDuration = 1.5;
	var defaultTop = void 0;
	var messageInstance = void 0;
	var key = 1;
	var prefixCls = 'ant-message';
	
	function getMessageInstance() {
	  messageInstance = messageInstance || _rcNotification2["default"].newInstance({
	    prefixCls: prefixCls,
	    transitionName: 'move-up',
	    style: { top: defaultTop } });
	  return messageInstance;
	}
	
	function notice(content) {
	  var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDuration;
	  var type = arguments[2];
	  var onClose = arguments[3];
	
	  var iconType = {
	    info: 'info-circle',
	    success: 'check-circle',
	    error: 'cross-circle',
	    warning: 'exclamation-circle',
	    loading: 'loading'
	  }[type];
	
	  var instance = getMessageInstance();
	  instance.notice({
	    key: key,
	    duration: duration,
	    style: {},
	    content: _react2["default"].createElement(
	      'div',
	      { className: prefixCls + '-custom-content ' + prefixCls + '-' + type },
	      _react2["default"].createElement(_icon2["default"], { type: iconType }),
	      _react2["default"].createElement(
	        'span',
	        null,
	        content
	      )
	    ),
	    onClose: onClose
	  });
	  return function () {
	    var target = key++;
	    return function () {
	      instance.removeNotice(target);
	    };
	  }();
	}
	
	exports["default"] = {
	  info: function info(content, duration, onClose) {
	    return notice(content, duration, 'info', onClose);
	  },
	  success: function success(content, duration, onClose) {
	    return notice(content, duration, 'success', onClose);
	  },
	  error: function error(content, duration, onClose) {
	    return notice(content, duration, 'error', onClose);
	  },
	
	  // Departed usage, please use warning()
	  warn: function warn(content, duration, onClose) {
	    return notice(content, duration, 'warning', onClose);
	  },
	  warning: function warning(content, duration, onClose) {
	    return notice(content, duration, 'warning', onClose);
	  },
	  loading: function loading(content, duration, onClose) {
	    return notice(content, duration, 'loading', onClose);
	  },
	  config: function config(options) {
	    if ('top' in options) {
	      defaultTop = options.top;
	    }
	    if ('duration' in options) {
	      defaultDuration = options.duration;
	    }
	    if ('prefixCls' in options) {
	      prefixCls = options.prefixCls;
	    }
	  },
	  destroy: function destroy() {
	    if (messageInstance) {
	      messageInstance.destroy();
	      messageInstance = null;
	    }
	  }
	};
	module.exports = exports['default'];

/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Notification = __webpack_require__(502);
	
	var _Notification2 = _interopRequireDefault(_Notification);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = _Notification2["default"];
	module.exports = exports['default'];

/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(157);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _rcAnimate = __webpack_require__(313);
	
	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);
	
	var _createChainedFunction = __webpack_require__(503);
	
	var _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _Notice = __webpack_require__(504);
	
	var _Notice2 = _interopRequireDefault(_Notice);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var seed = 0;
	var now = Date.now();
	
	function getUuid() {
	  return 'rcNotification_' + now + '_' + seed++;
	}
	
	var Notification = _react2["default"].createClass({
	  displayName: 'Notification',
	
	  propTypes: {
	    prefixCls: _react.PropTypes.string,
	    transitionName: _react.PropTypes.string,
	    animation: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object]),
	    style: _react.PropTypes.object
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-notification',
	      animation: 'fade',
	      style: {
	        top: 65,
	        left: '50%'
	      }
	    };
	  },
	  getInitialState: function getInitialState() {
	    return {
	      notices: []
	    };
	  },
	  getTransitionName: function getTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    if (!transitionName && props.animation) {
	      transitionName = props.prefixCls + '-' + props.animation;
	    }
	    return transitionName;
	  },
	  add: function add(notice) {
	    var key = notice.key = notice.key || getUuid();
	    this.setState(function (previousState) {
	      var notices = previousState.notices;
	      if (!notices.filter(function (v) {
	        return v.key === key;
	      }).length) {
	        return {
	          notices: notices.concat(notice)
	        };
	      }
	    });
	  },
	  remove: function remove(key) {
	    this.setState(function (previousState) {
	      return {
	        notices: previousState.notices.filter(function (notice) {
	          return notice.key !== key;
	        })
	      };
	    });
	  },
	  render: function render() {
	    var _this = this,
	        _className;
	
	    var props = this.props;
	    var noticeNodes = this.state.notices.map(function (notice) {
	      var onClose = (0, _createChainedFunction2["default"])(_this.remove.bind(_this, notice.key), notice.onClose);
	      return _react2["default"].createElement(
	        _Notice2["default"],
	        _extends({
	          prefixCls: props.prefixCls
	        }, notice, {
	          onClose: onClose
	        }),
	        notice.content
	      );
	    });
	    var className = (_className = {}, _defineProperty(_className, props.prefixCls, 1), _defineProperty(_className, props.className, !!props.className), _className);
	    return _react2["default"].createElement(
	      'div',
	      { className: (0, _classnames2["default"])(className), style: props.style },
	      _react2["default"].createElement(
	        _rcAnimate2["default"],
	        { transitionName: this.getTransitionName() },
	        noticeNodes
	      )
	    );
	  }
	});
	
	Notification.newInstance = function newNotificationInstance(properties) {
	  var props = properties || {};
	  var div = document.createElement('div');
	  document.body.appendChild(div);
	  var notification = _reactDom2["default"].render(_react2["default"].createElement(Notification, props), div);
	  return {
	    notice: function notice(noticeProps) {
	      notification.add(noticeProps);
	    },
	    removeNotice: function removeNotice(key) {
	      notification.remove(key);
	    },
	
	    component: notification,
	    destroy: function destroy() {
	      _reactDom2["default"].unmountComponentAtNode(div);
	      document.body.removeChild(div);
	    }
	  };
	};
	
	exports["default"] = Notification;
	module.exports = exports['default'];

/***/ }),
/* 503 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @returns {function|null}
	 */
	function createChainedFunction() {
	  var args = arguments;
	  return function chainedFunction() {
	    for (var i = 0; i < args.length; i++) {
	      if (args[i] && args[i].apply) {
	        args[i].apply(this, arguments);
	      }
	    }
	  };
	}
	
	module.exports = createChainedFunction;

/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var Notice = _react2["default"].createClass({
	  displayName: 'Notice',
	
	  propTypes: {
	    duration: _react.PropTypes.number,
	    onClose: _react.PropTypes.func,
	    children: _react.PropTypes.any
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      onEnd: function onEnd() {},
	      onClose: function onClose() {},
	
	      duration: 1.5,
	      style: {
	        right: '50%'
	      }
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    var _this = this;
	
	    if (this.props.duration) {
	      this.closeTimer = setTimeout(function () {
	        _this.close();
	      }, this.props.duration * 1000);
	    }
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    this.clearCloseTimer();
	  },
	  clearCloseTimer: function clearCloseTimer() {
	    if (this.closeTimer) {
	      clearTimeout(this.closeTimer);
	      this.closeTimer = null;
	    }
	  },
	  close: function close() {
	    this.clearCloseTimer();
	    this.props.onClose();
	  },
	  render: function render() {
	    var _className;
	
	    var props = this.props;
	    var componentClass = props.prefixCls + '-notice';
	    var className = (_className = {}, _defineProperty(_className, '' + componentClass, 1), _defineProperty(_className, componentClass + '-closable', props.closable), _defineProperty(_className, props.className, !!props.className), _className);
	    return _react2["default"].createElement(
	      'div',
	      { className: (0, _classnames2["default"])(className), style: props.style },
	      _react2["default"].createElement(
	        'div',
	        { className: componentClass + '-content' },
	        props.children
	      ),
	      props.closable ? _react2["default"].createElement(
	        'a',
	        { tabIndex: '0', onClick: this.close, className: componentClass + '-close' },
	        _react2["default"].createElement('span', { className: componentClass + '-close-x' })
	      ) : null
	    );
	  }
	});
	
	exports["default"] = Notice;
	module.exports = exports['default'];

/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class, _temp;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _rcSelect = __webpack_require__(506);
	
	var _rcSelect2 = _interopRequireDefault(_rcSelect);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Select = (_temp = _class = function (_React$Component) {
	  _inherits(Select, _React$Component);
	
	  function Select() {
	    _classCallCheck(this, Select);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Select.prototype.render = function render() {
	    var _classNames;
	
	    var _props = this.props,
	        size = _props.size,
	        className = _props.className,
	        combobox = _props.combobox,
	        notFoundContent = _props.notFoundContent,
	        prefixCls = _props.prefixCls,
	        showSearch = _props.showSearch,
	        optionLabelProp = _props.optionLabelProp;
	
	
	    var cls = (0, _classnames2["default"])((_classNames = {}, _defineProperty(_classNames, prefixCls + '-lg', size === 'large'), _defineProperty(_classNames, prefixCls + '-sm', size === 'small'), _defineProperty(_classNames, className, !!className), _defineProperty(_classNames, prefixCls + '-show-search', showSearch), _classNames));
	
	    var antLocale = this.context.antLocale;
	
	    if (antLocale && antLocale.Select) {
	      notFoundContent = notFoundContent || antLocale.Select.notFoundContent;
	    }
	
	    if (combobox) {
	      notFoundContent = null;
	      // children 带 dom 结构时，无法填入输入框
	      optionLabelProp = optionLabelProp || 'value';
	    }
	
	    return _react2["default"].createElement(_rcSelect2["default"], _extends({}, this.props, {
	      className: cls,
	      optionLabelProp: optionLabelProp || 'children',
	      notFoundContent: notFoundContent
	    }));
	  };
	
	  return Select;
	}(_react2["default"].Component), _class.Option = _rcSelect.Option, _class.OptGroup = _rcSelect.OptGroup, _class.defaultProps = {
	  prefixCls: 'ant-select',
	  transitionName: 'slide-up',
	  choiceTransitionName: 'zoom',
	  showSearch: false
	}, _class.contextTypes = {
	  antLocale: _react2["default"].PropTypes.object
	}, _temp);
	exports["default"] = Select;
	module.exports = exports['default'];

/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.OptGroup = exports.Option = undefined;
	
	var _Select = __webpack_require__(507);
	
	var _Select2 = _interopRequireDefault(_Select);
	
	var _Option = __webpack_require__(531);
	
	var _Option2 = _interopRequireDefault(_Option);
	
	var _OptGroup = __webpack_require__(509);
	
	var _OptGroup2 = _interopRequireDefault(_OptGroup);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	_Select2["default"].Option = _Option2["default"];
	_Select2["default"].OptGroup = _OptGroup2["default"];
	exports.Option = _Option2["default"];
	exports.OptGroup = _OptGroup2["default"];
	exports["default"] = _Select2["default"];

/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(508);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _extends2 = __webpack_require__(424);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(157);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _KeyCode = __webpack_require__(312);
	
	var _KeyCode2 = _interopRequireDefault(_KeyCode);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _OptGroup = __webpack_require__(509);
	
	var _OptGroup2 = _interopRequireDefault(_OptGroup);
	
	var _rcAnimate = __webpack_require__(313);
	
	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);
	
	var _componentClasses = __webpack_require__(386);
	
	var _componentClasses2 = _interopRequireDefault(_componentClasses);
	
	var _util = __webpack_require__(510);
	
	var _SelectTrigger = __webpack_require__(527);
	
	var _SelectTrigger2 = _interopRequireDefault(_SelectTrigger);
	
	var _FilterMixin = __webpack_require__(529);
	
	var _FilterMixin2 = _interopRequireDefault(_FilterMixin);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function noop() {}
	
	function filterFn(input, child) {
	  return String((0, _util.getPropValue)(child, this.props.optionFilterProp)).indexOf(input) > -1;
	}
	
	function saveRef(name, component) {
	  this[name] = component;
	}
	
	var valueObjectShape = void 0;
	
	if (_react.PropTypes) {
	  valueObjectShape = _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.shape({
	    key: _react.PropTypes.string,
	    label: _react.PropTypes.node
	  })]);
	}
	
	var Select = _react2["default"].createClass({
	  displayName: 'Select',
	
	  propTypes: {
	    defaultActiveFirstOption: _react.PropTypes.bool,
	    multiple: _react.PropTypes.bool,
	    filterOption: _react.PropTypes.any,
	    showSearch: _react.PropTypes.bool,
	    disabled: _react.PropTypes.bool,
	    allowClear: _react.PropTypes.bool,
	    showArrow: _react.PropTypes.bool,
	    tags: _react.PropTypes.bool,
	    prefixCls: _react.PropTypes.string,
	    className: _react.PropTypes.string,
	    transitionName: _react.PropTypes.string,
	    optionLabelProp: _react.PropTypes.string,
	    optionFilterProp: _react.PropTypes.string,
	    animation: _react.PropTypes.string,
	    choiceTransitionName: _react.PropTypes.string,
	    onChange: _react.PropTypes.func,
	    onBlur: _react.PropTypes.func,
	    onSelect: _react.PropTypes.func,
	    onSearch: _react.PropTypes.func,
	    placeholder: _react.PropTypes.any,
	    onDeselect: _react.PropTypes.func,
	    labelInValue: _react.PropTypes.bool,
	    value: _react.PropTypes.oneOfType([valueObjectShape, _react.PropTypes.arrayOf(valueObjectShape)]),
	    defaultValue: _react.PropTypes.oneOfType([valueObjectShape, _react.PropTypes.arrayOf(valueObjectShape)]),
	    dropdownStyle: _react.PropTypes.object,
	    maxTagTextLength: _react.PropTypes.number
	  },
	
	  mixins: [_FilterMixin2["default"]],
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-select',
	      filterOption: filterFn,
	      defaultOpen: false,
	      labelInValue: false,
	      defaultActiveFirstOption: true,
	      showSearch: true,
	      allowClear: false,
	      placeholder: '',
	      defaultValue: [],
	      onChange: noop,
	      onBlur: noop,
	      onSelect: noop,
	      onSearch: noop,
	      onDeselect: noop,
	      showArrow: true,
	      dropdownMatchSelectWidth: true,
	      dropdownStyle: {},
	      dropdownMenuStyle: {},
	      optionFilterProp: 'value',
	      optionLabelProp: 'value',
	      notFoundContent: 'Not Found'
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var value = [];
	    if ('value' in props) {
	      value = (0, _util.toArray)(props.value);
	    } else {
	      value = (0, _util.toArray)(props.defaultValue);
	    }
	    value = this.addLabelToValue(props, value);
	    var inputValue = '';
	    if (props.combobox) {
	      inputValue = value.length ? String(value[0].key) : '';
	    }
	    this.saveInputRef = saveRef.bind(this, 'inputInstance');
	    this.saveInputMirrorRef = saveRef.bind(this, 'inputMirrorInstance');
	    var open = props.open;
	    if (open === undefined) {
	      open = props.defaultOpen;
	    }
	    return {
	      value: value,
	      inputValue: inputValue,
	      open: open
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if ('value' in nextProps) {
	      var value = (0, _util.toArray)(nextProps.value);
	      value = this.addLabelToValue(nextProps, value);
	      this.setState({
	        value: value
	      });
	      if (nextProps.combobox) {
	        this.setState({
	          inputValue: value.length ? String(value[0].key) : ''
	        });
	      }
	    }
	  },
	  componentDidUpdate: function componentDidUpdate() {
	    var state = this.state;
	    var props = this.props;
	
	    if (state.open && (0, _util.isMultipleOrTags)(props)) {
	      var inputNode = this.getInputDOMNode();
	      var mirrorNode = this.getInputMirrorDOMNode();
	      if (inputNode.value) {
	        inputNode.style.width = '';
	        inputNode.style.width = mirrorNode.clientWidth + 'px';
	      } else {
	        inputNode.style.width = '';
	      }
	    }
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    this.clearBlurTime();
	    if (this.dropdownContainer) {
	      _reactDom2["default"].unmountComponentAtNode(this.dropdownContainer);
	      document.body.removeChild(this.dropdownContainer);
	      this.dropdownContainer = null;
	    }
	  },
	  onInputChange: function onInputChange(event) {
	    var val = event.target.value;
	    var props = this.props;
	
	    this.setInputValue(val);
	    this.setState({
	      open: true
	    });
	    if ((0, _util.isCombobox)(props)) {
	      this.fireChange([{
	        key: val
	      }]);
	    }
	  },
	  onDropdownVisibleChange: function onDropdownVisibleChange(open) {
	    this.setOpenState(open);
	  },
	
	
	  // combobox ignore
	  onKeyDown: function onKeyDown(event) {
	    var props = this.props;
	    if (props.disabled) {
	      return;
	    }
	    var keyCode = event.keyCode;
	    if (this.state.open && !this.getInputDOMNode()) {
	      this.onInputKeyDown(event);
	    } else if (keyCode === _KeyCode2["default"].ENTER || keyCode === _KeyCode2["default"].DOWN) {
	      this.setOpenState(true);
	      event.preventDefault();
	    }
	  },
	  onInputKeyDown: function onInputKeyDown(event) {
	    var props = this.props;
	    if (props.disabled) {
	      return;
	    }
	    var state = this.state;
	    var keyCode = event.keyCode;
	    if ((0, _util.isMultipleOrTags)(props) && !event.target.value && keyCode === _KeyCode2["default"].BACKSPACE) {
	      event.preventDefault();
	      var value = state.value.concat();
	      if (value.length) {
	        var popValue = value.pop();
	        props.onDeselect(props.labelInValue ? popValue : popValue.key);
	        this.fireChange(value);
	      }
	      return;
	    }
	    if (keyCode === _KeyCode2["default"].DOWN) {
	      if (!state.open) {
	        this.openIfHasChildren();
	        event.preventDefault();
	        event.stopPropagation();
	        return;
	      }
	    } else if (keyCode === _KeyCode2["default"].ESC) {
	      if (state.open) {
	        this.setOpenState(false);
	        event.preventDefault();
	        event.stopPropagation();
	      }
	      return;
	    }
	
	    if (state.open) {
	      var menu = this.refs.trigger.getInnerMenu();
	      if (menu && menu.onKeyDown(event)) {
	        event.preventDefault();
	        event.stopPropagation();
	      }
	    }
	  },
	  onMenuSelect: function onMenuSelect(_ref) {
	    var item = _ref.item;
	
	    var value = this.state.value;
	    var props = this.props;
	    var selectedValue = (0, _util.getValuePropValue)(item);
	    var selectedLabel = this.getLabelFromOption(item);
	    var event = selectedValue;
	    if (props.labelInValue) {
	      event = {
	        key: event,
	        label: selectedLabel
	      };
	    }
	    props.onSelect(event, item);
	    if ((0, _util.isMultipleOrTags)(props)) {
	      if ((0, _util.findIndexInValueByKey)(value, selectedValue) !== -1) {
	        return;
	      }
	      value = value.concat([{
	        key: selectedValue,
	        label: selectedLabel
	      }]);
	    } else {
	      if (value.length && value[0].key === selectedValue) {
	        this.setOpenState(false, true);
	        return;
	      }
	      value = [{
	        key: selectedValue,
	        label: selectedLabel
	      }];
	      this.setOpenState(false, true);
	    }
	    this.fireChange(value);
	    var inputValue = void 0;
	    if ((0, _util.isCombobox)(props)) {
	      inputValue = (0, _util.getPropValue)(item, props.optionLabelProp);
	    } else {
	      inputValue = '';
	    }
	    this.setInputValue(inputValue, false);
	  },
	  onMenuDeselect: function onMenuDeselect(_ref2) {
	    var item = _ref2.item;
	    var domEvent = _ref2.domEvent;
	
	    if (domEvent.type === 'click') {
	      this.removeSelected((0, _util.getValuePropValue)(item));
	    }
	    this.setInputValue('', false);
	  },
	  onArrowClick: function onArrowClick(e) {
	    e.stopPropagation();
	    if (!this.props.disabled) {
	      this.setOpenState(!this.state.open, true);
	    }
	  },
	  onPlaceholderClick: function onPlaceholderClick() {
	    if (this.getInputDOMNode()) {
	      this.getInputDOMNode().focus();
	    }
	  },
	  onOuterFocus: function onOuterFocus() {
	    this.clearBlurTime();
	    this._focused = true;
	    this.updateFocusClassName();
	  },
	  onPopupFocus: function onPopupFocus() {
	    // fix ie scrollbar, focus element again
	    this.maybeFocus(true, true);
	  },
	  onOuterBlur: function onOuterBlur() {
	    var _this = this;
	
	    this.blurTimer = setTimeout(function () {
	      _this._focused = false;
	      _this.updateFocusClassName();
	      var props = _this.props;
	      var value = _this.state.value;
	      var inputValue = _this.state.inputValue;
	
	      if ((0, _util.isSingleMode)(props) && props.showSearch && inputValue && props.defaultActiveFirstOption) {
	        var options = _this._options || [];
	        if (options.length) {
	          var firstOption = (0, _util.findFirstMenuItem)(options);
	          if (firstOption) {
	            value = [{
	              key: firstOption.key,
	              label: _this.getLabelFromOption(firstOption)
	            }];
	            _this.fireChange(value);
	          }
	        }
	      } else if ((0, _util.isMultipleOrTags)(props) && inputValue) {
	        _this.state.inputValue = _this.getInputDOMNode().value = '';
	      }
	      props.onBlur(_this.getVLForOnChange(value));
	    }, 10);
	  },
	  onClearSelection: function onClearSelection(event) {
	    var props = this.props;
	    var state = this.state;
	    if (props.disabled) {
	      return;
	    }
	    var inputValue = state.inputValue;
	    var value = state.value;
	
	    event.stopPropagation();
	    if (inputValue || value.length) {
	      if (value.length) {
	        this.fireChange([]);
	      }
	      this.setOpenState(false, true);
	      if (inputValue) {
	        this.setInputValue('');
	      }
	    }
	  },
	  onChoiceAnimationLeave: function onChoiceAnimationLeave() {
	    this.refs.trigger.refs.trigger.forcePopupAlign();
	  },
	  getLabelBySingleValue: function getLabelBySingleValue(children, value) {
	    var _this2 = this;
	
	    if (value === undefined) {
	      return null;
	    }
	    var label = null;
	    _react2["default"].Children.forEach(children, function (child) {
	      if (child.type === _OptGroup2["default"]) {
	        var maybe = _this2.getLabelBySingleValue(child.props.children, value);
	        if (maybe !== null) {
	          label = maybe;
	        }
	      } else if ((0, _util.getValuePropValue)(child) === value) {
	        label = _this2.getLabelFromOption(child);
	      }
	    });
	    return label;
	  },
	  getLabelFromOption: function getLabelFromOption(child) {
	    return (0, _util.getPropValue)(child, this.props.optionLabelProp);
	  },
	  getLabelFromProps: function getLabelFromProps(props, value) {
	    return this.getLabelByValue(props.children, value);
	  },
	  getVLForOnChange: function getVLForOnChange(vls_) {
	    var vls = vls_;
	    if (vls !== undefined) {
	      if (!this.props.labelInValue) {
	        vls = vls.map(function (v) {
	          return v.key;
	        });
	      }
	      return (0, _util.isMultipleOrTags)(this.props) ? vls : vls[0];
	    }
	    return vls;
	  },
	  getLabelByValue: function getLabelByValue(children, value) {
	    var label = this.getLabelBySingleValue(children, value);
	    if (label === null) {
	      return value;
	    }
	    return label;
	  },
	  getDropdownContainer: function getDropdownContainer() {
	    if (!this.dropdownContainer) {
	      this.dropdownContainer = document.createElement('div');
	      document.body.appendChild(this.dropdownContainer);
	    }
	    return this.dropdownContainer;
	  },
	  getPlaceholderElement: function getPlaceholderElement() {
	    var props = this.props;
	    var state = this.state;
	
	    var hidden = false;
	    if (state.inputValue) {
	      hidden = true;
	    }
	    if (state.value.length) {
	      hidden = true;
	    }
	    if ((0, _util.isCombobox)(props) && state.value.length === 1 && !state.value[0].key) {
	      hidden = false;
	    }
	    var placeholder = props.placeholder;
	    if (placeholder) {
	      return _react2["default"].createElement(
	        'div',
	        (0, _extends3["default"])({
	          onMouseDown: _util.preventDefaultEvent,
	          style: (0, _extends3["default"])({
	            display: hidden ? 'none' : 'block'
	          }, _util.UNSELECTABLE_STYLE)
	        }, _util.UNSELECTABLE_ATTRIBUTE, {
	          onClick: this.onPlaceholderClick,
	          className: props.prefixCls + '-selection__placeholder'
	        }),
	        placeholder
	      );
	    }
	    return null;
	  },
	  getInputElement: function getInputElement() {
	    var props = this.props;
	    return _react2["default"].createElement(
	      'div',
	      { className: props.prefixCls + '-search__field__wrap' },
	      _react2["default"].createElement('input', {
	        ref: this.saveInputRef,
	        onChange: this.onInputChange,
	        onKeyDown: this.onInputKeyDown,
	        value: this.state.inputValue,
	        disabled: props.disabled,
	        className: props.prefixCls + '-search__field'
	      }),
	      _react2["default"].createElement(
	        'span',
	        {
	          ref: this.saveInputMirrorRef,
	          className: props.prefixCls + '-search__field__mirror'
	        },
	        this.state.inputValue
	      )
	    );
	  },
	  getInputDOMNode: function getInputDOMNode() {
	    return this.inputInstance;
	  },
	  getInputMirrorDOMNode: function getInputMirrorDOMNode() {
	    return this.inputMirrorInstance;
	  },
	  getPopupDOMNode: function getPopupDOMNode() {
	    return this.refs.trigger.getPopupDOMNode();
	  },
	  getPopupMenuComponent: function getPopupMenuComponent() {
	    return this.refs.trigger.getInnerMenu();
	  },
	  setOpenState: function setOpenState(open, needFocus) {
	    var _this3 = this;
	
	    var props = this.props;
	    var state = this.state;
	
	    if (state.open === open) {
	      this.maybeFocus(open, needFocus);
	      return;
	    }
	    var nextState = {
	      open: open
	    };
	    // clear search input value when open is false in singleMode.
	    if (!open && (0, _util.isSingleMode)(props) && props.showSearch) {
	      this.setInputValue('');
	    }
	    if (!open) {
	      this.maybeFocus(open, needFocus);
	    }
	    this.setState(nextState, function () {
	      if (open) {
	        _this3.maybeFocus(open, needFocus);
	      }
	    });
	  },
	  setInputValue: function setInputValue(inputValue) {
	    var fireSearch = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	
	    this.setState({
	      inputValue: inputValue
	    });
	    if (fireSearch) {
	      this.props.onSearch(inputValue);
	    }
	  },
	  clearBlurTime: function clearBlurTime() {
	    if (this.blurTimer) {
	      clearTimeout(this.blurTimer);
	      this.blurTimer = null;
	    }
	  },
	  updateFocusClassName: function updateFocusClassName() {
	    var refs = this.refs;
	    var props = this.props;
	    // avoid setState and its side effect
	
	    if (this._focused) {
	      (0, _componentClasses2["default"])(refs.root).add(props.prefixCls + '-focused');
	    } else {
	      (0, _componentClasses2["default"])(refs.root).remove(props.prefixCls + '-focused');
	    }
	  },
	  maybeFocus: function maybeFocus(open, needFocus) {
	    if (needFocus || open) {
	      var input = this.getInputDOMNode();
	      var _document = document;
	      var activeElement = _document.activeElement;
	
	      if (input && (open || (0, _util.isMultipleOrTagsOrCombobox)(this.props))) {
	        if (activeElement !== input) {
	          input.focus();
	        }
	      } else {
	        var selection = this.refs.selection;
	        if (activeElement !== selection) {
	          selection.focus();
	        }
	      }
	    }
	  },
	  addLabelToValue: function addLabelToValue(props, value_) {
	    var _this4 = this;
	
	    var value = value_;
	    if (props.labelInValue) {
	      value.forEach(function (v) {
	        v.label = v.label || _this4.getLabelFromProps(props, v.key);
	      });
	    } else {
	      value = value.map(function (v) {
	        return {
	          key: v,
	          label: _this4.getLabelFromProps(props, v)
	        };
	      });
	    }
	    return value;
	  },
	  removeSelected: function removeSelected(selectedKey) {
	    var props = this.props;
	    if (props.disabled) {
	      return;
	    }
	    var label = void 0;
	    var value = this.state.value.filter(function (singleValue) {
	      if (singleValue.key === selectedKey) {
	        label = singleValue.label;
	      }
	      return singleValue.key !== selectedKey;
	    });
	    var canMultiple = (0, _util.isMultipleOrTags)(props);
	
	    if (canMultiple) {
	      var event = selectedKey;
	      if (props.labelInValue) {
	        event = {
	          key: selectedKey,
	          label: label
	        };
	      }
	      props.onDeselect(event);
	    }
	    this.fireChange(value);
	  },
	  openIfHasChildren: function openIfHasChildren() {
	    var props = this.props;
	    if (_react2["default"].Children.count(props.children) || (0, _util.isSingleMode)(props)) {
	      this.setOpenState(true);
	    }
	  },
	  fireChange: function fireChange(value) {
	    var props = this.props;
	    if (!('value' in props)) {
	      this.setState({
	        value: value
	      });
	    }
	    props.onChange(this.getVLForOnChange(value));
	  },
	  renderTopControlNode: function renderTopControlNode() {
	    var _this5 = this;
	
	    var _state = this.state;
	    var value = _state.value;
	    var open = _state.open;
	    var inputValue = _state.inputValue;
	
	    var props = this.props;
	    var choiceTransitionName = props.choiceTransitionName;
	    var prefixCls = props.prefixCls;
	    var maxTagTextLength = props.maxTagTextLength;
	    var showSearch = props.showSearch;
	
	    var className = prefixCls + '-selection__rendered';
	    // search input is inside topControlNode in single, multiple & combobox. 2016/04/13
	    var innerNode = null;
	    if ((0, _util.isSingleMode)(props)) {
	      var selectedValue = null;
	      if (value.length) {
	        var showSelectedValue = false;
	        var opacity = 1;
	        if (!showSearch) {
	          showSelectedValue = true;
	        } else {
	          if (open) {
	            showSelectedValue = !inputValue;
	            if (showSelectedValue) {
	              opacity = 0.4;
	            }
	          } else {
	            showSelectedValue = true;
	          }
	        }
	        selectedValue = _react2["default"].createElement(
	          'div',
	          {
	            key: 'value',
	            className: prefixCls + '-selection-selected-value',
	            title: value[0].label,
	            style: {
	              display: showSelectedValue ? 'block' : 'none',
	              opacity: opacity
	            }
	          },
	          value[0].label
	        );
	      }
	      if (!showSearch) {
	        innerNode = [selectedValue];
	      } else {
	        innerNode = [selectedValue, _react2["default"].createElement(
	          'div',
	          {
	            className: prefixCls + '-search ' + prefixCls + '-search--inline',
	            key: 'input',
	            style: {
	              display: open ? 'block' : 'none'
	            }
	          },
	          this.getInputElement()
	        )];
	      }
	    } else {
	      var selectedValueNodes = [];
	      if ((0, _util.isMultipleOrTags)(props)) {
	        selectedValueNodes = value.map(function (singleValue) {
	          var content = singleValue.label;
	          var title = content;
	          if (maxTagTextLength && typeof content === 'string' && content.length > maxTagTextLength) {
	            content = content.slice(0, maxTagTextLength) + '...';
	          }
	          var disabled = (0, _util.toArray)(props.children).some(function (child) {
	            var childValue = (0, _util.getValuePropValue)(child);
	            return childValue === singleValue.key && child.props && child.props.disabled;
	          });
	          var choiceClassName = disabled ? prefixCls + '-selection__choice ' + prefixCls + '-selection__choice__disabled' : prefixCls + '-selection__choice';
	          return _react2["default"].createElement(
	            'li',
	            (0, _extends3["default"])({
	              style: _util.UNSELECTABLE_STYLE
	            }, _util.UNSELECTABLE_ATTRIBUTE, {
	              onMouseDown: _util.preventDefaultEvent,
	              className: choiceClassName,
	              key: singleValue.key,
	              title: title
	            }),
	            _react2["default"].createElement(
	              'div',
	              { className: prefixCls + '-selection__choice__content' },
	              content
	            ),
	            disabled ? null : _react2["default"].createElement('span', {
	              className: prefixCls + '-selection__choice__remove',
	              onClick: _this5.removeSelected.bind(_this5, singleValue.key)
	            })
	          );
	        });
	      }
	      selectedValueNodes.push(_react2["default"].createElement(
	        'li',
	        {
	          className: prefixCls + '-search ' + prefixCls + '-search--inline',
	          key: '__input'
	        },
	        this.getInputElement()
	      ));
	
	      if ((0, _util.isMultipleOrTags)(props) && choiceTransitionName) {
	        innerNode = _react2["default"].createElement(
	          _rcAnimate2["default"],
	          {
	            onLeave: this.onChoiceAnimationLeave,
	            component: 'ul',
	            transitionName: choiceTransitionName
	          },
	          selectedValueNodes
	        );
	      } else {
	        innerNode = _react2["default"].createElement(
	          'ul',
	          null,
	          selectedValueNodes
	        );
	      }
	    }
	    return _react2["default"].createElement(
	      'div',
	      { className: className },
	      this.getPlaceholderElement(),
	      innerNode
	    );
	  },
	  render: function render() {
	    var _rootCls;
	
	    var props = this.props;
	    var multiple = (0, _util.isMultipleOrTags)(props);
	    var state = this.state;
	    var className = props.className;
	    var disabled = props.disabled;
	    var allowClear = props.allowClear;
	    var prefixCls = props.prefixCls;
	
	    var ctrlNode = this.renderTopControlNode();
	    var extraSelectionProps = {};
	    var open = this.state.open;
	
	    var options = [];
	    if (open) {
	      options = this.renderFilterOptions();
	    }
	    this._options = options;
	    if (open && ((0, _util.isMultipleOrTagsOrCombobox)(props) || !props.showSearch) && !options.length) {
	      open = false;
	    }
	    if (!(0, _util.isMultipleOrTagsOrCombobox)(props)) {
	      extraSelectionProps = {
	        onKeyDown: this.onKeyDown,
	        tabIndex: 0
	      };
	    }
	    var rootCls = (_rootCls = {}, (0, _defineProperty3["default"])(_rootCls, className, !!className), (0, _defineProperty3["default"])(_rootCls, prefixCls, 1), (0, _defineProperty3["default"])(_rootCls, prefixCls + '-open', open), (0, _defineProperty3["default"])(_rootCls, prefixCls + '-focused', open || !!this._focused), (0, _defineProperty3["default"])(_rootCls, prefixCls + '-combobox', (0, _util.isCombobox)(props)), (0, _defineProperty3["default"])(_rootCls, prefixCls + '-disabled', disabled), (0, _defineProperty3["default"])(_rootCls, prefixCls + '-enabled', !disabled), (0, _defineProperty3["default"])(_rootCls, prefixCls + '-allow-clear', !!props.allowClear), _rootCls);
	    var clearStyle = (0, _extends3["default"])({}, _util.UNSELECTABLE_STYLE, {
	      display: 'none'
	    });
	    if (state.inputValue || state.value.length) {
	      clearStyle.display = 'block';
	    }
	    var clear = _react2["default"].createElement('span', (0, _extends3["default"])({
	      key: 'clear',
	      onMouseDown: _util.preventDefaultEvent,
	      style: clearStyle
	    }, _util.UNSELECTABLE_ATTRIBUTE, {
	      className: prefixCls + '-selection__clear',
	      onClick: this.onClearSelection
	    }));
	    return _react2["default"].createElement(
	      _SelectTrigger2["default"],
	      {
	        onPopupFocus: this.onPopupFocus,
	        dropdownAlign: props.dropdownAlign,
	        dropdownClassName: props.dropdownClassName,
	        dropdownMatchSelectWidth: props.dropdownMatchSelectWidth,
	        defaultActiveFirstOption: props.defaultActiveFirstOption,
	        dropdownMenuStyle: props.dropdownMenuStyle,
	        transitionName: props.transitionName,
	        animation: props.animation,
	        prefixCls: props.prefixCls,
	        dropdownStyle: props.dropdownStyle,
	        combobox: props.combobox,
	        showSearch: props.showSearch,
	        options: options,
	        multiple: multiple,
	        disabled: disabled,
	        visible: open,
	        inputValue: state.inputValue,
	        value: state.value,
	        onDropdownVisibleChange: this.onDropdownVisibleChange,
	        getPopupContainer: props.getPopupContainer,
	        onMenuSelect: this.onMenuSelect,
	        onMenuDeselect: this.onMenuDeselect,
	        ref: 'trigger'
	      },
	      _react2["default"].createElement(
	        'div',
	        {
	          style: props.style,
	          ref: 'root',
	          onBlur: this.onOuterBlur,
	          onFocus: this.onOuterFocus,
	          className: (0, _classnames2["default"])(rootCls)
	        },
	        _react2["default"].createElement(
	          'div',
	          (0, _extends3["default"])({
	            ref: 'selection',
	            key: 'selection',
	            className: prefixCls + '-selection\n            ' + prefixCls + '-selection--' + (multiple ? 'multiple' : 'single'),
	            role: 'combobox',
	            'aria-autocomplete': 'list',
	            'aria-haspopup': 'true',
	            'aria-expanded': open
	          }, extraSelectionProps),
	          ctrlNode,
	          allowClear && !multiple ? clear : null,
	          multiple || !props.showArrow ? null : _react2["default"].createElement(
	            'span',
	            (0, _extends3["default"])({
	              key: 'arrow',
	              className: prefixCls + '-arrow',
	              style: _util.UNSELECTABLE_STYLE
	            }, _util.UNSELECTABLE_ATTRIBUTE, {
	              onMouseDown: _util.preventDefaultEvent,
	              onClick: this.onArrowClick
	            }),
	            _react2["default"].createElement('b', null)
	          )
	        )
	      )
	    );
	  }
	});
	
	exports["default"] = Select;
	module.exports = exports['default'];

/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(437);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = function (obj, key, value) {
	  if (key in obj) {
	    (0, _defineProperty2["default"])(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	
	  return obj;
	};

/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(435);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(440);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(441);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var OptGroup = function (_React$Component) {
	  (0, _inherits3["default"])(OptGroup, _React$Component);
	
	  function OptGroup() {
	    (0, _classCallCheck3["default"])(this, OptGroup);
	    return (0, _possibleConstructorReturn3["default"])(this, _React$Component.apply(this, arguments));
	  }
	
	  return OptGroup;
	}(_react2["default"].Component);
	
	exports["default"] = OptGroup;
	module.exports = exports['default'];

/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.UNSELECTABLE_ATTRIBUTE = exports.UNSELECTABLE_STYLE = undefined;
	exports.getValuePropValue = getValuePropValue;
	exports.getPropValue = getPropValue;
	exports.isCombobox = isCombobox;
	exports.isMultipleOrTags = isMultipleOrTags;
	exports.isMultipleOrTagsOrCombobox = isMultipleOrTagsOrCombobox;
	exports.isSingleMode = isSingleMode;
	exports.toArray = toArray;
	exports.preventDefaultEvent = preventDefaultEvent;
	exports.findIndexInValueByKey = findIndexInValueByKey;
	exports.getSelectKeys = getSelectKeys;
	exports.findFirstMenuItem = findFirstMenuItem;
	
	var _rcMenu = __webpack_require__(511);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function getValuePropValue(child) {
	  var props = child.props;
	  if ('value' in props) {
	    return props.value;
	  }
	  if (child.key) {
	    return child.key;
	  }
	  throw new Error('no key or value for ' + child);
	}
	
	function getPropValue(child, prop) {
	  if (prop === 'value') {
	    return getValuePropValue(child);
	  }
	  return child.props[prop];
	}
	
	function isCombobox(props) {
	  return props.combobox;
	}
	
	function isMultipleOrTags(props) {
	  return props.multiple || props.tags;
	}
	
	function isMultipleOrTagsOrCombobox(props) {
	  return isMultipleOrTags(props) || isCombobox(props);
	}
	
	function isSingleMode(props) {
	  return !isMultipleOrTagsOrCombobox(props);
	}
	
	function toArray(value) {
	  var ret = value;
	  if (value === undefined) {
	    ret = [];
	  } else if (!Array.isArray(value)) {
	    ret = [value];
	  }
	  return ret;
	}
	
	function preventDefaultEvent(e) {
	  e.preventDefault();
	}
	
	function findIndexInValueByKey(value, key) {
	  var index = -1;
	  for (var i = 0; i < value.length; i++) {
	    if (value[i].key === key) {
	      index = i;
	      break;
	    }
	  }
	  return index;
	}
	
	function getSelectKeys(menuItems, value) {
	  if (value === null || value === undefined) {
	    return [];
	  }
	  var selectedKeys = [];
	  _react2["default"].Children.forEach(menuItems, function (item) {
	    if (item.type === _rcMenu.ItemGroup) {
	      selectedKeys = selectedKeys.concat(getSelectKeys(item.props.children, value));
	    } else {
	      var itemValue = getValuePropValue(item);
	      var itemKey = item.key;
	      if (findIndexInValueByKey(value, itemValue) !== -1 && itemKey) {
	        selectedKeys.push(itemKey);
	      }
	    }
	  });
	  return selectedKeys;
	}
	
	var UNSELECTABLE_STYLE = exports.UNSELECTABLE_STYLE = {
	  userSelect: 'none',
	  WebkitUserSelect: 'none'
	};
	
	var UNSELECTABLE_ATTRIBUTE = exports.UNSELECTABLE_ATTRIBUTE = {
	  unselectable: 'unselectable'
	};
	
	function findFirstMenuItem(children) {
	  for (var i = 0; i < children.length; i++) {
	    var child = children[i];
	    if (child.type === _rcMenu.ItemGroup) {
	      var found = findFirstMenuItem(child.props.children);
	      if (found) {
	        return found;
	      }
	    } else if (!child.props.disabled) {
	      return child;
	    }
	  }
	  return null;
	}

/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Divider = exports.ItemGroup = exports.MenuItemGroup = exports.MenuItem = exports.Item = exports.SubMenu = undefined;
	
	var _Menu = __webpack_require__(512);
	
	var _Menu2 = _interopRequireDefault(_Menu);
	
	var _SubMenu = __webpack_require__(519);
	
	var _SubMenu2 = _interopRequireDefault(_SubMenu);
	
	var _MenuItem = __webpack_require__(524);
	
	var _MenuItem2 = _interopRequireDefault(_MenuItem);
	
	var _MenuItemGroup = __webpack_require__(525);
	
	var _MenuItemGroup2 = _interopRequireDefault(_MenuItemGroup);
	
	var _Divider = __webpack_require__(526);
	
	var _Divider2 = _interopRequireDefault(_Divider);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports.SubMenu = _SubMenu2["default"];
	exports.Item = _MenuItem2["default"];
	exports.MenuItem = _MenuItem2["default"];
	exports.MenuItemGroup = _MenuItemGroup2["default"];
	exports.ItemGroup = _MenuItemGroup2["default"];
	exports.Divider = _Divider2["default"];
	exports["default"] = _Menu2["default"];

/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _MenuMixin = __webpack_require__(513);
	
	var _MenuMixin2 = _interopRequireDefault(_MenuMixin);
	
	var _objectAssign = __webpack_require__(165);
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	var _util = __webpack_require__(517);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var Menu = _react2["default"].createClass({
	  displayName: 'Menu',
	
	  propTypes: {
	    openSubMenuOnMouseEnter: _react.PropTypes.bool,
	    closeSubMenuOnMouseLeave: _react.PropTypes.bool,
	    selectedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    defaultSelectedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    defaultOpenKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    openKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    mode: _react.PropTypes.string,
	    onClick: _react.PropTypes.func,
	    onSelect: _react.PropTypes.func,
	    onDeselect: _react.PropTypes.func,
	    onDestroy: _react.PropTypes.func,
	    openTransitionName: _react.PropTypes.string,
	    openAnimation: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object]),
	    level: _react.PropTypes.number,
	    eventKey: _react.PropTypes.string,
	    selectable: _react.PropTypes.bool,
	    children: _react.PropTypes.any
	  },
	
	  mixins: [_MenuMixin2["default"]],
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      openSubMenuOnMouseEnter: true,
	      closeSubMenuOnMouseLeave: true,
	      selectable: true,
	      onClick: _util.noop,
	      onSelect: _util.noop,
	      onOpen: _util.noop,
	      onClose: _util.noop,
	      onDeselect: _util.noop,
	      defaultSelectedKeys: [],
	      defaultOpenKeys: []
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var selectedKeys = props.defaultSelectedKeys;
	    var openKeys = props.defaultOpenKeys;
	    if ('selectedKeys' in props) {
	      selectedKeys = props.selectedKeys || [];
	    }
	    if ('openKeys' in props) {
	      openKeys = props.openKeys || [];
	    }
	    return {
	      selectedKeys: selectedKeys,
	      openKeys: openKeys
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var props = {};
	    if ('selectedKeys' in nextProps) {
	      props.selectedKeys = nextProps.selectedKeys;
	    }
	    if ('openKeys' in nextProps) {
	      props.openKeys = nextProps.openKeys;
	    }
	    this.setState(props);
	  },
	  onDestroy: function onDestroy(key) {
	    var state = this.state;
	    var props = this.props;
	    var selectedKeys = state.selectedKeys;
	    var openKeys = state.openKeys;
	    var index = selectedKeys.indexOf(key);
	    if (!('selectedKeys' in props) && index !== -1) {
	      selectedKeys.splice(index, 1);
	    }
	    index = openKeys.indexOf(key);
	    if (!('openKeys' in props) && index !== -1) {
	      openKeys.splice(index, 1);
	    }
	  },
	  onItemHover: function onItemHover(e) {
	    var _this = this;
	
	    var item = e.item;
	    // special for top sub menu
	
	    if (this.props.mode !== 'inline' && !this.props.closeSubMenuOnMouseLeave && item.isSubMenu) {
	      (function () {
	        var activeKey = _this.state.activeKey;
	        var activeItem = _this.getFlatInstanceArray().filter(function (c) {
	          return c && c.props.eventKey === activeKey;
	        })[0];
	        if (activeItem && activeItem.props.open) {
	          _this.onOpenChange({
	            key: item.props.eventKey,
	            item: e.item,
	            open: true
	          });
	        }
	      })();
	    }
	
	    this.onCommonItemHover(e);
	  },
	  onSelect: function onSelect(selectInfo) {
	    var props = this.props;
	    if (props.selectable) {
	      // root menu
	      var selectedKeys = this.state.selectedKeys;
	      var selectedKey = selectInfo.key;
	      if (props.multiple) {
	        selectedKeys = selectedKeys.concat([selectedKey]);
	      } else {
	        selectedKeys = [selectedKey];
	      }
	      if (!('selectedKeys' in props)) {
	        this.setState({
	          selectedKeys: selectedKeys
	        });
	      }
	      props.onSelect((0, _objectAssign2["default"])({}, selectInfo, {
	        selectedKeys: selectedKeys
	      }));
	    }
	  },
	  onClick: function onClick(e) {
	    this.props.onClick(e);
	  },
	  onOpenChange: function onOpenChange(e) {
	    var props = this.props;
	    var openKeys = this.state.openKeys;
	    var changed = true;
	    if (e.open) {
	      changed = openKeys.indexOf(e.key) === -1;
	      if (changed) {
	        openKeys = openKeys.concat(e.key);
	      }
	    } else {
	      var index = openKeys.indexOf(e.key);
	      changed = index !== -1;
	      if (changed) {
	        openKeys = openKeys.concat();
	        openKeys.splice(index, 1);
	      }
	    }
	    if (changed) {
	      // hack, synchronous call from onTitleMouseEnter
	      this.state.openKeys = openKeys;
	      if (!('openKeys' in this.props)) {
	        // hack: batch does not update state
	        this.setState({ openKeys: openKeys });
	      }
	      var info = (0, _objectAssign2["default"])({ openKeys: openKeys }, e);
	      if (e.open) {
	        props.onOpen(info);
	      } else {
	        props.onClose(info);
	      }
	    }
	  },
	  onDeselect: function onDeselect(selectInfo) {
	    var props = this.props;
	    if (props.selectable) {
	      var selectedKeys = this.state.selectedKeys.concat();
	      var selectedKey = selectInfo.key;
	      var index = selectedKeys.indexOf(selectedKey);
	      if (index !== -1) {
	        selectedKeys.splice(index, 1);
	      }
	      if (!('selectedKeys' in props)) {
	        this.setState({
	          selectedKeys: selectedKeys
	        });
	      }
	      props.onDeselect((0, _objectAssign2["default"])({}, selectInfo, {
	        selectedKeys: selectedKeys
	      }));
	    }
	  },
	  getOpenTransitionName: function getOpenTransitionName() {
	    var props = this.props;
	    var transitionName = props.openTransitionName;
	    var animationName = props.openAnimation;
	    if (!transitionName && typeof animationName === 'string') {
	      transitionName = props.prefixCls + '-open-' + animationName;
	    }
	    return transitionName;
	  },
	  isInlineMode: function isInlineMode() {
	    return this.props.mode === 'inline';
	  },
	  lastOpenSubMenu: function lastOpenSubMenu() {
	    var _this2 = this;
	
	    var lastOpen = [];
	    if (this.state.openKeys.length) {
	      lastOpen = this.getFlatInstanceArray().filter(function (c) {
	        return c && _this2.state.openKeys.indexOf(c.props.eventKey) !== -1;
	      });
	    }
	    return lastOpen[0];
	  },
	  renderMenuItem: function renderMenuItem(c, i, subIndex) {
	    if (!c) {
	      return null;
	    }
	    var state = this.state;
	    var extraProps = {
	      openKeys: state.openKeys,
	      selectedKeys: state.selectedKeys,
	      openSubMenuOnMouseEnter: this.props.openSubMenuOnMouseEnter
	    };
	    return this.renderCommonMenuItem(c, i, subIndex, extraProps);
	  },
	  render: function render() {
	    var props = (0, _objectAssign2["default"])({}, this.props);
	    props.className += ' ' + props.prefixCls + '-root';
	    return this.renderRoot(props);
	  }
	});
	
	exports["default"] = Menu;
	module.exports = exports['default'];

/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(157);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _KeyCode = __webpack_require__(312);
	
	var _KeyCode2 = _interopRequireDefault(_KeyCode);
	
	var _createChainedFunction = __webpack_require__(503);
	
	var _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _domScrollIntoView = __webpack_require__(514);
	
	var _domScrollIntoView2 = _interopRequireDefault(_domScrollIntoView);
	
	var _objectAssign = __webpack_require__(165);
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	var _util = __webpack_require__(517);
	
	var _DOMWrap = __webpack_require__(518);
	
	var _DOMWrap2 = _interopRequireDefault(_DOMWrap);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function allDisabled(arr) {
	  if (!arr.length) {
	    return true;
	  }
	  return arr.every(function (c) {
	    return !!c.props.disabled;
	  });
	}
	
	function getActiveKey(props, originalActiveKey) {
	  var activeKey = originalActiveKey;
	  var children = props.children;
	  var eventKey = props.eventKey;
	  if (activeKey) {
	    var found = void 0;
	    (0, _util.loopMenuItem)(children, function (c, i) {
	      if (!c.props.disabled && activeKey === (0, _util.getKeyFromChildrenIndex)(c, eventKey, i)) {
	        found = true;
	      }
	    });
	    if (found) {
	      return activeKey;
	    }
	  }
	  activeKey = null;
	  if (props.defaultActiveFirst) {
	    (0, _util.loopMenuItem)(children, function (c, i) {
	      if (!activeKey && !c.props.disabled) {
	        activeKey = (0, _util.getKeyFromChildrenIndex)(c, eventKey, i);
	      }
	    });
	    return activeKey;
	  }
	  return activeKey;
	}
	
	function saveRef(index, subIndex, c) {
	  if (c) {
	    if (subIndex !== undefined) {
	      this.instanceArray[index] = this.instanceArray[index] || [];
	      this.instanceArray[index][subIndex] = c;
	    } else {
	      this.instanceArray[index] = c;
	    }
	  }
	}
	
	var MenuMixin = {
	  propTypes: {
	    focusable: _react.PropTypes.bool,
	    multiple: _react.PropTypes.bool,
	    style: _react.PropTypes.object,
	    defaultActiveFirst: _react.PropTypes.bool,
	    visible: _react.PropTypes.bool,
	    activeKey: _react.PropTypes.string,
	    selectedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    defaultSelectedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    defaultOpenKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    openKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    children: _react.PropTypes.any
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-menu',
	      className: '',
	      mode: 'vertical',
	      level: 1,
	      inlineIndent: 24,
	      visible: true,
	      focusable: true,
	      style: {}
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    return {
	      activeKey: getActiveKey(props, props.activeKey)
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var props = void 0;
	    if ('activeKey' in nextProps) {
	      props = {
	        activeKey: getActiveKey(nextProps, nextProps.activeKey)
	      };
	    } else {
	      var originalActiveKey = this.state.activeKey;
	      var activeKey = getActiveKey(nextProps, originalActiveKey);
	      // fix: this.setState(), parent.render(),
	      if (activeKey !== originalActiveKey) {
	        props = {
	          activeKey: activeKey
	        };
	      }
	    }
	    if (props) {
	      this.setState(props);
	    }
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    return this.props.visible || nextProps.visible;
	  },
	  componentWillMount: function componentWillMount() {
	    this.instanceArray = [];
	  },
	
	
	  // all keyboard events callbacks run from here at first
	  onKeyDown: function onKeyDown(e) {
	    var _this = this;
	
	    var keyCode = e.keyCode;
	    var handled = void 0;
	    this.getFlatInstanceArray().forEach(function (obj) {
	      if (obj && obj.props.active) {
	        handled = obj.onKeyDown(e);
	      }
	    });
	    if (handled) {
	      return 1;
	    }
	    var activeItem = null;
	    if (keyCode === _KeyCode2["default"].UP || keyCode === _KeyCode2["default"].DOWN) {
	      activeItem = this.step(keyCode === _KeyCode2["default"].UP ? -1 : 1);
	    }
	    if (activeItem) {
	      e.preventDefault();
	      this.setState({
	        activeKey: activeItem.props.eventKey
	      }, function () {
	        (0, _domScrollIntoView2["default"])(_reactDom2["default"].findDOMNode(activeItem), _reactDom2["default"].findDOMNode(_this), {
	          onlyScrollIfNeeded: true
	        });
	      });
	      return 1;
	    } else if (activeItem === undefined) {
	      e.preventDefault();
	      this.setState({
	        activeKey: null
	      });
	      return 1;
	    }
	  },
	  onCommonItemHover: function onCommonItemHover(e) {
	    var mode = this.props.mode;
	    var key = e.key;
	    var hover = e.hover;
	    var trigger = e.trigger;
	
	    var activeKey = this.state.activeKey;
	    if (!trigger || hover || this.props.closeSubMenuOnMouseLeave || !e.item.isSubMenu || mode === 'inline') {
	      this.setState({
	        activeKey: hover ? key : null
	      });
	    } else {}
	    // keep active for sub menu for click active
	    // empty
	
	    // clear last open status
	    if (hover && mode !== 'inline') {
	      var activeItem = this.getFlatInstanceArray().filter(function (c) {
	        return c && c.props.eventKey === activeKey;
	      })[0];
	      if (activeItem && activeItem.isSubMenu && activeItem.props.eventKey !== key) {
	        this.onOpenChange({
	          item: activeItem,
	          key: activeItem.props.eventKey,
	          open: false
	        });
	      }
	    }
	  },
	  getFlatInstanceArray: function getFlatInstanceArray() {
	    var instanceArray = this.instanceArray;
	    var hasInnerArray = instanceArray.some(function (a) {
	      return Array.isArray(a);
	    });
	    if (hasInnerArray) {
	      instanceArray = [];
	      this.instanceArray.forEach(function (a) {
	        if (Array.isArray(a)) {
	          instanceArray.push.apply(instanceArray, a);
	        } else {
	          instanceArray.push(a);
	        }
	      });
	      this.instanceArray = instanceArray;
	    }
	    return instanceArray;
	  },
	  renderCommonMenuItem: function renderCommonMenuItem(child, i, subIndex, extraProps) {
	    var state = this.state;
	    var props = this.props;
	    var key = (0, _util.getKeyFromChildrenIndex)(child, props.eventKey, i);
	    var childProps = child.props;
	    var isActive = key === state.activeKey;
	    var newChildProps = (0, _objectAssign2["default"])({
	      mode: props.mode,
	      level: props.level,
	      inlineIndent: props.inlineIndent,
	      renderMenuItem: this.renderMenuItem,
	      rootPrefixCls: props.prefixCls,
	      index: i,
	      parentMenu: this,
	      ref: childProps.disabled ? undefined : (0, _createChainedFunction2["default"])(child.ref, saveRef.bind(this, i, subIndex)),
	      eventKey: key,
	      closeSubMenuOnMouseLeave: props.closeSubMenuOnMouseLeave,
	      onItemHover: this.onItemHover,
	      active: !childProps.disabled && isActive,
	      multiple: props.multiple,
	      onClick: this.onClick,
	      openTransitionName: this.getOpenTransitionName(),
	      openAnimation: props.openAnimation,
	      onOpenChange: this.onOpenChange,
	      onDeselect: this.onDeselect,
	      onDestroy: this.onDestroy,
	      onSelect: this.onSelect
	    }, extraProps);
	    if (props.mode === 'inline') {
	      newChildProps.closeSubMenuOnMouseLeave = newChildProps.openSubMenuOnMouseEnter = false;
	    }
	    return _react2["default"].cloneElement(child, newChildProps);
	  },
	  renderRoot: function renderRoot(props) {
	    var _classes;
	
	    this.instanceArray = [];
	    var classes = (_classes = {}, _defineProperty(_classes, props.prefixCls, 1), _defineProperty(_classes, props.prefixCls + '-' + props.mode, 1), _defineProperty(_classes, props.className, !!props.className), _classes);
	    var domProps = {
	      className: (0, _classnames2["default"])(classes),
	      role: 'menu',
	      'aria-activedescendant': ''
	    };
	    if (props.id) {
	      domProps.id = props.id;
	    }
	    if (props.focusable) {
	      domProps.tabIndex = '0';
	      domProps.onKeyDown = this.onKeyDown;
	    }
	    return(
	      // ESLint is not smart enough to know that the type of `children` was checked.
	      /* eslint-disable */
	      _react2["default"].createElement(
	        _DOMWrap2["default"],
	        _extends({
	          style: props.style,
	          tag: 'ul',
	          hiddenClassName: props.prefixCls + '-hidden',
	          visible: props.visible
	        }, domProps),
	        _react2["default"].Children.map(props.children, this.renderMenuItem)
	      )
	      /*eslint-enable */
	
	    );
	  },
	  step: function step(direction) {
	    var children = this.getFlatInstanceArray();
	    var activeKey = this.state.activeKey;
	    var len = children.length;
	    if (!len) {
	      return null;
	    }
	    if (direction < 0) {
	      children = children.concat().reverse();
	    }
	    // find current activeIndex
	    var activeIndex = -1;
	    children.every(function (c, ci) {
	      if (c && c.props.eventKey === activeKey) {
	        activeIndex = ci;
	        return false;
	      }
	      return true;
	    });
	    if (!this.props.defaultActiveFirst && activeIndex !== -1) {
	      if (allDisabled(children.slice(activeIndex, len - 1))) {
	        return undefined;
	      }
	    }
	    var start = (activeIndex + 1) % len;
	    var i = start;
	    for (;;) {
	      var child = children[i];
	      if (!child || child.props.disabled) {
	        i = (i + 1 + len) % len;
	        // complete a loop
	        if (i === start) {
	          return null;
	        }
	      } else {
	        return child;
	      }
	    }
	  }
	};
	
	exports["default"] = MenuMixin;
	module.exports = exports['default'];

/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(515);

/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var util = __webpack_require__(516);
	
	function scrollIntoView(elem, container, config) {
	  config = config || {};
	  // document 归一化到 window
	  if (container.nodeType === 9) {
	    container = util.getWindow(container);
	  }
	
	  var allowHorizontalScroll = config.allowHorizontalScroll;
	  var onlyScrollIfNeeded = config.onlyScrollIfNeeded;
	  var alignWithTop = config.alignWithTop;
	  var alignWithLeft = config.alignWithLeft;
	  var offsetTop = config.offsetTop || 0;
	  var offsetLeft = config.offsetLeft || 0;
	  var offsetBottom = config.offsetBottom || 0;
	  var offsetRight = config.offsetRight || 0;
	
	  allowHorizontalScroll = allowHorizontalScroll === undefined ? true : allowHorizontalScroll;
	
	  var isWin = util.isWindow(container);
	  var elemOffset = util.offset(elem);
	  var eh = util.outerHeight(elem);
	  var ew = util.outerWidth(elem);
	  var containerOffset = undefined;
	  var ch = undefined;
	  var cw = undefined;
	  var containerScroll = undefined;
	  var diffTop = undefined;
	  var diffBottom = undefined;
	  var win = undefined;
	  var winScroll = undefined;
	  var ww = undefined;
	  var wh = undefined;
	
	  if (isWin) {
	    win = container;
	    wh = util.height(win);
	    ww = util.width(win);
	    winScroll = {
	      left: util.scrollLeft(win),
	      top: util.scrollTop(win)
	    };
	    // elem 相对 container 可视视窗的距离
	    diffTop = {
	      left: elemOffset.left - winScroll.left - offsetLeft,
	      top: elemOffset.top - winScroll.top - offsetTop
	    };
	    diffBottom = {
	      left: elemOffset.left + ew - (winScroll.left + ww) + offsetRight,
	      top: elemOffset.top + eh - (winScroll.top + wh) + offsetBottom
	    };
	    containerScroll = winScroll;
	  } else {
	    containerOffset = util.offset(container);
	    ch = container.clientHeight;
	    cw = container.clientWidth;
	    containerScroll = {
	      left: container.scrollLeft,
	      top: container.scrollTop
	    };
	    // elem 相对 container 可视视窗的距离
	    // 注意边框, offset 是边框到根节点
	    diffTop = {
	      left: elemOffset.left - (containerOffset.left + (parseFloat(util.css(container, 'borderLeftWidth')) || 0)) - offsetLeft,
	      top: elemOffset.top - (containerOffset.top + (parseFloat(util.css(container, 'borderTopWidth')) || 0)) - offsetTop
	    };
	    diffBottom = {
	      left: elemOffset.left + ew - (containerOffset.left + cw + (parseFloat(util.css(container, 'borderRightWidth')) || 0)) + offsetRight,
	      top: elemOffset.top + eh - (containerOffset.top + ch + (parseFloat(util.css(container, 'borderBottomWidth')) || 0)) + offsetBottom
	    };
	  }
	
	  if (diffTop.top < 0 || diffBottom.top > 0) {
	    // 强制向上
	    if (alignWithTop === true) {
	      util.scrollTop(container, containerScroll.top + diffTop.top);
	    } else if (alignWithTop === false) {
	      util.scrollTop(container, containerScroll.top + diffBottom.top);
	    } else {
	      // 自动调整
	      if (diffTop.top < 0) {
	        util.scrollTop(container, containerScroll.top + diffTop.top);
	      } else {
	        util.scrollTop(container, containerScroll.top + diffBottom.top);
	      }
	    }
	  } else {
	    if (!onlyScrollIfNeeded) {
	      alignWithTop = alignWithTop === undefined ? true : !!alignWithTop;
	      if (alignWithTop) {
	        util.scrollTop(container, containerScroll.top + diffTop.top);
	      } else {
	        util.scrollTop(container, containerScroll.top + diffBottom.top);
	      }
	    }
	  }
	
	  if (allowHorizontalScroll) {
	    if (diffTop.left < 0 || diffBottom.left > 0) {
	      // 强制向上
	      if (alignWithLeft === true) {
	        util.scrollLeft(container, containerScroll.left + diffTop.left);
	      } else if (alignWithLeft === false) {
	        util.scrollLeft(container, containerScroll.left + diffBottom.left);
	      } else {
	        // 自动调整
	        if (diffTop.left < 0) {
	          util.scrollLeft(container, containerScroll.left + diffTop.left);
	        } else {
	          util.scrollLeft(container, containerScroll.left + diffBottom.left);
	        }
	      }
	    } else {
	      if (!onlyScrollIfNeeded) {
	        alignWithLeft = alignWithLeft === undefined ? true : !!alignWithLeft;
	        if (alignWithLeft) {
	          util.scrollLeft(container, containerScroll.left + diffTop.left);
	        } else {
	          util.scrollLeft(container, containerScroll.left + diffBottom.left);
	        }
	      }
	    }
	  }
	}
	
	module.exports = scrollIntoView;

/***/ }),
/* 516 */
/***/ (function(module, exports) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;
	
	function getClientPosition(elem) {
	  var box = undefined;
	  var x = undefined;
	  var y = undefined;
	  var doc = elem.ownerDocument;
	  var body = doc.body;
	  var docElem = doc && doc.documentElement;
	  // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式
	  box = elem.getBoundingClientRect();
	
	  // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
	  // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
	  // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin
	
	  x = box.left;
	  y = box.top;
	
	  // In IE, most of the time, 2 extra pixels are added to the top and left
	  // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
	  // IE6 standards mode, this border can be overridden by setting the
	  // document element's border to zero -- thus, we cannot rely on the
	  // offset always being 2 pixels.
	
	  // In quirks mode, the offset can be determined by querying the body's
	  // clientLeft/clientTop, but in standards mode, it is found by querying
	  // the document element's clientLeft/clientTop.  Since we already called
	  // getClientBoundingRect we have already forced a reflow, so it is not
	  // too expensive just to query them all.
	
	  // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
	  // 窗口边框标准是设 documentElement ,quirks 时设置 body
	  // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
	  // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
	  // 标准 ie 下 docElem.clientTop 就是 border-top
	  // ie7 html 即窗口边框改变不了。永远为 2
	  // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0
	
	  x -= docElem.clientLeft || body.clientLeft || 0;
	  y -= docElem.clientTop || body.clientTop || 0;
	
	  return {
	    left: x,
	    top: y
	  };
	}
	
	function getScroll(w, top) {
	  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	  var method = 'scroll' + (top ? 'Top' : 'Left');
	  if (typeof ret !== 'number') {
	    var d = w.document;
	    // ie6,7,8 standard mode
	    ret = d.documentElement[method];
	    if (typeof ret !== 'number') {
	      // quirks mode
	      ret = d.body[method];
	    }
	  }
	  return ret;
	}
	
	function getScrollLeft(w) {
	  return getScroll(w);
	}
	
	function getScrollTop(w) {
	  return getScroll(w, true);
	}
	
	function getOffset(el) {
	  var pos = getClientPosition(el);
	  var doc = el.ownerDocument;
	  var w = doc.defaultView || doc.parentWindow;
	  pos.left += getScrollLeft(w);
	  pos.top += getScrollTop(w);
	  return pos;
	}
	function _getComputedStyle(elem, name, computedStyle_) {
	  var val = '';
	  var d = elem.ownerDocument;
	  var computedStyle = computedStyle_ || d.defaultView.getComputedStyle(elem, null);
	
	  // https://github.com/kissyteam/kissy/issues/61
	  if (computedStyle) {
	    val = computedStyle.getPropertyValue(name) || computedStyle[name];
	  }
	
	  return val;
	}
	
	var _RE_NUM_NO_PX = new RegExp('^(' + RE_NUM + ')(?!px)[a-z%]+$', 'i');
	var RE_POS = /^(top|right|bottom|left)$/;
	var CURRENT_STYLE = 'currentStyle';
	var RUNTIME_STYLE = 'runtimeStyle';
	var LEFT = 'left';
	var PX = 'px';
	
	function _getComputedStyleIE(elem, name) {
	  // currentStyle maybe null
	  // http://msdn.microsoft.com/en-us/library/ms535231.aspx
	  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name];
	
	  // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
	  // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
	  // 在 ie 下不对，需要直接用 offset 方式
	  // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了
	
	  // From the awesome hack by Dean Edwards
	  // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	  // If we're not dealing with a regular pixel number
	  // but a number that has a weird ending, we need to convert it to pixels
	  // exclude left right for relativity
	  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
	    // Remember the original values
	    var style = elem.style;
	    var left = style[LEFT];
	    var rsLeft = elem[RUNTIME_STYLE][LEFT];
	
	    // prevent flashing of content
	    elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];
	
	    // Put in the new values to get a computed value out
	    style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
	    ret = style.pixelLeft + PX;
	
	    // Revert the changed values
	    style[LEFT] = left;
	
	    elem[RUNTIME_STYLE][LEFT] = rsLeft;
	  }
	  return ret === '' ? 'auto' : ret;
	}
	
	var getComputedStyleX = undefined;
	if (typeof window !== 'undefined') {
	  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
	}
	
	function each(arr, fn) {
	  for (var i = 0; i < arr.length; i++) {
	    fn(arr[i]);
	  }
	}
	
	function isBorderBoxFn(elem) {
	  return getComputedStyleX(elem, 'boxSizing') === 'border-box';
	}
	
	var BOX_MODELS = ['margin', 'border', 'padding'];
	var CONTENT_INDEX = -1;
	var PADDING_INDEX = 2;
	var BORDER_INDEX = 1;
	var MARGIN_INDEX = 0;
	
	function swap(elem, options, callback) {
	  var old = {};
	  var style = elem.style;
	  var name = undefined;
	
	  // Remember the old values, and insert the new ones
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      old[name] = style[name];
	      style[name] = options[name];
	    }
	  }
	
	  callback.call(elem);
	
	  // Revert the old values
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      style[name] = old[name];
	    }
	  }
	}
	
	function getPBMWidth(elem, props, which) {
	  var value = 0;
	  var prop = undefined;
	  var j = undefined;
	  var i = undefined;
	  for (j = 0; j < props.length; j++) {
	    prop = props[j];
	    if (prop) {
	      for (i = 0; i < which.length; i++) {
	        var cssProp = undefined;
	        if (prop === 'border') {
	          cssProp = prop + which[i] + 'Width';
	        } else {
	          cssProp = prop + which[i];
	        }
	        value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
	      }
	    }
	  }
	  return value;
	}
	
	/**
	 * A crude way of determining if an object is a window
	 * @member util
	 */
	function isWindow(obj) {
	  // must use == for ie8
	  /* eslint eqeqeq:0 */
	  return obj != null && obj == obj.window;
	}
	
	var domUtils = {};
	
	each(['Width', 'Height'], function (name) {
	  domUtils['doc' + name] = function (refWin) {
	    var d = refWin.document;
	    return Math.max(
	    // firefox chrome documentElement.scrollHeight< body.scrollHeight
	    // ie standard mode : documentElement.scrollHeight> body.scrollHeight
	    d.documentElement['scroll' + name],
	    // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
	    d.body['scroll' + name], domUtils['viewport' + name](d));
	  };
	
	  domUtils['viewport' + name] = function (win) {
	    // pc browser includes scrollbar in window.innerWidth
	    var prop = 'client' + name;
	    var doc = win.document;
	    var body = doc.body;
	    var documentElement = doc.documentElement;
	    var documentElementProp = documentElement[prop];
	    // 标准模式取 documentElement
	    // backcompat 取 body
	    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
	  };
	});
	
	/*
	 得到元素的大小信息
	 @param elem
	 @param name
	 @param {String} [extra]  'padding' : (css width) + padding
	 'border' : (css width) + padding + border
	 'margin' : (css width) + padding + border + margin
	 */
	function getWH(elem, name, extra) {
	  if (isWindow(elem)) {
	    return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
	  } else if (elem.nodeType === 9) {
	    return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
	  }
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
	  var borderBoxValue = name === 'width' ? elem.offsetWidth : elem.offsetHeight;
	  var computedStyle = getComputedStyleX(elem);
	  var isBorderBox = isBorderBoxFn(elem, computedStyle);
	  var cssBoxValue = 0;
	  if (borderBoxValue == null || borderBoxValue <= 0) {
	    borderBoxValue = undefined;
	    // Fall back to computed then un computed css if necessary
	    cssBoxValue = getComputedStyleX(elem, name);
	    if (cssBoxValue == null || Number(cssBoxValue) < 0) {
	      cssBoxValue = elem.style[name] || 0;
	    }
	    // Normalize '', auto, and prepare for extra
	    cssBoxValue = parseFloat(cssBoxValue) || 0;
	  }
	  if (extra === undefined) {
	    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
	  }
	  var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
	  var val = borderBoxValue || cssBoxValue;
	  if (extra === CONTENT_INDEX) {
	    if (borderBoxValueOrIsBorderBox) {
	      return val - getPBMWidth(elem, ['border', 'padding'], which, computedStyle);
	    }
	    return cssBoxValue;
	  }
	  if (borderBoxValueOrIsBorderBox) {
	    var padding = extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which, computedStyle) : getPBMWidth(elem, ['margin'], which, computedStyle);
	    return val + (extra === BORDER_INDEX ? 0 : padding);
	  }
	  return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which, computedStyle);
	}
	
	var cssShow = {
	  position: 'absolute',
	  visibility: 'hidden',
	  display: 'block'
	};
	
	// fix #119 : https://github.com/kissyteam/kissy/issues/119
	function getWHIgnoreDisplay(elem) {
	  var val = undefined;
	  var args = arguments;
	  // in case elem is window
	  // elem.offsetWidth === undefined
	  if (elem.offsetWidth !== 0) {
	    val = getWH.apply(undefined, args);
	  } else {
	    swap(elem, cssShow, function () {
	      val = getWH.apply(undefined, args);
	    });
	  }
	  return val;
	}
	
	function css(el, name, v) {
	  var value = v;
	  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	    for (var i in name) {
	      if (name.hasOwnProperty(i)) {
	        css(el, i, name[i]);
	      }
	    }
	    return undefined;
	  }
	  if (typeof value !== 'undefined') {
	    if (typeof value === 'number') {
	      value += 'px';
	    }
	    el.style[name] = value;
	    return undefined;
	  }
	  return getComputedStyleX(el, name);
	}
	
	each(['width', 'height'], function (name) {
	  var first = name.charAt(0).toUpperCase() + name.slice(1);
	  domUtils['outer' + first] = function (el, includeMargin) {
	    return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
	  };
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
	
	  domUtils[name] = function (elem, val) {
	    if (val !== undefined) {
	      if (elem) {
	        var computedStyle = getComputedStyleX(elem);
	        var isBorderBox = isBorderBoxFn(elem);
	        if (isBorderBox) {
	          val += getPBMWidth(elem, ['padding', 'border'], which, computedStyle);
	        }
	        return css(elem, name, val);
	      }
	      return undefined;
	    }
	    return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
	  };
	});
	
	// 设置 elem 相对 elem.ownerDocument 的坐标
	function setOffset(elem, offset) {
	  // set position first, in-case top/left are set even on static elem
	  if (css(elem, 'position') === 'static') {
	    elem.style.position = 'relative';
	  }
	
	  var old = getOffset(elem);
	  var ret = {};
	  var current = undefined;
	  var key = undefined;
	
	  for (key in offset) {
	    if (offset.hasOwnProperty(key)) {
	      current = parseFloat(css(elem, key)) || 0;
	      ret[key] = current + offset[key] - old[key];
	    }
	  }
	  css(elem, ret);
	}
	
	module.exports = _extends({
	  getWindow: function getWindow(node) {
	    var doc = node.ownerDocument || node;
	    return doc.defaultView || doc.parentWindow;
	  },
	  offset: function offset(el, value) {
	    if (typeof value !== 'undefined') {
	      setOffset(el, value);
	    } else {
	      return getOffset(el);
	    }
	  },
	
	  isWindow: isWindow,
	  each: each,
	  css: css,
	  clone: function clone(obj) {
	    var ret = {};
	    for (var i in obj) {
	      if (obj.hasOwnProperty(i)) {
	        ret[i] = obj[i];
	      }
	    }
	    var overflow = obj.overflow;
	    if (overflow) {
	      for (var i in obj) {
	        if (obj.hasOwnProperty(i)) {
	          ret.overflow[i] = obj.overflow[i];
	        }
	      }
	    }
	    return ret;
	  },
	  scrollLeft: function scrollLeft(w, v) {
	    if (isWindow(w)) {
	      if (v === undefined) {
	        return getScrollLeft(w);
	      }
	      window.scrollTo(v, getScrollTop(w));
	    } else {
	      if (v === undefined) {
	        return w.scrollLeft;
	      }
	      w.scrollLeft = v;
	    }
	  },
	  scrollTop: function scrollTop(w, v) {
	    if (isWindow(w)) {
	      if (v === undefined) {
	        return getScrollTop(w);
	      }
	      window.scrollTo(getScrollLeft(w), v);
	    } else {
	      if (v === undefined) {
	        return w.scrollTop;
	      }
	      w.scrollTop = v;
	    }
	  },
	
	  viewportWidth: 0,
	  viewportHeight: 0
	}, domUtils);

/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.noop = noop;
	exports.getKeyFromChildrenIndex = getKeyFromChildrenIndex;
	exports.loopMenuItem = loopMenuItem;
	exports.loopMenuItemRecusively = loopMenuItemRecusively;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var now = Date.now();
	
	function noop() {}
	
	function getKeyFromChildrenIndex(child, menuEventKey, index) {
	  var prefix = menuEventKey || '';
	  return child.key || prefix + 'item_' + now + '_' + index;
	}
	
	function loopMenuItem(children, cb) {
	  var index = -1;
	  _react2["default"].Children.forEach(children, function (c) {
	    index++;
	    if (c && c.type.isMenuItemGroup) {
	      _react2["default"].Children.forEach(c.props.children, function (c2) {
	        index++;
	        cb(c2, index);
	      });
	    } else {
	      cb(c, index);
	    }
	  });
	}
	
	function loopMenuItemRecusively(children, keys, ret) {
	  if (!children || ret.find) {
	    return;
	  }
	  _react2["default"].Children.forEach(children, function (c) {
	    if (ret.find) {
	      return;
	    }
	    if (c) {
	      var construt = c.type;
	      if (!construt || !(construt.isSubMenu || construt.isMenuItem || construt.isMenuItemGroup)) {
	        return;
	      }
	      if (keys.indexOf(c.key) !== -1) {
	        ret.find = true;
	      } else if (c.props.children) {
	        loopMenuItemRecusively(c.props.children, keys, ret);
	      }
	    }
	  });
	}

/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _objectAssign = __webpack_require__(165);
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var DOMWrap = _react2["default"].createClass({
	  displayName: 'DOMWrap',
	
	  propTypes: {
	    tag: _react.PropTypes.string,
	    hiddenClassName: _react.PropTypes.string,
	    visible: _react.PropTypes.bool
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      tag: 'div'
	    };
	  },
	  render: function render() {
	    var props = (0, _objectAssign2["default"])({}, this.props);
	    if (!props.visible) {
	      props.className = props.className || '';
	      props.className += ' ' + props.hiddenClassName;
	    }
	    var Tag = props.tag;
	    delete props.tag;
	    delete props.hiddenClassName;
	    delete props.visible;
	    return _react2["default"].createElement(Tag, props);
	  }
	});
	
	exports["default"] = DOMWrap;
	module.exports = exports['default'];

/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _SubPopupMenu = __webpack_require__(520);
	
	var _SubPopupMenu2 = _interopRequireDefault(_SubPopupMenu);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _KeyCode = __webpack_require__(312);
	
	var _KeyCode2 = _interopRequireDefault(_KeyCode);
	
	var _guid = __webpack_require__(521);
	
	var _guid2 = _interopRequireDefault(_guid);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _util = __webpack_require__(517);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	/* eslint react/no-is-mounted:0 */
	
	var SubMenu = _react2["default"].createClass({
	  displayName: 'SubMenu',
	
	  propTypes: {
	    parentMenu: _react.PropTypes.object,
	    title: _react.PropTypes.node,
	    children: _react.PropTypes.any,
	    selectedKeys: _react.PropTypes.array,
	    openKeys: _react.PropTypes.array,
	    onClick: _react.PropTypes.func,
	    onOpenChange: _react.PropTypes.func,
	    rootPrefixCls: _react.PropTypes.string,
	    eventKey: _react.PropTypes.string,
	    multiple: _react.PropTypes.bool,
	    active: _react.PropTypes.bool,
	    onSelect: _react.PropTypes.func,
	    closeSubMenuOnMouseLeave: _react.PropTypes.bool,
	    openSubMenuOnMouseEnter: _react.PropTypes.bool,
	    onDeselect: _react.PropTypes.func,
	    onDestroy: _react.PropTypes.func,
	    onItemHover: _react.PropTypes.func,
	    onMouseEnter: _react.PropTypes.func,
	    onMouseLeave: _react.PropTypes.func,
	    onTitleMouseEnter: _react.PropTypes.func,
	    onTitleMouseLeave: _react.PropTypes.func,
	    onTitleClick: _react.PropTypes.func
	  },
	
	  mixins: [__webpack_require__(522)],
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      onMouseEnter: _util.noop,
	      onMouseLeave: _util.noop,
	      onTitleMouseEnter: _util.noop,
	      onTitleMouseLeave: _util.noop,
	      onTitleClick: _util.noop,
	      title: ''
	    };
	  },
	  getInitialState: function getInitialState() {
	    this.isSubMenu = 1;
	    return {
	      defaultActiveFirst: false
	    };
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    var props = this.props;
	    if (props.onDestroy) {
	      props.onDestroy(props.eventKey);
	    }
	    if (props.parentMenu.subMenuInstance === this) {
	      this.clearSubMenuTimers();
	    }
	  },
	  onDestroy: function onDestroy(key) {
	    this.props.onDestroy(key);
	  },
	  onKeyDown: function onKeyDown(e) {
	    var keyCode = e.keyCode;
	    var menu = this.menuInstance;
	    var isOpen = this.isOpen();
	
	    if (keyCode === _KeyCode2["default"].ENTER) {
	      this.onTitleClick(e);
	      this.setState({
	        defaultActiveFirst: true
	      });
	      return true;
	    }
	
	    if (keyCode === _KeyCode2["default"].RIGHT) {
	      if (isOpen) {
	        menu.onKeyDown(e);
	      } else {
	        this.triggerOpenChange(true);
	        this.setState({
	          defaultActiveFirst: true
	        });
	      }
	      return true;
	    }
	    if (keyCode === _KeyCode2["default"].LEFT) {
	      var handled = void 0;
	      if (isOpen) {
	        handled = menu.onKeyDown(e);
	      } else {
	        return undefined;
	      }
	      if (!handled) {
	        this.triggerOpenChange(false);
	        handled = true;
	      }
	      return handled;
	    }
	
	    if (isOpen && (keyCode === _KeyCode2["default"].UP || keyCode === _KeyCode2["default"].DOWN)) {
	      return menu.onKeyDown(e);
	    }
	  },
	  onOpenChange: function onOpenChange(e) {
	    this.props.onOpenChange(this.addKeyPath(e));
	  },
	  onMouseEnter: function onMouseEnter(e) {
	    var props = this.props;
	    this.clearSubMenuLeaveTimer(props.parentMenu.subMenuInstance !== this);
	    props.onMouseEnter({
	      key: props.eventKey,
	      domEvent: e
	    });
	  },
	  onTitleMouseEnter: function onTitleMouseEnter(e) {
	    var props = this.props;
	    var parentMenu = props.parentMenu;
	    this.clearSubMenuTitleLeaveTimer(parentMenu.subMenuInstance !== this);
	    if (parentMenu.menuItemInstance) {
	      parentMenu.menuItemInstance.clearMenuItemMouseLeaveTimer(true);
	    }
	    props.onItemHover({
	      key: props.eventKey,
	      item: this,
	      hover: true,
	      trigger: 'mouseenter'
	    });
	    if (props.openSubMenuOnMouseEnter) {
	      this.triggerOpenChange(true);
	    }
	    this.setState({
	      defaultActiveFirst: false
	    });
	    props.onTitleMouseEnter({
	      key: props.eventKey,
	      domEvent: e
	    });
	  },
	  onTitleMouseLeave: function onTitleMouseLeave(e) {
	    var _this = this;
	
	    var props = this.props;
	
	    var parentMenu = props.parentMenu;
	    parentMenu.subMenuInstance = this;
	    parentMenu.subMenuTitleLeaveFn = function () {
	      var eventKey = props.eventKey;
	      if (_this.isMounted()) {
	        // leave whole sub tree
	        // still active
	        if (props.mode === 'inline' && props.active) {
	          props.onItemHover({
	            key: eventKey,
	            item: _this,
	            hover: false,
	            trigger: 'mouseleave'
	          });
	        }
	        props.onTitleMouseLeave({
	          key: props.eventKey,
	          domEvent: e
	        });
	      }
	    };
	    parentMenu.subMenuTitleLeaveTimer = setTimeout(parentMenu.subMenuTitleLeaveFn, 100);
	  },
	  onMouseLeave: function onMouseLeave(e) {
	    var _this2 = this;
	
	    var props = this.props;
	
	    var parentMenu = props.parentMenu;
	    parentMenu.subMenuInstance = this;
	    parentMenu.subMenuLeaveFn = function () {
	      var eventKey = props.eventKey;
	      if (_this2.isMounted()) {
	        // leave whole sub tree
	        // still active
	        if (props.mode !== 'inline') {
	          if (props.active) {
	            props.onItemHover({
	              key: eventKey,
	              item: _this2,
	              hover: false,
	              trigger: 'mouseleave'
	            });
	          }
	          if (_this2.isOpen()) {
	            if (props.closeSubMenuOnMouseLeave) {
	              _this2.triggerOpenChange(false);
	            }
	          }
	        }
	        // trigger mouseleave
	        props.onMouseLeave({
	          key: eventKey,
	          domEvent: e
	        });
	      }
	    };
	    // prevent popup menu and submenu gap
	    parentMenu.subMenuLeaveTimer = setTimeout(parentMenu.subMenuLeaveFn, 100);
	  },
	  onTitleClick: function onTitleClick(e) {
	    var props = this.props;
	
	    props.onTitleClick({
	      key: props.eventKey,
	      domEvent: e
	    });
	    if (props.openSubMenuOnMouseEnter) {
	      return;
	    }
	    this.triggerOpenChange(!this.isOpen(), 'click');
	    this.setState({
	      defaultActiveFirst: false
	    });
	  },
	  onSubMenuClick: function onSubMenuClick(info) {
	    this.props.onClick(this.addKeyPath(info));
	  },
	  onSelect: function onSelect(info) {
	    this.props.onSelect(info);
	  },
	  onDeselect: function onDeselect(info) {
	    this.props.onDeselect(info);
	  },
	  getPrefixCls: function getPrefixCls() {
	    return this.props.rootPrefixCls + '-submenu';
	  },
	  getActiveClassName: function getActiveClassName() {
	    return this.getPrefixCls() + '-active';
	  },
	  getDisabledClassName: function getDisabledClassName() {
	    return this.getPrefixCls() + '-disabled';
	  },
	  getSelectedClassName: function getSelectedClassName() {
	    return this.getPrefixCls() + '-selected';
	  },
	  getOpenClassName: function getOpenClassName() {
	    return this.props.rootPrefixCls + '-submenu-open';
	  },
	  saveMenuInstance: function saveMenuInstance(c) {
	    this.menuInstance = c;
	  },
	  addKeyPath: function addKeyPath(info) {
	    return _extends({}, info, {
	      keyPath: (info.keyPath || []).concat(this.props.eventKey)
	    });
	  },
	  triggerOpenChange: function triggerOpenChange(open, type) {
	    var key = this.props.eventKey;
	    this.onOpenChange({
	      key: key,
	      item: this,
	      trigger: type,
	      open: open
	    });
	  },
	  clearSubMenuTimers: function clearSubMenuTimers(callFn) {
	    this.clearSubMenuLeaveTimer(callFn);
	    this.clearSubMenuTitleLeaveTimer(callFn);
	  },
	  clearSubMenuTitleLeaveTimer: function clearSubMenuTitleLeaveTimer(callFn) {
	    var parentMenu = this.props.parentMenu;
	    if (parentMenu.subMenuTitleLeaveTimer) {
	      clearTimeout(parentMenu.subMenuTitleLeaveTimer);
	      parentMenu.subMenuTitleLeaveTimer = null;
	      if (callFn && parentMenu.subMenuTitleLeaveFn) {
	        parentMenu.subMenuTitleLeaveFn();
	      }
	      parentMenu.subMenuTitleLeaveFn = null;
	    }
	  },
	  clearSubMenuLeaveTimer: function clearSubMenuLeaveTimer(callFn) {
	    var parentMenu = this.props.parentMenu;
	    if (parentMenu.subMenuLeaveTimer) {
	      clearTimeout(parentMenu.subMenuLeaveTimer);
	      parentMenu.subMenuLeaveTimer = null;
	      if (callFn && parentMenu.subMenuLeaveFn) {
	        parentMenu.subMenuLeaveFn();
	      }
	      parentMenu.subMenuLeaveFn = null;
	    }
	  },
	  isChildrenSelected: function isChildrenSelected() {
	    var ret = { find: false };
	    (0, _util.loopMenuItemRecusively)(this.props.children, this.props.selectedKeys, ret);
	    return ret.find;
	  },
	  isOpen: function isOpen() {
	    return this.props.openKeys.indexOf(this.props.eventKey) !== -1;
	  },
	  renderChildren: function renderChildren(children) {
	    var props = this.props;
	    var baseProps = {
	      mode: props.mode === 'horizontal' ? 'vertical' : props.mode,
	      visible: this.isOpen(),
	      level: props.level + 1,
	      inlineIndent: props.inlineIndent,
	      focusable: false,
	      onClick: this.onSubMenuClick,
	      onSelect: this.onSelect,
	      onDeselect: this.onDeselect,
	      onDestroy: this.onDestroy,
	      selectedKeys: props.selectedKeys,
	      eventKey: props.eventKey + '-menu-',
	      openKeys: props.openKeys,
	      openTransitionName: props.openTransitionName,
	      openAnimation: props.openAnimation,
	      onOpenChange: this.onOpenChange,
	      closeSubMenuOnMouseLeave: props.closeSubMenuOnMouseLeave,
	      defaultActiveFirst: this.state.defaultActiveFirst,
	      multiple: props.multiple,
	      prefixCls: props.rootPrefixCls,
	      id: this._menuId,
	      ref: this.saveMenuInstance
	    };
	    return _react2["default"].createElement(
	      _SubPopupMenu2["default"],
	      baseProps,
	      children
	    );
	  },
	  render: function render() {
	    var _classes;
	
	    var isOpen = this.isOpen();
	    this.haveOpen = this.haveOpen || isOpen;
	    var props = this.props;
	    var prefixCls = this.getPrefixCls();
	    var classes = (_classes = {}, _defineProperty(_classes, props.className, !!props.className), _defineProperty(_classes, prefixCls + '-' + props.mode, 1), _classes);
	
	    classes[this.getOpenClassName()] = isOpen;
	    classes[this.getActiveClassName()] = props.active;
	    classes[this.getDisabledClassName()] = props.disabled;
	    classes[this.getSelectedClassName()] = this.isChildrenSelected();
	
	    this._menuId = this._menuId || (0, _guid2["default"])();
	    classes[prefixCls] = true;
	    classes[prefixCls + '-' + props.mode] = 1;
	    var titleClickEvents = {};
	    var mouseEvents = {};
	    var titleMouseEvents = {};
	    if (!props.disabled) {
	      titleClickEvents = {
	        onClick: this.onTitleClick
	      };
	      mouseEvents = {
	        onMouseLeave: this.onMouseLeave,
	        onMouseEnter: this.onMouseEnter
	      };
	      // only works in title, not outer li
	      titleMouseEvents = {
	        onMouseEnter: this.onTitleMouseEnter,
	        onMouseLeave: this.onTitleMouseLeave
	      };
	    }
	    var style = {};
	    if (props.mode === 'inline') {
	      style.paddingLeft = props.inlineIndent * props.level;
	    }
	    return _react2["default"].createElement(
	      'li',
	      _extends({ className: (0, _classnames2["default"])(classes) }, mouseEvents),
	      _react2["default"].createElement(
	        'div',
	        _extends({
	          style: style,
	          className: prefixCls + '-title'
	        }, titleMouseEvents, titleClickEvents, {
	          'aria-open': isOpen,
	          'aria-owns': this._menuId,
	          'aria-haspopup': 'true'
	        }),
	        props.title
	      ),
	      this.renderChildren(props.children)
	    );
	  }
	});
	
	SubMenu.isSubMenu = 1;
	
	exports["default"] = SubMenu;
	module.exports = exports['default'];

/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _MenuMixin = __webpack_require__(513);
	
	var _MenuMixin2 = _interopRequireDefault(_MenuMixin);
	
	var _objectAssign = __webpack_require__(165);
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	var _rcAnimate = __webpack_require__(313);
	
	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var SubPopupMenu = _react2["default"].createClass({
	  displayName: 'SubPopupMenu',
	
	  propTypes: {
	    onSelect: _react.PropTypes.func,
	    onClick: _react.PropTypes.func,
	    onDeselect: _react.PropTypes.func,
	    onOpenChange: _react.PropTypes.func,
	    onDestroy: _react.PropTypes.func,
	    openTransitionName: _react.PropTypes.string,
	    openAnimation: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object]),
	    openKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	    closeSubMenuOnMouseLeave: _react.PropTypes.bool,
	    visible: _react.PropTypes.bool,
	    children: _react.PropTypes.any
	  },
	
	  mixins: [_MenuMixin2["default"]],
	
	  onDeselect: function onDeselect(selectInfo) {
	    this.props.onDeselect(selectInfo);
	  },
	  onSelect: function onSelect(selectInfo) {
	    this.props.onSelect(selectInfo);
	  },
	  onClick: function onClick(e) {
	    this.props.onClick(e);
	  },
	  onOpenChange: function onOpenChange(e) {
	    this.props.onOpenChange(e);
	  },
	  onDestroy: function onDestroy(key) {
	    this.props.onDestroy(key);
	  },
	  onItemHover: function onItemHover(e) {
	    this.onCommonItemHover(e);
	  },
	  getOpenTransitionName: function getOpenTransitionName() {
	    return this.props.openTransitionName;
	  },
	  renderMenuItem: function renderMenuItem(c, i, subIndex) {
	    var props = this.props;
	    var extraProps = {
	      openKeys: props.openKeys,
	      selectedKeys: props.selectedKeys,
	      openSubMenuOnMouseEnter: true
	    };
	    return this.renderCommonMenuItem(c, i, subIndex, extraProps);
	  },
	  render: function render() {
	    var renderFirst = this.renderFirst;
	    this.renderFirst = 1;
	    this.haveOpened = this.haveOpened || this.props.visible;
	    if (!this.haveOpened) {
	      return null;
	    }
	    var transitionAppear = true;
	    if (!renderFirst && this.props.visible) {
	      transitionAppear = false;
	    }
	    var props = (0, _objectAssign2["default"])({}, this.props);
	    props.className += ' ' + props.prefixCls + '-sub';
	    var animProps = {};
	    if (props.openTransitionName) {
	      animProps.transitionName = props.openTransitionName;
	    } else if (_typeof(props.openAnimation) === 'object') {
	      animProps.animation = (0, _objectAssign2["default"])({}, props.openAnimation);
	      if (!transitionAppear) {
	        delete animProps.animation.appear;
	      }
	    }
	    return _react2["default"].createElement(
	      _rcAnimate2["default"],
	      _extends({}, animProps, {
	        showProp: 'visible',
	        component: '',
	        transitionAppear: transitionAppear
	      }),
	      this.renderRoot(props)
	    );
	  }
	});
	
	exports["default"] = SubPopupMenu;
	module.exports = exports['default'];

/***/ }),
/* 521 */
/***/ (function(module, exports) {

	"use strict";
	
	var seed = 0;
	module.exports = function guid() {
	  return Date.now() + "_" + seed++;
	};

/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _KeyCode = __webpack_require__(312);
	
	var _KeyCode2 = _interopRequireDefault(_KeyCode);
	
	var _addEventListener = __webpack_require__(390);
	
	var _addEventListener2 = _interopRequireDefault(_addEventListener);
	
	var _contains = __webpack_require__(523);
	
	var _contains2 = _interopRequireDefault(_contains);
	
	var _reactDom = __webpack_require__(157);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = {
	  componentDidMount: function componentDidMount() {
	    this.componentDidUpdate();
	  },
	  componentDidUpdate: function componentDidUpdate() {
	    if (this.props.mode !== 'inline') {
	      if (this.props.open) {
	        this.bindRootCloseHandlers();
	      } else {
	        this.unbindRootCloseHandlers();
	      }
	    }
	  },
	  handleDocumentKeyUp: function handleDocumentKeyUp(e) {
	    if (e.keyCode === _KeyCode2["default"].ESC) {
	      this.props.onItemHover({
	        key: this.props.eventKey,
	        item: this,
	        hover: false
	      });
	    }
	  },
	  handleDocumentClick: function handleDocumentClick(e) {
	    // If the click originated from within this component
	    // don't do anything.
	    if ((0, _contains2["default"])(_reactDom2["default"].findDOMNode(this), e.target)) {
	      return;
	    }
	    var props = this.props;
	    props.onItemHover({
	      hover: false,
	      item: this,
	      key: this.props.eventKey
	    });
	    this.triggerOpenChange(false);
	  },
	  bindRootCloseHandlers: function bindRootCloseHandlers() {
	    if (!this._onDocumentClickListener) {
	      this._onDocumentClickListener = (0, _addEventListener2["default"])(document, 'click', this.handleDocumentClick);
	      this._onDocumentKeyupListener = (0, _addEventListener2["default"])(document, 'keyup', this.handleDocumentKeyUp);
	    }
	  },
	  unbindRootCloseHandlers: function unbindRootCloseHandlers() {
	    if (this._onDocumentClickListener) {
	      this._onDocumentClickListener.remove();
	      this._onDocumentClickListener = null;
	    }
	
	    if (this._onDocumentKeyupListener) {
	      this._onDocumentKeyupListener.remove();
	      this._onDocumentKeyupListener = null;
	    }
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    this.unbindRootCloseHandlers();
	  }
	};
	module.exports = exports['default'];

/***/ }),
/* 523 */
/***/ (function(module, exports) {

	"use strict";
	
	module.exports = function contains(root, n) {
	  var node = n;
	  while (node) {
	    if (node === root) {
	      return true;
	    }
	    node = node.parentNode;
	  }
	
	  return false;
	};

/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _KeyCode = __webpack_require__(312);
	
	var _KeyCode2 = _interopRequireDefault(_KeyCode);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _util = __webpack_require__(517);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	/* eslint react/no-is-mounted:0 */
	
	var MenuItem = _react2["default"].createClass({
	  displayName: 'MenuItem',
	
	  propTypes: {
	    rootPrefixCls: _react.PropTypes.string,
	    eventKey: _react.PropTypes.string,
	    active: _react.PropTypes.bool,
	    children: _react.PropTypes.any,
	    selectedKeys: _react.PropTypes.array,
	    disabled: _react.PropTypes.bool,
	    title: _react.PropTypes.string,
	    onSelect: _react.PropTypes.func,
	    onClick: _react.PropTypes.func,
	    onDeselect: _react.PropTypes.func,
	    parentMenu: _react.PropTypes.object,
	    onItemHover: _react.PropTypes.func,
	    onDestroy: _react.PropTypes.func,
	    onMouseEnter: _react.PropTypes.func,
	    onMouseLeave: _react.PropTypes.func
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      onSelect: _util.noop,
	      onMouseEnter: _util.noop,
	      onMouseLeave: _util.noop
	    };
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    var props = this.props;
	    if (props.onDestroy) {
	      props.onDestroy(props.eventKey);
	    }
	    if (props.parentMenu.menuItemInstance === this) {
	      this.clearMenuItemMouseLeaveTimer();
	    }
	  },
	  onKeyDown: function onKeyDown(e) {
	    var keyCode = e.keyCode;
	    if (keyCode === _KeyCode2["default"].ENTER) {
	      this.onClick(e);
	      return true;
	    }
	  },
	  onMouseLeave: function onMouseLeave(e) {
	    var _this = this;
	
	    var props = this.props;
	    var eventKey = props.eventKey;
	    var parentMenu = props.parentMenu;
	    parentMenu.menuItemInstance = this;
	    parentMenu.menuItemMouseLeaveFn = function () {
	      if (_this.isMounted() && props.active) {
	        props.onItemHover({
	          key: eventKey,
	          item: _this,
	          hover: false,
	          trigger: 'mouseleave'
	        });
	      }
	    };
	    parentMenu.menuItemMouseLeaveTimer = setTimeout(parentMenu.menuItemMouseLeaveFn, 30);
	    props.onMouseLeave({
	      key: eventKey,
	      domEvent: e
	    });
	  },
	  onMouseEnter: function onMouseEnter(e) {
	    var props = this.props;
	    var parentMenu = props.parentMenu;
	    this.clearMenuItemMouseLeaveTimer(parentMenu.menuItemInstance !== this);
	    if (parentMenu.subMenuInstance) {
	      parentMenu.subMenuInstance.clearSubMenuTimers(true);
	    }
	    var eventKey = props.eventKey;
	    props.onItemHover({
	      key: eventKey,
	      item: this,
	      hover: true,
	      trigger: 'mouseenter'
	    });
	    props.onMouseEnter({
	      key: eventKey,
	      domEvent: e
	    });
	  },
	  onClick: function onClick(e) {
	    var props = this.props;
	    var selected = this.isSelected();
	    var eventKey = props.eventKey;
	    var info = {
	      key: eventKey,
	      keyPath: [eventKey],
	      item: this,
	      domEvent: e
	    };
	    props.onClick(info);
	    if (props.multiple) {
	      if (selected) {
	        props.onDeselect(info);
	      } else {
	        props.onSelect(info);
	      }
	    } else if (!selected) {
	      props.onSelect(info);
	    }
	  },
	  getPrefixCls: function getPrefixCls() {
	    return this.props.rootPrefixCls + '-item';
	  },
	  getActiveClassName: function getActiveClassName() {
	    return this.getPrefixCls() + '-active';
	  },
	  getSelectedClassName: function getSelectedClassName() {
	    return this.getPrefixCls() + '-selected';
	  },
	  getDisabledClassName: function getDisabledClassName() {
	    return this.getPrefixCls() + '-disabled';
	  },
	  clearMenuItemMouseLeaveTimer: function clearMenuItemMouseLeaveTimer(callFn) {
	    var props = this.props;
	    var parentMenu = props.parentMenu;
	    if (parentMenu.menuItemMouseLeaveTimer) {
	      clearTimeout(parentMenu.menuItemMouseLeaveTimer);
	      parentMenu.menuItemMouseLeaveTimer = null;
	      if (callFn && parentMenu.menuItemMouseLeaveFn) {
	        parentMenu.menuItemMouseLeaveFn();
	      }
	      parentMenu.menuItemMouseLeaveFn = null;
	    }
	  },
	  isSelected: function isSelected() {
	    return this.props.selectedKeys.indexOf(this.props.eventKey) !== -1;
	  },
	  render: function render() {
	    var props = this.props;
	    var selected = this.isSelected();
	    var classes = {};
	    classes[this.getActiveClassName()] = !props.disabled && props.active;
	    classes[this.getSelectedClassName()] = selected;
	    classes[this.getDisabledClassName()] = props.disabled;
	    classes[this.getPrefixCls()] = true;
	    classes[props.className] = !!props.className;
	    var attrs = _extends({}, props.attribute, {
	      title: props.title,
	      className: (0, _classnames2["default"])(classes),
	      role: 'menuitem',
	      'aria-selected': selected,
	      'aria-disabled': props.disabled
	    });
	    var mouseEvent = {};
	    if (!props.disabled) {
	      mouseEvent = {
	        onClick: this.onClick,
	        onMouseLeave: this.onMouseLeave,
	        onMouseEnter: this.onMouseEnter
	      };
	    }
	    var style = _extends({}, props.style);
	    if (props.mode === 'inline') {
	      style.paddingLeft = props.inlineIndent * props.level;
	    }
	    return _react2["default"].createElement(
	      'li',
	      _extends({
	        style: style
	      }, attrs, mouseEvent),
	      props.children
	    );
	  }
	});
	
	MenuItem.isMenuItem = 1;
	
	exports["default"] = MenuItem;
	module.exports = exports['default'];

/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var MenuItemGroup = _react2["default"].createClass({
	  displayName: 'MenuItemGroup',
	
	  propTypes: {
	    renderMenuItem: _react.PropTypes.func,
	    index: _react.PropTypes.number
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      disabled: true
	    };
	  },
	  renderInnerMenuItem: function renderInnerMenuItem(item, subIndex) {
	    var renderMenuItem = this.props.renderMenuItem;
	    return renderMenuItem(item, this.props.index, subIndex);
	  },
	  render: function render() {
	    var props = this.props;
	    var className = props.className || '';
	    var rootPrefixCls = props.rootPrefixCls;
	
	    className += ' ' + rootPrefixCls + '-item-group';
	    var titleClassName = rootPrefixCls + '-item-group-title';
	    var listClassName = rootPrefixCls + '-item-group-list';
	    return _react2["default"].createElement(
	      'li',
	      { className: className },
	      _react2["default"].createElement(
	        'div',
	        { className: titleClassName },
	        props.title
	      ),
	      _react2["default"].createElement(
	        'ul',
	        { className: listClassName },
	        _react2["default"].Children.map(props.children, this.renderInnerMenuItem)
	      )
	    );
	  }
	});
	
	MenuItemGroup.isMenuItemGroup = true;
	
	exports["default"] = MenuItemGroup;
	module.exports = exports['default'];

/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var Divider = _react2["default"].createClass({
	  displayName: 'Divider',
	  getDefaultProps: function getDefaultProps() {
	    return {
	      disabled: true
	    };
	  },
	  render: function render() {
	    var props = this.props;
	    var className = props.className || '';
	    var rootPrefixCls = props.rootPrefixCls;
	    className += ' ' + (rootPrefixCls + '-item-divider');
	    return _react2["default"].createElement('li', { className: className });
	  }
	});
	
	exports["default"] = Divider;
	module.exports = exports['default'];

/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(508);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _objectWithoutProperties2 = __webpack_require__(468);
	
	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);
	
	var _extends2 = __webpack_require__(424);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _rcTrigger = __webpack_require__(423);
	
	var _rcTrigger2 = _interopRequireDefault(_rcTrigger);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _DropdownMenu = __webpack_require__(528);
	
	var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);
	
	var _reactDom = __webpack_require__(157);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _util = __webpack_require__(510);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var BUILT_IN_PLACEMENTS = {
	  bottomLeft: {
	    points: ['tl', 'bl'],
	    offset: [0, 4],
	    overflow: {
	      adjustX: 0,
	      adjustY: 1
	    }
	  },
	  topLeft: {
	    points: ['bl', 'tl'],
	    offset: [0, -4],
	    overflow: {
	      adjustX: 0,
	      adjustY: 1
	    }
	  }
	};
	
	var SelectTrigger = _react2["default"].createClass({
	  displayName: 'SelectTrigger',
	
	  propTypes: {
	    onPopupFocus: _react.PropTypes.func,
	    dropdownMatchSelectWidth: _react.PropTypes.bool,
	    dropdownAlign: _react.PropTypes.object,
	    visible: _react.PropTypes.bool,
	    disabled: _react.PropTypes.bool,
	    showSearch: _react.PropTypes.bool,
	    dropdownClassName: _react.PropTypes.string,
	    multiple: _react.PropTypes.bool,
	    inputValue: _react.PropTypes.string,
	    filterOption: _react.PropTypes.any,
	    options: _react.PropTypes.any,
	    prefixCls: _react.PropTypes.string,
	    popupClassName: _react.PropTypes.string,
	    children: _react.PropTypes.any
	  },
	
	  componentDidUpdate: function componentDidUpdate() {
	    var _props = this.props;
	    var visible = _props.visible;
	    var dropdownMatchSelectWidth = _props.dropdownMatchSelectWidth;
	
	    if (visible) {
	      var dropdownDOMNode = this.getPopupDOMNode();
	      if (dropdownDOMNode) {
	        var widthProp = dropdownMatchSelectWidth ? 'width' : 'minWidth';
	        dropdownDOMNode.style[widthProp] = _reactDom2["default"].findDOMNode(this).offsetWidth + 'px';
	      }
	    }
	  },
	  getInnerMenu: function getInnerMenu() {
	    return this.popupMenu && this.popupMenu.refs.menu;
	  },
	  getPopupDOMNode: function getPopupDOMNode() {
	    return this.refs.trigger.getPopupDomNode();
	  },
	  getDropdownElement: function getDropdownElement(newProps) {
	    var props = this.props;
	    return _react2["default"].createElement(_DropdownMenu2["default"], (0, _extends3["default"])({
	      ref: this.saveMenu
	    }, newProps, {
	      prefixCls: this.getDropdownPrefixCls(),
	      onMenuSelect: props.onMenuSelect,
	      onMenuDeselect: props.onMenuDeselect,
	      value: props.value,
	      defaultActiveFirstOption: props.defaultActiveFirstOption,
	      dropdownMenuStyle: props.dropdownMenuStyle
	    }));
	  },
	  getDropdownTransitionName: function getDropdownTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    if (!transitionName && props.animation) {
	      transitionName = this.getDropdownPrefixCls() + '-' + props.animation;
	    }
	    return transitionName;
	  },
	  getDropdownPrefixCls: function getDropdownPrefixCls() {
	    return this.props.prefixCls + '-dropdown';
	  },
	  saveMenu: function saveMenu(menu) {
	    this.popupMenu = menu;
	  },
	  render: function render() {
	    var _popupClassName;
	
	    var _props2 = this.props;
	    var onPopupFocus = _props2.onPopupFocus;
	    var props = (0, _objectWithoutProperties3["default"])(_props2, ['onPopupFocus']);
	    var multiple = props.multiple;
	    var visible = props.visible;
	    var inputValue = props.inputValue;
	    var dropdownAlign = props.dropdownAlign;
	    var disabled = props.disabled;
	    var showSearch = props.showSearch;
	    var dropdownClassName = props.dropdownClassName;
	
	    var dropdownPrefixCls = this.getDropdownPrefixCls();
	    var popupClassName = (_popupClassName = {}, (0, _defineProperty3["default"])(_popupClassName, dropdownClassName, !!dropdownClassName), (0, _defineProperty3["default"])(_popupClassName, dropdownPrefixCls + '--' + (multiple ? 'multiple' : 'single'), 1), _popupClassName);
	    var popupElement = this.getDropdownElement({
	      menuItems: props.options,
	      onPopupFocus: onPopupFocus,
	      multiple: multiple,
	      inputValue: inputValue,
	      visible: visible
	    });
	    var hideAction = void 0;
	    if (disabled) {
	      hideAction = [];
	    } else if ((0, _util.isSingleMode)(props) && !showSearch) {
	      hideAction = ['click'];
	    } else {
	      hideAction = ['blur'];
	    }
	    return _react2["default"].createElement(
	      _rcTrigger2["default"],
	      (0, _extends3["default"])({}, props, {
	        showAction: disabled ? [] : ['click'],
	        hideAction: hideAction,
	        ref: 'trigger',
	        popupPlacement: 'bottomLeft',
	        builtinPlacements: BUILT_IN_PLACEMENTS,
	        prefixCls: dropdownPrefixCls,
	        popupTransitionName: this.getDropdownTransitionName(),
	        onPopupVisibleChange: props.onDropdownVisibleChange,
	        popup: popupElement,
	        popupAlign: dropdownAlign,
	        popupVisible: visible,
	        getPopupContainer: props.getPopupContainer,
	        popupClassName: (0, _classnames2["default"])(popupClassName),
	        popupStyle: props.dropdownStyle
	      }),
	      props.children
	    );
	  }
	});
	
	exports["default"] = SelectTrigger;
	module.exports = exports['default'];

/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof2 = __webpack_require__(318);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _extends2 = __webpack_require__(424);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(157);
	
	var _util = __webpack_require__(510);
	
	var _rcMenu = __webpack_require__(511);
	
	var _rcMenu2 = _interopRequireDefault(_rcMenu);
	
	var _domScrollIntoView = __webpack_require__(514);
	
	var _domScrollIntoView2 = _interopRequireDefault(_domScrollIntoView);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var DropdownMenu = _react2["default"].createClass({
	  displayName: 'DropdownMenu',
	
	  propTypes: {
	    defaultActiveFirstOption: _react.PropTypes.bool,
	    value: _react.PropTypes.any,
	    dropdownMenuStyle: _react.PropTypes.object,
	    multiple: _react.PropTypes.bool,
	    onPopupFocus: _react.PropTypes.func,
	    onMenuDeSelect: _react.PropTypes.func,
	    onMenuSelect: _react.PropTypes.func,
	    prefixCls: _react.PropTypes.string,
	    menuItems: _react.PropTypes.any,
	    inputValue: _react.PropTypes.string,
	    visible: _react.PropTypes.bool
	  },
	
	  componentWillMount: function componentWillMount() {
	    this.lastInputValue = this.props.inputValue;
	  },
	  componentDidMount: function componentDidMount() {
	    this.scrollActiveItemToView();
	    this.lastVisible = this.props.visible;
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    if (!nextProps.visible) {
	      this.lastVisible = false;
	    }
	    // freeze when hide
	    return nextProps.visible;
	  },
	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    var props = this.props;
	    if (!prevProps.visible && props.visible) {
	      this.scrollActiveItemToView();
	    }
	    this.lastVisible = props.visible;
	    this.lastInputValue = props.inputValue;
	  },
	  scrollActiveItemToView: function scrollActiveItemToView() {
	    // scroll into view
	    var itemComponent = (0, _reactDom.findDOMNode)(this.firstActiveItem);
	    if (itemComponent) {
	      (0, _domScrollIntoView2["default"])(itemComponent, (0, _reactDom.findDOMNode)(this.refs.menu), {
	        onlyScrollIfNeeded: true
	      });
	    }
	  },
	  renderMenu: function renderMenu() {
	    var _this = this;
	
	    var props = this.props;
	    var menuItems = props.menuItems;
	    var defaultActiveFirstOption = props.defaultActiveFirstOption;
	    var value = props.value;
	    var prefixCls = props.prefixCls;
	    var multiple = props.multiple;
	    var onMenuSelect = props.onMenuSelect;
	    var inputValue = props.inputValue;
	
	    if (menuItems && menuItems.length) {
	      var _ret = function () {
	        var menuProps = {};
	        if (multiple) {
	          menuProps.onDeselect = props.onMenuDeselect;
	          menuProps.onSelect = onMenuSelect;
	        } else {
	          menuProps.onClick = onMenuSelect;
	        }
	
	        var selectedKeys = (0, _util.getSelectKeys)(menuItems, value);
	        var activeKeyProps = {};
	
	        var clonedMenuItems = menuItems;
	        if (selectedKeys.length) {
	          (function () {
	            if (props.visible && !_this.lastVisible) {
	              activeKeyProps.activeKey = selectedKeys[0];
	            }
	            var foundFirst = false;
	            // set firstActiveItem via cloning menus
	            // for scroll into view
	            var clone = function clone(item) {
	              if (!foundFirst && selectedKeys.indexOf(item.key) !== -1) {
	                foundFirst = true;
	                return (0, _react.cloneElement)(item, {
	                  ref: function ref(_ref) {
	                    _this.firstActiveItem = _ref;
	                  }
	                });
	              }
	              return item;
	            };
	
	            clonedMenuItems = menuItems.map(function (item) {
	              if (item.type === _rcMenu.ItemGroup) {
	                var children = item.props.children.map(clone);
	                return (0, _react.cloneElement)(item, {}, children);
	              }
	              return clone(item);
	            });
	          })();
	        }
	
	        // clear activeKey when inputValue change
	        if (inputValue !== _this.lastInputValue) {
	          activeKeyProps.activeKey = '';
	        }
	
	        return {
	          v: _react2["default"].createElement(
	            _rcMenu2["default"],
	            (0, _extends3["default"])({
	              ref: 'menu',
	              style: _this.props.dropdownMenuStyle,
	              defaultActiveFirst: defaultActiveFirstOption
	            }, activeKeyProps, {
	              multiple: multiple,
	              focusable: false
	            }, menuProps, {
	              selectedKeys: selectedKeys,
	              prefixCls: prefixCls + '-menu'
	            }),
	            clonedMenuItems
	          )
	        };
	      }();
	
	      if ((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3["default"])(_ret)) === "object") return _ret.v;
	    }
	    return null;
	  },
	  render: function render() {
	    return _react2["default"].createElement(
	      'div',
	      {
	        style: { overflow: 'auto' },
	        onFocus: this.props.onPopupFocus,
	        onMouseDown: _util.preventDefaultEvent
	      },
	      this.renderMenu()
	    );
	  }
	});
	
	exports["default"] = DropdownMenu;
	module.exports = exports['default'];

/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(424);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _util = __webpack_require__(510);
	
	var _rcMenu = __webpack_require__(511);
	
	var _warning = __webpack_require__(530);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _OptGroup = __webpack_require__(509);
	
	var _OptGroup2 = _interopRequireDefault(_OptGroup);
	
	var _Option = __webpack_require__(531);
	
	var _Option2 = _interopRequireDefault(_Option);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = {
	  filterOption: function filterOption(input, child) {
	    if (!input) {
	      return true;
	    }
	    var filterOption = this.props.filterOption;
	    if (!filterOption) {
	      return true;
	    }
	    if (child.props.disabled) {
	      return false;
	    }
	    return filterOption.call(this, input, child);
	  },
	  renderFilterOptions: function renderFilterOptions(inputValue) {
	    return this.renderFilterOptionsFromChildren(this.props.children, true, inputValue);
	  },
	  renderFilterOptionsFromChildren: function renderFilterOptionsFromChildren(children, showNotFound, iv) {
	    var _this = this;
	
	    var sel = [];
	    var props = this.props;
	    var inputValue = iv === undefined ? this.state.inputValue : iv;
	    var childrenKeys = [];
	    var tags = props.tags;
	    _react2["default"].Children.forEach(children, function (child) {
	      if (child.type === _OptGroup2["default"]) {
	        var innerItems = _this.renderFilterOptionsFromChildren(child.props.children, false);
	        if (innerItems.length) {
	          var label = child.props.label;
	          var key = child.key;
	          if (!key && typeof label === 'string') {
	            key = label;
	          } else if (!label && key) {
	            label = key;
	          }
	          sel.push(_react2["default"].createElement(
	            _rcMenu.ItemGroup,
	            { key: key, title: label },
	            innerItems
	          ));
	        }
	        return;
	      }
	
	      (0, _warning2["default"])(child.type === _Option2["default"], 'the children of `Select` should be `Select.Option` or `Select.OptGroup`, ' + ('instead of `' + (child.type.name || child.type.displayName || child.type) + '`.'));
	
	      var childValue = (0, _util.getValuePropValue)(child);
	      if (_this.filterOption(inputValue, child)) {
	        sel.push(_react2["default"].createElement(_rcMenu.Item, (0, _extends3["default"])({
	          style: _util.UNSELECTABLE_STYLE,
	          attribute: _util.UNSELECTABLE_ATTRIBUTE,
	          value: childValue,
	          key: childValue
	        }, child.props)));
	      }
	      if (tags && !child.props.disabled) {
	        childrenKeys.push(childValue);
	      }
	    });
	    if (tags) {
	      // tags value must be string
	      var value = this.state.value || [];
	      value = value.filter(function (singleValue) {
	        return childrenKeys.indexOf(singleValue.key) === -1 && (!inputValue || String(singleValue.key).indexOf(String(inputValue)) > -1);
	      });
	      sel = sel.concat(value.map(function (singleValue) {
	        var key = singleValue.key;
	        return _react2["default"].createElement(
	          _rcMenu.Item,
	          {
	            style: _util.UNSELECTABLE_STYLE,
	            attribute: _util.UNSELECTABLE_ATTRIBUTE,
	            value: key,
	            key: key
	          },
	          key
	        );
	      }));
	      if (inputValue) {
	        var notFindInputItem = sel.every(function (option) {
	          return (0, _util.getValuePropValue)(option) !== inputValue;
	        });
	        if (notFindInputItem) {
	          sel.unshift(_react2["default"].createElement(
	            _rcMenu.Item,
	            {
	              style: _util.UNSELECTABLE_STYLE,
	              attribute: _util.UNSELECTABLE_ATTRIBUTE,
	              value: inputValue,
	              key: inputValue
	            },
	            inputValue
	          ));
	        }
	      }
	    }
	    if (!sel.length && showNotFound && props.notFoundContent) {
	      sel = [_react2["default"].createElement(
	        _rcMenu.Item,
	        {
	          style: _util.UNSELECTABLE_STYLE,
	          attribute: _util.UNSELECTABLE_ATTRIBUTE,
	          disabled: true,
	          value: 'NOT_FOUND',
	          key: 'NOT_FOUND'
	        },
	        props.notFoundContent
	      )];
	    }
	    return sel;
	  }
	};
	module.exports = exports['default'];

/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = function() {};
	
	if (true) {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }
	
	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}
	
	module.exports = warning;


/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(435);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(440);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(441);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var Option = function (_React$Component) {
	  (0, _inherits3["default"])(Option, _React$Component);
	
	  function Option() {
	    (0, _classCallCheck3["default"])(this, Option);
	    return (0, _possibleConstructorReturn3["default"])(this, _React$Component.apply(this, arguments));
	  }
	
	  return Option;
	}(_react2["default"].Component);
	
	Option.propTypes = {
	  value: _react2["default"].PropTypes.string
	};
	exports["default"] = Option;
	module.exports = exports['default'];

/***/ }),
/* 532 */,
/* 533 */,
/* 534 */,
/* 535 */,
/* 536 */,
/* 537 */,
/* 538 */,
/* 539 */,
/* 540 */,
/* 541 */,
/* 542 */,
/* 543 */,
/* 544 */,
/* 545 */,
/* 546 */,
/* 547 */,
/* 548 */,
/* 549 */,
/* 550 */,
/* 551 */,
/* 552 */,
/* 553 */,
/* 554 */,
/* 555 */,
/* 556 */,
/* 557 */,
/* 558 */,
/* 559 */,
/* 560 */,
/* 561 */,
/* 562 */,
/* 563 */,
/* 564 */,
/* 565 */,
/* 566 */,
/* 567 */,
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var shallowEqual = __webpack_require__(569);
	
	module.exports = {
	  shouldComponentUpdate: function(nextProps, nextState) {
	    return (
	      !shallowEqual(this.props, nextProps) ||
	      !shallowEqual(this.state, nextState)
	    );
	  }
	};


/***/ }),
/* 569 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 * 
	 */
	
	/*eslint-disable no-self-compare */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ }),
/* 570 */,
/* 571 */,
/* 572 */,
/* 573 */,
/* 574 */,
/* 575 */,
/* 576 */,
/* 577 */,
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(399);
	
	__webpack_require__(579);

/***/ }),
/* 579 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(399);
	
	__webpack_require__(581);

/***/ }),
/* 581 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(399);
	
	__webpack_require__(583);
	
	__webpack_require__(578);

/***/ }),
/* 583 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 584 */,
/* 585 */,
/* 586 */,
/* 587 */,
/* 588 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.PERSON_TYPE = exports.TASKTYPE = exports.RULE_LIMITEDNUMBERORLETTER = exports.RULE_POSITIVENUMBER = exports.PAGESIZEOPTIONS = exports.LEVEL = exports.TASK_ANALYSIS_STATUS = exports.HUMANSTATUS = exports.CONTROL_VALID_DATE = exports.RESOURCE_LIB_TYPE = exports.CREDENTIALS_TYPE = exports.NATION = exports.RISK = exports.GLASS = exports.SMILE = exports.AGE = exports.SEX = exports.YES_OR_NO = exports.RULE_SIMILARITY80 = exports.RULE_SIMILARITY70 = exports.RULE_SIMILARITY = exports.RULE_INCORRECTLATITUDE = exports.RULE_INCORRECTLONGITUDE = exports.RULE_INCORRECTPORT = exports.RULE_INCORRECTIP = exports.RULE_INCORRECTOFFICERID = exports.RULE_INCORRECTIDCARDIPSONID = exports.RULE_INCORRECTIDCARD = exports.RULE_URL = exports.RULE_LT64LETTERS = exports.RULE_LT32LETTERS = exports.RULE_LT18LETTERS = exports.RULE_LT10LETTERS = exports.RULE_LT6LETTERS = exports.RULE_NOTSUPPORTED = exports.RULE_MUSTSELECT = exports.RULE_REQUIRED = exports.FORMAT_MONTH_GCF = exports.FORMAT_DATE_GCF = exports.FORMAT_DATETIME_TO_UTC = exports.FORMAT_DATETIME_GCF = exports.FORMAT_HHMM = exports.FORMAT_MONTH = exports.FORMAT_TIME = exports.FORMAT_DATE_ZH_CN = exports.FORMAT_DATE = exports.FORMAT_DATETIME = exports.PLACEHOLDER = undefined;
	
	var _http = __webpack_require__(277);
	
	var _http2 = _interopRequireDefault(_http);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	//空白数据的占位符
	var PLACEHOLDER = '--';
	//时期格式
	var FORMAT_DATETIME = 'YYYY-MM-DD HH:mm:ss';
	var FORMAT_DATE = 'YYYY-MM-DD';
	var FORMAT_DATE_ZH_CN = 'YYYY年MM月DD日';
	var FORMAT_MONTH = 'YYYY-MM';
	var FORMAT_TIME = 'HH:mm:ss';
	var FORMAT_HHMM = 'HH:mm';
	var FORMAT_DATETIME_GCF = 'yyyy-MM-dd HH:mm:ss';
	var FORMAT_DATETIME_TO_UTC = 'YYYY-MM-DD[T]HH:mm:ss.SSSZ';
	var FORMAT_DATE_GCF = 'yyyy-MM-dd';
	var FORMAT_MONTH_GCF = 'yyyy-MM';
	//表单校验规则
	var RULE_REQUIRED = { required: true, message: '此项为必填项' };
	var RULE_MUSTSELECT = { required: true, message: '请选择一项' };
	var RULE_NOTSUPPORTED = { pattern: /^[^`~!@#$%^&*()\-=_+]+$/, message: '不支持的字符:`~!@#$%^&*()-=_+' };
	var RULE_LT6LETTERS = { max: 6, message: '最多不超过6个字' };
	var RULE_LT10LETTERS = { max: 10, message: '最多不超过10个字' };
	var RULE_LT18LETTERS = { max: 18, message: '最多不超过18位' };
	var RULE_LT32LETTERS = { max: 32, message: '最多不超过32个字' };
	var RULE_LT64LETTERS = { max: 64, message: '最多不超过64个字' };
	var RULE_URL = { type: 'url', message: '请填写url格式' };
	var RULE_INCORRECTIDCARD = { pattern: /(^\d{15}$)|(^\d{17}(\d|X|x)$)/, message: '身份证格式错误' };
	var RULE_INCORRECTIDCARDIPSONID = { pattern: /(^\d{0,17}(\d|X|x)$)/, message: '身份证搜索格式错误' };
	var RULE_INCORRECTOFFICERID = { pattern: /^\d{6}$/, message: '警官证格式错误' };
	var RULE_INCORRECTIP = { message: 'IP格式错误', pattern: /^(25[0-5]|2[0-4]\d|[0-1]\d{2}|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d{2}|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d{2}|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d{2}|[1-9]?\d)$/ };
	var RULE_INCORRECTPORT = { message: '端口号必须为数字且应在1-65535之间', pattern: /(^[1-9]\d{0,3}$)|(^[1-5]\d{4}$)|(^6[0-4]\d{3}$)|(^65[0-4]\d{2}$)|(^655[0-2]\d$)|(^6553[0-5]$)/ };
	var RULE_INCORRECTLONGITUDE = { message: '请输入-180.0~+180.0的数字,最多支持7位小数', pattern: /^[\-\+]?(\d{1,2}|1[0-7]?\d{1}|180|\d{1,2}\.\d{0,7}|1[0-7]?\d{1}\.\d{0,7}|180\.0{0,7})$/ };
	var RULE_INCORRECTLATITUDE = { message: '请输入-90.0~+90.0的数字,最多支持7位小数', pattern: /^[\-\+]?([0-8]?\d{1}|90|[0-8]?\d{1}\.\d{0,7}|90\.0{0,7})$/ };
	var RULE_SIMILARITY = { message: '请输入1%-100%的相似度', pattern: /^(100|[1-9]\d|[1-9]|0[1-9])?%?$/ };
	var RULE_SIMILARITY70 = { message: '请输入70%-100%的相似度', pattern: /^([7-9]\d{1}|100)?%?$/ };
	var RULE_SIMILARITY80 = { message: '请输入80%-100%的相似度', pattern: /^([8-9]\d{1}|100)?%?$/ };
	var RULE_POSITIVENUMBER = { message: '请输入正整数', pattern: /^[1-9]\d*$/ };
	var RULE_LIMITEDNUMBERORLETTER = { message: '请输入32位以内的字母或数字', pattern: /^[a-zA-Z0-9]{1,32}$/ };
	//是否
	var YES_OR_NO = {
	    '0': '否',
	    '1': '是'
	    //性别
	};var SEX = {
	    '0': '未知',
	    '1': '男',
	    '2': '女'
	    //年龄
	};var AGE = {
	    '0': '未知',
	    '1': '少年',
	    '2': '青年',
	    '3': '中年',
	    '4': '老年'
	    //微笑
	};var SMILE = {
	    '0': '未知',
	    '1': '不微笑',
	    '2': '微笑'
	    //戴眼镜
	};var GLASS = {
	    '0': '未知',
	    '1': '不戴眼镜',
	    '2': '戴眼镜'
	    //高危人群
	};var RISK = {
	    '0': '未知',
	    '1': '非高危人群',
	    '2': '高危人群'
	    //民族
	};var NATION = {
	    '0': '未知',
	    '1': '汉',
	    '2': '蒙古',
	    '3': '回',
	    '4': '藏',
	    '5': '维吾尔',
	    '6': '苗',
	    '7': '彝',
	    '8': '壮',
	    '9': '布依',
	    '10': '朝鲜',
	    '11': '满',
	    '12': '侗',
	    '13': '瑶',
	    '14': '白',
	    '15': '土家',
	    '16': '哈尼',
	    '17': '哈萨克',
	    '18': '傣',
	    '19': '黎',
	    '20': '傈僳',
	    '21': '佤',
	    '22': '畲',
	    '23': '高山',
	    '24': '拉祜',
	    '25': '水',
	    '26': '东乡',
	    '27': '纳西',
	    '28': '景颇',
	    '29': '柯尔克孜',
	    '30': '土',
	    '31': '达斡尔',
	    '32': '仫佬',
	    '33': '羌',
	    '34': '布朗',
	    '35': '撒拉',
	    '36': '毛南',
	    '37': '仡佬',
	    '38': '锡伯',
	    '39': '阿昌',
	    '40': '普米',
	    '41': '塔吉克',
	    '42': '怒',
	    '43': '乌孜别克',
	    '44': '俄罗斯',
	    '45': '鄂温克',
	    '46': '德昂',
	    '47': '保安',
	    '48': '裕固',
	    '49': '京',
	    '50': '塔塔尔',
	    '51': '独龙',
	    '52': '鄂伦春',
	    '53': '赫哲',
	    '54': '门巴',
	    '55': '珞巴',
	    '56': '基诺'
	    //证件类别
	};var CREDENTIALS_TYPE = {
	    '0': '未知',
	    '1': '身份证',
	    '2': '警官证'
	    //资源库类别
	};var RESOURCE_LIB_TYPE = {
	    '2': '布控库',
	    '3': '非布控库'
	    //布控管理有效时间
	};var CONTROL_VALID_DATE = {
	    '1': '一天',
	    '2': '一周',
	    '3': '一月',
	    '4': '半年',
	    '5': '永久',
	    '6': '自定义'
	    //名单库人员登记状态
	};var HUMANSTATUS = {
	    '1': '未登记',
	    '2': '已登记'
	};
	
	var TASK_ANALYSIS_STATUS = {
	    '1': '未调度',
	    '2': '等待',
	    '3': '正在执行',
	    '4': '已完成',
	    '5': '已删除',
	    '6': '节点不在线',
	    '7': '服务器宕机',
	    '8': '正在停止',
	    '9': '已停止',
	    '10': '几点重启',
	    '11': '暂停',
	    '12': '暂停中',
	    '13': '任务失败'
	};
	
	var LEVEL = {
	    '0': "聚集",
	    '1': '一级',
	    '2': '二级',
	    '3': '三级',
	    '4': '四级'
	
	    // 每页显示数
	};var PAGESIZEOPTIONS = ['10', '20', '30', '40'];
	
	//任务类型
	var TASKTYPE = {
	    '1': '实时分析',
	    '2': '历史挖掘'
	
	    //人员类别
	};var PERSON_TYPE = {
	    '1': '涉恐人员',
	    '2': '涉毒人员',
	    '3': '涉稳人员',
	    '4': '重大刑事犯罪前科',
	    '5': '在逃人员',
	    '6': '肇事肇祸精神病人',
	    '7': '临控人员'
	    //从后台获取人员类别字典
	};_http2["default"].post('/control-web/person/personType').then(function (_ref) {
	    var data = _ref.data;
	
	    var obj = {};
	    data.forEach(function (item) {
	        obj[item.id + ''] = item.name;
	    });
	    exports.PERSON_TYPE = PERSON_TYPE = obj;
	});
	
	exports.PLACEHOLDER = PLACEHOLDER;
	exports.FORMAT_DATETIME = FORMAT_DATETIME;
	exports.FORMAT_DATE = FORMAT_DATE;
	exports.FORMAT_DATE_ZH_CN = FORMAT_DATE_ZH_CN;
	exports.FORMAT_TIME = FORMAT_TIME;
	exports.FORMAT_MONTH = FORMAT_MONTH;
	exports.FORMAT_HHMM = FORMAT_HHMM;
	exports.FORMAT_DATETIME_GCF = FORMAT_DATETIME_GCF;
	exports.FORMAT_DATETIME_TO_UTC = FORMAT_DATETIME_TO_UTC;
	exports.FORMAT_DATE_GCF = FORMAT_DATE_GCF;
	exports.FORMAT_MONTH_GCF = FORMAT_MONTH_GCF;
	exports.RULE_REQUIRED = RULE_REQUIRED;
	exports.RULE_MUSTSELECT = RULE_MUSTSELECT;
	exports.RULE_NOTSUPPORTED = RULE_NOTSUPPORTED;
	exports.RULE_LT6LETTERS = RULE_LT6LETTERS;
	exports.RULE_LT10LETTERS = RULE_LT10LETTERS;
	exports.RULE_LT18LETTERS = RULE_LT18LETTERS;
	exports.RULE_LT32LETTERS = RULE_LT32LETTERS;
	exports.RULE_LT64LETTERS = RULE_LT64LETTERS;
	exports.RULE_URL = RULE_URL;
	exports.RULE_INCORRECTIDCARD = RULE_INCORRECTIDCARD;
	exports.RULE_INCORRECTIDCARDIPSONID = RULE_INCORRECTIDCARDIPSONID;
	exports.RULE_INCORRECTOFFICERID = RULE_INCORRECTOFFICERID;
	exports.RULE_INCORRECTIP = RULE_INCORRECTIP;
	exports.RULE_INCORRECTPORT = RULE_INCORRECTPORT;
	exports.RULE_INCORRECTLONGITUDE = RULE_INCORRECTLONGITUDE;
	exports.RULE_INCORRECTLATITUDE = RULE_INCORRECTLATITUDE;
	exports.RULE_SIMILARITY = RULE_SIMILARITY;
	exports.RULE_SIMILARITY70 = RULE_SIMILARITY70;
	exports.RULE_SIMILARITY80 = RULE_SIMILARITY80;
	exports.YES_OR_NO = YES_OR_NO;
	exports.SEX = SEX;
	exports.AGE = AGE;
	exports.SMILE = SMILE;
	exports.GLASS = GLASS;
	exports.RISK = RISK;
	exports.NATION = NATION;
	exports.CREDENTIALS_TYPE = CREDENTIALS_TYPE;
	exports.RESOURCE_LIB_TYPE = RESOURCE_LIB_TYPE;
	exports.CONTROL_VALID_DATE = CONTROL_VALID_DATE;
	exports.HUMANSTATUS = HUMANSTATUS;
	exports.TASK_ANALYSIS_STATUS = TASK_ANALYSIS_STATUS;
	exports.LEVEL = LEVEL;
	exports.PAGESIZEOPTIONS = PAGESIZEOPTIONS;
	exports.RULE_POSITIVENUMBER = RULE_POSITIVENUMBER;
	exports.RULE_LIMITEDNUMBERORLETTER = RULE_LIMITEDNUMBERORLETTER;
	exports.TASKTYPE = TASKTYPE;
	exports.PERSON_TYPE = PERSON_TYPE;

/***/ }),
/* 589 */,
/* 590 */,
/* 591 */,
/* 592 */,
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class, _temp;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _rcTree = __webpack_require__(594);
	
	var _rcTree2 = _interopRequireDefault(_rcTree);
	
	var _openAnimation = __webpack_require__(598);
	
	var _openAnimation2 = _interopRequireDefault(_openAnimation);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Tree = (_temp = _class = function (_React$Component) {
	  _inherits(Tree, _React$Component);
	
	  function Tree() {
	    _classCallCheck(this, Tree);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Tree.prototype.render = function render() {
	    var props = this.props;
	    var checkable = props.checkable;
	    if (checkable) {
	      checkable = _react2["default"].createElement('span', { className: props.prefixCls + '-checkbox-inner' });
	    }
	    return _react2["default"].createElement(
	      _rcTree2["default"],
	      _extends({}, props, { checkable: checkable }),
	      this.props.children
	    );
	  };
	
	  return Tree;
	}(_react2["default"].Component), _class.TreeNode = _rcTree2["default"].TreeNode, _class.defaultProps = {
	  prefixCls: 'ant-tree',
	  checkable: false,
	  showIcon: false,
	  openAnimation: _openAnimation2["default"]
	}, _temp);
	exports["default"] = Tree;
	module.exports = exports['default'];

/***/ }),
/* 594 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Tree = __webpack_require__(595);
	
	var _Tree2 = _interopRequireDefault(_Tree);
	
	var _TreeNode = __webpack_require__(597);
	
	var _TreeNode2 = _interopRequireDefault(_TreeNode);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	_Tree2["default"].TreeNode = _TreeNode2["default"];
	
	exports["default"] = _Tree2["default"];
	module.exports = exports['default'];

/***/ }),
/* 595 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _objectAssign = __webpack_require__(165);
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _util = __webpack_require__(596);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	function noop() {}
	
	var Tree = function (_React$Component) {
	  _inherits(Tree, _React$Component);
	
	  function Tree(props) {
	    _classCallCheck(this, Tree);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));
	
	    ['onKeyDown', 'onCheck'].forEach(function (m) {
	      _this[m] = _this[m].bind(_this);
	    });
	    _this.contextmenuKeys = [];
	    _this.checkedKeysChange = true;
	
	    _this.state = {
	      expandedKeys: _this.getDefaultExpandedKeys(props),
	      checkedKeys: _this.getDefaultCheckedKeys(props),
	      selectedKeys: _this.getDefaultSelectedKeys(props),
	      dragNodesKeys: '',
	      dragOverNodeKey: '',
	      dropNodeKey: ''
	    };
	    return _this;
	  }
	
	  Tree.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var expandedKeys = this.getDefaultExpandedKeys(nextProps, true);
	    var checkedKeys = this.getDefaultCheckedKeys(nextProps, true);
	    var selectedKeys = this.getDefaultSelectedKeys(nextProps, true);
	    var st = {};
	    if (expandedKeys) {
	      st.expandedKeys = expandedKeys;
	    }
	    if (checkedKeys) {
	      if (nextProps.checkedKeys === this.props.checkedKeys) {
	        this.checkedKeysChange = false;
	      } else {
	        this.checkedKeysChange = true;
	      }
	      st.checkedKeys = checkedKeys;
	    }
	    if (selectedKeys) {
	      st.selectedKeys = selectedKeys;
	    }
	    this.setState(st);
	  };
	
	  Tree.prototype.onDragStart = function onDragStart(e, treeNode) {
	    this.dragNode = treeNode;
	    this.dragNodesKeys = this.getDragNodes(treeNode);
	    var st = {
	      dragNodesKeys: this.dragNodesKeys
	    };
	    var expandedKeys = this.getExpandedKeys(treeNode, false);
	    if (expandedKeys) {
	      // Controlled expand, save and then reset
	      this.getRawExpandedKeys();
	      st.expandedKeys = expandedKeys;
	    }
	    this.setState(st);
	    this.props.onDragStart({
	      event: e,
	      node: treeNode
	    });
	    this._dropTrigger = false;
	  };
	
	  Tree.prototype.onDragEnterGap = function onDragEnterGap(e, treeNode) {
	    var offsetTop = (0, _util.getOffset)(treeNode.refs.selectHandle).top;
	    var offsetHeight = treeNode.refs.selectHandle.offsetHeight;
	    var pageY = e.pageY;
	    var gapHeight = 2;
	    if (pageY > offsetTop + offsetHeight - gapHeight) {
	      this.dropPosition = 1;
	      return 1;
	    }
	    if (pageY < offsetTop + gapHeight) {
	      this.dropPosition = -1;
	      return -1;
	    }
	    this.dropPosition = 0;
	    return 0;
	  };
	
	  Tree.prototype.onDragEnter = function onDragEnter(e, treeNode) {
	    var enterGap = this.onDragEnterGap(e, treeNode);
	    if (this.dragNode.props.eventKey === treeNode.props.eventKey && enterGap === 0) {
	      this.setState({
	        dragOverNodeKey: ''
	      });
	      return;
	    }
	    var st = {
	      dragOverNodeKey: treeNode.props.eventKey
	    };
	    var expandedKeys = this.getExpandedKeys(treeNode, true);
	    if (expandedKeys) {
	      this.getRawExpandedKeys();
	      st.expandedKeys = expandedKeys;
	    }
	    this.setState(st);
	    this.props.onDragEnter({
	      event: e,
	      node: treeNode,
	      expandedKeys: expandedKeys && [].concat(_toConsumableArray(expandedKeys)) || [].concat(_toConsumableArray(this.state.expandedKeys))
	    });
	  };
	
	  Tree.prototype.onDragOver = function onDragOver(e, treeNode) {
	    this.props.onDragOver({ event: e, node: treeNode });
	  };
	
	  Tree.prototype.onDragLeave = function onDragLeave(e, treeNode) {
	    this.props.onDragLeave({ event: e, node: treeNode });
	  };
	
	  Tree.prototype.onDrop = function onDrop(e, treeNode) {
	    var key = treeNode.props.eventKey;
	    this.setState({
	      dragOverNodeKey: '',
	      dropNodeKey: key
	    });
	    if (this.dragNodesKeys.indexOf(key) > -1) {
	      if (console.warn) {
	        console.warn('can not drop to dragNode(include it\'s children node)');
	      }
	      return false;
	    }
	
	    var posArr = treeNode.props.pos.split('-');
	    var res = {
	      event: e,
	      node: treeNode,
	      dragNode: this.dragNode,
	      dragNodesKeys: [].concat(_toConsumableArray(this.dragNodesKeys)),
	      dropPosition: this.dropPosition + Number(posArr[posArr.length - 1])
	    };
	    if (this.dropPosition !== 0) {
	      res.dropToGap = true;
	    }
	    if ('expandedKeys' in this.props) {
	      res.rawExpandedKeys = [].concat(_toConsumableArray(this._rawExpandedKeys)) || [].concat(_toConsumableArray(this.state.expandedKeys));
	    }
	    this.props.onDrop(res);
	    this._dropTrigger = true;
	  };
	
	  Tree.prototype.onExpand = function onExpand(treeNode) {
	    var _this2 = this;
	
	    var expanded = !treeNode.props.expanded;
	    var controlled = 'expandedKeys' in this.props;
	    var expandedKeys = [].concat(_toConsumableArray(this.state.expandedKeys));
	    var index = expandedKeys.indexOf(treeNode.props.eventKey);
	    if (expanded && index === -1) {
	      expandedKeys.push(treeNode.props.eventKey);
	    } else if (!expanded && index > -1) {
	      expandedKeys.splice(index, 1);
	    }
	    if (!controlled) {
	      this.setState({ expandedKeys: expandedKeys });
	    }
	    this.props.onExpand(expandedKeys, { node: treeNode, expanded: expanded });
	
	    // after data loaded, need set new expandedKeys
	    if (expanded && this.props.loadData) {
	      return this.props.loadData(treeNode).then(function () {
	        if (!controlled) {
	          _this2.setState({ expandedKeys: expandedKeys });
	        }
	      });
	    }
	  };
	
	  Tree.prototype.onCheck = function onCheck(treeNode) {
	    var _this3 = this;
	
	    var checked = !treeNode.props.checked;
	    if (treeNode.props.halfChecked) {
	      checked = true;
	    }
	    var key = treeNode.props.eventKey;
	    var checkedKeys = [].concat(_toConsumableArray(this.state.checkedKeys));
	    var index = checkedKeys.indexOf(key);
	
	    var newSt = {
	      event: 'check',
	      node: treeNode,
	      checked: checked
	    };
	
	    if (this.props.checkStrictly && 'checkedKeys' in this.props) {
	      if (checked && index === -1) {
	        checkedKeys.push(key);
	      }
	      if (!checked && index > -1) {
	        checkedKeys.splice(index, 1);
	      }
	      newSt.checkedNodes = [];
	      (0, _util.loopAllChildren)(this.props.children, function (item, ind, pos, keyOrPos) {
	        if (checkedKeys.indexOf(keyOrPos) !== -1) {
	          newSt.checkedNodes.push(item);
	        }
	      });
	      this.props.onCheck((0, _util.getStrictlyValue)(checkedKeys, this.props.checkedKeys.halfChecked), newSt);
	    } else {
	      if (checked && index === -1) {
	        (function () {
	          _this3.treeNodesStates[treeNode.props.pos].checked = true;
	          var checkedPositions = [];
	          Object.keys(_this3.treeNodesStates).forEach(function (i) {
	            if (_this3.treeNodesStates[i].checked) {
	              checkedPositions.push(i);
	            }
	          });
	          (0, _util.handleCheckState)(_this3.treeNodesStates, (0, _util.filterParentPosition)(checkedPositions), true);
	        })();
	      }
	      if (!checked) {
	        this.treeNodesStates[treeNode.props.pos].checked = false;
	        this.treeNodesStates[treeNode.props.pos].halfChecked = false;
	        (0, _util.handleCheckState)(this.treeNodesStates, [treeNode.props.pos], false);
	      }
	      var checkKeys = (0, _util.getCheck)(this.treeNodesStates);
	      newSt.checkedNodes = checkKeys.checkedNodes;
	      newSt.checkedNodesPositions = checkKeys.checkedNodesPositions;
	      newSt.halfCheckedKeys = checkKeys.halfCheckedKeys;
	      this.checkKeys = checkKeys;
	
	      this._checkedKeys = checkedKeys = checkKeys.checkedKeys;
	      if (!('checkedKeys' in this.props)) {
	        this.setState({
	          checkedKeys: checkedKeys
	        });
	      }
	      this.props.onCheck(checkedKeys, newSt);
	    }
	  };
	
	  Tree.prototype.onSelect = function onSelect(treeNode) {
	    var props = this.props;
	    var selectedKeys = [].concat(_toConsumableArray(this.state.selectedKeys));
	    var eventKey = treeNode.props.eventKey;
	    var index = selectedKeys.indexOf(eventKey);
	    var selected = void 0;
	    if (index !== -1) {
	      selected = false;
	      selectedKeys.splice(index, 1);
	    } else {
	      selected = true;
	      if (!props.multiple) {
	        selectedKeys.length = 0;
	      }
	      selectedKeys.push(eventKey);
	    }
	    var selectedNodes = [];
	    if (selectedKeys.length) {
	      (0, _util.loopAllChildren)(this.props.children, function (item) {
	        if (selectedKeys.indexOf(item.key) !== -1) {
	          selectedNodes.push(item);
	        }
	      });
	    }
	    var newSt = {
	      event: 'select',
	      node: treeNode,
	      selected: selected,
	      selectedNodes: selectedNodes
	    };
	    if (!('selectedKeys' in this.props)) {
	      this.setState({
	        selectedKeys: selectedKeys
	      });
	    }
	    props.onSelect(selectedKeys, newSt);
	  };
	
	  Tree.prototype.onMouseEnter = function onMouseEnter(e, treeNode) {
	    this.props.onMouseEnter({ event: e, node: treeNode });
	  };
	
	  Tree.prototype.onMouseLeave = function onMouseLeave(e, treeNode) {
	    this.props.onMouseLeave({ event: e, node: treeNode });
	  };
	
	  Tree.prototype.onContextMenu = function onContextMenu(e, treeNode) {
	    var selectedKeys = [].concat(_toConsumableArray(this.state.selectedKeys));
	    var eventKey = treeNode.props.eventKey;
	    if (this.contextmenuKeys.indexOf(eventKey) === -1) {
	      this.contextmenuKeys.push(eventKey);
	    }
	    this.contextmenuKeys.forEach(function (key) {
	      var index = selectedKeys.indexOf(key);
	      if (index !== -1) {
	        selectedKeys.splice(index, 1);
	      }
	    });
	    if (selectedKeys.indexOf(eventKey) === -1) {
	      selectedKeys.push(eventKey);
	    }
	    this.setState({
	      selectedKeys: selectedKeys
	    });
	    this.props.onRightClick({ event: e, node: treeNode });
	  };
	
	  // all keyboard events callbacks run from here at first
	
	
	  Tree.prototype.onKeyDown = function onKeyDown(e) {
	    e.preventDefault();
	  };
	
	  Tree.prototype.getFilterExpandedKeys = function getFilterExpandedKeys(props, expandKeyProp, expandAll) {
	    var keys = props[expandKeyProp];
	    if (!expandAll && !props.autoExpandParent) {
	      return keys || [];
	    }
	    var expandedPositionArr = [];
	    if (props.autoExpandParent) {
	      (0, _util.loopAllChildren)(props.children, function (item, index, pos, newKey) {
	        if (keys.indexOf(newKey) > -1) {
	          expandedPositionArr.push(pos);
	        }
	      });
	    }
	    var filterExpandedKeys = [];
	    (0, _util.loopAllChildren)(props.children, function (item, index, pos, newKey) {
	      if (expandAll) {
	        filterExpandedKeys.push(newKey);
	      } else if (props.autoExpandParent) {
	        expandedPositionArr.forEach(function (p) {
	          if ((p.split('-').length > pos.split('-').length && (0, _util.isInclude)(pos.split('-'), p.split('-')) || pos === p) && filterExpandedKeys.indexOf(newKey) === -1) {
	            filterExpandedKeys.push(newKey);
	          }
	        });
	      }
	    });
	    return filterExpandedKeys.length ? filterExpandedKeys : keys;
	  };
	
	  Tree.prototype.getDefaultExpandedKeys = function getDefaultExpandedKeys(props, willReceiveProps) {
	    var expandedKeys = willReceiveProps ? undefined : this.getFilterExpandedKeys(props, 'defaultExpandedKeys', props.defaultExpandedKeys.length ? false : props.defaultExpandAll);
	    if ('expandedKeys' in props) {
	      expandedKeys = (props.autoExpandParent ? this.getFilterExpandedKeys(props, 'expandedKeys', false) : props.expandedKeys) || [];
	    }
	    return expandedKeys;
	  };
	
	  Tree.prototype.getDefaultCheckedKeys = function getDefaultCheckedKeys(props, willReceiveProps) {
	    var checkedKeys = willReceiveProps ? undefined : props.defaultCheckedKeys;
	    if ('checkedKeys' in props) {
	      checkedKeys = props.checkedKeys || [];
	      if (props.checkStrictly) {
	        if (props.checkedKeys.checked) {
	          checkedKeys = props.checkedKeys.checked;
	        } else if (!Array.isArray(props.checkedKeys)) {
	          checkedKeys = [];
	        }
	      }
	    }
	    return checkedKeys;
	  };
	
	  Tree.prototype.getDefaultSelectedKeys = function getDefaultSelectedKeys(props, willReceiveProps) {
	    var getKeys = function getKeys(keys) {
	      if (props.multiple) {
	        return [].concat(_toConsumableArray(keys));
	      }
	      if (keys.length) {
	        return [keys[0]];
	      }
	      return keys;
	    };
	    var selectedKeys = willReceiveProps ? undefined : getKeys(props.defaultSelectedKeys);
	    if ('selectedKeys' in props) {
	      selectedKeys = getKeys(props.selectedKeys);
	    }
	    return selectedKeys;
	  };
	
	  Tree.prototype.getRawExpandedKeys = function getRawExpandedKeys() {
	    if (!this._rawExpandedKeys && 'expandedKeys' in this.props) {
	      this._rawExpandedKeys = [].concat(_toConsumableArray(this.state.expandedKeys));
	    }
	  };
	
	  Tree.prototype.getOpenTransitionName = function getOpenTransitionName() {
	    var props = this.props;
	    var transitionName = props.openTransitionName;
	    var animationName = props.openAnimation;
	    if (!transitionName && typeof animationName === 'string') {
	      transitionName = props.prefixCls + '-open-' + animationName;
	    }
	    return transitionName;
	  };
	
	  Tree.prototype.getDragNodes = function getDragNodes(treeNode) {
	    var dragNodesKeys = [];
	    var tPArr = treeNode.props.pos.split('-');
	    (0, _util.loopAllChildren)(this.props.children, function (item, index, pos, newKey) {
	      var pArr = pos.split('-');
	      if (treeNode.props.pos === pos || tPArr.length < pArr.length && (0, _util.isInclude)(tPArr, pArr)) {
	        dragNodesKeys.push(newKey);
	      }
	    });
	    return dragNodesKeys;
	  };
	
	  Tree.prototype.getExpandedKeys = function getExpandedKeys(treeNode, expand) {
	    var key = treeNode.props.eventKey;
	    var expandedKeys = this.state.expandedKeys;
	    var expandedIndex = expandedKeys.indexOf(key);
	    var exKeys = void 0;
	    if (expandedIndex > -1 && !expand) {
	      exKeys = [].concat(_toConsumableArray(expandedKeys));
	      exKeys.splice(expandedIndex, 1);
	      return exKeys;
	    }
	    if (expand && expandedKeys.indexOf(key) === -1) {
	      return expandedKeys.concat([key]);
	    }
	  };
	
	  Tree.prototype.filterTreeNode = function filterTreeNode(treeNode) {
	    var filterTreeNode = this.props.filterTreeNode;
	    if (typeof filterTreeNode !== 'function' || treeNode.props.disabled) {
	      return false;
	    }
	    return filterTreeNode.call(this, treeNode);
	  };
	
	  Tree.prototype.renderTreeNode = function renderTreeNode(child, index) {
	    var level = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
	
	    var pos = level + '-' + index;
	    var key = child.key || pos;
	    var state = this.state;
	    var props = this.props;
	
	    // prefer to child's own selectable property if passed
	    var selectable = props.selectable;
	    if (child.props.hasOwnProperty('selectable')) {
	      selectable = child.props.selectable;
	    }
	
	    var cloneProps = {
	      ref: 'treeNode-' + key,
	      root: this,
	      eventKey: key,
	      pos: pos,
	      selectable: selectable,
	      loadData: props.loadData,
	      onMouseEnter: props.onMouseEnter,
	      onMouseLeave: props.onMouseLeave,
	      onRightClick: props.onRightClick,
	      prefixCls: props.prefixCls,
	      showLine: props.showLine,
	      showIcon: props.showIcon,
	      draggable: props.draggable,
	      dragOver: state.dragOverNodeKey === key && this.dropPosition === 0,
	      dragOverGapTop: state.dragOverNodeKey === key && this.dropPosition === -1,
	      dragOverGapBottom: state.dragOverNodeKey === key && this.dropPosition === 1,
	      _dropTrigger: this._dropTrigger,
	      expanded: state.expandedKeys.indexOf(key) !== -1,
	      selected: state.selectedKeys.indexOf(key) !== -1,
	      openTransitionName: this.getOpenTransitionName(),
	      openAnimation: props.openAnimation,
	      filterTreeNode: this.filterTreeNode.bind(this)
	    };
	    if (props.checkable) {
	      cloneProps.checkable = props.checkable;
	      if (props.checkStrictly) {
	        if (state.checkedKeys) {
	          cloneProps.checked = state.checkedKeys.indexOf(key) !== -1 || false;
	        }
	        if (props.checkedKeys.halfChecked) {
	          cloneProps.halfChecked = props.checkedKeys.halfChecked.indexOf(key) !== -1 || false;
	        } else {
	          cloneProps.halfChecked = false;
	        }
	      } else {
	        if (this.checkedKeys) {
	          cloneProps.checked = this.checkedKeys.indexOf(key) !== -1 || false;
	        }
	        cloneProps.halfChecked = this.halfCheckedKeys.indexOf(key) !== -1;
	      }
	
	      if (this.treeNodesStates[pos]) {
	        (0, _objectAssign2["default"])(cloneProps, this.treeNodesStates[pos].siblingPosition);
	      }
	    }
	    return _react2["default"].cloneElement(child, cloneProps);
	  };
	
	  Tree.prototype.render = function render() {
	    var _this4 = this;
	
	    var props = this.props;
	    var domProps = {
	      className: (0, _classnames2["default"])(props.className, props.prefixCls),
	      role: 'tree-node'
	    };
	    if (props.focusable) {
	      domProps.tabIndex = '0';
	      domProps.onKeyDown = this.onKeyDown;
	    }
	    // console.log(this.state.expandedKeys, this._rawExpandedKeys, props.children);
	    if (props.checkable && (this.checkedKeysChange || props.loadData)) {
	      if (props.checkStrictly) {
	        this.treeNodesStates = {};
	        (0, _util.loopAllChildren)(props.children, function (item, index, pos, keyOrPos, siblingPosition) {
	          _this4.treeNodesStates[pos] = {
	            siblingPosition: siblingPosition
	          };
	        });
	      } else if (props._treeNodesStates) {
	        this.treeNodesStates = props._treeNodesStates.treeNodesStates;
	        this.halfCheckedKeys = props._treeNodesStates.halfCheckedKeys;
	        this.checkedKeys = props._treeNodesStates.checkedKeys;
	      } else {
	        (function () {
	          var checkedKeys = _this4.state.checkedKeys;
	          var checkKeys = void 0;
	          if (!props.loadData && _this4.checkKeys && _this4._checkedKeys && (0, _util.arraysEqual)(_this4._checkedKeys, checkedKeys)) {
	            // if checkedKeys the same as _checkedKeys from onCheck, use _checkedKeys.
	            checkKeys = _this4.checkKeys;
	          } else {
	            (function () {
	              var checkedPositions = [];
	              _this4.treeNodesStates = {};
	              (0, _util.loopAllChildren)(props.children, function (item, index, pos, keyOrPos, siblingPosition) {
	                _this4.treeNodesStates[pos] = {
	                  node: item,
	                  key: keyOrPos,
	                  checked: false,
	                  halfChecked: false,
	                  siblingPosition: siblingPosition
	                };
	                if (checkedKeys.indexOf(keyOrPos) !== -1) {
	                  _this4.treeNodesStates[pos].checked = true;
	                  checkedPositions.push(pos);
	                }
	              });
	              // if the parent node's key exists, it all children node will be checked
	              (0, _util.handleCheckState)(_this4.treeNodesStates, (0, _util.filterParentPosition)(checkedPositions), true);
	              checkKeys = (0, _util.getCheck)(_this4.treeNodesStates);
	            })();
	          }
	          _this4.halfCheckedKeys = checkKeys.halfCheckedKeys;
	          _this4.checkedKeys = checkKeys.checkedKeys;
	        })();
	      }
	    }
	
	    return _react2["default"].createElement(
	      'ul',
	      _extends({}, domProps, { unselectable: true, ref: 'tree' }),
	      _react2["default"].Children.map(props.children, this.renderTreeNode, this)
	    );
	  };
	
	  return Tree;
	}(_react2["default"].Component);
	
	Tree.propTypes = {
	  prefixCls: _react.PropTypes.string,
	  children: _react.PropTypes.any,
	  showLine: _react.PropTypes.bool,
	  showIcon: _react.PropTypes.bool,
	  selectable: _react.PropTypes.bool,
	  multiple: _react.PropTypes.bool,
	  checkable: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.node]),
	  _treeNodesStates: _react.PropTypes.object,
	  checkStrictly: _react.PropTypes.bool,
	  draggable: _react.PropTypes.bool,
	  autoExpandParent: _react.PropTypes.bool,
	  defaultExpandAll: _react.PropTypes.bool,
	  defaultExpandedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  expandedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  defaultCheckedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  checkedKeys: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.string), _react.PropTypes.object]),
	  defaultSelectedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  selectedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  onExpand: _react.PropTypes.func,
	  onCheck: _react.PropTypes.func,
	  onSelect: _react.PropTypes.func,
	  loadData: _react.PropTypes.func,
	  onMouseEnter: _react.PropTypes.func,
	  onMouseLeave: _react.PropTypes.func,
	  onRightClick: _react.PropTypes.func,
	  onDragStart: _react.PropTypes.func,
	  onDragEnter: _react.PropTypes.func,
	  onDragOver: _react.PropTypes.func,
	  onDragLeave: _react.PropTypes.func,
	  onDrop: _react.PropTypes.func,
	  filterTreeNode: _react.PropTypes.func,
	  openTransitionName: _react.PropTypes.string,
	  openAnimation: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object])
	};
	
	Tree.defaultProps = {
	  prefixCls: 'rc-tree',
	  showLine: false,
	  showIcon: true,
	  selectable: true,
	  multiple: false,
	  checkable: false,
	  checkStrictly: false,
	  draggable: false,
	  autoExpandParent: true,
	  defaultExpandAll: false,
	  defaultExpandedKeys: [],
	  defaultCheckedKeys: [],
	  defaultSelectedKeys: [],
	  onExpand: noop,
	  onCheck: noop,
	  onSelect: noop,
	  onDragStart: noop,
	  onDragEnter: noop,
	  onDragOver: noop,
	  onDragLeave: noop,
	  onDrop: noop
	};
	
	exports["default"] = Tree;
	module.exports = exports['default'];

/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.browser = browser;
	exports.getOffset = getOffset;
	exports.loopAllChildren = loopAllChildren;
	exports.isInclude = isInclude;
	exports.filterParentPosition = filterParentPosition;
	exports.handleCheckState = handleCheckState;
	exports.getCheck = getCheck;
	exports.getStrictlyValue = getStrictlyValue;
	exports.arraysEqual = arraysEqual;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function browser(navigator) {
	  var tem = void 0;
	  var ua = navigator.userAgent;
	  var M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
	  if (/trident/i.test(M[1])) {
	    tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
	    return 'IE ' + (tem[1] || '');
	  }
	  if (M[1] === 'Chrome') {
	    tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
	    if (tem) return tem.slice(1).join(' ').replace('OPR', 'Opera');
	  }
	  M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
	  tem = ua.match(/version\/(\d+)/i);
	  if (tem) {
	    M.splice(1, 1, tem[1]);
	  }
	  return M.join(' ');
	}
	
	// export function getOffset(el) {
	//   const obj = el.getBoundingClientRect();
	//   return {
	//     left: obj.left + document.body.scrollLeft,
	//     top: obj.top + document.body.scrollTop,
	//     width: obj.width,
	//     height: obj.height
	//   };
	// }
	
	// // iscroll offset
	// offset = function (el) {
	//   var left = -el.offsetLeft,
	//     top = -el.offsetTop;
	
	//   // jshint -W084
	//   while (el = el.offsetParent) {
	//     left -= el.offsetLeft;
	//     top -= el.offsetTop;
	//   }
	//   // jshint +W084
	
	//   return {
	//     left: left,
	//     top: top
	//   };
	// }
	
	/* eslint-disable */
	/* eslint no-loop-func: 0*/
	
	function getOffset(ele) {
	  var doc = void 0,
	      win = void 0,
	      docElem = void 0,
	      rect = void 0;
	
	  if (!ele.getClientRects().length) {
	    return { top: 0, left: 0 };
	  }
	
	  rect = ele.getBoundingClientRect();
	
	  if (rect.width || rect.height) {
	    doc = ele.ownerDocument;
	    win = doc.defaultView;
	    docElem = doc.documentElement;
	
	    return {
	      top: rect.top + win.pageYOffset - docElem.clientTop,
	      left: rect.left + win.pageXOffset - docElem.clientLeft
	    };
	  }
	
	  return rect;
	}
	/* eslint-enable */
	
	function getChildrenlength(children) {
	  var len = 1;
	  if (Array.isArray(children)) {
	    len = children.length;
	  }
	  return len;
	}
	
	function getSiblingPosition(index, len, siblingPosition) {
	  if (len === 1) {
	    siblingPosition.first = true;
	    siblingPosition.last = true;
	  } else {
	    siblingPosition.first = index === 0;
	    siblingPosition.last = index === len - 1;
	  }
	  return siblingPosition;
	}
	
	function loopAllChildren(childs, callback, parent) {
	  var loop = function loop(children, level, _parent) {
	    var len = getChildrenlength(children);
	    _react2["default"].Children.forEach(children, function (item, index) {
	      var pos = level + '-' + index;
	      if (item.props.children && item.type && item.type.isTreeNode) {
	        loop(item.props.children, pos, { node: item, pos: pos });
	      }
	      callback(item, index, pos, item.key || pos, getSiblingPosition(index, len, {}), _parent);
	    });
	  };
	  loop(childs, 0, parent);
	}
	
	function isInclude(smallArray, bigArray) {
	  return smallArray.every(function (ii, i) {
	    return ii === bigArray[i];
	  });
	}
	// console.log(isInclude(['0', '1'], ['0', '10', '1']));
	
	
	// arr.length === 628, use time: ~20ms
	function filterParentPosition(arr) {
	  var levelObj = {};
	  arr.forEach(function (item) {
	    var posLen = item.split('-').length;
	    if (!levelObj[posLen]) {
	      levelObj[posLen] = [];
	    }
	    levelObj[posLen].push(item);
	  });
	  var levelArr = Object.keys(levelObj).sort();
	
	  var _loop = function _loop(i) {
	    if (levelArr[i + 1]) {
	      levelObj[levelArr[i]].forEach(function (ii) {
	        var _loop2 = function _loop2(j) {
	          levelObj[levelArr[j]].forEach(function (_i, index) {
	            if (isInclude(ii.split('-'), _i.split('-'))) {
	              levelObj[levelArr[j]][index] = null;
	            }
	          });
	          levelObj[levelArr[j]] = levelObj[levelArr[j]].filter(function (p) {
	            return p;
	          });
	        };
	
	        for (var j = i + 1; j < levelArr.length; j++) {
	          _loop2(j);
	        }
	      });
	    }
	  };
	
	  for (var i = 0; i < levelArr.length; i++) {
	    _loop(i);
	  }
	  var nArr = [];
	  levelArr.forEach(function (i) {
	    nArr = nArr.concat(levelObj[i]);
	  });
	  return nArr;
	}
	// console.log(filterParentPosition(
	//   ['0-2', '0-3-3', '0-10', '0-10-0', '0-0-1', '0-0', '0-1-1', '0-1']
	// ));
	
	
	function stripTail(str) {
	  var arr = str.match(/(.+)(-[^-]+)$/);
	  var st = '';
	  if (arr && arr.length === 3) {
	    st = arr[1];
	  }
	  return st;
	}
	function splitPosition(pos) {
	  return pos.split('-');
	}
	
	function handleCheckState(obj, checkedPositionArr, checkIt) {
	  // console.log(stripTail('0-101-000'));
	  var objKeys = Object.keys(obj);
	  // let s = Date.now();
	  objKeys.forEach(function (i, index) {
	    var iArr = splitPosition(i);
	    var saved = false;
	    checkedPositionArr.forEach(function (_pos) {
	      // 设置子节点，全选或全不选
	      var _posArr = splitPosition(_pos);
	      if (iArr.length > _posArr.length && isInclude(_posArr, iArr)) {
	        obj[i].halfChecked = false;
	        obj[i].checked = checkIt;
	        objKeys[index] = null;
	      }
	      if (iArr[0] === _posArr[0] && iArr[1] === _posArr[1]) {
	        // 如果
	        saved = true;
	      }
	    });
	    if (!saved) {
	      objKeys[index] = null;
	    }
	  });
	  // TODO: 循环 2470000 次耗时约 1400 ms。 性能瓶颈！
	  // console.log(Date.now()-s, checkedPositionArr.length * objKeys.length);
	  objKeys = objKeys.filter(function (i) {
	    return i;
	  }); // filter non null;
	
	  var _loop3 = function _loop3(_pIndex) {
	    // 循环设置父节点的 选中 或 半选状态
	    var loop = function loop(__pos) {
	      var _posLen = splitPosition(__pos).length;
	      if (_posLen <= 2) {
	        // e.g. '0-0', '0-1'
	        return;
	      }
	      var sibling = 0;
	      var siblingChecked = 0;
	      var parentPosition = stripTail(__pos);
	      objKeys.forEach(function (i /* , index*/) {
	        var iArr = splitPosition(i);
	        if (iArr.length === _posLen && isInclude(splitPosition(parentPosition), iArr)) {
	          sibling++;
	          if (obj[i].checked) {
	            siblingChecked++;
	            var _i = checkedPositionArr.indexOf(i);
	            if (_i > -1) {
	              checkedPositionArr.splice(_i, 1);
	              if (_i <= _pIndex) {
	                _pIndex--;
	              }
	            }
	          } else if (obj[i].halfChecked) {
	            siblingChecked += 0.5;
	          }
	          // objKeys[index] = null;
	        }
	      });
	      // objKeys = objKeys.filter(i => i); // filter non null;
	      var parent = obj[parentPosition];
	      // sibling 不会等于0
	      // 全不选 - 全选 - 半选
	      if (siblingChecked === 0) {
	        parent.checked = false;
	        parent.halfChecked = false;
	      } else if (siblingChecked === sibling) {
	        parent.checked = true;
	        parent.halfChecked = false;
	      } else {
	        parent.halfChecked = true;
	        parent.checked = false;
	      }
	      loop(parentPosition);
	    };
	    loop(checkedPositionArr[_pIndex], _pIndex);
	    pIndex = _pIndex;
	  };
	
	  for (var pIndex = 0; pIndex < checkedPositionArr.length; pIndex++) {
	    _loop3(pIndex);
	  }
	  // console.log(Date.now()-s, objKeys.length, checkIt);
	}
	
	function getCheck(treeNodesStates) {
	  var halfCheckedKeys = [];
	  var checkedKeys = [];
	  var checkedNodes = [];
	  var checkedNodesPositions = [];
	  Object.keys(treeNodesStates).forEach(function (item) {
	    var itemObj = treeNodesStates[item];
	    if (itemObj.checked) {
	      checkedKeys.push(itemObj.key);
	      checkedNodes.push(itemObj.node);
	      checkedNodesPositions.push({ node: itemObj.node, pos: item });
	    } else if (itemObj.halfChecked) {
	      halfCheckedKeys.push(itemObj.key);
	    }
	  });
	  return {
	    halfCheckedKeys: halfCheckedKeys, checkedKeys: checkedKeys, checkedNodes: checkedNodes, checkedNodesPositions: checkedNodesPositions, treeNodesStates: treeNodesStates
	  };
	}
	
	function getStrictlyValue(checkedKeys, halfChecked) {
	  if (halfChecked) {
	    return { checked: checkedKeys, halfChecked: halfChecked };
	  }
	  return checkedKeys;
	}
	
	function arraysEqual(a, b) {
	  if (a === b) return true;
	  if (a === null || typeof a === 'undefined' || b === null || typeof b === 'undefined') {
	    return false;
	  }
	  if (a.length !== b.length) return false;
	
	  // If you don't care about the order of the elements inside
	  // the array, you should sort both arrays here.
	
	  for (var i = 0; i < a.length; ++i) {
	    if (a[i] !== b[i]) return false;
	  }
	  return true;
	}

/***/ }),
/* 597 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _objectAssign = __webpack_require__(165);
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _rcAnimate = __webpack_require__(313);
	
	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);
	
	var _util = __webpack_require__(596);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var browserUa = typeof window !== 'undefined' ? (0, _util.browser)(window.navigator) : '';
	var ieOrEdge = /.*(IE|Edge).+/.test(browserUa);
	// const uaArray = browserUa.split(' ');
	// const gtIE8 = uaArray.length !== 2 || uaArray[0].indexOf('IE') === -1 || Number(uaArray[1]) > 8;
	
	var defaultTitle = '---';
	
	var TreeNode = function (_React$Component) {
	  _inherits(TreeNode, _React$Component);
	
	  function TreeNode(props) {
	    _classCallCheck(this, TreeNode);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));
	
	    ['onExpand', 'onCheck', 'onContextMenu', 'onMouseEnter', 'onMouseLeave', 'onDragStart', 'onDragEnter', 'onDragOver', 'onDragLeave', 'onDrop'].forEach(function (m) {
	      _this[m] = _this[m].bind(_this);
	    });
	    _this.state = {
	      dataLoading: false,
	      dragNodeHighlight: false
	    };
	    return _this;
	  }
	
	  TreeNode.prototype.componentDidMount = function componentDidMount() {
	    if (!this.props.root._treeNodeInstances) {
	      this.props.root._treeNodeInstances = [];
	    }
	    this.props.root._treeNodeInstances.push(this);
	  };
	  // shouldComponentUpdate(nextProps) {
	  //   if (!nextProps.expanded) {
	  //     return false;
	  //   }
	  //   return true;
	  // }
	
	  TreeNode.prototype.onCheck = function onCheck() {
	    this.props.root.onCheck(this);
	  };
	
	  TreeNode.prototype.onSelect = function onSelect() {
	    this.props.root.onSelect(this);
	  };
	
	  TreeNode.prototype.onMouseEnter = function onMouseEnter(e) {
	    e.preventDefault();
	    this.props.root.onMouseEnter(e, this);
	  };
	
	  TreeNode.prototype.onMouseLeave = function onMouseLeave(e) {
	    e.preventDefault();
	    this.props.root.onMouseLeave(e, this);
	  };
	
	  TreeNode.prototype.onContextMenu = function onContextMenu(e) {
	    e.preventDefault();
	    this.props.root.onContextMenu(e, this);
	  };
	
	  TreeNode.prototype.onDragStart = function onDragStart(e) {
	    // console.log('dragstart', this.props.eventKey, e);
	    // e.preventDefault();
	    e.stopPropagation();
	    this.setState({
	      dragNodeHighlight: true
	    });
	    this.props.root.onDragStart(e, this);
	    try {
	      // ie throw error
	      // firefox-need-it
	      e.dataTransfer.setData('text/plain', '');
	    } finally {
	      // empty
	    }
	  };
	
	  TreeNode.prototype.onDragEnter = function onDragEnter(e) {
	    // console.log('dragenter', this.props.eventKey, e);
	    e.preventDefault();
	    e.stopPropagation();
	    this.props.root.onDragEnter(e, this);
	  };
	
	  TreeNode.prototype.onDragOver = function onDragOver(e) {
	    // console.log(this.props.eventKey, e);
	    // todo disabled
	    e.preventDefault();
	    e.stopPropagation();
	    this.props.root.onDragOver(e, this);
	    return false;
	  };
	
	  TreeNode.prototype.onDragLeave = function onDragLeave(e) {
	    // console.log(this.props.eventKey, e);
	    e.stopPropagation();
	    this.props.root.onDragLeave(e, this);
	  };
	
	  TreeNode.prototype.onDrop = function onDrop(e) {
	    e.preventDefault();
	    e.stopPropagation();
	    this.setState({
	      dragNodeHighlight: false
	    });
	    this.props.root.onDrop(e, this);
	  };
	
	  TreeNode.prototype.onExpand = function onExpand() {
	    var _this2 = this;
	
	    var callbackPromise = this.props.root.onExpand(this);
	    if (callbackPromise && (typeof callbackPromise === 'undefined' ? 'undefined' : _typeof(callbackPromise)) === 'object') {
	      (function () {
	        var setLoading = function setLoading(dataLoading) {
	          _this2.setState({ dataLoading: dataLoading });
	        };
	        setLoading(true);
	        callbackPromise.then(function () {
	          setLoading(false);
	        }, function () {
	          setLoading(false);
	        });
	      })();
	    }
	  };
	
	  // keyboard event support
	
	
	  TreeNode.prototype.onKeyDown = function onKeyDown(e) {
	    e.preventDefault();
	  };
	
	  TreeNode.prototype.renderSwitcher = function renderSwitcher(props, expandedState) {
	    var prefixCls = props.prefixCls;
	    var switcherCls = _defineProperty({}, prefixCls + '-switcher', true);
	    if (!props.showLine) {
	      switcherCls[prefixCls + '-noline_' + expandedState] = true;
	    } else if (props.pos === '0-0') {
	      switcherCls[prefixCls + '-roots_' + expandedState] = true;
	    } else {
	      switcherCls[prefixCls + '-center_' + expandedState] = !props.last;
	      switcherCls[prefixCls + '-bottom_' + expandedState] = props.last;
	    }
	    if (props.disabled) {
	      switcherCls[prefixCls + '-switcher-disabled'] = true;
	      return _react2["default"].createElement('span', { className: (0, _classnames2["default"])(switcherCls) });
	    }
	    return _react2["default"].createElement('span', { className: (0, _classnames2["default"])(switcherCls), onClick: this.onExpand });
	  };
	
	  TreeNode.prototype.renderCheckbox = function renderCheckbox(props) {
	    var prefixCls = props.prefixCls;
	    var checkboxCls = _defineProperty({}, prefixCls + '-checkbox', true);
	    if (props.checked) {
	      checkboxCls[prefixCls + '-checkbox-checked'] = true;
	    } else if (props.halfChecked) {
	      checkboxCls[prefixCls + '-checkbox-indeterminate'] = true;
	    }
	    var customEle = null;
	    if (typeof props.checkable !== 'boolean') {
	      customEle = props.checkable;
	    }
	    if (props.disabled || props.disableCheckbox) {
	      checkboxCls[prefixCls + '-checkbox-disabled'] = true;
	      return _react2["default"].createElement(
	        'span',
	        { ref: 'checkbox', className: (0, _classnames2["default"])(checkboxCls) },
	        customEle
	      );
	    }
	    return _react2["default"].createElement(
	      'span',
	      { ref: 'checkbox',
	        className: (0, _classnames2["default"])(checkboxCls),
	        onClick: this.onCheck
	      },
	      customEle
	    );
	  };
	
	  TreeNode.prototype.renderChildren = function renderChildren(props) {
	    var renderFirst = this.renderFirst;
	    this.renderFirst = 1;
	    var transitionAppear = true;
	    if (!renderFirst && props.expanded) {
	      transitionAppear = false;
	    }
	    var children = props.children;
	    var newChildren = children;
	    if (children && (children.type === TreeNode || Array.isArray(children) && children.every(function (item) {
	      return item.type === TreeNode;
	    }))) {
	      var _cls;
	
	      var cls = (_cls = {}, _defineProperty(_cls, props.prefixCls + '-child-tree', true), _defineProperty(_cls, props.prefixCls + '-child-tree-open', props.expanded), _cls);
	      if (props.showLine) {
	        cls[props.prefixCls + '-line'] = !props.last;
	      }
	      var animProps = {};
	      if (props.openTransitionName) {
	        animProps.transitionName = props.openTransitionName;
	      } else if (_typeof(props.openAnimation) === 'object') {
	        animProps.animation = (0, _objectAssign2["default"])({}, props.openAnimation);
	        if (!transitionAppear) {
	          delete animProps.animation.appear;
	        }
	      }
	      newChildren = _react2["default"].createElement(
	        _rcAnimate2["default"],
	        _extends({}, animProps, {
	          showProp: 'data-expanded',
	          transitionAppear: transitionAppear,
	          component: ''
	        }),
	        !props.expanded ? null : _react2["default"].createElement(
	          'ul',
	          { className: (0, _classnames2["default"])(cls), 'data-expanded': props.expanded },
	          _react2["default"].Children.map(children, function (item, index) {
	            return props.root.renderTreeNode(item, index, props.pos);
	          }, props.root)
	        )
	      );
	    }
	    return newChildren;
	  };
	
	  TreeNode.prototype.render = function render() {
	    var _iconEleCls,
	        _this3 = this;
	
	    var props = this.props;
	    var prefixCls = props.prefixCls;
	    var expandedState = props.expanded ? 'open' : 'close';
	
	    var iconEleCls = (_iconEleCls = {}, _defineProperty(_iconEleCls, prefixCls + '-iconEle', true), _defineProperty(_iconEleCls, prefixCls + '-icon_loading', this.state.dataLoading), _defineProperty(_iconEleCls, prefixCls + '-icon__' + expandedState, true), _iconEleCls);
	
	    var canRenderSwitcher = true;
	    var content = props.title;
	    var newChildren = this.renderChildren(props);
	    if (!newChildren || newChildren === props.children) {
	      // content = newChildren;
	      newChildren = null;
	      if (!props.loadData || props.isLeaf) {
	        canRenderSwitcher = false;
	      }
	    }
	    // For performance, does't render children into dom when `!props.expanded` (move to Animate)
	    // if (!props.expanded) {
	    //   newChildren = null;
	    // }
	
	    var selectHandle = function selectHandle() {
	      var icon = props.showIcon || props.loadData && _this3.state.dataLoading ? _react2["default"].createElement('span', { className: (0, _classnames2["default"])(iconEleCls) }) : null;
	      var title = _react2["default"].createElement(
	        'span',
	        { className: prefixCls + '-title' },
	        content
	      );
	      var domProps = {
	        className: prefixCls + '-node-content-wrapper'
	      };
	      if (!props.disabled) {
	        if (props.selected || !props._dropTrigger && _this3.state.dragNodeHighlight) {
	          domProps.className += ' ' + prefixCls + '-node-selected';
	        }
	        domProps.onClick = function (e) {
	          e.preventDefault();
	          if (props.selectable) {
	            _this3.onSelect();
	          }
	          // not fire check event
	          // if (props.checkable) {
	          //   this.onCheck();
	          // }
	        };
	        if (props.onRightClick) {
	          domProps.onContextMenu = _this3.onContextMenu;
	        }
	        if (props.onMouseEnter) {
	          domProps.onMouseEnter = _this3.onMouseEnter;
	        }
	        if (props.onMouseLeave) {
	          domProps.onMouseLeave = _this3.onMouseLeave;
	        }
	        if (props.draggable) {
	          domProps.className += ' draggable';
	          if (ieOrEdge) {
	            // ie bug!
	            domProps.href = '#';
	          }
	          domProps.draggable = true;
	          domProps['aria-grabbed'] = true;
	          domProps.onDragStart = _this3.onDragStart;
	        }
	      }
	      return _react2["default"].createElement(
	        'a',
	        _extends({ ref: 'selectHandle', title: typeof content === 'string' ? content : '' }, domProps),
	        icon,
	        title
	      );
	    };
	
	    var liProps = {};
	    if (props.draggable) {
	      liProps.onDragEnter = this.onDragEnter;
	      liProps.onDragOver = this.onDragOver;
	      liProps.onDragLeave = this.onDragLeave;
	      liProps.onDrop = this.onDrop;
	    }
	
	    var disabledCls = '';
	    var dragOverCls = '';
	    if (props.disabled) {
	      disabledCls = prefixCls + '-treenode-disabled';
	    } else if (props.dragOver) {
	      dragOverCls = 'drag-over';
	    } else if (props.dragOverGapTop) {
	      dragOverCls = 'drag-over-gap-top';
	    } else if (props.dragOverGapBottom) {
	      dragOverCls = 'drag-over-gap-bottom';
	    }
	
	    var filterCls = props.filterTreeNode(this) ? 'filter-node' : '';
	
	    var noopSwitcher = function noopSwitcher() {
	      var _cls2;
	
	      var cls = (_cls2 = {}, _defineProperty(_cls2, prefixCls + '-switcher', true), _defineProperty(_cls2, prefixCls + '-switcher-noop', true), _cls2);
	      if (props.showLine) {
	        cls[prefixCls + '-center_docu'] = !props.last;
	        cls[prefixCls + '-bottom_docu'] = props.last;
	      } else {
	        cls[prefixCls + '-noline_docu'] = true;
	      }
	      return _react2["default"].createElement('span', { className: (0, _classnames2["default"])(cls) });
	    };
	
	    return _react2["default"].createElement(
	      'li',
	      _extends({}, liProps, { ref: 'li',
	        className: (0, _classnames2["default"])(props.className, disabledCls, dragOverCls, filterCls)
	      }),
	      canRenderSwitcher ? this.renderSwitcher(props, expandedState) : noopSwitcher(),
	      props.checkable ? this.renderCheckbox(props) : null,
	      selectHandle(),
	      newChildren
	    );
	  };
	
	  return TreeNode;
	}(_react2["default"].Component);
	
	TreeNode.isTreeNode = 1;
	
	TreeNode.propTypes = {
	  prefixCls: _react.PropTypes.string,
	  disabled: _react.PropTypes.bool,
	  disableCheckbox: _react.PropTypes.bool,
	  expanded: _react.PropTypes.bool,
	  isLeaf: _react.PropTypes.bool,
	  root: _react.PropTypes.object,
	  onSelect: _react.PropTypes.func
	};
	
	TreeNode.defaultProps = {
	  title: defaultTitle
	};
	
	exports["default"] = TreeNode;
	module.exports = exports['default'];

/***/ }),
/* 598 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _cssAnimation = __webpack_require__(317);
	
	var _cssAnimation2 = _interopRequireDefault(_cssAnimation);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function animate(node, show, done) {
	  var height = void 0;
	  return (0, _cssAnimation2["default"])(node, 'ant-motion-collapse', {
	    start: function start() {
	      if (!show) {
	        node.style.height = node.offsetHeight + 'px';
	      } else {
	        height = node.offsetHeight;
	        node.style.height = 0;
	      }
	    },
	    active: function active() {
	      node.style.height = (show ? height : 0) + 'px';
	    },
	    end: function end() {
	      node.style.height = '';
	      done();
	    }
	  });
	}
	
	var animation = {
	  enter: function enter(node, done) {
	    return animate(node, true, done);
	  },
	  leave: function leave(node, done) {
	    return animate(node, false, done);
	  },
	  appear: function appear(node, done) {
	    return animate(node, true, done);
	  }
	};
	
	exports["default"] = animation;
	module.exports = exports['default'];

/***/ }),
/* 599 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(399);
	
	__webpack_require__(600);
	
	__webpack_require__(601);

/***/ }),
/* 600 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(399);
	
	__webpack_require__(602);

/***/ }),
/* 602 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 603 */,
/* 604 */,
/* 605 */,
/* 606 */,
/* 607 */,
/* 608 */,
/* 609 */,
/* 610 */,
/* 611 */,
/* 612 */,
/* 613 */,
/* 614 */,
/* 615 */,
/* 616 */,
/* 617 */,
/* 618 */,
/* 619 */,
/* 620 */,
/* 621 */,
/* 622 */,
/* 623 */,
/* 624 */,
/* 625 */,
/* 626 */,
/* 627 */,
/* 628 */,
/* 629 */,
/* 630 */,
/* 631 */,
/* 632 */,
/* 633 */,
/* 634 */,
/* 635 */,
/* 636 */,
/* 637 */,
/* 638 */,
/* 639 */,
/* 640 */,
/* 641 */,
/* 642 */,
/* 643 */,
/* 644 */,
/* 645 */,
/* 646 */,
/* 647 */,
/* 648 */,
/* 649 */,
/* 650 */,
/* 651 */,
/* 652 */,
/* 653 */,
/* 654 */,
/* 655 */,
/* 656 */,
/* 657 */,
/* 658 */,
/* 659 */,
/* 660 */,
/* 661 */,
/* 662 */,
/* 663 */,
/* 664 */,
/* 665 */,
/* 666 */,
/* 667 */,
/* 668 */,
/* 669 */,
/* 670 */,
/* 671 */,
/* 672 */,
/* 673 */,
/* 674 */,
/* 675 */,
/* 676 */,
/* 677 */,
/* 678 */,
/* 679 */,
/* 680 */,
/* 681 */,
/* 682 */,
/* 683 */,
/* 684 */,
/* 685 */,
/* 686 */,
/* 687 */,
/* 688 */,
/* 689 */,
/* 690 */,
/* 691 */,
/* 692 */,
/* 693 */,
/* 694 */,
/* 695 */,
/* 696 */,
/* 697 */,
/* 698 */,
/* 699 */,
/* 700 */,
/* 701 */,
/* 702 */,
/* 703 */,
/* 704 */,
/* 705 */,
/* 706 */,
/* 707 */,
/* 708 */,
/* 709 */,
/* 710 */,
/* 711 */,
/* 712 */,
/* 713 */,
/* 714 */,
/* 715 */,
/* 716 */,
/* 717 */,
/* 718 */,
/* 719 */,
/* 720 */,
/* 721 */,
/* 722 */,
/* 723 */,
/* 724 */,
/* 725 */,
/* 726 */,
/* 727 */,
/* 728 */,
/* 729 */,
/* 730 */,
/* 731 */,
/* 732 */,
/* 733 */,
/* 734 */,
/* 735 */,
/* 736 */,
/* 737 */,
/* 738 */,
/* 739 */,
/* 740 */,
/* 741 */,
/* 742 */,
/* 743 */,
/* 744 */,
/* 745 */,
/* 746 */,
/* 747 */,
/* 748 */,
/* 749 */,
/* 750 */,
/* 751 */,
/* 752 */,
/* 753 */,
/* 754 */,
/* 755 */,
/* 756 */,
/* 757 */,
/* 758 */,
/* 759 */,
/* 760 */,
/* 761 */,
/* 762 */,
/* 763 */,
/* 764 */,
/* 765 */,
/* 766 */,
/* 767 */,
/* 768 */,
/* 769 */,
/* 770 */,
/* 771 */,
/* 772 */,
/* 773 */,
/* 774 */,
/* 775 */,
/* 776 */,
/* 777 */,
/* 778 */,
/* 779 */,
/* 780 */,
/* 781 */,
/* 782 */,
/* 783 */,
/* 784 */,
/* 785 */,
/* 786 */,
/* 787 */,
/* 788 */,
/* 789 */,
/* 790 */,
/* 791 */,
/* 792 */,
/* 793 */,
/* 794 */,
/* 795 */,
/* 796 */,
/* 797 */,
/* 798 */,
/* 799 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _progress = __webpack_require__(800);
	
	var _progress2 = _interopRequireDefault(_progress);
	
	var _warning = __webpack_require__(413);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var AntProgress = _progress2["default"];
	
	// For downward compatibility
	AntProgress.Line = function (props) {
	  (0, _warning2["default"])(false, '<Progress.Line /> is deprecated, use <Progress type="line" /> instead.');
	  return _react2["default"].createElement(_progress2["default"], _extends({}, props, { type: 'line' }));
	};
	AntProgress.Circle = function (props) {
	  (0, _warning2["default"])(false, '<Progress.Circle /> is deprecated, use <Progress type="circle" /> instead.');
	  return _react2["default"].createElement(_progress2["default"], _extends({}, props, { type: 'circle' }));
	};
	
	exports["default"] = AntProgress;
	module.exports = exports['default'];

/***/ }),
/* 800 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class, _temp;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _icon = __webpack_require__(394);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _rcProgress = __webpack_require__(801);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var statusColorMap = {
	  normal: '#2db7f5',
	  exception: '#ff5500',
	  success: '#87d068'
	};
	
	var Line = (_temp = _class = function (_React$Component) {
	  _inherits(Line, _React$Component);
	
	  function Line() {
	    _classCallCheck(this, Line);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Line.prototype.render = function render() {
	    var _classNames;
	
	    var _props = this.props,
	        prefixCls = _props.prefixCls,
	        status = _props.status,
	        format = _props.format,
	        percent = _props.percent,
	        trailColor = _props.trailColor,
	        type = _props.type,
	        strokeWidth = _props.strokeWidth,
	        width = _props.width,
	        className = _props.className,
	        showInfo = _props.showInfo,
	        restProps = _objectWithoutProperties(_props, ['prefixCls', 'status', 'format', 'percent', 'trailColor', 'type', 'strokeWidth', 'width', 'className', 'showInfo']);
	
	    var progressStatus = parseInt(percent, 10) >= 100 && !('status' in this.props) ? 'success' : status || 'normal';
	    var progressInfo = void 0;
	    var progress = void 0;
	    var textFormatter = format || function (percentNumber) {
	      return percentNumber + '%';
	    };
	
	    if (showInfo) {
	      var text = void 0;
	      var iconType = type === 'circle' ? '' : '-circle';
	      if (progressStatus === 'exception') {
	        text = format ? textFormatter(percent) : _react2["default"].createElement(_icon2["default"], { type: 'cross' + iconType });
	      } else if (progressStatus === 'success') {
	        text = format ? textFormatter(percent) : _react2["default"].createElement(_icon2["default"], { type: 'check' + iconType });
	      } else {
	        text = textFormatter(percent);
	      }
	      progressInfo = _react2["default"].createElement(
	        'span',
	        { className: prefixCls + '-text' },
	        text
	      );
	    }
	
	    if (type === 'line') {
	      var percentStyle = {
	        width: percent + '%',
	        height: strokeWidth || 10
	      };
	      progress = _react2["default"].createElement(
	        'div',
	        null,
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-outer' },
	          _react2["default"].createElement(
	            'div',
	            { className: prefixCls + '-inner' },
	            _react2["default"].createElement('div', { className: prefixCls + '-bg', style: percentStyle })
	          )
	        ),
	        progressInfo
	      );
	    } else if (type === 'circle') {
	      var circleSize = width || 132;
	      var circleStyle = {
	        width: circleSize,
	        height: circleSize,
	        fontSize: circleSize * 0.16 + 6
	      };
	      progress = _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-inner', style: circleStyle },
	        _react2["default"].createElement(_rcProgress.Circle, { percent: percent, strokeWidth: strokeWidth || 6,
	          strokeColor: statusColorMap[progressStatus], trailColor: trailColor
	        }),
	        progressInfo
	      );
	    }
	
	    var classString = (0, _classnames2["default"])((_classNames = {}, _defineProperty(_classNames, '' + prefixCls, true), _defineProperty(_classNames, prefixCls + '-' + type, true), _defineProperty(_classNames, prefixCls + '-status-' + progressStatus, true), _defineProperty(_classNames, prefixCls + '-show-info', showInfo), _defineProperty(_classNames, className, !!className), _classNames));
	
	    return _react2["default"].createElement(
	      'div',
	      _extends({}, restProps, { className: classString }),
	      progress
	    );
	  };
	
	  return Line;
	}(_react2["default"].Component), _class.defaultProps = {
	  type: 'line',
	  percent: 0,
	  showInfo: true,
	  trailColor: '#f3f3f3',
	  prefixCls: 'ant-progress'
	}, _class.propTypes = {
	  status: _react.PropTypes.oneOf(['normal', 'exception', 'active', 'success']),
	  type: _react.PropTypes.oneOf(['line', 'circle']),
	  showInfo: _react.PropTypes.bool,
	  percent: _react.PropTypes.number,
	  width: _react.PropTypes.number,
	  strokeWidth: _react.PropTypes.number,
	  trailColor: _react.PropTypes.string,
	  format: _react.PropTypes.func
	}, _temp);
	exports["default"] = Line;
	module.exports = exports['default'];

/***/ }),
/* 801 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(802);

/***/ }),
/* 802 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var assign = __webpack_require__(165);
	var React = __webpack_require__(1);
	var defaultProps = {
	  strokeWidth: 1,
	  strokeColor: '#3FC7FA',
	  trailWidth: 1,
	  trailColor: '#D9D9D9'
	};
	
	var Line = React.createClass({
	  displayName: 'Line',
	
	  render: function render() {
	    var props = assign({}, this.props);
	    var pathStyle = {
	      'strokeDasharray': '100px, 100px',
	      'strokeDashoffset': 100 - props.percent + 'px',
	      'transition': 'stroke-dashoffset 0.6s ease 0s, stroke 0.6s linear'
	    };
	
	    ['strokeWidth', 'strokeColor', 'trailWidth', 'trailColor'].forEach(function (item) {
	      if (item === 'trailWidth' && !props.trailWidth && props.strokeWidth) {
	        props.trailWidth = props.strokeWidth;
	        return;
	      }
	      if (item === 'strokeWidth' && props.strokeWidth && (!parseFloat(props.strokeWidth) || parseFloat(props.strokeWidth) > 100 || parseFloat(props.strokeWidth) < 0)) {
	        props[item] = defaultProps[item];
	        return;
	      }
	      if (!props[item]) {
	        props[item] = defaultProps[item];
	      }
	    });
	
	    var strokeWidth = props.strokeWidth;
	    var center = strokeWidth / 2;
	    var right = 100 - strokeWidth / 2;
	    var pathString = 'M ' + center + ',' + center + ' L ' + right + ',' + center;
	    var viewBoxString = '0 0 100 ' + strokeWidth;
	
	    return React.createElement(
	      'svg',
	      { className: "rc-progress-line", viewBox: viewBoxString, preserveAspectRatio: "none" },
	      React.createElement('path', { className: "rc-progress-line-trail", d: pathString, strokeLinecap: "round",
	        stroke: props.trailColor, strokeWidth: props.trailWidth, fillOpacity: "0" }),
	      React.createElement('path', { className: "rc-progress-line-path", d: pathString, strokeLinecap: "round",
	        stroke: props.strokeColor, strokeWidth: props.strokeWidth, fillOpacity: "0", style: pathStyle })
	    );
	  }
	});
	
	var Circle = React.createClass({
	  displayName: 'Circle',
	
	  render: function render() {
	    var props = assign({}, this.props);
	    var strokeWidth = props.strokeWidth;
	    var radius = 50 - strokeWidth / 2;
	    var pathString = 'M 50,50 m 0,-' + radius + '\n     a ' + radius + ',' + radius + ' 0 1 1 0,' + 2 * radius + '\n     a ' + radius + ',' + radius + ' 0 1 1 0,-' + 2 * radius;
	    var len = Math.PI * 2 * radius;
	    var pathStyle = {
	      'strokeDasharray': len + 'px ' + len + 'px',
	      'strokeDashoffset': (100 - props.percent) / 100 * len + 'px',
	      'transition': 'stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease'
	    };
	    ['strokeWidth', 'strokeColor', 'trailWidth', 'trailColor'].forEach(function (item) {
	      if (item === 'trailWidth' && !props.trailWidth && props.strokeWidth) {
	        props.trailWidth = props.strokeWidth;
	        return;
	      }
	      if (!props[item]) {
	        props[item] = defaultProps[item];
	      }
	    });
	
	    return React.createElement(
	      'svg',
	      { className: 'rc-progress-circle', viewBox: '0 0 100 100' },
	      React.createElement('path', { className: 'rc-progress-circle-trail', d: pathString, stroke: props.trailColor,
	        strokeWidth: props.trailWidth, fillOpacity: '0' }),
	      React.createElement('path', { className: 'rc-progress-circle-path', d: pathString, strokeLinecap: 'round',
	        stroke: props.strokeColor, strokeWidth: props.strokeWidth, fillOpacity: '0', style: pathStyle })
	    );
	  }
	});
	
	module.exports = {
	  Line: Line,
	  Circle: Circle
	};

/***/ }),
/* 803 */,
/* 804 */,
/* 805 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _radio = __webpack_require__(806);
	
	var _radio2 = _interopRequireDefault(_radio);
	
	var _group = __webpack_require__(812);
	
	var _group2 = _interopRequireDefault(_group);
	
	var _radioButton = __webpack_require__(813);
	
	var _radioButton2 = _interopRequireDefault(_radioButton);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	_radio2["default"].Button = _radioButton2["default"];
	_radio2["default"].Group = _group2["default"];
	exports["default"] = _radio2["default"];
	module.exports = exports['default'];

/***/ }),
/* 806 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class, _temp;
	
	var _rcRadio = __webpack_require__(807);
	
	var _rcRadio2 = _interopRequireDefault(_rcRadio);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _reactAddonsPureRenderMixin = __webpack_require__(568);
	
	var _reactAddonsPureRenderMixin2 = _interopRequireDefault(_reactAddonsPureRenderMixin);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Radio = (_temp = _class = function (_React$Component) {
	  _inherits(Radio, _React$Component);
	
	  function Radio() {
	    _classCallCheck(this, Radio);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Radio.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _reactAddonsPureRenderMixin2["default"].shouldComponentUpdate.apply(this, args);
	  };
	
	  Radio.prototype.render = function render() {
	    var _classNames, _classNames2;
	
	    var _props = this.props,
	        prefixCls = _props.prefixCls,
	        children = _props.children,
	        checked = _props.checked,
	        disabled = _props.disabled,
	        className = _props.className,
	        style = _props.style;
	
	    var wrapperClassString = (0, _classnames2["default"])((_classNames = {}, _defineProperty(_classNames, prefixCls + '-wrapper', true), _defineProperty(_classNames, prefixCls + '-wrapper-checked', checked), _defineProperty(_classNames, prefixCls + '-wrapper-disabled', disabled), _defineProperty(_classNames, className, !!className), _classNames));
	    var classString = (0, _classnames2["default"])((_classNames2 = {}, _defineProperty(_classNames2, '' + prefixCls, true), _defineProperty(_classNames2, prefixCls + '-checked', checked), _defineProperty(_classNames2, prefixCls + '-disabled', disabled), _classNames2));
	    return _react2["default"].createElement(
	      'label',
	      { className: wrapperClassString, style: style },
	      _react2["default"].createElement(_rcRadio2["default"], _extends({}, this.props, { className: classString, style: null, children: null })),
	      children ? _react2["default"].createElement(
	        'span',
	        null,
	        children
	      ) : null
	    );
	  };
	
	  return Radio;
	}(_react2["default"].Component), _class.defaultProps = {
	  prefixCls: 'ant-radio'
	}, _temp);
	exports["default"] = Radio;
	module.exports = exports['default'];

/***/ }),
/* 807 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Radio = __webpack_require__(808);
	
	var _Radio2 = _interopRequireDefault(_Radio);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = _Radio2["default"];
	module.exports = exports['default'];

/***/ }),
/* 808 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _rcCheckbox = __webpack_require__(809);
	
	var _rcCheckbox2 = _interopRequireDefault(_rcCheckbox);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Radio = function (_React$Component) {
	  _inherits(Radio, _React$Component);
	
	  function Radio() {
	    _classCallCheck(this, Radio);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Radio.prototype.render = function render() {
	    return _react2["default"].createElement(_rcCheckbox2["default"], _extends({}, this.props, { ref: 'checkbox' }));
	  };
	
	  return Radio;
	}(_react2["default"].Component);
	
	Radio.defaultProps = {
	  prefixCls: 'rc-radio',
	  type: 'radio'
	};
	exports["default"] = Radio;
	module.exports = exports['default'];

/***/ }),
/* 809 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(810);

/***/ }),
/* 810 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _PureRenderMixin = __webpack_require__(811);
	
	var _PureRenderMixin2 = _interopRequireDefault(_PureRenderMixin);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Checkbox = function (_React$Component) {
	  _inherits(Checkbox, _React$Component);
	
	  function Checkbox(props) {
	    _classCallCheck(this, Checkbox);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));
	
	    _this.handleFocus = function (e) {
	      _this.setState({ focus: true });
	      _this.props.onFocus(e);
	    };
	
	    _this.handleBlur = function (e) {
	      _this.setState({ focus: false });
	      _this.props.onBlur(e);
	    };
	
	    _this.handleChange = function (e) {
	      if (_this.props.disabled) {
	        return;
	      }
	      if (!('checked' in _this.props)) {
	        _this.setState({
	          checked: e.target.checked
	        });
	      }
	      _this.props.onChange({
	        target: _extends({}, _this.props, {
	          checked: e.target.checked
	        }),
	        stopPropagation: function stopPropagation() {
	          e.stopPropagation();
	        },
	        preventDefault: function preventDefault() {
	          e.preventDefault();
	        }
	      });
	    };
	
	    var checked = false;
	    if ('checked' in props) {
	      checked = props.checked;
	    } else {
	      checked = props.defaultChecked;
	    }
	    _this.state = {
	      checked: checked,
	      focus: false
	    };
	    return _this;
	  }
	
	  Checkbox.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if ('checked' in nextProps) {
	      this.setState({
	        checked: nextProps.checked
	      });
	    }
	  };
	
	  Checkbox.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _PureRenderMixin2["default"].shouldComponentUpdate.apply(this, args);
	  };
	
	  Checkbox.prototype.render = function render() {
	    var _classNames;
	
	    var props = _extends({}, this.props);
	    // Remove React warning.
	    // Warning: Input elements must be either controlled or uncontrolled
	    // (specify either the value prop, or the defaultValue prop, but not both).
	    delete props.defaultChecked;
	
	    var state = this.state;
	    var prefixCls = props.prefixCls;
	    var checked = state.checked;
	    if (typeof checked === 'boolean') {
	      checked = checked ? 1 : 0;
	    }
	    var className = (0, _classnames2["default"])((_classNames = {}, _defineProperty(_classNames, props.className, !!props.className), _defineProperty(_classNames, prefixCls, 1), _defineProperty(_classNames, prefixCls + '-checked', checked), _defineProperty(_classNames, prefixCls + '-checked-' + checked, !!checked), _defineProperty(_classNames, prefixCls + '-focused', state.focus), _defineProperty(_classNames, prefixCls + '-disabled', props.disabled), _classNames));
	    return _react2["default"].createElement(
	      'span',
	      {
	        className: className,
	        style: props.style
	      },
	      _react2["default"].createElement('span', { className: prefixCls + '-inner' }),
	      _react2["default"].createElement('input', {
	        name: props.name,
	        type: props.type,
	        readOnly: props.readOnly,
	        disabled: props.disabled,
	        tabIndex: props.tabIndex,
	        className: prefixCls + '-input',
	        checked: !!checked,
	        onClick: this.props.onClick,
	        onFocus: this.handleFocus,
	        onBlur: this.handleBlur,
	        onChange: this.handleChange
	      })
	    );
	  };
	
	  return Checkbox;
	}(_react2["default"].Component);
	
	Checkbox.propTypes = {
	  name: _react2["default"].PropTypes.string,
	  prefixCls: _react2["default"].PropTypes.string,
	  style: _react2["default"].PropTypes.object,
	  type: _react2["default"].PropTypes.string,
	  className: _react2["default"].PropTypes.string,
	  defaultChecked: _react2["default"].PropTypes.oneOfType([_react2["default"].PropTypes.number, _react2["default"].PropTypes.bool]),
	  disabled: _react2["default"].PropTypes.bool,
	  checked: _react2["default"].PropTypes.oneOfType([_react2["default"].PropTypes.number, _react2["default"].PropTypes.bool]),
	  onFocus: _react2["default"].PropTypes.func,
	  onBlur: _react2["default"].PropTypes.func,
	  onChange: _react2["default"].PropTypes.func,
	  onClick: _react2["default"].PropTypes.func
	};
	Checkbox.defaultProps = {
	  prefixCls: 'rc-checkbox',
	  style: {},
	  type: 'checkbox',
	  className: '',
	  defaultChecked: false,
	  onFocus: function onFocus() {},
	  onBlur: function onBlur() {},
	  onChange: function onChange() {}
	};
	exports["default"] = Checkbox;
	module.exports = exports['default'];

/***/ }),
/* 811 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentWithPureRenderMixin
	 */
	
	var shallowEqual = __webpack_require__(414);
	
	function shallowCompare(instance, nextProps, nextState) {
	  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);
	}
	
	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 *
	 * See https://facebook.github.io/react/docs/pure-render-mixin.html
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
	    return shallowCompare(this, nextProps, nextState);
	  }
	};
	
	module.exports = ReactComponentWithPureRenderMixin;

/***/ }),
/* 812 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class, _temp;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _radio = __webpack_require__(806);
	
	var _radio2 = _interopRequireDefault(_radio);
	
	var _radioButton = __webpack_require__(813);
	
	var _radioButton2 = _interopRequireDefault(_radioButton);
	
	var _reactAddonsPureRenderMixin = __webpack_require__(568);
	
	var _reactAddonsPureRenderMixin2 = _interopRequireDefault(_reactAddonsPureRenderMixin);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	function getCheckedValue(children) {
	  var value = null;
	  var matched = false;
	  _react2["default"].Children.forEach(children, function (radio) {
	    if (radio && radio.props && radio.props.checked) {
	      value = radio.props.value;
	      matched = true;
	    }
	  });
	  return matched ? { value: value } : undefined;
	}
	
	var RadioGroup = (_temp = _class = function (_React$Component) {
	  _inherits(RadioGroup, _React$Component);
	
	  function RadioGroup(props) {
	    _classCallCheck(this, RadioGroup);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));
	
	    _this.onRadioChange = function (ev) {
	      if (!('value' in _this.props)) {
	        _this.setState({
	          value: ev.target.value
	        });
	      }
	      _this.props.onChange(ev);
	    };
	
	    var value = void 0;
	    if ('value' in props) {
	      value = props.value;
	    } else if ('defaultValue' in props) {
	      value = props.defaultValue;
	    } else {
	      var checkedValue = getCheckedValue(props.children);
	      value = checkedValue && checkedValue.value;
	    }
	    _this.state = {
	      value: value
	    };
	    return _this;
	  }
	
	  RadioGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if ('value' in nextProps) {
	      this.setState({
	        value: nextProps.value
	      });
	    } else {
	      var checkedValue = getCheckedValue(nextProps.children);
	      if (checkedValue) {
	        this.setState({
	          value: checkedValue.value
	        });
	      }
	    }
	  };
	
	  RadioGroup.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _reactAddonsPureRenderMixin2["default"].shouldComponentUpdate.apply(this, args);
	  };
	
	  RadioGroup.prototype.render = function render() {
	    var _this2 = this,
	        _classNames;
	
	    var props = this.props;
	    var children = _react2["default"].Children.map(props.children, function (radio) {
	      if (radio && (radio.type === _radio2["default"] || radio.type === _radioButton2["default"]) && radio.props) {
	        var keyProps = {};
	        if (!('key' in radio) && typeof radio.props.value === 'string') {
	          keyProps.key = radio.props.value;
	        }
	        return _react2["default"].cloneElement(radio, _extends({}, keyProps, radio.props, {
	          onChange: _this2.onRadioChange,
	          checked: _this2.state.value === radio.props.value,
	          disabled: radio.props.disabled || _this2.props.disabled
	        }));
	      }
	      return radio;
	    });
	    var classString = (0, _classnames2["default"])((_classNames = {}, _defineProperty(_classNames, props.prefixCls, true), _defineProperty(_classNames, props.prefixCls + '-' + props.size, props.size), _classNames));
	    return _react2["default"].createElement(
	      'div',
	      { className: classString, style: props.style },
	      children
	    );
	  };
	
	  return RadioGroup;
	}(_react2["default"].Component), _class.defaultProps = {
	  prefixCls: 'ant-radio-group',
	  disabled: false,
	  onChange: function onChange() {}
	}, _temp);
	exports["default"] = RadioGroup;
	module.exports = exports['default'];

/***/ }),
/* 813 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _class, _temp;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _radio = __webpack_require__(806);
	
	var _radio2 = _interopRequireDefault(_radio);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var RadioButton = (_temp = _class = function (_React$Component) {
	  _inherits(RadioButton, _React$Component);
	
	  function RadioButton() {
	    _classCallCheck(this, RadioButton);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  RadioButton.prototype.render = function render() {
	    return _react2["default"].createElement(_radio2["default"], this.props);
	  };
	
	  return RadioButton;
	}(_react2["default"].Component), _class.defaultProps = {
	  prefixCls: 'ant-radio-button'
	}, _temp);
	exports["default"] = RadioButton;
	module.exports = exports['default'];

/***/ }),
/* 814 */,
/* 815 */,
/* 816 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(399);
	
	__webpack_require__(817);

/***/ }),
/* 817 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 818 */,
/* 819 */,
/* 820 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(399);
	
	__webpack_require__(821);

/***/ }),
/* 821 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 822 */,
/* 823 */,
/* 824 */,
/* 825 */,
/* 826 */,
/* 827 */,
/* 828 */,
/* 829 */,
/* 830 */,
/* 831 */,
/* 832 */,
/* 833 */,
/* 834 */,
/* 835 */,
/* 836 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Table = __webpack_require__(837);
	
	var _Table2 = _interopRequireDefault(_Table);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = _Table2["default"];
	module.exports = exports['default'];

/***/ }),
/* 837 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class, _temp, _initialiseProps;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _rcTable = __webpack_require__(838);
	
	var _rcTable2 = _interopRequireDefault(_rcTable);
	
	var _checkbox = __webpack_require__(845);
	
	var _checkbox2 = _interopRequireDefault(_checkbox);
	
	var _radio = __webpack_require__(805);
	
	var _radio2 = _interopRequireDefault(_radio);
	
	var _filterDropdown = __webpack_require__(847);
	
	var _filterDropdown2 = _interopRequireDefault(_filterDropdown);
	
	var _pagination = __webpack_require__(848);
	
	var _pagination2 = _interopRequireDefault(_pagination);
	
	var _icon = __webpack_require__(394);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _spin = __webpack_require__(858);
	
	var _spin2 = _interopRequireDefault(_spin);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _util = __webpack_require__(860);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	function noop() {}
	
	function stopPropagation(e) {
	  e.stopPropagation();
	  if (e.nativeEvent.stopImmediatePropagation) {
	    e.nativeEvent.stopImmediatePropagation();
	  }
	}
	
	var defaultLocale = {
	  filterTitle: '筛选',
	  filterConfirm: '确定',
	  filterReset: '重置',
	  emptyText: _react2["default"].createElement(
	    'span',
	    null,
	    _react2["default"].createElement(_icon2["default"], { type: 'frown' }),
	    '\u6682\u65E0\u6570\u636E'
	  )
	};
	
	var defaultPagination = {
	  onChange: noop,
	  onShowSizeChange: noop
	};
	
	var Table = (_temp = _class = function (_React$Component) {
	  _inherits(Table, _React$Component);
	
	  function Table(props) {
	    _classCallCheck(this, Table);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));
	
	    _initialiseProps.call(_this);
	
	    var pagination = props.pagination || {};
	
	    _this.state = _extends({
	      // 减少状态
	      selectedRowKeys: (props.rowSelection || {}).selectedRowKeys || [],
	      filters: _this.getFiltersFromColumns(),
	      selectionDirty: false
	    }, _this.getSortStateFromColumns(), {
	      pagination: _this.hasPagination() ? _extends({}, defaultPagination, pagination, {
	        current: pagination.defaultCurrent || pagination.current || 1,
	        pageSize: pagination.defaultPageSize || pagination.pageSize || 10
	      }) : {}
	    });
	
	    _this.CheckboxPropsCache = {};
	    return _this;
	  }
	
	  Table.prototype.getCheckboxPropsByItem = function getCheckboxPropsByItem(item) {
	    var _props$rowSelection = this.props.rowSelection,
	        rowSelection = _props$rowSelection === undefined ? {} : _props$rowSelection;
	
	    if (!rowSelection.getCheckboxProps) {
	      return {};
	    }
	    var key = this.getRecordKey(item);
	    // Cache checkboxProps
	    if (!this.CheckboxPropsCache[key]) {
	      this.CheckboxPropsCache[key] = rowSelection.getCheckboxProps(item);
	    }
	    return this.CheckboxPropsCache[key];
	  };
	
	  Table.prototype.getDefaultSelection = function getDefaultSelection() {
	    var _this2 = this;
	
	    var _props$rowSelection2 = this.props.rowSelection,
	        rowSelection = _props$rowSelection2 === undefined ? {} : _props$rowSelection2;
	
	    if (!rowSelection.getCheckboxProps) {
	      return [];
	    }
	    return this.getFlatData().filter(function (item) {
	      return _this2.getCheckboxPropsByItem(item).defaultChecked;
	    }).map(function (record, rowIndex) {
	      return _this2.getRecordKey(record, rowIndex);
	    });
	  };
	
	  Table.prototype.getLocale = function getLocale() {
	    var locale = {};
	    if (this.context.antLocale && this.context.antLocale.Table) {
	      locale = this.context.antLocale.Table;
	    }
	    return _extends({}, defaultLocale, locale, this.props.locale);
	  };
	
	  Table.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this3 = this;
	
	    if ('pagination' in nextProps && nextProps.pagination !== false) {
	      this.setState(function (previousState) {
	        var newPagination = _extends({}, defaultPagination, previousState.pagination, nextProps.pagination);
	        newPagination.current = newPagination.current || 1;
	        return { pagination: newPagination };
	      });
	    }
	    // dataSource 的变化会清空选中项
	    if ('dataSource' in nextProps && nextProps.dataSource !== this.props.dataSource) {
	      this.setState({
	        selectionDirty: false
	      });
	      this.CheckboxPropsCache = {};
	    }
	    if (nextProps.rowSelection && 'selectedRowKeys' in nextProps.rowSelection) {
	      this.setState({
	        selectedRowKeys: nextProps.rowSelection.selectedRowKeys || []
	      });
	      var rowSelection = this.props.rowSelection;
	
	      if (rowSelection && nextProps.rowSelection.getCheckboxProps !== rowSelection.getCheckboxProps) {
	        this.CheckboxPropsCache = {};
	      }
	    }
	
	    if (this.getSortOrderColumns(nextProps.columns).length > 0) {
	      var sortState = this.getSortStateFromColumns(nextProps.columns);
	      if (sortState.sortColumn !== this.state.sortColumn || sortState.sortOrder !== this.state.sortOrder) {
	        this.setState(sortState);
	      }
	    }
	
	    var filteredValueColumns = this.getFilteredValueColumns(nextProps.columns);
	    if (filteredValueColumns.length > 0) {
	      (function () {
	        var filtersFromColumns = _this3.getFiltersFromColumns(nextProps.columns);
	        var newFilters = _extends({}, _this3.state.filters);
	        Object.keys(filtersFromColumns).forEach(function (key) {
	          newFilters[key] = filtersFromColumns[key];
	        });
	        if (_this3.isFiltersChanged(newFilters)) {
	          _this3.setState({ filters: newFilters });
	        }
	      })();
	    }
	  };
	
	  Table.prototype.setSelectedRowKeys = function setSelectedRowKeys(selectedRowKeys, _ref) {
	    var _this4 = this;
	
	    var selectWay = _ref.selectWay,
	        record = _ref.record,
	        checked = _ref.checked,
	        changeRowKeys = _ref.changeRowKeys;
	    var _props$rowSelection3 = this.props.rowSelection,
	        rowSelection = _props$rowSelection3 === undefined ? {} : _props$rowSelection3;
	
	    if (rowSelection && !('selectedRowKeys' in rowSelection)) {
	      this.setState({ selectedRowKeys: selectedRowKeys });
	    }
	    var data = this.getFlatData();
	    if (!rowSelection.onChange && !rowSelection[selectWay]) {
	      return;
	    }
	    var selectedRows = data.filter(function (row, i) {
	      return selectedRowKeys.indexOf(_this4.getRecordKey(row, i)) >= 0;
	    });
	    if (rowSelection.onChange) {
	      rowSelection.onChange(selectedRowKeys, selectedRows);
	    }
	    if (selectWay === 'onSelect' && rowSelection.onSelect) {
	      rowSelection.onSelect(record, checked, selectedRows);
	    } else if (selectWay === 'onSelectAll' && rowSelection.onSelectAll) {
	      var changeRows = data.filter(function (row, i) {
	        return changeRowKeys.indexOf(_this4.getRecordKey(row, i)) >= 0;
	      });
	      rowSelection.onSelectAll(checked, selectedRows, changeRows);
	    }
	  };
	
	  Table.prototype.hasPagination = function hasPagination() {
	    return this.props.pagination !== false;
	  };
	
	  Table.prototype.isFiltersChanged = function isFiltersChanged(filters) {
	    var _this5 = this;
	
	    var filtersChanged = false;
	    if (Object.keys(filters).length !== Object.keys(this.state.filters).length) {
	      filtersChanged = true;
	    } else {
	      Object.keys(filters).forEach(function (columnKey) {
	        if (filters[columnKey] !== _this5.state.filters[columnKey]) {
	          filtersChanged = true;
	        }
	      });
	    }
	    return filtersChanged;
	  };
	
	  Table.prototype.getSortOrderColumns = function getSortOrderColumns(columns) {
	    return (columns || this.props.columns || []).filter(function (column) {
	      return 'sortOrder' in column;
	    });
	  };
	
	  Table.prototype.getFilteredValueColumns = function getFilteredValueColumns(columns) {
	    return (columns || this.props.columns || []).filter(function (column) {
	      return 'filteredValue' in column;
	    });
	  };
	
	  Table.prototype.getFiltersFromColumns = function getFiltersFromColumns(columns) {
	    var _this6 = this;
	
	    var filters = {};
	    this.getFilteredValueColumns(columns).forEach(function (col) {
	      filters[_this6.getColumnKey(col)] = col.filteredValue;
	    });
	    return filters;
	  };
	
	  Table.prototype.getSortStateFromColumns = function getSortStateFromColumns(columns) {
	    // return fisrt column which sortOrder is not falsy
	    var sortedColumn = this.getSortOrderColumns(columns).filter(function (col) {
	      return col.sortOrder;
	    })[0];
	    if (sortedColumn) {
	      return {
	        sortColumn: sortedColumn,
	        sortOrder: sortedColumn.sortOrder
	      };
	    }
	    return {
	      sortColumn: null,
	      sortOrder: null
	    };
	  };
	
	  Table.prototype.getSorterFn = function getSorterFn() {
	    var _state = this.state,
	        sortOrder = _state.sortOrder,
	        sortColumn = _state.sortColumn;
	
	    if (!sortOrder || !sortColumn || typeof sortColumn.sorter !== 'function') {
	      return;
	    }
	    return function (a, b) {
	      var result = sortColumn.sorter(a, b);
	      if (result !== 0) {
	        return sortOrder === 'descend' ? -result : result;
	      }
	      return 0;
	    };
	  };
	
	  Table.prototype.toggleSortOrder = function toggleSortOrder(order, column) {
	    var _props;
	
	    var _state2 = this.state,
	        sortColumn = _state2.sortColumn,
	        sortOrder = _state2.sortOrder;
	    // 只同时允许一列进行排序，否则会导致排序顺序的逻辑问题
	
	    var isSortColumn = this.isSortColumn(column);
	    if (!isSortColumn) {
	      // 当前列未排序
	      sortOrder = order;
	      sortColumn = column;
	    } else {
	      // 当前列已排序
	      if (sortOrder === order) {
	        // 切换为未排序状态
	        sortOrder = '';
	        sortColumn = null;
	      } else {
	        // 切换为排序状态
	        sortOrder = order;
	      }
	    }
	    var newState = {
	      sortOrder: sortOrder,
	      sortColumn: sortColumn
	    };
	
	    // Controlled
	    if (this.getSortOrderColumns().length === 0) {
	      this.setState(newState);
	    }
	
	    (_props = this.props).onChange.apply(_props, _toConsumableArray(this.prepareParamsArguments(_extends({}, this.state, newState))));
	  };
	
	  Table.prototype.getRecordKey = function getRecordKey(record, index) {
	    var rowKey = this.props.rowKey;
	
	    if (typeof rowKey === 'function') {
	      return rowKey(record, index);
	    }
	    return record[rowKey] || index;
	  };
	
	  Table.prototype.renderRowSelection = function renderRowSelection() {
	    var _this7 = this;
	
	    var _props2 = this.props,
	        prefixCls = _props2.prefixCls,
	        rowSelection = _props2.rowSelection;
	
	    var columns = this.props.columns.concat();
	    if (rowSelection) {
	      var data = this.getFlatCurrentPageData().filter(function (item) {
	        if (rowSelection.getCheckboxProps) {
	          return !_this7.getCheckboxPropsByItem(item).disabled;
	        }
	        return true;
	      });
	      var checked = void 0;
	      if (!data.length) {
	        checked = false;
	      } else {
	        checked = this.state.selectionDirty ? data.every(function (item, i) {
	          return _this7.state.selectedRowKeys.indexOf(_this7.getRecordKey(item, i)) >= 0;
	        }) : data.every(function (item, i) {
	          return _this7.state.selectedRowKeys.indexOf(_this7.getRecordKey(item, i)) >= 0;
	        }) || data.every(function (item) {
	          return _this7.getCheckboxPropsByItem(item).defaultChecked;
	        });
	      }
	      var selectionColumn = {
	        key: 'selection-column',
	        render: this.renderSelectionRadio,
	        className: prefixCls + '-selection-column'
	      };
	      if (rowSelection.type !== 'radio') {
	        var checkboxAllDisabled = data.every(function (item) {
	          return _this7.getCheckboxPropsByItem(item).disabled;
	        });
	        selectionColumn.render = this.renderSelectionCheckBox;
	        selectionColumn.title = _react2["default"].createElement(_checkbox2["default"], { checked: checked,
	          disabled: checkboxAllDisabled,
	          onChange: this.handleSelectAllRow
	        });
	      }
	      if (columns.some(function (column) {
	        return column.fixed === 'left' || column.fixed === true;
	      })) {
	        selectionColumn.fixed = 'left';
	      }
	      if (columns[0] && columns[0].key === 'selection-column') {
	        columns[0] = selectionColumn;
	      } else {
	        columns.unshift(selectionColumn);
	      }
	    }
	    return columns;
	  };
	
	  Table.prototype.getColumnKey = function getColumnKey(column, index) {
	    return column.key || column.dataIndex || index;
	  };
	
	  Table.prototype.getMaxCurrent = function getMaxCurrent(total) {
	    var _state$pagination = this.state.pagination,
	        current = _state$pagination.current,
	        pageSize = _state$pagination.pageSize;
	
	    if ((current - 1) * pageSize >= total) {
	      return current - 1;
	    }
	    return current;
	  };
	
	  Table.prototype.isSortColumn = function isSortColumn(column) {
	    var sortColumn = this.state.sortColumn;
	
	    if (!column || !sortColumn) {
	      return false;
	    }
	    return this.getColumnKey(sortColumn) === this.getColumnKey(column);
	  };
	
	  Table.prototype.renderColumnsDropdown = function renderColumnsDropdown(columns) {
	    var _this8 = this;
	
	    var _props3 = this.props,
	        prefixCls = _props3.prefixCls,
	        dropdownPrefixCls = _props3.dropdownPrefixCls;
	    var sortOrder = this.state.sortOrder;
	
	    var locale = this.getLocale();
	    return columns.map(function (originColumn, i) {
	      var column = _extends({}, originColumn);
	      var key = _this8.getColumnKey(column, i);
	      var filterDropdown = void 0;
	      var sortButton = void 0;
	      if (column.filters && column.filters.length > 0 || column.filterDropdown) {
	        var colFilters = _this8.state.filters[key] || [];
	        filterDropdown = _react2["default"].createElement(_filterDropdown2["default"], {
	          locale: locale,
	          column: column,
	          selectedKeys: colFilters,
	          confirmFilter: _this8.handleFilter,
	          prefixCls: prefixCls + '-filter',
	          dropdownPrefixCls: dropdownPrefixCls || 'ant-dropdown'
	        });
	      }
	      if (column.sorter) {
	        var isSortColumn = _this8.isSortColumn(column);
	        if (isSortColumn) {
	          column.className = column.className || '';
	          if (sortOrder) {
	            column.className += ' ' + prefixCls + '-column-sort';
	          }
	        }
	        var isAscend = isSortColumn && sortOrder === 'ascend';
	        var isDescend = isSortColumn && sortOrder === 'descend';
	        sortButton = _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-column-sorter' },
	          _react2["default"].createElement(
	            'span',
	            { className: prefixCls + '-column-sorter-up ' + (isAscend ? 'on' : 'off'),
	              title: '\u2191',
	              onClick: function onClick() {
	                return _this8.toggleSortOrder('ascend', column);
	              }
	            },
	            _react2["default"].createElement(_icon2["default"], { type: 'caret-up' })
	          ),
	          _react2["default"].createElement(
	            'span',
	            { className: prefixCls + '-column-sorter-down ' + (isDescend ? 'on' : 'off'),
	              title: '\u2193',
	              onClick: function onClick() {
	                return _this8.toggleSortOrder('descend', column);
	              }
	            },
	            _react2["default"].createElement(_icon2["default"], { type: 'caret-down' })
	          )
	        );
	      }
	      column.title = _react2["default"].createElement(
	        'span',
	        null,
	        column.title,
	        sortButton,
	        filterDropdown
	      );
	      return column;
	    });
	  };
	
	  Table.prototype.renderPagination = function renderPagination() {
	    // 强制不需要分页
	    if (!this.hasPagination()) {
	      return null;
	    }
	    var size = 'default';
	    var pagination = this.state.pagination;
	
	    if (pagination.size) {
	      size = pagination.size;
	    } else if (this.props.size === 'middle' || this.props.size === 'small') {
	      size = 'small';
	    }
	    var total = pagination.total || this.getLocalData().length;
	    return total > 0 ? _react2["default"].createElement(_pagination2["default"], _extends({}, pagination, {
	      className: this.props.prefixCls + '-pagination',
	      onChange: this.handlePageChange,
	      total: total,
	      size: size,
	      current: this.getMaxCurrent(total),
	      onShowSizeChange: this.handleShowSizeChange
	    })) : null;
	  };
	
	  Table.prototype.prepareParamsArguments = function prepareParamsArguments(state) {
	    // 准备筛选、排序、分页的参数
	    var pagination = state.pagination;
	    var filters = state.filters;
	    var sorter = {};
	    if (state.sortColumn && state.sortOrder) {
	      sorter.column = state.sortColumn;
	      sorter.order = state.sortOrder;
	      sorter.field = state.sortColumn.dataIndex;
	      sorter.columnKey = this.getColumnKey(state.sortColumn);
	    }
	    return [pagination, filters, sorter];
	  };
	
	  Table.prototype.findColumn = function findColumn(myKey) {
	    var _this9 = this;
	
	    return this.props.columns.filter(function (c) {
	      return _this9.getColumnKey(c) === myKey;
	    })[0];
	  };
	
	  Table.prototype.getCurrentPageData = function getCurrentPageData() {
	    var data = this.getLocalData();
	    var current = void 0;
	    var pageSize = void 0;
	    var state = this.state;
	    // 如果没有分页的话，默认全部展示
	    if (!this.hasPagination()) {
	      pageSize = Number.MAX_VALUE;
	      current = 1;
	    } else {
	      pageSize = state.pagination.pageSize;
	      current = this.getMaxCurrent(state.pagination.total || data.length);
	    }
	
	    // 分页
	    // ---
	    // 当数据量少于等于每页数量时，直接设置数据
	    // 否则进行读取分页数据
	    if (data.length > pageSize || pageSize === Number.MAX_VALUE) {
	      data = data.filter(function (item, i) {
	        return i >= (current - 1) * pageSize && i < current * pageSize;
	      });
	    }
	    return data;
	  };
	
	  Table.prototype.getFlatData = function getFlatData() {
	    return (0, _util.flatArray)(this.getLocalData());
	  };
	
	  Table.prototype.getFlatCurrentPageData = function getFlatCurrentPageData() {
	    return (0, _util.flatArray)(this.getCurrentPageData());
	  };
	
	  Table.prototype.recursiveSort = function recursiveSort(data, sorterFn) {
	    var _this10 = this;
	
	    var childrenColumnName = this.props.childrenColumnName;
	
	    return data.sort(sorterFn).map(function (item) {
	      return item[childrenColumnName] ? _extends({}, item, _defineProperty({}, childrenColumnName, _this10.recursiveSort(item[childrenColumnName], sorterFn))) : item;
	    });
	  };
	
	  Table.prototype.getLocalData = function getLocalData() {
	    var _this11 = this;
	
	    var state = this.state;
	    var dataSource = this.props.dataSource;
	
	    var data = dataSource || [];
	    // 优化本地排序
	    data = data.slice(0);
	    var sorterFn = this.getSorterFn();
	    if (sorterFn) {
	      data = this.recursiveSort(data, sorterFn);
	    }
	    // 筛选
	    if (state.filters) {
	      Object.keys(state.filters).forEach(function (columnKey) {
	        var col = _this11.findColumn(columnKey);
	        if (!col) {
	          return;
	        }
	        var values = state.filters[columnKey] || [];
	        if (values.length === 0) {
	          return;
	        }
	        data = col.onFilter ? data.filter(function (record) {
	          return values.some(function (v) {
	            return col.onFilter(v, record);
	          });
	        }) : data;
	      });
	    }
	    return data;
	  };
	
	  Table.prototype.render = function render() {
	    var _classNames,
	        _this12 = this;
	
	    var _props4 = this.props,
	        style = _props4.style,
	        className = _props4.className,
	        prefixCls = _props4.prefixCls,
	        showHeader = _props4.showHeader,
	        restProps = _objectWithoutProperties(_props4, ['style', 'className', 'prefixCls', 'showHeader']);
	
	    var data = this.getCurrentPageData();
	    var columns = this.renderRowSelection();
	    var expandIconAsCell = this.props.expandedRowRender && this.props.expandIconAsCell !== false;
	    var locale = this.getLocale();
	
	    var classString = (0, _classnames2["default"])((_classNames = {}, _defineProperty(_classNames, prefixCls + '-' + this.props.size, true), _defineProperty(_classNames, prefixCls + '-bordered', this.props.bordered), _defineProperty(_classNames, prefixCls + '-empty', !data.length), _defineProperty(_classNames, prefixCls + '-without-column-header', !showHeader), _classNames));
	
	    columns = this.renderColumnsDropdown(columns);
	    columns = columns.map(function (column, i) {
	      var newColumn = _extends({}, column);
	      newColumn.key = _this12.getColumnKey(newColumn, i);
	      return newColumn;
	    });
	
	    var expandIconColumnIndex = columns[0] && columns[0].key === 'selection-column' ? 1 : 0;
	    if ('expandIconColumnIndex' in restProps) {
	      expandIconColumnIndex = restProps.expandIconColumnIndex;
	    }
	
	    var table = _react2["default"].createElement(_rcTable2["default"], _extends({}, restProps, {
	      prefixCls: prefixCls,
	      data: data,
	      columns: columns,
	      showHeader: showHeader,
	      className: classString,
	      expandIconColumnIndex: expandIconColumnIndex,
	      expandIconAsCell: expandIconAsCell,
	      emptyText: function emptyText() {
	        return locale.emptyText;
	      }
	    }));
	    // if there is no pagination or no data,
	    // the height of spin should decrease by half of pagination
	    var paginationPatchClass = this.hasPagination() && data && data.length !== 0 ? prefixCls + '-with-pagination' : prefixCls + '-without-pagination';
	    var spinClassName = this.props.loading ? paginationPatchClass + ' ' + prefixCls + '-spin-holder' : '';
	    return _react2["default"].createElement(
	      'div',
	      { className: className + ' clearfix', style: style },
	      _react2["default"].createElement(
	        _spin2["default"],
	        { className: spinClassName, spinning: this.props.loading },
	        table,
	        this.renderPagination()
	      )
	    );
	  };
	
	  return Table;
	}(_react2["default"].Component), _class.propTypes = {
	  dataSource: _react2["default"].PropTypes.array,
	  prefixCls: _react2["default"].PropTypes.string,
	  useFixedHeader: _react2["default"].PropTypes.bool,
	  rowSelection: _react2["default"].PropTypes.object,
	  className: _react2["default"].PropTypes.string,
	  size: _react2["default"].PropTypes.string,
	  loading: _react2["default"].PropTypes.bool,
	  bordered: _react2["default"].PropTypes.bool,
	  onChange: _react2["default"].PropTypes.func,
	  locale: _react2["default"].PropTypes.object,
	  dropdownPrefixCls: _react2["default"].PropTypes.string
	}, _class.defaultProps = {
	  dataSource: [],
	  prefixCls: 'ant-table',
	  useFixedHeader: false,
	  rowSelection: null,
	  className: '',
	  size: 'large',
	  loading: false,
	  bordered: false,
	  indentSize: 20,
	  onChange: noop,
	  locale: {},
	  rowKey: 'key',
	  childrenColumnName: 'children'
	}, _class.contextTypes = {
	  antLocale: _react2["default"].PropTypes.object
	}, _initialiseProps = function _initialiseProps() {
	  var _this13 = this;
	
	  this.handleFilter = function (column, nextFilters) {
	    var props = _this13.props;
	    var pagination = _extends({}, _this13.state.pagination);
	    var filters = _extends({}, _this13.state.filters, _defineProperty({}, _this13.getColumnKey(column), nextFilters));
	    // Remove filters not in current columns
	    var currentColumnKeys = props.columns.map(function (c) {
	      return _this13.getColumnKey(c);
	    });
	    Object.keys(filters).forEach(function (columnKey) {
	      if (currentColumnKeys.indexOf(columnKey) < 0) {
	        delete filters[columnKey];
	      }
	    });
	
	    if (props.pagination) {
	      // Reset current prop
	      pagination.current = 1;
	      pagination.onChange(pagination.current);
	    }
	
	    var newState = {
	      selectionDirty: false,
	      pagination: pagination
	    };
	    var filtersToSetState = _extends({}, filters);
	    // Remove filters which is controlled
	    _this13.getFilteredValueColumns().forEach(function (col) {
	      var columnKey = _this13.getColumnKey(col);
	      if (columnKey) {
	        delete filtersToSetState[columnKey];
	      }
	    });
	    if (Object.keys(filtersToSetState).length > 0) {
	      newState.filters = filtersToSetState;
	    }
	
	    // Controlled current prop will not respond user interaction
	    if (props.pagination && 'current' in props.pagination) {
	      newState.pagination = _extends({}, pagination, {
	        current: _this13.state.pagination.current
	      });
	    }
	
	    _this13.setState(newState, function () {
	      props.onChange.apply(props, _toConsumableArray(_this13.prepareParamsArguments(_extends({}, _this13.state, {
	        selectionDirty: false,
	        filters: filters,
	        pagination: pagination
	      }))));
	    });
	  };
	
	  this.handleSelect = function (record, rowIndex, e) {
	    var checked = e.target.checked;
	    var defaultSelection = _this13.state.selectionDirty ? [] : _this13.getDefaultSelection();
	    var selectedRowKeys = _this13.state.selectedRowKeys.concat(defaultSelection);
	    var key = _this13.getRecordKey(record, rowIndex);
	    if (checked) {
	      selectedRowKeys.push(_this13.getRecordKey(record, rowIndex));
	    } else {
	      selectedRowKeys = selectedRowKeys.filter(function (i) {
	        return key !== i;
	      });
	    }
	    _this13.setState({
	      selectionDirty: true
	    });
	    _this13.setSelectedRowKeys(selectedRowKeys, {
	      selectWay: 'onSelect',
	      record: record,
	      checked: checked
	    });
	  };
	
	  this.handleRadioSelect = function (record, rowIndex, e) {
	    var checked = e.target.checked;
	    var defaultSelection = _this13.state.selectionDirty ? [] : _this13.getDefaultSelection();
	    var selectedRowKeys = _this13.state.selectedRowKeys.concat(defaultSelection);
	    var key = _this13.getRecordKey(record, rowIndex);
	    selectedRowKeys = [key];
	    _this13.setState({
	      selectionDirty: true
	    });
	    _this13.setSelectedRowKeys(selectedRowKeys, {
	      selectWay: 'onSelect',
	      record: record,
	      checked: checked
	    });
	  };
	
	  this.handleSelectAllRow = function (e) {
	    var checked = e.target.checked;
	    var data = _this13.getFlatCurrentPageData();
	    var defaultSelection = _this13.state.selectionDirty ? [] : _this13.getDefaultSelection();
	    var selectedRowKeys = _this13.state.selectedRowKeys.concat(defaultSelection);
	    var changableRowKeys = data.filter(function (item) {
	      return !_this13.getCheckboxPropsByItem(item).disabled;
	    }).map(function (item, i) {
	      return _this13.getRecordKey(item, i);
	    });
	
	    // 记录变化的列
	    var changeRowKeys = [];
	    if (checked) {
	      changableRowKeys.forEach(function (key) {
	        if (selectedRowKeys.indexOf(key) < 0) {
	          selectedRowKeys.push(key);
	          changeRowKeys.push(key);
	        }
	      });
	    } else {
	      changableRowKeys.forEach(function (key) {
	        if (selectedRowKeys.indexOf(key) >= 0) {
	          selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);
	          changeRowKeys.push(key);
	        }
	      });
	    }
	    _this13.setState({
	      selectionDirty: true
	    });
	    _this13.setSelectedRowKeys(selectedRowKeys, {
	      selectWay: 'onSelectAll',
	      checked: checked,
	      changeRowKeys: changeRowKeys
	    });
	  };
	
	  this.handlePageChange = function (current) {
	    var _props5;
	
	    var props = _this13.props;
	    var pagination = _extends({}, _this13.state.pagination);
	    if (current) {
	      pagination.current = current;
	    } else {
	      pagination.current = pagination.current || 1;
	    }
	    pagination.onChange(pagination.current);
	
	    var newState = {
	      selectionDirty: false,
	      pagination: pagination
	    };
	    // Controlled current prop will not respond user interaction
	    if (props.pagination && 'current' in props.pagination) {
	      newState.pagination = _extends({}, pagination, {
	        current: _this13.state.pagination.current
	      });
	    }
	    _this13.setState(newState);
	
	    (_props5 = _this13.props).onChange.apply(_props5, _toConsumableArray(_this13.prepareParamsArguments(_extends({}, _this13.state, {
	      selectionDirty: false,
	      pagination: pagination
	    }))));
	  };
	
	  this.renderSelectionRadio = function (value, record, index) {
	    var rowIndex = _this13.getRecordKey(record, index); // 从 1 开始
	    var props = _this13.getCheckboxPropsByItem(record);
	    var checked = void 0;
	    if (_this13.state.selectionDirty) {
	      checked = _this13.state.selectedRowKeys.indexOf(rowIndex) >= 0;
	    } else {
	      checked = _this13.state.selectedRowKeys.indexOf(rowIndex) >= 0 || _this13.getDefaultSelection().indexOf(rowIndex) >= 0;
	    }
	    return _react2["default"].createElement(
	      'span',
	      { onClick: stopPropagation },
	      _react2["default"].createElement(_radio2["default"], { disabled: props.disabled,
	        onChange: function onChange(e) {
	          return _this13.handleRadioSelect(record, rowIndex, e);
	        },
	        value: rowIndex, checked: checked
	      })
	    );
	  };
	
	  this.renderSelectionCheckBox = function (value, record, index) {
	    var rowIndex = _this13.getRecordKey(record, index); // 从 1 开始
	    var checked = void 0;
	    if (_this13.state.selectionDirty) {
	      checked = _this13.state.selectedRowKeys.indexOf(rowIndex) >= 0;
	    } else {
	      checked = _this13.state.selectedRowKeys.indexOf(rowIndex) >= 0 || _this13.getDefaultSelection().indexOf(rowIndex) >= 0;
	    }
	    var props = _this13.getCheckboxPropsByItem(record);
	    return _react2["default"].createElement(
	      'span',
	      { onClick: stopPropagation },
	      _react2["default"].createElement(_checkbox2["default"], {
	        checked: checked,
	        disabled: props.disabled,
	        onChange: function onChange(e) {
	          return _this13.handleSelect(record, rowIndex, e);
	        }
	      })
	    );
	  };
	
	  this.handleShowSizeChange = function (current, pageSize) {
	    var _props6;
	
	    var pagination = _this13.state.pagination;
	    pagination.onShowSizeChange(current, pageSize);
	    var nextPagination = _extends({}, pagination, { pageSize: pageSize, current: current });
	    _this13.setState({ pagination: nextPagination });
	    (_props6 = _this13.props).onChange.apply(_props6, _toConsumableArray(_this13.prepareParamsArguments(_extends({}, _this13.state, {
	      pagination: nextPagination
	    }))));
	  };
	}, _temp);
	exports["default"] = Table;
	module.exports = exports['default'];

/***/ }),
/* 838 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(839);

/***/ }),
/* 839 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _TableRow = __webpack_require__(840);
	
	var _TableRow2 = _interopRequireDefault(_TableRow);
	
	var _utils = __webpack_require__(844);
	
	var _shallowequal = __webpack_require__(414);
	
	var _shallowequal2 = _interopRequireDefault(_shallowequal);
	
	var _addEventListener = __webpack_require__(390);
	
	var _addEventListener2 = _interopRequireDefault(_addEventListener);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var Table = _react2["default"].createClass({
	  displayName: 'Table',
	
	  propTypes: {
	    data: _react.PropTypes.array,
	    expandIconAsCell: _react.PropTypes.bool,
	    defaultExpandAllRows: _react.PropTypes.bool,
	    expandedRowKeys: _react.PropTypes.array,
	    defaultExpandedRowKeys: _react.PropTypes.array,
	    useFixedHeader: _react.PropTypes.bool,
	    columns: _react.PropTypes.array,
	    prefixCls: _react.PropTypes.string,
	    bodyStyle: _react.PropTypes.object,
	    style: _react.PropTypes.object,
	    rowKey: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),
	    rowClassName: _react.PropTypes.func,
	    expandedRowClassName: _react.PropTypes.func,
	    childrenColumnName: _react.PropTypes.string,
	    onExpand: _react.PropTypes.func,
	    onExpandedRowsChange: _react.PropTypes.func,
	    indentSize: _react.PropTypes.number,
	    onRowClick: _react.PropTypes.func,
	    columnsPageRange: _react.PropTypes.array,
	    columnsPageSize: _react.PropTypes.number,
	    expandIconColumnIndex: _react.PropTypes.number,
	    showHeader: _react.PropTypes.bool,
	    title: _react.PropTypes.func,
	    footer: _react.PropTypes.func,
	    emptyText: _react.PropTypes.func,
	    scroll: _react.PropTypes.object,
	    rowRef: _react.PropTypes.func,
	    getBodyWrapper: _react.PropTypes.func
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      data: [],
	      useFixedHeader: false,
	      expandIconAsCell: false,
	      columns: [],
	      defaultExpandAllRows: false,
	      defaultExpandedRowKeys: [],
	      rowKey: 'key',
	      rowClassName: function rowClassName() {
	        return '';
	      },
	      expandedRowClassName: function expandedRowClassName() {
	        return '';
	      },
	      onExpand: function onExpand() {},
	      onExpandedRowsChange: function onExpandedRowsChange() {},
	
	      prefixCls: 'rc-table',
	      bodyStyle: {},
	      style: {},
	      childrenColumnName: 'children',
	      indentSize: 15,
	      columnsPageSize: 5,
	      expandIconColumnIndex: 0,
	      showHeader: true,
	      scroll: {},
	      rowRef: function rowRef() {
	        return null;
	      },
	      getBodyWrapper: function getBodyWrapper(body) {
	        return body;
	      },
	      emptyText: function emptyText() {
	        return 'No Data';
	      }
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var expandedRowKeys = [];
	    var rows = [].concat(_toConsumableArray(props.data));
	    if (props.defaultExpandAllRows) {
	      for (var i = 0; i < rows.length; i++) {
	        var row = rows[i];
	        expandedRowKeys.push(this.getRowKey(row));
	        rows = rows.concat(row[props.childrenColumnName] || []);
	      }
	    } else {
	      expandedRowKeys = props.expandedRowKeys || props.defaultExpandedRowKeys;
	    }
	    return {
	      expandedRowKeys: expandedRowKeys,
	      data: props.data,
	      currentColumnsPage: 0,
	      currentHoverKey: null,
	      scrollPosition: 'left',
	      fixedColumnsHeadRowsHeight: [],
	      fixedColumnsBodyRowsHeight: []
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    this.resetScrollY();
	    var isAnyColumnsFixed = this.isAnyColumnsFixed();
	    if (isAnyColumnsFixed) {
	      this.syncFixedTableRowHeight();
	      this.resizeEvent = (0, _addEventListener2["default"])(window, 'resize', (0, _utils.debounce)(this.syncFixedTableRowHeight, 150));
	    }
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if ('data' in nextProps) {
	      this.setState({
	        data: nextProps.data
	      });
	      if (!nextProps.data || nextProps.data.length === 0) {
	        this.resetScrollY();
	      }
	    }
	    if ('expandedRowKeys' in nextProps) {
	      this.setState({
	        expandedRowKeys: nextProps.expandedRowKeys
	      });
	    }
	    if (nextProps.columns !== this.props.columns) {
	      delete this.isAnyColumnsFixedCache;
	      delete this.isAnyColumnsLeftFixedCache;
	      delete this.isAnyColumnsRightFixedCache;
	    }
	  },
	  componentDidUpdate: function componentDidUpdate() {
	    this.syncFixedTableRowHeight();
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    clearTimeout(this.timer);
	    if (this.resizeEvent) {
	      this.resizeEvent.remove();
	    }
	  },
	  onExpandedRowsChange: function onExpandedRowsChange(expandedRowKeys) {
	    if (!this.props.expandedRowKeys) {
	      this.setState({ expandedRowKeys: expandedRowKeys });
	    }
	    this.props.onExpandedRowsChange(expandedRowKeys);
	  },
	  onExpanded: function onExpanded(expanded, record, e) {
	    if (e) {
	      e.preventDefault();
	      e.stopPropagation();
	    }
	    var info = this.findExpandedRow(record);
	    if (typeof info !== 'undefined' && !expanded) {
	      this.onRowDestroy(record);
	    } else if (!info && expanded) {
	      var expandedRows = this.getExpandedRows().concat();
	      expandedRows.push(this.getRowKey(record));
	      this.onExpandedRowsChange(expandedRows);
	    }
	    this.props.onExpand(expanded, record);
	  },
	  onRowDestroy: function onRowDestroy(record) {
	    var expandedRows = this.getExpandedRows().concat();
	    var rowKey = this.getRowKey(record);
	    var index = -1;
	    expandedRows.forEach(function (r, i) {
	      if (r === rowKey) {
	        index = i;
	      }
	    });
	    if (index !== -1) {
	      expandedRows.splice(index, 1);
	    }
	    this.onExpandedRowsChange(expandedRows);
	  },
	  getRowKey: function getRowKey(record, index) {
	    var rowKey = this.props.rowKey;
	    if (typeof rowKey === 'function') {
	      return rowKey(record, index);
	    }
	    return typeof record[rowKey] !== 'undefined' ? record[rowKey] : index;
	  },
	  getExpandedRows: function getExpandedRows() {
	    return this.props.expandedRowKeys || this.state.expandedRowKeys;
	  },
	  getHeader: function getHeader(columns, fixed) {
	    var _props = this.props;
	    var showHeader = _props.showHeader;
	    var expandIconAsCell = _props.expandIconAsCell;
	    var prefixCls = _props.prefixCls;
	
	    var ths = [];
	    if (expandIconAsCell && fixed !== 'right') {
	      ths.push({
	        key: 'rc-table-expandIconAsCell',
	        className: prefixCls + '-expand-icon-th',
	        title: ''
	      });
	    }
	    ths = ths.concat(columns || this.getCurrentColumns()).map(function (c) {
	      if (c.colSpan !== 0) {
	        return _react2["default"].createElement(
	          'th',
	          { key: c.key, colSpan: c.colSpan, className: c.className || '' },
	          c.title
	        );
	      }
	    });
	    var fixedColumnsHeadRowsHeight = this.state.fixedColumnsHeadRowsHeight;
	
	    var trStyle = fixedColumnsHeadRowsHeight[0] && columns ? {
	      height: fixedColumnsHeadRowsHeight[0]
	    } : null;
	    return showHeader ? _react2["default"].createElement(
	      'thead',
	      { className: prefixCls + '-thead' },
	      _react2["default"].createElement(
	        'tr',
	        { style: trStyle },
	        ths
	      )
	    ) : null;
	  },
	  getExpandedRow: function getExpandedRow(key, content, visible, className, fixed) {
	    var prefixCls = this.props.prefixCls;
	    return _react2["default"].createElement(
	      'tr',
	      {
	        key: key + '-extra-row',
	        style: { display: visible ? '' : 'none' },
	        className: prefixCls + '-expanded-row ' + className
	      },
	      this.props.expandIconAsCell && fixed !== 'right' ? _react2["default"].createElement('td', { key: 'rc-table-expand-icon-placeholder' }) : null,
	      _react2["default"].createElement(
	        'td',
	        { colSpan: this.props.columns.length },
	        fixed !== 'right' ? content : '&nbsp;'
	      )
	    );
	  },
	  getRowsByData: function getRowsByData(data, visible, indent, columns, fixed) {
	    var props = this.props;
	    var childrenColumnName = props.childrenColumnName;
	    var expandedRowRender = props.expandedRowRender;
	    var expandRowByClick = props.expandRowByClick;
	    var fixedColumnsBodyRowsHeight = this.state.fixedColumnsBodyRowsHeight;
	
	    var rst = [];
	    var rowClassName = props.rowClassName;
	    var rowRef = props.rowRef;
	    var expandedRowClassName = props.expandedRowClassName;
	    var needIndentSpaced = props.data.some(function (record) {
	      return record[childrenColumnName];
	    });
	    var onRowClick = props.onRowClick;
	    var isAnyColumnsFixed = this.isAnyColumnsFixed();
	
	    var expandIconAsCell = fixed !== 'right' ? props.expandIconAsCell : false;
	    var expandIconColumnIndex = fixed !== 'right' ? props.expandIconColumnIndex : -1;
	
	    for (var i = 0; i < data.length; i++) {
	      var record = data[i];
	      var key = this.getRowKey(record, i);
	      var childrenColumn = record[childrenColumnName];
	      var isRowExpanded = this.isRowExpanded(record);
	      var expandedRowContent = void 0;
	      if (expandedRowRender && isRowExpanded) {
	        expandedRowContent = expandedRowRender(record, i, indent);
	      }
	      var className = rowClassName(record, i, indent);
	      if (this.state.currentHoverKey === key) {
	        className += ' ' + props.prefixCls + '-row-hover';
	      }
	
	      var onHoverProps = {};
	      if (isAnyColumnsFixed) {
	        onHoverProps.onHover = this.handleRowHover;
	      }
	
	      var style = fixed && fixedColumnsBodyRowsHeight[i] ? {
	        height: fixedColumnsBodyRowsHeight[i]
	      } : {};
	
	      rst.push(_react2["default"].createElement(_TableRow2["default"], _extends({
	        indent: indent,
	        indentSize: props.indentSize,
	        needIndentSpaced: needIndentSpaced,
	        className: className,
	        record: record,
	        expandIconAsCell: expandIconAsCell,
	        onDestroy: this.onRowDestroy,
	        index: i,
	        visible: visible,
	        expandRowByClick: expandRowByClick,
	        onExpand: this.onExpanded,
	        expandable: childrenColumn || expandedRowRender,
	        expanded: isRowExpanded,
	        prefixCls: props.prefixCls + '-row',
	        childrenColumnName: childrenColumnName,
	        columns: columns || this.getCurrentColumns(),
	        expandIconColumnIndex: expandIconColumnIndex,
	        onRowClick: onRowClick,
	        style: style
	      }, onHoverProps, {
	        key: key,
	        hoverKey: key,
	        ref: rowRef(record, i, indent)
	      })));
	
	      var subVisible = visible && isRowExpanded;
	
	      if (expandedRowContent && isRowExpanded) {
	        rst.push(this.getExpandedRow(key, expandedRowContent, subVisible, expandedRowClassName(record, i, indent), fixed));
	      }
	      if (childrenColumn) {
	        rst = rst.concat(this.getRowsByData(childrenColumn, subVisible, indent + 1, columns, fixed));
	      }
	    }
	    return rst;
	  },
	  getRows: function getRows(columns, fixed) {
	    return this.getRowsByData(this.state.data, true, 0, columns, fixed);
	  },
	  getColGroup: function getColGroup(columns, fixed) {
	    var cols = [];
	    if (this.props.expandIconAsCell && fixed !== 'right') {
	      cols.push(_react2["default"].createElement('col', {
	        className: this.props.prefixCls + '-expand-icon-col',
	        key: 'rc-table-expand-icon-col'
	      }));
	    }
	    cols = cols.concat((columns || this.props.columns).map(function (c) {
	      return _react2["default"].createElement('col', { key: c.key, style: { width: c.width, minWidth: c.width } });
	    }));
	    return _react2["default"].createElement(
	      'colgroup',
	      null,
	      cols
	    );
	  },
	  getCurrentColumns: function getCurrentColumns() {
	    var _this = this;
	
	    var _props2 = this.props;
	    var columns = _props2.columns;
	    var columnsPageRange = _props2.columnsPageRange;
	    var columnsPageSize = _props2.columnsPageSize;
	    var prefixCls = _props2.prefixCls;
	    var currentColumnsPage = this.state.currentColumnsPage;
	
	    if (!columnsPageRange || columnsPageRange[0] > columnsPageRange[1]) {
	      return columns;
	    }
	    return columns.map(function (column, i) {
	      var newColumn = _extends({}, column);
	      if (i >= columnsPageRange[0] && i <= columnsPageRange[1]) {
	        var pageIndexStart = columnsPageRange[0] + currentColumnsPage * columnsPageSize;
	        var pageIndexEnd = columnsPageRange[0] + (currentColumnsPage + 1) * columnsPageSize - 1;
	        if (pageIndexEnd > columnsPageRange[1]) {
	          pageIndexEnd = columnsPageRange[1];
	        }
	        if (i < pageIndexStart || i > pageIndexEnd) {
	          newColumn.className = newColumn.className || '';
	          newColumn.className += ' ' + prefixCls + '-column-hidden';
	        }
	        newColumn = _this.wrapPageColumn(newColumn, i === pageIndexStart, i === pageIndexEnd);
	      }
	      return newColumn;
	    });
	  },
	  getLeftFixedTable: function getLeftFixedTable() {
	    var columns = this.props.columns;
	
	    var fixedColumns = columns.filter(function (column) {
	      return column.fixed === 'left' || column.fixed === true;
	    });
	    return this.getTable({
	      columns: fixedColumns,
	      fixed: 'left'
	    });
	  },
	  getRightFixedTable: function getRightFixedTable() {
	    var columns = this.props.columns;
	
	    var fixedColumns = columns.filter(function (column) {
	      return column.fixed === 'right';
	    });
	    return this.getTable({
	      columns: fixedColumns,
	      fixed: 'right'
	    });
	  },
	  getTable: function getTable() {
	    var _this2 = this;
	
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var columns = options.columns;
	    var fixed = options.fixed;
	    var _props3 = this.props;
	    var prefixCls = _props3.prefixCls;
	    var _props3$scroll = _props3.scroll;
	    var scroll = _props3$scroll === undefined ? {} : _props3$scroll;
	    var getBodyWrapper = _props3.getBodyWrapper;
	    var useFixedHeader = this.props.useFixedHeader;
	
	    var bodyStyle = _extends({}, this.props.bodyStyle);
	    var headStyle = {};
	
	    var tableClassName = '';
	    if (scroll.x || columns) {
	      tableClassName = prefixCls + '-fixed';
	      bodyStyle.overflowX = bodyStyle.overflowX || 'auto';
	    }
	
	    if (scroll.y) {
	      // maxHeight will make fixed-Table scrolling not working
	      // so we only set maxHeight to body-Table here
	      if (fixed) {
	        bodyStyle.height = bodyStyle.height || scroll.y;
	      } else {
	        bodyStyle.maxHeight = bodyStyle.maxHeight || scroll.y;
	      }
	      bodyStyle.overflowY = bodyStyle.overflowY || 'scroll';
	      useFixedHeader = true;
	
	      // Add negative margin bottom for scroll bar overflow bug
	      var scrollbarWidth = (0, _utils.measureScrollbar)();
	      if (scrollbarWidth > 0) {
	        (fixed ? bodyStyle : headStyle).marginBottom = '-' + scrollbarWidth + 'px';
	        (fixed ? bodyStyle : headStyle).paddingBottom = '0px';
	      }
	    }
	
	    var renderTable = function renderTable() {
	      var hasHead = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
	      var hasBody = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	
	      var tableStyle = {};
	      if (!columns && scroll.x) {
	        // not set width, then use content fixed width
	        if (scroll.x === true) {
	          tableStyle.tableLayout = 'fixed';
	        } else {
	          tableStyle.width = scroll.x;
	        }
	      }
	      var tableBody = hasBody ? getBodyWrapper(_react2["default"].createElement(
	        'tbody',
	        { className: prefixCls + '-tbody' },
	        _this2.getRows(columns, fixed)
	      )) : null;
	      return _react2["default"].createElement(
	        'table',
	        { className: tableClassName, style: tableStyle },
	        _this2.getColGroup(columns, fixed),
	        hasHead ? _this2.getHeader(columns, fixed) : null,
	        tableBody
	      );
	    };
	
	    var headTable = void 0;
	    if (useFixedHeader) {
	      headTable = _react2["default"].createElement(
	        'div',
	        {
	          className: prefixCls + '-header',
	          ref: columns ? null : 'headTable',
	          style: headStyle,
	          onMouseOver: this.detectScrollTarget,
	          onTouchStart: this.detectScrollTarget,
	          onScroll: this.handleBodyScroll
	        },
	        renderTable(true, false)
	      );
	    }
	
	    var BodyTable = _react2["default"].createElement(
	      'div',
	      {
	        className: prefixCls + '-body',
	        style: bodyStyle,
	        ref: 'bodyTable',
	        onMouseOver: this.detectScrollTarget,
	        onTouchStart: this.detectScrollTarget,
	        onScroll: this.handleBodyScroll
	      },
	      renderTable(!useFixedHeader)
	    );
	
	    if (columns && columns.length) {
	      var refName = void 0;
	      if (columns[0].fixed === 'left' || columns[0].fixed === true) {
	        refName = 'fixedColumnsBodyLeft';
	      } else if (columns[0].fixed === 'right') {
	        refName = 'fixedColumnsBodyRight';
	      }
	      delete bodyStyle.overflowX;
	      delete bodyStyle.overflowY;
	      BodyTable = _react2["default"].createElement(
	        'div',
	        {
	          className: prefixCls + '-body-outer',
	          style: _extends({}, bodyStyle)
	        },
	        _react2["default"].createElement(
	          'div',
	          {
	            className: prefixCls + '-body-inner',
	            ref: refName,
	            onMouseOver: this.detectScrollTarget,
	            onTouchStart: this.detectScrollTarget,
	            onScroll: this.handleBodyScroll
	          },
	          renderTable(!useFixedHeader)
	        )
	      );
	    }
	
	    return _react2["default"].createElement(
	      'span',
	      null,
	      headTable,
	      BodyTable
	    );
	  },
	  getTitle: function getTitle() {
	    var _props4 = this.props;
	    var title = _props4.title;
	    var prefixCls = _props4.prefixCls;
	
	    return title ? _react2["default"].createElement(
	      'div',
	      { className: prefixCls + '-title' },
	      title(this.state.data)
	    ) : null;
	  },
	  getFooter: function getFooter() {
	    var _props5 = this.props;
	    var footer = _props5.footer;
	    var prefixCls = _props5.prefixCls;
	
	    return footer ? _react2["default"].createElement(
	      'div',
	      { className: prefixCls + '-footer' },
	      footer(this.state.data)
	    ) : null;
	  },
	  getEmptyText: function getEmptyText() {
	    var _props6 = this.props;
	    var emptyText = _props6.emptyText;
	    var prefixCls = _props6.prefixCls;
	    var data = _props6.data;
	
	    return !data.length ? _react2["default"].createElement(
	      'div',
	      { className: prefixCls + '-placeholder' },
	      emptyText()
	    ) : null;
	  },
	  getMaxColumnsPage: function getMaxColumnsPage() {
	    var _props7 = this.props;
	    var columnsPageRange = _props7.columnsPageRange;
	    var columnsPageSize = _props7.columnsPageSize;
	
	    return Math.ceil((columnsPageRange[1] - columnsPageRange[0] + 1) / columnsPageSize) - 1;
	  },
	  goToColumnsPage: function goToColumnsPage(currentColumnsPage) {
	    var maxColumnsPage = this.getMaxColumnsPage();
	    var page = currentColumnsPage;
	    if (page < 0) {
	      page = 0;
	    }
	    if (page > maxColumnsPage) {
	      page = maxColumnsPage;
	    }
	    this.setState({
	      currentColumnsPage: page
	    });
	  },
	  syncFixedTableRowHeight: function syncFixedTableRowHeight() {
	    var _this3 = this;
	
	    var prefixCls = this.props.prefixCls;
	
	    var headRows = this.refs.headTable ? this.refs.headTable.querySelectorAll('tr') : [];
	    var bodyRows = this.refs.bodyTable.querySelectorAll('.' + prefixCls + '-row') || [];
	    var fixedColumnsHeadRowsHeight = [].map.call(headRows, function (row) {
	      return row.getBoundingClientRect().height || 'auto';
	    });
	    var fixedColumnsBodyRowsHeight = [].map.call(bodyRows, function (row) {
	      return row.getBoundingClientRect().height || 'auto';
	    });
	    if ((0, _shallowequal2["default"])(this.state.fixedColumnsHeadRowsHeight, fixedColumnsHeadRowsHeight) && (0, _shallowequal2["default"])(this.state.fixedColumnsBodyRowsHeight, fixedColumnsBodyRowsHeight)) {
	      return;
	    }
	    this.timer = setTimeout(function () {
	      _this3.setState({
	        fixedColumnsHeadRowsHeight: fixedColumnsHeadRowsHeight,
	        fixedColumnsBodyRowsHeight: fixedColumnsBodyRowsHeight
	      });
	    });
	  },
	  resetScrollY: function resetScrollY() {
	    if (this.refs.headTable) {
	      this.refs.headTable.scrollLeft = 0;
	    }
	    if (this.refs.bodyTable) {
	      this.refs.bodyTable.scrollLeft = 0;
	    }
	  },
	  prevColumnsPage: function prevColumnsPage() {
	    this.goToColumnsPage(this.state.currentColumnsPage - 1);
	  },
	  nextColumnsPage: function nextColumnsPage() {
	    this.goToColumnsPage(this.state.currentColumnsPage + 1);
	  },
	  wrapPageColumn: function wrapPageColumn(column, hasPrev, hasNext) {
	    var prefixCls = this.props.prefixCls;
	    var currentColumnsPage = this.state.currentColumnsPage;
	
	    var maxColumnsPage = this.getMaxColumnsPage();
	    var prevHandlerCls = prefixCls + '-prev-columns-page';
	    if (currentColumnsPage === 0) {
	      prevHandlerCls += ' ' + prefixCls + '-prev-columns-page-disabled';
	    }
	    var prevHandler = _react2["default"].createElement('span', { className: prevHandlerCls, onClick: this.prevColumnsPage });
	    var nextHandlerCls = prefixCls + '-next-columns-page';
	    if (currentColumnsPage === maxColumnsPage) {
	      nextHandlerCls += ' ' + prefixCls + '-next-columns-page-disabled';
	    }
	    var nextHandler = _react2["default"].createElement('span', { className: nextHandlerCls, onClick: this.nextColumnsPage });
	    if (hasPrev) {
	      column.title = _react2["default"].createElement(
	        'span',
	        null,
	        prevHandler,
	        column.title
	      );
	      column.className = (column.className || '') + ' ' + prefixCls + '-column-has-prev';
	    }
	    if (hasNext) {
	      column.title = _react2["default"].createElement(
	        'span',
	        null,
	        column.title,
	        nextHandler
	      );
	      column.className = (column.className || '') + ' ' + prefixCls + '-column-has-next';
	    }
	    return column;
	  },
	  findExpandedRow: function findExpandedRow(record) {
	    var _this4 = this;
	
	    var rows = this.getExpandedRows().filter(function (i) {
	      return i === _this4.getRowKey(record);
	    });
	    return rows[0];
	  },
	  isRowExpanded: function isRowExpanded(record) {
	    return typeof this.findExpandedRow(record) !== 'undefined';
	  },
	  detectScrollTarget: function detectScrollTarget(e) {
	    if (this.scrollTarget !== e.currentTarget) {
	      this.scrollTarget = e.currentTarget;
	    }
	  },
	  isAnyColumnsFixed: function isAnyColumnsFixed() {
	    if ('isAnyColumnsFixedCache' in this) {
	      return this.isAnyColumnsFixedCache;
	    }
	    this.isAnyColumnsFixedCache = this.getCurrentColumns().some(function (column) {
	      return !!column.fixed;
	    });
	    return this.isAnyColumnsFixedCache;
	  },
	  isAnyColumnsLeftFixed: function isAnyColumnsLeftFixed() {
	    if ('isAnyColumnsLeftFixedCache' in this) {
	      return this.isAnyColumnsLeftFixedCache;
	    }
	    this.isAnyColumnsLeftFixedCache = this.getCurrentColumns().some(function (column) {
	      return column.fixed === 'left' || column.fixed === true;
	    });
	    return this.isAnyColumnsLeftFixedCache;
	  },
	  isAnyColumnsRightFixed: function isAnyColumnsRightFixed() {
	    if ('isAnyColumnsRightFixedCache' in this) {
	      return this.isAnyColumnsRightFixedCache;
	    }
	    this.isAnyColumnsRightFixedCache = this.getCurrentColumns().some(function (column) {
	      return column.fixed === 'right';
	    });
	    return this.isAnyColumnsRightFixedCache;
	  },
	  handleBodyScroll: function handleBodyScroll(e) {
	    // Prevent scrollTop setter trigger onScroll event
	    // http://stackoverflow.com/q/1386696
	    if (e.target !== this.scrollTarget) {
	      return;
	    }
	    var _props$scroll = this.props.scroll;
	    var scroll = _props$scroll === undefined ? {} : _props$scroll;
	    var _refs = this.refs;
	    var headTable = _refs.headTable;
	    var bodyTable = _refs.bodyTable;
	    var fixedColumnsBodyLeft = _refs.fixedColumnsBodyLeft;
	    var fixedColumnsBodyRight = _refs.fixedColumnsBodyRight;
	
	    if (scroll.x) {
	      if (e.target === bodyTable && headTable) {
	        headTable.scrollLeft = e.target.scrollLeft;
	      } else if (e.target === headTable && bodyTable) {
	        bodyTable.scrollLeft = e.target.scrollLeft;
	      }
	      if (e.target.scrollLeft === 0) {
	        this.setState({ scrollPosition: 'left' });
	      } else if (e.target.scrollLeft + 1 >= e.target.children[0].getBoundingClientRect().width - e.target.getBoundingClientRect().width) {
	        this.setState({ scrollPosition: 'right' });
	      } else if (this.state.scrollPosition !== 'middle') {
	        this.setState({ scrollPosition: 'middle' });
	      }
	    }
	    if (scroll.y) {
	      if (fixedColumnsBodyLeft && e.target !== fixedColumnsBodyLeft) {
	        fixedColumnsBodyLeft.scrollTop = e.target.scrollTop;
	      }
	      if (fixedColumnsBodyRight && e.target !== fixedColumnsBodyRight) {
	        fixedColumnsBodyRight.scrollTop = e.target.scrollTop;
	      }
	      if (bodyTable && e.target !== bodyTable) {
	        bodyTable.scrollTop = e.target.scrollTop;
	      }
	    }
	  },
	  handleRowHover: function handleRowHover(isHover, key) {
	    this.setState({
	      currentHoverKey: isHover ? key : null
	    });
	  },
	  render: function render() {
	    var props = this.props;
	    var prefixCls = props.prefixCls;
	
	    var className = props.prefixCls;
	    if (props.className) {
	      className += ' ' + props.className;
	    }
	    if (props.columnsPageRange) {
	      className += ' ' + prefixCls + '-columns-paging';
	    }
	    if (props.useFixedHeader || props.scroll && props.scroll.y) {
	      className += ' ' + prefixCls + '-fixed-header';
	    }
	    className += ' ' + prefixCls + '-scroll-position-' + this.state.scrollPosition;
	
	    var isTableScroll = this.isAnyColumnsFixed() || props.scroll.x || props.scroll.y;
	
	    return _react2["default"].createElement(
	      'div',
	      { className: className, style: props.style },
	      this.getTitle(),
	      _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-content' },
	        this.isAnyColumnsLeftFixed() && _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-fixed-left' },
	          this.getLeftFixedTable()
	        ),
	        _react2["default"].createElement(
	          'div',
	          { className: isTableScroll ? prefixCls + '-scroll' : '' },
	          this.getTable(),
	          this.getEmptyText(),
	          this.getFooter()
	        ),
	        this.isAnyColumnsRightFixed() && _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-fixed-right' },
	          this.getRightFixedTable()
	        )
	      )
	    );
	  }
	});
	
	exports["default"] = Table;
	module.exports = exports['default'];

/***/ }),
/* 840 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _shallowequal = __webpack_require__(414);
	
	var _shallowequal2 = _interopRequireDefault(_shallowequal);
	
	var _TableCell = __webpack_require__(841);
	
	var _TableCell2 = _interopRequireDefault(_TableCell);
	
	var _ExpandIcon = __webpack_require__(843);
	
	var _ExpandIcon2 = _interopRequireDefault(_ExpandIcon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var TableRow = _react2["default"].createClass({
	  displayName: 'TableRow',
	
	  propTypes: {
	    onDestroy: _react.PropTypes.func,
	    onRowClick: _react.PropTypes.func,
	    record: _react.PropTypes.object,
	    prefixCls: _react.PropTypes.string,
	    expandIconColumnIndex: _react.PropTypes.number,
	    onHover: _react.PropTypes.func,
	    columns: _react.PropTypes.array,
	    style: _react.PropTypes.object,
	    visible: _react.PropTypes.bool,
	    index: _react.PropTypes.number,
	    hoverKey: _react.PropTypes.any,
	    expanded: _react.PropTypes.bool,
	    expandable: _react.PropTypes.any,
	    onExpand: _react.PropTypes.func,
	    needIndentSpaced: _react.PropTypes.bool,
	    className: _react.PropTypes.string,
	    indent: _react.PropTypes.number,
	    indentSize: _react.PropTypes.number,
	    expandIconAsCell: _react.PropTypes.bool,
	    expandRowByClick: _react.PropTypes.bool
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      onRowClick: function onRowClick() {},
	      onDestroy: function onDestroy() {},
	
	      expandIconColumnIndex: 0,
	      expandRowByClick: false,
	      onHover: function onHover() {}
	    };
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    return !(0, _shallowequal2["default"])(nextProps, this.props);
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    this.props.onDestroy(this.props.record);
	  },
	  onRowClick: function onRowClick(event) {
	    var _props = this.props;
	    var record = _props.record;
	    var index = _props.index;
	    var onRowClick = _props.onRowClick;
	    var expandable = _props.expandable;
	    var expandRowByClick = _props.expandRowByClick;
	    var expanded = _props.expanded;
	    var onExpand = _props.onExpand;
	
	
	    if (expandable && expandRowByClick) {
	      onExpand(!expanded, record);
	    }
	    onRowClick(record, index, event);
	  },
	  onMouseEnter: function onMouseEnter() {
	    var _props2 = this.props;
	    var onHover = _props2.onHover;
	    var hoverKey = _props2.hoverKey;
	
	    onHover(true, hoverKey);
	  },
	  onMouseLeave: function onMouseLeave() {
	    var _props3 = this.props;
	    var onHover = _props3.onHover;
	    var hoverKey = _props3.hoverKey;
	
	    onHover(false, hoverKey);
	  },
	  render: function render() {
	    var _props4 = this.props;
	    var prefixCls = _props4.prefixCls;
	    var columns = _props4.columns;
	    var record = _props4.record;
	    var style = _props4.style;
	    var visible = _props4.visible;
	    var index = _props4.index;
	    var expandIconColumnIndex = _props4.expandIconColumnIndex;
	    var expandIconAsCell = _props4.expandIconAsCell;
	    var expanded = _props4.expanded;
	    var expandRowByClick = _props4.expandRowByClick;
	    var expandable = _props4.expandable;
	    var onExpand = _props4.onExpand;
	    var needIndentSpaced = _props4.needIndentSpaced;
	    var className = _props4.className;
	    var indent = _props4.indent;
	    var indentSize = _props4.indentSize;
	
	
	    var cells = [];
	
	    for (var i = 0; i < columns.length; i++) {
	      if (expandIconAsCell && i === 0) {
	        cells.push(_react2["default"].createElement(
	          'td',
	          {
	            className: prefixCls + '-expand-icon-cell',
	            key: 'rc-table-expand-icon-cell'
	          },
	          _react2["default"].createElement(_ExpandIcon2["default"], {
	            expandable: expandable,
	            prefixCls: prefixCls,
	            onExpand: onExpand,
	            needIndentSpaced: needIndentSpaced,
	            expanded: expanded,
	            record: record
	          })
	        ));
	      }
	      var isColumnHaveExpandIcon = expandIconAsCell || expandRowByClick ? false : i === expandIconColumnIndex;
	      cells.push(_react2["default"].createElement(_TableCell2["default"], {
	        prefixCls: prefixCls,
	        record: record,
	        indentSize: indentSize,
	        indent: indent,
	        index: index,
	        expandable: expandable,
	        onExpand: onExpand,
	        needIndentSpaced: needIndentSpaced,
	        expanded: expanded,
	        isColumnHaveExpandIcon: isColumnHaveExpandIcon,
	        column: columns[i],
	        key: columns[i].key
	      }));
	    }
	
	    return _react2["default"].createElement(
	      'tr',
	      {
	        onClick: this.onRowClick,
	        onMouseEnter: this.onMouseEnter,
	        onMouseLeave: this.onMouseLeave,
	        className: prefixCls + ' ' + className + ' ' + prefixCls + '-level-' + indent,
	        style: visible ? style : _extends({}, style, { display: 'none' })
	      },
	      cells
	    );
	  }
	});
	
	exports["default"] = TableRow;
	module.exports = exports['default'];

/***/ }),
/* 841 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _objectPath = __webpack_require__(842);
	
	var _objectPath2 = _interopRequireDefault(_objectPath);
	
	var _shallowequal = __webpack_require__(414);
	
	var _shallowequal2 = _interopRequireDefault(_shallowequal);
	
	var _ExpandIcon = __webpack_require__(843);
	
	var _ExpandIcon2 = _interopRequireDefault(_ExpandIcon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var TableCell = _react2["default"].createClass({
	  displayName: 'TableCell',
	
	  propTypes: {
	    record: _react.PropTypes.object,
	    prefixCls: _react.PropTypes.string,
	    isColumnHaveExpandIcon: _react.PropTypes.bool,
	    index: _react.PropTypes.number,
	    expanded: _react.PropTypes.bool,
	    expandable: _react.PropTypes.any,
	    onExpand: _react.PropTypes.func,
	    needIndentSpaced: _react.PropTypes.bool,
	    indent: _react.PropTypes.number,
	    indentSize: _react.PropTypes.number,
	    column: _react.PropTypes.object
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    return !(0, _shallowequal2["default"])(nextProps, this.props);
	  },
	  isInvalidRenderCellText: function isInvalidRenderCellText(text) {
	    return text && !_react2["default"].isValidElement(text) && Object.prototype.toString.call(text) === '[object Object]';
	  },
	  render: function render() {
	    var _props = this.props;
	    var record = _props.record;
	    var indentSize = _props.indentSize;
	    var prefixCls = _props.prefixCls;
	    var indent = _props.indent;
	    var isColumnHaveExpandIcon = _props.isColumnHaveExpandIcon;
	    var index = _props.index;
	    var expandable = _props.expandable;
	    var onExpand = _props.onExpand;
	    var needIndentSpaced = _props.needIndentSpaced;
	    var expanded = _props.expanded;
	    var column = _props.column;
	    var dataIndex = column.dataIndex;
	    var render = column.render;
	    var className = column.className;
	
	
	    var text = _objectPath2["default"].get(record, dataIndex);
	    var tdProps = void 0;
	    var colSpan = void 0;
	    var rowSpan = void 0;
	
	    if (render) {
	      text = render(text, record, index);
	      if (this.isInvalidRenderCellText(text)) {
	        tdProps = text.props || {};
	        rowSpan = tdProps.rowSpan;
	        colSpan = tdProps.colSpan;
	        text = text.children;
	      }
	    }
	
	    // Fix https://github.com/ant-design/ant-design/issues/1202
	    if (this.isInvalidRenderCellText(text)) {
	      text = null;
	    }
	
	    var expandIcon = _react2["default"].createElement(_ExpandIcon2["default"], {
	      expandable: expandable,
	      prefixCls: prefixCls,
	      onExpand: onExpand,
	      needIndentSpaced: needIndentSpaced,
	      expanded: expanded,
	      record: record
	    });
	
	    var indentText = _react2["default"].createElement('span', {
	      style: { paddingLeft: indentSize * indent + 'px' },
	      className: prefixCls + '-indent indent-level-' + indent
	    });
	
	    if (rowSpan === 0 || colSpan === 0) {
	      return null;
	    }
	    return _react2["default"].createElement(
	      'td',
	      {
	        colSpan: colSpan,
	        rowSpan: rowSpan,
	        className: className || ''
	      },
	      isColumnHaveExpandIcon ? indentText : null,
	      isColumnHaveExpandIcon ? expandIcon : null,
	      text
	    );
	  }
	});
	
	exports["default"] = TableCell;
	module.exports = exports['default'];

/***/ }),
/* 842 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory){
	  'use strict';
	
	  /*istanbul ignore next:cant test*/
	  if (typeof module === 'object' && typeof module.exports === 'object') {
	    module.exports = factory();
	  } else if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else {
	    // Browser globals
	    root.objectPath = factory();
	  }
	})(this, function(){
	  'use strict';
	
	  var toStr = Object.prototype.toString;
	  function hasOwnProperty(obj, prop) {
	    if(obj == null) {
	      return false
	    }
	    //to handle objects with null prototypes (too edge case?)
	    return Object.prototype.hasOwnProperty.call(obj, prop)
	  }
	
	  function isEmpty(value){
	    if (!value) {
	      return true;
	    }
	    if (isArray(value) && value.length === 0) {
	        return true;
	    } else if (typeof value !== 'string') {
	        for (var i in value) {
	            if (hasOwnProperty(value, i)) {
	                return false;
	            }
	        }
	        return true;
	    }
	    return false;
	  }
	
	  function toString(type){
	    return toStr.call(type);
	  }
	
	  function isObject(obj){
	    return typeof obj === 'object' && toString(obj) === "[object Object]";
	  }
	
	  var isArray = Array.isArray || function(obj){
	    /*istanbul ignore next:cant test*/
	    return toStr.call(obj) === '[object Array]';
	  }
	
	  function isBoolean(obj){
	    return typeof obj === 'boolean' || toString(obj) === '[object Boolean]';
	  }
	
	  function getKey(key){
	    var intKey = parseInt(key);
	    if (intKey.toString() === key) {
	      return intKey;
	    }
	    return key;
	  }
	
	  function factory(options) {
	    options = options || {}
	
	    var objectPath = function(obj) {
	      return Object.keys(objectPath).reduce(function(proxy, prop) {
	        if(prop === 'create') {
	          return proxy;
	        }
	
	        /*istanbul ignore else*/
	        if (typeof objectPath[prop] === 'function') {
	          proxy[prop] = objectPath[prop].bind(objectPath, obj);
	        }
	
	        return proxy;
	      }, {});
	    };
	
	    function hasShallowProperty(obj, prop) {
	      return (options.includeInheritedProps || (typeof prop === 'number' && Array.isArray(obj)) || hasOwnProperty(obj, prop))
	    }
	
	    function getShallowProperty(obj, prop) {
	      if (hasShallowProperty(obj, prop)) {
	        return obj[prop];
	      }
	    }
	
	    function set(obj, path, value, doNotReplace){
	      if (typeof path === 'number') {
	        path = [path];
	      }
	      if (!path || path.length === 0) {
	        return obj;
	      }
	      if (typeof path === 'string') {
	        return set(obj, path.split('.').map(getKey), value, doNotReplace);
	      }
	      var currentPath = path[0];
	      var currentValue = getShallowProperty(obj, currentPath);
	      if (path.length === 1) {
	        if (currentValue === void 0 || !doNotReplace) {
	          obj[currentPath] = value;
	        }
	        return currentValue;
	      }
	
	      if (currentValue === void 0) {
	        //check if we assume an array
	        if(typeof path[1] === 'number') {
	          obj[currentPath] = [];
	        } else {
	          obj[currentPath] = {};
	        }
	      }
	
	      return set(obj[currentPath], path.slice(1), value, doNotReplace);
	    }
	
	    objectPath.has = function (obj, path) {
	      if (typeof path === 'number') {
	        path = [path];
	      } else if (typeof path === 'string') {
	        path = path.split('.');
	      }
	
	      if (!path || path.length === 0) {
	        return !!obj;
	      }
	
	      for (var i = 0; i < path.length; i++) {
	        var j = getKey(path[i]);
	
	        if((typeof j === 'number' && isArray(obj) && j < obj.length) ||
	          (options.includeInheritedProps ? (j in Object(obj)) : hasOwnProperty(obj, j))) {
	          obj = obj[j];
	        } else {
	          return false;
	        }
	      }
	
	      return true;
	    };
	
	    objectPath.ensureExists = function (obj, path, value){
	      return set(obj, path, value, true);
	    };
	
	    objectPath.set = function (obj, path, value, doNotReplace){
	      return set(obj, path, value, doNotReplace);
	    };
	
	    objectPath.insert = function (obj, path, value, at){
	      var arr = objectPath.get(obj, path);
	      at = ~~at;
	      if (!isArray(arr)) {
	        arr = [];
	        objectPath.set(obj, path, arr);
	      }
	      arr.splice(at, 0, value);
	    };
	
	    objectPath.empty = function(obj, path) {
	      if (isEmpty(path)) {
	        return void 0;
	      }
	      if (obj == null) {
	        return void 0;
	      }
	
	      var value, i;
	      if (!(value = objectPath.get(obj, path))) {
	        return void 0;
	      }
	
	      if (typeof value === 'string') {
	        return objectPath.set(obj, path, '');
	      } else if (isBoolean(value)) {
	        return objectPath.set(obj, path, false);
	      } else if (typeof value === 'number') {
	        return objectPath.set(obj, path, 0);
	      } else if (isArray(value)) {
	        value.length = 0;
	      } else if (isObject(value)) {
	        for (i in value) {
	          if (hasShallowProperty(value, i)) {
	            delete value[i];
	          }
	        }
	      } else {
	        return objectPath.set(obj, path, null);
	      }
	    };
	
	    objectPath.push = function (obj, path /*, values */){
	      var arr = objectPath.get(obj, path);
	      if (!isArray(arr)) {
	        arr = [];
	        objectPath.set(obj, path, arr);
	      }
	
	      arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));
	    };
	
	    objectPath.coalesce = function (obj, paths, defaultValue) {
	      var value;
	
	      for (var i = 0, len = paths.length; i < len; i++) {
	        if ((value = objectPath.get(obj, paths[i])) !== void 0) {
	          return value;
	        }
	      }
	
	      return defaultValue;
	    };
	
	    objectPath.get = function (obj, path, defaultValue){
	      if (typeof path === 'number') {
	        path = [path];
	      }
	      if (!path || path.length === 0) {
	        return obj;
	      }
	      if (obj == null) {
	        return defaultValue;
	      }
	      if (typeof path === 'string') {
	        return objectPath.get(obj, path.split('.'), defaultValue);
	      }
	
	      var currentPath = getKey(path[0]);
	      var nextObj = getShallowProperty(obj, currentPath)
	      if (nextObj === void 0) {
	        return defaultValue;
	      }
	
	      if (path.length === 1) {
	        return nextObj;
	      }
	
	      return objectPath.get(obj[currentPath], path.slice(1), defaultValue);
	    };
	
	    objectPath.del = function del(obj, path) {
	      if (typeof path === 'number') {
	        path = [path];
	      }
	
	      if (obj == null) {
	        return obj;
	      }
	
	      if (isEmpty(path)) {
	        return obj;
	      }
	      if(typeof path === 'string') {
	        return objectPath.del(obj, path.split('.'));
	      }
	
	      var currentPath = getKey(path[0]);
	      if (!hasShallowProperty(obj, currentPath)) {
	        return obj;
	      }
	
	      if(path.length === 1) {
	        if (isArray(obj)) {
	          obj.splice(currentPath, 1);
	        } else {
	          delete obj[currentPath];
	        }
	      } else {
	        return objectPath.del(obj[currentPath], path.slice(1));
	      }
	
	      return obj;
	    }
	
	    return objectPath;
	  }
	
	  var mod = factory();
	  mod.create = factory;
	  mod.withInheritedProps = factory({includeInheritedProps: true})
	  return mod;
	});


/***/ }),
/* 843 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _shallowequal = __webpack_require__(414);
	
	var _shallowequal2 = _interopRequireDefault(_shallowequal);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var ExpandIcon = _react2["default"].createClass({
	  displayName: 'ExpandIcon',
	
	  propTypes: {
	    record: _react.PropTypes.object,
	    prefixCls: _react.PropTypes.string,
	    expandable: _react.PropTypes.any,
	    expanded: _react.PropTypes.bool,
	    needIndentSpaced: _react.PropTypes.bool,
	    onExpand: _react.PropTypes.func
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    return !(0, _shallowequal2["default"])(nextProps, this.props);
	  },
	  render: function render() {
	    var _props = this.props;
	    var expandable = _props.expandable;
	    var prefixCls = _props.prefixCls;
	    var onExpand = _props.onExpand;
	    var needIndentSpaced = _props.needIndentSpaced;
	    var expanded = _props.expanded;
	    var record = _props.record;
	
	    if (expandable) {
	      var expandClassName = expanded ? 'expanded' : 'collapsed';
	      return _react2["default"].createElement('span', {
	        className: prefixCls + '-expand-icon ' + prefixCls + '-' + expandClassName,
	        onClick: function onClick(e) {
	          return onExpand(!expanded, record, e);
	        }
	      });
	    } else if (needIndentSpaced) {
	      return _react2["default"].createElement('span', { className: prefixCls + '-expand-icon ' + prefixCls + '-spaced' });
	    }
	    return null;
	  }
	});
	
	exports["default"] = ExpandIcon;
	module.exports = exports['default'];

/***/ }),
/* 844 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.measureScrollbar = measureScrollbar;
	exports.debounce = debounce;
	var scrollbarWidth = void 0;
	
	// Measure scrollbar width for padding body during modal show/hide
	var scrollbarMeasure = {
	  position: 'absolute',
	  top: '-9999px',
	  width: '50px',
	  height: '50px',
	  overflow: 'scroll'
	};
	
	function measureScrollbar() {
	  if (typeof document === 'undefined' || typeof window === 'undefined') {
	    return 0;
	  }
	  if (scrollbarWidth) {
	    return scrollbarWidth;
	  }
	  var scrollDiv = document.createElement('div');
	  for (var scrollProp in scrollbarMeasure) {
	    if (scrollbarMeasure.hasOwnProperty(scrollProp)) {
	      scrollDiv.style[scrollProp] = scrollbarMeasure[scrollProp];
	    }
	  }
	  document.body.appendChild(scrollDiv);
	  var width = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	  document.body.removeChild(scrollDiv);
	  scrollbarWidth = width;
	  return scrollbarWidth;
	}
	
	function debounce(func, wait, immediate) {
	  var timeout = void 0;
	  return function debounceFunc() {
	    var context = this;
	    var args = arguments;
	    // https://fb.me/react-event-pooling
	    if (args[0] && args[0].persist) {
	      args[0].persist();
	    }
	    var later = function later() {
	      timeout = null;
	      if (!immediate) {
	        func.apply(context, args);
	      }
	    };
	    var callNow = immediate && !timeout;
	    clearTimeout(timeout);
	    timeout = setTimeout(later, wait);
	    if (callNow) {
	      func.apply(context, args);
	    }
	  };
	}

/***/ }),
/* 845 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class, _temp;
	
	var _rcCheckbox = __webpack_require__(809);
	
	var _rcCheckbox2 = _interopRequireDefault(_rcCheckbox);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _Group = __webpack_require__(846);
	
	var _Group2 = _interopRequireDefault(_Group);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _reactAddonsPureRenderMixin = __webpack_require__(568);
	
	var _reactAddonsPureRenderMixin2 = _interopRequireDefault(_reactAddonsPureRenderMixin);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Checkbox = (_temp = _class = function (_React$Component) {
	  _inherits(Checkbox, _React$Component);
	
	  function Checkbox() {
	    _classCallCheck(this, Checkbox);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Checkbox.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _reactAddonsPureRenderMixin2["default"].shouldComponentUpdate.apply(this, args);
	  };
	
	  Checkbox.prototype.render = function render() {
	    var _classNames;
	
	    var _props = this.props,
	        prefixCls = _props.prefixCls,
	        style = _props.style,
	        children = _props.children,
	        className = _props.className,
	        restProps = _objectWithoutProperties(_props, ['prefixCls', 'style', 'children', 'className']);
	
	    var classString = (0, _classnames2["default"])((_classNames = {}, _defineProperty(_classNames, className, !!className), _defineProperty(_classNames, prefixCls + '-wrapper', true), _classNames));
	    return _react2["default"].createElement(
	      'label',
	      { className: classString, style: style },
	      _react2["default"].createElement(_rcCheckbox2["default"], _extends({}, restProps, { prefixCls: prefixCls, children: null })),
	      children !== undefined ? _react2["default"].createElement(
	        'span',
	        null,
	        children
	      ) : null
	    );
	  };
	
	  return Checkbox;
	}(_react2["default"].Component), _class.Group = _Group2["default"], _class.defaultProps = {
	  prefixCls: 'ant-checkbox'
	}, _temp);
	exports["default"] = Checkbox;
	module.exports = exports['default'];

/***/ }),
/* 846 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _class, _temp, _initialiseProps;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _index = __webpack_require__(845);
	
	var _index2 = _interopRequireDefault(_index);
	
	var _reactAddonsPureRenderMixin = __webpack_require__(568);
	
	var _reactAddonsPureRenderMixin2 = _interopRequireDefault(_reactAddonsPureRenderMixin);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var CheckboxGroup = (_temp = _class = function (_React$Component) {
	  _inherits(CheckboxGroup, _React$Component);
	
	  function CheckboxGroup(props) {
	    _classCallCheck(this, CheckboxGroup);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));
	
	    _initialiseProps.call(_this);
	
	    var value = void 0;
	    if ('value' in props) {
	      value = props.value || [];
	    } else if ('defaultValue' in props) {
	      value = props.defaultValue || [];
	    }
	    _this.state = { value: value };
	    return _this;
	  }
	
	  CheckboxGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if ('value' in nextProps) {
	      this.setState({
	        value: nextProps.value || []
	      });
	    }
	  };
	
	  CheckboxGroup.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _reactAddonsPureRenderMixin2["default"].shouldComponentUpdate.apply(this, args);
	  };
	
	  CheckboxGroup.prototype.getOptions = function getOptions() {
	    var options = this.props.options;
	
	    return options.map(function (option) {
	      if (typeof option === 'string') {
	        return {
	          label: option,
	          value: option
	        };
	      }
	      return option;
	    });
	  };
	
	  CheckboxGroup.prototype.render = function render() {
	    var _this2 = this;
	
	    var options = this.getOptions();
	    return _react2["default"].createElement(
	      'div',
	      { className: 'ant-checkbox-group' },
	      options.map(function (option) {
	        return _react2["default"].createElement(
	          _index2["default"],
	          { disabled: 'disabled' in option ? option.disabled : _this2.props.disabled,
	            checked: _this2.state.value.indexOf(option.value) !== -1,
	            onChange: function onChange() {
	              return _this2.toggleOption(option);
	            },
	            className: 'ant-checkbox-group-item', key: option.value
	          },
	          option.label
	        );
	      })
	    );
	  };
	
	  return CheckboxGroup;
	}(_react2["default"].Component), _class.defaultProps = {
	  options: [],
	  defaultValue: [],
	  onChange: function onChange() {}
	}, _class.propTypes = {
	  defaultValue: _react2["default"].PropTypes.array,
	  value: _react2["default"].PropTypes.array,
	  options: _react2["default"].PropTypes.array.isRequired,
	  onChange: _react2["default"].PropTypes.func
	}, _initialiseProps = function _initialiseProps() {
	  var _this3 = this;
	
	  this.toggleOption = function (option) {
	    var optionIndex = _this3.state.value.indexOf(option.value);
	    var value = [].concat(_toConsumableArray(_this3.state.value));
	    if (optionIndex === -1) {
	      value.push(option.value);
	    } else {
	      value.splice(optionIndex, 1);
	    }
	    if (!('value' in _this3.props)) {
	      _this3.setState({ value: value });
	    }
	    _this3.props.onChange(value);
	  };
	}, _temp);
	exports["default"] = CheckboxGroup;
	module.exports = exports['default'];

/***/ }),
/* 847 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _class, _temp, _initialiseProps;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _rcMenu = __webpack_require__(511);
	
	var _rcMenu2 = _interopRequireDefault(_rcMenu);
	
	var _dropdown = __webpack_require__(419);
	
	var _dropdown2 = _interopRequireDefault(_dropdown);
	
	var _icon = __webpack_require__(394);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _checkbox = __webpack_require__(845);
	
	var _checkbox2 = _interopRequireDefault(_checkbox);
	
	var _radio = __webpack_require__(805);
	
	var _radio2 = _interopRequireDefault(_radio);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var FilterDropdownMenuWrapper = function FilterDropdownMenuWrapper(_ref) {
	  var onClick = _ref.onClick,
	      children = _ref.children,
	      className = _ref.className;
	  return _react2["default"].createElement(
	    'div',
	    { className: className, onClick: onClick },
	    children
	  );
	};
	
	var FilterMenu = (_temp = _class = function (_React$Component) {
	  _inherits(FilterMenu, _React$Component);
	
	  function FilterMenu(props) {
	    _classCallCheck(this, FilterMenu);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));
	
	    _initialiseProps.call(_this);
	
	    var visible = 'filterDropdownVisible' in props.column ? props.column.filterDropdownVisible : false;
	
	    _this.state = {
	      selectedKeys: props.selectedKeys,
	      keyPathOfSelectedItem: {}, // 记录所有有选中子菜单的祖先菜单
	      visible: visible
	    };
	    return _this;
	  }
	
	  FilterMenu.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var column = nextProps.column;
	
	    var newState = {};
	    if ('selectedKeys' in nextProps) {
	      newState.selectedKeys = nextProps.selectedKeys;
	    }
	    if ('filterDropdownVisible' in column) {
	      newState.visible = column.filterDropdownVisible;
	    }
	    if (Object.keys(newState).length > 0) {
	      this.setState(newState);
	    }
	  };
	
	  FilterMenu.prototype.setVisible = function setVisible(visible) {
	    var column = this.props.column;
	
	    if (!('filterDropdownVisible' in column)) {
	      this.setState({ visible: visible });
	    }
	    if (column.onFilterDropdownVisibleChange) {
	      column.onFilterDropdownVisibleChange(visible);
	    }
	  };
	
	  FilterMenu.prototype.confirmFilter = function confirmFilter() {
	    if (this.state.selectedKeys !== this.props.selectedKeys) {
	      this.props.confirmFilter(this.props.column, this.state.selectedKeys);
	    }
	  };
	
	  FilterMenu.prototype.renderMenuItem = function renderMenuItem(item) {
	    var column = this.props.column;
	
	    var multiple = 'filterMultiple' in column ? column.filterMultiple : true;
	    var input = multiple ? _react2["default"].createElement(_checkbox2["default"], { checked: this.state.selectedKeys.indexOf(item.value.toString()) >= 0 }) : _react2["default"].createElement(_radio2["default"], { checked: this.state.selectedKeys.indexOf(item.value.toString()) >= 0 });
	    return _react2["default"].createElement(
	      _rcMenu.Item,
	      { key: item.value },
	      input,
	      _react2["default"].createElement(
	        'span',
	        null,
	        item.text
	      )
	    );
	  };
	
	  FilterMenu.prototype.renderMenus = function renderMenus(items) {
	    var _this2 = this;
	
	    return items.map(function (item) {
	      if (item.children && item.children.length > 0) {
	        var _ret = function () {
	          var keyPathOfSelectedItem = _this2.state.keyPathOfSelectedItem;
	
	          var containSelected = Object.keys(keyPathOfSelectedItem).some(function (key) {
	            return keyPathOfSelectedItem[key].indexOf(item.value) >= 0;
	          });
	          var subMenuCls = containSelected ? _this2.props.dropdownPrefixCls + '-submenu-contain-selected' : '';
	          return {
	            v: _react2["default"].createElement(
	              _rcMenu.SubMenu,
	              { title: item.text, className: subMenuCls, key: item.value.toString() },
	              item.children.map(function (child) {
	                return _this2.renderMenuItem(child);
	              })
	            )
	          };
	        }();
	
	        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	      }
	      return _this2.renderMenuItem(item);
	    });
	  };
	
	  FilterMenu.prototype.render = function render() {
	    var _props = this.props,
	        column = _props.column,
	        locale = _props.locale,
	        prefixCls = _props.prefixCls,
	        dropdownPrefixCls = _props.dropdownPrefixCls;
	    // default multiple selection in filter dropdown
	
	    var multiple = 'filterMultiple' in column ? column.filterMultiple : true;
	    var menus = column.filterDropdown ? _react2["default"].createElement(
	      FilterDropdownMenuWrapper,
	      null,
	      column.filterDropdown
	    ) : _react2["default"].createElement(
	      FilterDropdownMenuWrapper,
	      { className: prefixCls + '-dropdown' },
	      _react2["default"].createElement(
	        _rcMenu2["default"],
	        {
	          multiple: multiple,
	          onClick: this.handleMenuItemClick,
	          prefixCls: dropdownPrefixCls + '-menu',
	          onSelect: this.setSelectedKeys,
	          onDeselect: this.setSelectedKeys,
	          selectedKeys: this.state.selectedKeys
	        },
	        this.renderMenus(column.filters)
	      ),
	      _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-dropdown-btns' },
	        _react2["default"].createElement(
	          'a',
	          {
	            className: prefixCls + '-dropdown-link confirm',
	            onClick: this.handleConfirm
	          },
	          locale.filterConfirm
	        ),
	        _react2["default"].createElement(
	          'a',
	          {
	            className: prefixCls + '-dropdown-link clear',
	            onClick: this.handleClearFilters
	          },
	          locale.filterReset
	        )
	      )
	    );
	
	    var dropdownSelectedClass = this.props.selectedKeys.length > 0 ? prefixCls + '-selected' : '';
	
	    return _react2["default"].createElement(
	      _dropdown2["default"],
	      {
	        trigger: ['click'],
	        overlay: menus,
	        visible: this.state.visible,
	        onVisibleChange: this.onVisibleChange
	      },
	      _react2["default"].createElement(_icon2["default"], { title: locale.filterTitle, type: 'filter', className: dropdownSelectedClass })
	    );
	  };
	
	  return FilterMenu;
	}(_react2["default"].Component), _class.defaultProps = {
	  handleFilter: function handleFilter() {},
	
	  column: {}
	}, _initialiseProps = function _initialiseProps() {
	  var _this3 = this;
	
	  this.setSelectedKeys = function (_ref2) {
	    var selectedKeys = _ref2.selectedKeys;
	
	    _this3.setState({ selectedKeys: selectedKeys });
	  };
	
	  this.handleClearFilters = function () {
	    _this3.setState({
	      selectedKeys: []
	    }, _this3.handleConfirm);
	  };
	
	  this.handleConfirm = function () {
	    _this3.setVisible(false);
	    _this3.confirmFilter();
	  };
	
	  this.onVisibleChange = function (visible) {
	    _this3.setVisible(visible);
	    if (!visible) {
	      _this3.confirmFilter();
	    }
	  };
	
	  this.handleMenuItemClick = function (info) {
	    if (info.keyPath.length <= 1) {
	      return;
	    }
	    var keyPathOfSelectedItem = _this3.state.keyPathOfSelectedItem;
	    if (_this3.state.selectedKeys.indexOf(info.key) >= 0) {
	      // deselect SubMenu child
	      delete keyPathOfSelectedItem[info.key];
	    } else {
	      // select SubMenu child
	      keyPathOfSelectedItem[info.key] = info.keyPath;
	    }
	    _this3.setState({ keyPathOfSelectedItem: keyPathOfSelectedItem });
	  };
	}, _temp);
	exports["default"] = FilterMenu;
	module.exports = exports['default'];

/***/ }),
/* 848 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Pagination = __webpack_require__(849);
	
	var _Pagination2 = _interopRequireDefault(_Pagination);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = _Pagination2["default"];
	module.exports = exports['default'];

/***/ }),
/* 849 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class, _temp;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _rcPagination = __webpack_require__(850);
	
	var _rcPagination2 = _interopRequireDefault(_rcPagination);
	
	var _select = __webpack_require__(505);
	
	var _select2 = _interopRequireDefault(_select);
	
	var _MiniSelect = __webpack_require__(856);
	
	var _MiniSelect2 = _interopRequireDefault(_MiniSelect);
	
	var _zh_CN = __webpack_require__(857);
	
	var _zh_CN2 = _interopRequireDefault(_zh_CN);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Pagination = (_temp = _class = function (_React$Component) {
	  _inherits(Pagination, _React$Component);
	
	  function Pagination() {
	    _classCallCheck(this, Pagination);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Pagination.prototype.render = function render() {
	    var className = this.props.className;
	    var selectComponentClass = _select2["default"];
	
	    var locale = void 0;
	    if (this.context.antLocale && this.context.antLocale.Pagination) {
	      locale = this.context.antLocale.Pagination;
	    } else {
	      locale = this.props.locale;
	    }
	
	    if (this.props.size === 'small') {
	      className += ' mini';
	      selectComponentClass = _MiniSelect2["default"];
	    }
	
	    return _react2["default"].createElement(_rcPagination2["default"], _extends({ selectComponentClass: selectComponentClass,
	      selectPrefixCls: 'ant-select'
	    }, this.props, {
	      locale: locale,
	      className: className
	    }));
	  };
	
	  return Pagination;
	}(_react2["default"].Component), _class.defaultProps = {
	  locale: _zh_CN2["default"],
	  className: '',
	  prefixCls: 'ant-pagination'
	}, _class.contextTypes = {
	  antLocale: _react2["default"].PropTypes.object
	}, _temp);
	exports["default"] = Pagination;
	module.exports = exports['default'];

/***/ }),
/* 850 */
/***/ (function(module, exports, __webpack_require__) {

	// export this package's api
	'use strict';
	
	module.exports = __webpack_require__(851);

/***/ }),
/* 851 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var React = __webpack_require__(1);
	var Pager = __webpack_require__(852);
	var Options = __webpack_require__(853);
	var KEYCODE = __webpack_require__(854);
	var LOCALE = __webpack_require__(855);
	
	function noop() {}
	
	var Pagination = (function (_React$Component) {
	  _inherits(Pagination, _React$Component);
	
	  function Pagination(props) {
	    var _this = this;
	
	    _classCallCheck(this, Pagination);
	
	    _get(Object.getPrototypeOf(Pagination.prototype), 'constructor', this).call(this, props);
	
	    var hasOnChange = props.onChange !== noop;
	    var hasCurrent = ('current' in props);
	    if (hasCurrent && !hasOnChange) {
	      console.warn('Warning: You provided a `current` prop to a Pagination component without an `onChange` handler. This will render a read-only component.'); // eslint-disable-line
	    }
	
	    var current = props.defaultCurrent;
	    if ('current' in props) {
	      current = props.current;
	    }
	
	    var pageSize = props.defaultPageSize;
	    if ('pageSize' in props) {
	      pageSize = props.pageSize;
	    }
	
	    this.state = {
	      current: current,
	      _current: current,
	      pageSize: pageSize
	    };
	
	    ['render', '_handleChange', '_handleKeyUp', '_handleKeyDown', '_changePageSize', '_isValid', '_prev', '_next', '_hasPrev', '_hasNext', '_jumpPrev', '_jumpNext'].forEach(function (method) {
	      return _this[method] = _this[method].bind(_this);
	    });
	  }
	
	  _createClass(Pagination, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if ('current' in nextProps) {
	        this.setState({
	          current: nextProps.current,
	          _current: nextProps.current
	        });
	      }
	
	      if ('pageSize' in nextProps) {
	        var newState = {};
	        var current = this.state.current;
	        var newCurrent = this._calcPage(nextProps.pageSize);
	        current = current > newCurrent ? newCurrent : current;
	        if (!('current' in nextProps)) {
	          newState.current = current;
	          newState._current = current;
	        }
	        newState.pageSize = nextProps.pageSize;
	        this.setState(newState);
	      }
	    }
	
	    // private methods
	
	  }, {
	    key: '_calcPage',
	    value: function _calcPage(p) {
	      var pageSize = p;
	      if (typeof pageSize === 'undefined') {
	        pageSize = this.state.pageSize;
	      }
	      return Math.floor((this.props.total - 1) / pageSize) + 1;
	    }
	  }, {
	    key: '_isValid',
	    value: function _isValid(page) {
	      return typeof page === 'number' && page >= 1 && page !== this.state.current;
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(evt) {
	      if (evt.keyCode === KEYCODE.ARROW_UP || evt.keyCode === KEYCODE.ARROW_DOWN) {
	        evt.preventDefault();
	      }
	    }
	  }, {
	    key: '_handleKeyUp',
	    value: function _handleKeyUp(evt) {
	      var _val = evt.target.value;
	      var val = undefined;
	
	      if (_val === '') {
	        val = _val;
	      } else if (isNaN(Number(_val))) {
	        val = this.state._current;
	      } else {
	        val = Number(_val);
	      }
	
	      this.setState({
	        _current: val
	      });
	
	      if (evt.keyCode === KEYCODE.ENTER) {
	        this._handleChange(val);
	      } else if (evt.keyCode === KEYCODE.ARROW_UP) {
	        this._handleChange(val - 1);
	      } else if (evt.keyCode === KEYCODE.ARROW_DOWN) {
	        this._handleChange(val + 1);
	      }
	    }
	  }, {
	    key: '_changePageSize',
	    value: function _changePageSize(size) {
	      var current = this.state.current;
	      var newCurrent = this._calcPage(size);
	      current = current > newCurrent ? newCurrent : current;
	      if (typeof size === 'number') {
	        if (!('pageSize' in this.props)) {
	          this.setState({
	            pageSize: size
	          });
	        }
	        if (!('current' in this.props)) {
	          this.setState({
	            current: current,
	            _current: current
	          });
	        }
	      }
	      this.props.onShowSizeChange(current, size);
	    }
	  }, {
	    key: '_handleChange',
	    value: function _handleChange(p) {
	      var page = p;
	      if (this._isValid(page)) {
	        if (page > this._calcPage()) {
	          page = this._calcPage();
	        }
	
	        if (!('current' in this.props)) {
	          this.setState({
	            current: page,
	            _current: page
	          });
	        }
	
	        this.props.onChange(page);
	
	        return page;
	      }
	
	      return this.state.current;
	    }
	  }, {
	    key: '_prev',
	    value: function _prev() {
	      if (this._hasPrev()) {
	        this._handleChange(this.state.current - 1);
	      }
	    }
	  }, {
	    key: '_next',
	    value: function _next() {
	      if (this._hasNext()) {
	        this._handleChange(this.state.current + 1);
	      }
	    }
	  }, {
	    key: '_jumpPrev',
	    value: function _jumpPrev() {
	      this._handleChange(Math.max(1, this.state.current - 5));
	    }
	  }, {
	    key: '_jumpNext',
	    value: function _jumpNext() {
	      this._handleChange(Math.min(this._calcPage(), this.state.current + 5));
	    }
	  }, {
	    key: '_hasPrev',
	    value: function _hasPrev() {
	      return this.state.current > 1;
	    }
	  }, {
	    key: '_hasNext',
	    value: function _hasNext() {
	      return this.state.current < this._calcPage();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var props = this.props;
	      var locale = props.locale;
	
	      var prefixCls = props.prefixCls;
	      var allPages = this._calcPage();
	      var pagerList = [];
	      var jumpPrev = null;
	      var jumpNext = null;
	      var firstPager = null;
	      var lastPager = null;
	
	      if (props.simple) {
	        return React.createElement(
	          'ul',
	          { className: prefixCls + ' ' + prefixCls + '-simple ' + props.className },
	          React.createElement(
	            'li',
	            { title: locale.prev_page, onClick: this._prev, className: (this._hasPrev() ? '' : prefixCls + '-disabled ') + (prefixCls + '-prev') },
	            React.createElement('a', null)
	          ),
	          React.createElement(
	            'div',
	            { title: this.state.current + '/' + allPages, className: prefixCls + '-simple-pager' },
	            React.createElement('input', { type: 'text', value: this.state._current, onKeyDown: this._handleKeyDown, onKeyUp: this._handleKeyUp, onChange: this._handleKeyUp }),
	            React.createElement(
	              'span',
	              { className: prefixCls + '-slash' },
	              '／'
	            ),
	            allPages
	          ),
	          React.createElement(
	            'li',
	            { title: locale.next_page, onClick: this._next, className: (this._hasNext() ? '' : prefixCls + '-disabled ') + (prefixCls + '-next') },
	            React.createElement('a', null)
	          )
	        );
	      }
	
	      if (allPages <= 9) {
	        for (var i = 1; i <= allPages; i++) {
	          var active = this.state.current === i;
	          pagerList.push(React.createElement(Pager, { locale: locale, rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, i), key: i, page: i, active: active }));
	        }
	      } else {
	        jumpPrev = React.createElement(
	          'li',
	          { title: locale.prev_5, key: 'prev', onClick: this._jumpPrev, className: prefixCls + '-jump-prev' },
	          React.createElement('a', null)
	        );
	        jumpNext = React.createElement(
	          'li',
	          { title: locale.next_5, key: 'next', onClick: this._jumpNext, className: prefixCls + '-jump-next' },
	          React.createElement('a', null)
	        );
	        lastPager = React.createElement(Pager, {
	          locale: props.locale,
	          last: true, rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, allPages), key: allPages, page: allPages, active: false });
	        firstPager = React.createElement(Pager, {
	          locale: props.locale,
	          rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, 1), key: 1, page: 1, active: false });
	
	        var current = this.state.current;
	
	        var left = Math.max(1, current - 2);
	        var right = Math.min(current + 2, allPages);
	
	        if (current - 1 <= 2) {
	          right = 1 + 4;
	        }
	
	        if (allPages - current <= 2) {
	          left = allPages - 4;
	        }
	
	        for (var i = left; i <= right; i++) {
	          var active = current === i;
	          pagerList.push(React.createElement(Pager, {
	            locale: props.locale,
	            rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, i), key: i, page: i, active: active }));
	        }
	
	        if (current - 1 >= 4) {
	          pagerList.unshift(jumpPrev);
	        }
	        if (allPages - current >= 4) {
	          pagerList.push(jumpNext);
	        }
	
	        if (left !== 1) {
	          pagerList.unshift(firstPager);
	        }
	        if (right !== allPages) {
	          pagerList.push(lastPager);
	        }
	      }
	
	      var totalText = null;
	
	      if (props.showTotal) {
	        totalText = React.createElement(
	          'span',
	          { className: prefixCls + '-total-text' },
	          props.showTotal(props.total)
	        );
	      }
	
	      return React.createElement(
	        'ul',
	        { className: prefixCls + ' ' + props.className,
	          unselectable: 'unselectable' },
	        totalText,
	        React.createElement(
	          'li',
	          { title: locale.prev_page, onClick: this._prev, className: (this._hasPrev() ? '' : prefixCls + '-disabled ') + (prefixCls + '-prev') },
	          React.createElement('a', null)
	        ),
	        pagerList,
	        React.createElement(
	          'li',
	          { title: locale.next_page, onClick: this._next, className: (this._hasNext() ? '' : prefixCls + '-disabled ') + (prefixCls + '-next') },
	          React.createElement('a', null)
	        ),
	        React.createElement(Options, {
	          locale: props.locale,
	          rootPrefixCls: prefixCls,
	          selectComponentClass: props.selectComponentClass,
	          selectPrefixCls: props.selectPrefixCls,
	          changeSize: this.props.showSizeChanger ? this._changePageSize.bind(this) : null,
	          current: this.state.current,
	          pageSize: this.state.pageSize,
	          pageSizeOptions: this.props.pageSizeOptions,
	          quickGo: this.props.showQuickJumper ? this._handleChange.bind(this) : null })
	      );
	    }
	  }]);
	
	  return Pagination;
	})(React.Component);
	
	Pagination.propTypes = {
	  current: React.PropTypes.number,
	  defaultCurrent: React.PropTypes.number,
	  total: React.PropTypes.number,
	  pageSize: React.PropTypes.number,
	  defaultPageSize: React.PropTypes.number,
	  onChange: React.PropTypes.func,
	  showSizeChanger: React.PropTypes.bool,
	  onShowSizeChange: React.PropTypes.func,
	  selectComponentClass: React.PropTypes.func,
	  showQuickJumper: React.PropTypes.bool,
	  pageSizeOptions: React.PropTypes.arrayOf(React.PropTypes.string),
	  showTotal: React.PropTypes.func,
	  locale: React.PropTypes.object
	};
	
	Pagination.defaultProps = {
	  defaultCurrent: 1,
	  total: 0,
	  defaultPageSize: 10,
	  onChange: noop,
	  className: '',
	  selectPrefixCls: 'rc-select',
	  prefixCls: 'rc-pagination',
	  selectComponentClass: null,
	  showQuickJumper: false,
	  showSizeChanger: false,
	  onShowSizeChange: noop,
	  locale: LOCALE
	};
	
	module.exports = Pagination;

/***/ }),
/* 852 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var React = __webpack_require__(1);
	
	var Pager = (function (_React$Component) {
	  _inherits(Pager, _React$Component);
	
	  function Pager() {
	    _classCallCheck(this, Pager);
	
	    _get(Object.getPrototypeOf(Pager.prototype), 'constructor', this).apply(this, arguments);
	  }
	
	  _createClass(Pager, [{
	    key: 'render',
	    value: function render() {
	      var props = this.props;
	      var prefixCls = props.rootPrefixCls + '-item';
	      var cls = prefixCls + ' ' + prefixCls + '-' + props.page;
	
	      if (props.active) {
	        cls = cls + ' ' + prefixCls + '-active';
	      }
	
	      return React.createElement(
	        'li',
	        { title: props.page, className: cls, onClick: props.onClick },
	        React.createElement(
	          'a',
	          null,
	          props.page
	        )
	      );
	    }
	  }]);
	
	  return Pager;
	})(React.Component);
	
	Pager.propTypes = {
	  page: React.PropTypes.number,
	  active: React.PropTypes.bool,
	  last: React.PropTypes.bool,
	  locale: React.PropTypes.object
	};
	
	module.exports = Pager;

/***/ }),
/* 853 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var React = __webpack_require__(1);
	var KEYCODE = __webpack_require__(854);
	
	var Options = (function (_React$Component) {
	  _inherits(Options, _React$Component);
	
	  function Options(props) {
	    var _this = this;
	
	    _classCallCheck(this, Options);
	
	    _get(Object.getPrototypeOf(Options.prototype), 'constructor', this).call(this, props);
	
	    this.state = {
	      current: props.current,
	      _current: props.current
	    };
	
	    ['_handleChange', '_changeSize', '_go', '_buildOptionText'].forEach(function (method) {
	      return _this[method] = _this[method].bind(_this);
	    });
	  }
	
	  _createClass(Options, [{
	    key: '_buildOptionText',
	    value: function _buildOptionText(value) {
	      return value + ' ' + this.props.locale.items_per_page;
	    }
	  }, {
	    key: '_changeSize',
	    value: function _changeSize(value) {
	      this.props.changeSize(Number(value));
	    }
	  }, {
	    key: '_handleChange',
	    value: function _handleChange(evt) {
	      var _val = evt.target.value;
	
	      this.setState({
	        _current: _val
	      });
	    }
	  }, {
	    key: '_go',
	    value: function _go(e) {
	      var _val = e.target.value;
	      if (_val === '') {
	        return;
	      }
	      var val = Number(this.state._current);
	      if (isNaN(val)) {
	        val = this.state.current;
	      }
	      if (e.keyCode === KEYCODE.ENTER) {
	        var c = this.props.quickGo(val);
	        this.setState({
	          _current: c,
	          current: c
	        });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var props = this.props;
	      var state = this.state;
	      var locale = props.locale;
	      var prefixCls = props.rootPrefixCls + '-options';
	      var changeSize = props.changeSize;
	      var quickGo = props.quickGo;
	      var buildOptionText = props.buildOptionText || this._buildOptionText;
	      var Select = props.selectComponentClass;
	      var changeSelect = null;
	      var goInput = null;
	
	      if (!(changeSize || quickGo)) {
	        return null;
	      }
	
	      if (changeSize && Select) {
	        (function () {
	          var Option = Select.Option;
	          var pageSize = props.pageSize || props.pageSizeOptions[0];
	          var options = props.pageSizeOptions.map(function (opt, i) {
	            return React.createElement(
	              Option,
	              { key: i, value: opt },
	              buildOptionText(opt)
	            );
	          });
	
	          changeSelect = React.createElement(
	            Select,
	            {
	              prefixCls: props.selectPrefixCls, showSearch: false,
	              className: prefixCls + '-size-changer',
	              optionLabelProp: 'children',
	              dropdownMatchSelectWidth: false,
	              value: pageSize + '', onChange: _this2._changeSize },
	            options
	          );
	        })();
	      }
	
	      if (quickGo) {
	        goInput = React.createElement(
	          'div',
	          { className: prefixCls + '-quick-jumper' },
	          locale.jump_to,
	          React.createElement('input', { type: 'text', value: state._current, onChange: this._handleChange.bind(this), onKeyUp: this._go.bind(this) }),
	          locale.page
	        );
	      }
	
	      return React.createElement(
	        'div',
	        { className: '' + prefixCls },
	        changeSelect,
	        goInput
	      );
	    }
	  }]);
	
	  return Options;
	})(React.Component);
	
	Options.propTypes = {
	  changeSize: React.PropTypes.func,
	  quickGo: React.PropTypes.func,
	  selectComponentClass: React.PropTypes.func,
	  current: React.PropTypes.number,
	  pageSizeOptions: React.PropTypes.arrayOf(React.PropTypes.string),
	  pageSize: React.PropTypes.number,
	  buildOptionText: React.PropTypes.func,
	  locale: React.PropTypes.object
	};
	
	Options.defaultProps = {
	  pageSizeOptions: ['10', '20', '30', '40']
	};
	
	module.exports = Options;

/***/ }),
/* 854 */
/***/ (function(module, exports) {

	"use strict";
	
	module.exports = {
	  ZERO: 48,
	  NINE: 57,
	
	  NUMPAD_ZERO: 96,
	  NUMPAD_NINE: 105,
	
	  BACKSPACE: 8,
	  DELETE: 46,
	  ENTER: 13,
	
	  ARROW_UP: 38,
	  ARROW_DOWN: 40
	};

/***/ }),
/* 855 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  // Options.jsx
	  items_per_page: '条/页',
	  jump_to: '跳至',
	  page: '页',
	
	  // Pagination.jsx
	  prev_page: '上一页',
	  next_page: '下一页',
	  prev_5: '向前 5 页',
	  next_5: '向后 5 页'
	};
	module.exports = exports['default'];

/***/ }),
/* 856 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class, _temp;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _select = __webpack_require__(505);
	
	var _select2 = _interopRequireDefault(_select);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var MiniSelect = (_temp = _class = function (_React$Component) {
	  _inherits(MiniSelect, _React$Component);
	
	  function MiniSelect() {
	    _classCallCheck(this, MiniSelect);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  MiniSelect.prototype.render = function render() {
	    return _react2["default"].createElement(_select2["default"], _extends({ size: 'small' }, this.props));
	  };
	
	  return MiniSelect;
	}(_react2["default"].Component), _class.Option = _select2["default"].Option, _temp);
	exports["default"] = MiniSelect;
	module.exports = exports['default'];

/***/ }),
/* 857 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(855);

/***/ }),
/* 858 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class, _temp;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(157);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _isCssAnimationSupported = __webpack_require__(859);
	
	var _isCssAnimationSupported2 = _interopRequireDefault(_isCssAnimationSupported);
	
	var _warning = __webpack_require__(413);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _object = __webpack_require__(495);
	
	var _object2 = _interopRequireDefault(_object);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Spin = (_temp = _class = function (_React$Component) {
	  _inherits(Spin, _React$Component);
	
	  function Spin(props) {
	    _classCallCheck(this, Spin);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));
	
	    var spinning = _this.getSpinning(props);
	    _this.state = {
	      spinning: spinning
	    };
	    return _this;
	  }
	
	  Spin.prototype.isNestedPattern = function isNestedPattern() {
	    return !!(this.props && this.props.children);
	  };
	
	  Spin.prototype.componentDidMount = function componentDidMount() {
	    (0, _warning2["default"])(!('spining' in this.props), '`spining` property of Popover is a spell mistake, use `spinning` instead.');
	    if (!(0, _isCssAnimationSupported2["default"])()) {
	      // Show text in IE8/9
	      (0, _reactDom.findDOMNode)(this).className += ' ' + this.props.prefixCls + '-show-text';
	    }
	  };
	
	  Spin.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.debounceTimeout) {
	      clearTimeout(this.debounceTimeout);
	    }
	  };
	
	  Spin.prototype.getSpinning = function getSpinning(props) {
	    // Backwards support
	    if ('spining' in props) {
	      (0, _warning2["default"])(false, '`spining` property of Spin is a spell mistake, use `spinning` instead.');
	      return props.spining;
	    }
	    return props.spinning;
	  };
	
	  Spin.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this2 = this;
	
	    var currentSpinning = this.getSpinning(this.props);
	    var spinning = this.getSpinning(nextProps);
	    if (this.debounceTimeout) {
	      clearTimeout(this.debounceTimeout);
	    }
	    if (currentSpinning && !spinning) {
	      this.debounceTimeout = setTimeout(function () {
	        return _this2.setState({ spinning: spinning });
	      }, 500);
	    } else {
	      this.setState({ spinning: spinning });
	    }
	  };
	
	  Spin.prototype.render = function render() {
	    var _classNames;
	
	    var _props = this.props,
	        className = _props.className,
	        size = _props.size,
	        prefixCls = _props.prefixCls,
	        tip = _props.tip,
	        restProps = _objectWithoutProperties(_props, ['className', 'size', 'prefixCls', 'tip']);
	
	    var spinning = this.state.spinning;
	
	
	    var spinClassName = (0, _classnames2["default"])((_classNames = {}, _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, prefixCls + '-sm', size === 'small'), _defineProperty(_classNames, prefixCls + '-lg', size === 'large'), _defineProperty(_classNames, prefixCls + '-spinning', spinning), _defineProperty(_classNames, prefixCls + '-show-text', !!this.props.tip), _defineProperty(_classNames, className, !!className), _classNames));
	
	    // fix https://fb.me/react-unknown-prop
	    var divProps = (0, _object2["default"])(restProps, ['spinning']);
	
	    var spinElement = _react2["default"].createElement(
	      'div',
	      _extends({}, divProps, { className: spinClassName }),
	      _react2["default"].createElement('span', { className: prefixCls + '-dot' }),
	      _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-text' },
	        tip || '加载中...'
	      )
	    );
	
	    if (this.isNestedPattern()) {
	      return _react2["default"].createElement(
	        'div',
	        _extends({}, divProps, { className: spinning ? prefixCls + '-nested-loading' : '' }),
	        spinElement,
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-container' },
	          this.props.children
	        )
	      );
	    }
	    return spinElement;
	  };
	
	  return Spin;
	}(_react2["default"].Component), _class.defaultProps = {
	  prefixCls: 'ant-spin',
	  spinning: true
	}, _class.propTypes = {
	  className: _react2["default"].PropTypes.string,
	  size: _react2["default"].PropTypes.oneOf(['small', 'default', 'large'])
	}, _temp);
	exports["default"] = Spin;
	module.exports = exports['default'];

/***/ }),
/* 859 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var animation = void 0;
	
	function isCssAnimationSupported() {
	  if (animation !== undefined) {
	    return animation;
	  }
	  var domPrefixes = 'Webkit Moz O ms Khtml'.split(' ');
	  var elm = document.createElement('div');
	  if (elm.style.animationName !== undefined) {
	    animation = true;
	  }
	  if (animation !== undefined) {
	    for (var i = 0; i < domPrefixes.length; i++) {
	      if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {
	        animation = true;
	        break;
	      }
	    }
	  }
	  animation = animation || false;
	  return animation;
	}
	
	exports["default"] = isCssAnimationSupported;
	module.exports = exports['default'];

/***/ }),
/* 860 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports.flatArray = flatArray;
	function flatArray() {
	  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  var childrenName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'children';
	
	  var result = [];
	  var loop = function loop(array) {
	    array.forEach(function (item) {
	      var newItem = _extends({}, item);
	      delete newItem[childrenName];
	      result.push(newItem);
	      if (item[childrenName] && item[childrenName].length > 0) {
	        loop(item[childrenName]);
	      }
	    });
	  };
	  loop(data);
	  return result;
	}

/***/ }),
/* 861 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(399);
	
	__webpack_require__(862);
	
	__webpack_require__(820);
	
	__webpack_require__(601);
	
	__webpack_require__(475);
	
	__webpack_require__(863);
	
	__webpack_require__(865);

/***/ }),
/* 862 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 863 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(399);
	
	__webpack_require__(864);

/***/ }),
/* 864 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 865 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(399);
	
	__webpack_require__(866);
	
	__webpack_require__(582);
	
	__webpack_require__(578);

/***/ }),
/* 866 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 867 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _pagination = __webpack_require__(848);
	
	var _pagination2 = _interopRequireDefault(_pagination);
	
	var _button = __webpack_require__(391);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _inputNumber = __webpack_require__(868);
	
	var _inputNumber2 = _interopRequireDefault(_inputNumber);
	
	var _select = __webpack_require__(505);
	
	var _select2 = _interopRequireDefault(_select);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	__webpack_require__(865);
	
	__webpack_require__(401);
	
	__webpack_require__(871);
	
	__webpack_require__(582);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _icon = __webpack_require__(477);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	__webpack_require__(873);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Option = _select2["default"].Option;
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        var currentPageSize = _this.props.pageSize;
	        _this.state = {
	            jumpPage: null,
	            currentPageSize: currentPageSize || 10,
	            current: props.current
	        };
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            this.setState({
	                current: nextProps.current,
	                jumpPage: nextProps.current
	            });
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.setState({
	                jumpPage: 1
	            });
	        }
	    }, {
	        key: 'onShowSizeChange',
	        value: function onShowSizeChange(pageSize) {
	            this.setState({
	                currentPageSize: pageSize
	            });
	            this.props.onShowSizeChange(this.props.current, pageSize);
	        }
	    }, {
	        key: 'jumpToPage',
	        value: function jumpToPage() {
	            var page = this.state.jumpPage;
	            if (!page) return false;
	            this.props.onChange(page);
	        }
	    }, {
	        key: 'onJumpChange',
	        value: function onJumpChange(page) {
	            this.setState({
	                jumpPage: page,
	                current: page
	            });
	        }
	    }, {
	        key: 'goPageFirst',
	        value: function goPageFirst() {
	            var _this2 = this;
	
	            if (this.state.jumpPage > 1) {
	                this.setState({
	                    jumpPage: 1
	                }, function () {
	                    _this2.jumpToPage();
	                });
	            }
	        }
	    }, {
	        key: 'goPagePre',
	        value: function goPagePre() {
	            var _this3 = this;
	
	            if (this.state.jumpPage > 1) {
	                this.setState({
	                    jumpPage: this.state.jumpPage - 1,
	                    current: this.state.jumpPage - 1
	                }, function () {
	                    _this3.jumpToPage();
	                });
	            }
	        }
	    }, {
	        key: 'goPageNext',
	        value: function goPageNext() {
	            var _this4 = this;
	
	            var total = this.props.total;
	            var maxPage = Math.ceil(total / parseInt(this.state.currentPageSize));
	            if (this.state.jumpPage < maxPage) {
	                this.setState({
	                    jumpPage: this.state.jumpPage + 1,
	                    current: this.state.jumpPage + 1
	                }, function () {
	                    _this4.jumpToPage();
	                });
	            }
	        }
	    }, {
	        key: 'goPageLast',
	        value: function goPageLast() {
	            var _this5 = this;
	
	            var total = this.props.total;
	            var maxPage = Math.ceil(total / parseInt(this.state.currentPageSize));
	            if (this.state.jumpPage < maxPage) {
	                this.setState({
	                    jumpPage: maxPage,
	                    current: maxPage
	                }, function () {
	                    _this5.jumpToPage();
	                });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var state = this.state,
	                props = this.props;
	            var size = props.size,
	                current = props.current,
	                defaultCurrent = props.defaultCurrent,
	                total = props.total,
	                defaultPageSize = props.defaultPageSize,
	                pageSize = props.pageSize,
	                onChange = props.onChange,
	                showSizeChanger = props.showSizeChanger,
	                pageSizeOptions = props.pageSizeOptions,
	                onShowSizeChange = props.onShowSizeChange,
	                showQuickJumper = props.showQuickJumper,
	                showTotal = props.showTotal,
	                type = props.type;
	
	            var props_new = {};
	            size ? props_new.size = size : delete props_new.size;
	            current ? props_new.current = current : delete props_new.current;
	            defaultCurrent ? props_new.defaultCurrent = defaultCurrent : delete props_new.defaultCurrent;
	            total ? props_new.total = total : delete props_new.total;
	            defaultPageSize ? props_new.defaultPageSize = defaultPageSize : delete props_new.defaultPageSize;
	            pageSize ? props_new.pageSize = parseInt(pageSize) : delete props_new.pageSize;
	            onChange ? props_new.onChange = onChange : delete props_new.onChange;
	            showSizeChanger ? props_new.showSizeChanger = showSizeChanger : delete props_new.showSizeChanger;
	            pageSizeOptions ? props_new.pageSizeOptions = pageSizeOptions : delete props_new.pageSizeOptions;
	            onShowSizeChange ? props_new.onShowSizeChange = onShowSizeChange : delete props_new.onShowSizeChange;
	            showQuickJumper ? props_new.showQuickJumper = showQuickJumper : delete props_new.showQuickJumper;
	            showTotal ? props_new.showTotal = showTotal : delete props_new.showTotal;
	            type ? props_new.type = type : delete props_new.type;
	            var maxPage = Math.ceil(total / parseInt(state.currentPageSize));
	            return _react2["default"].createElement(
	                'div',
	                { className: 'pagination', style: props.style },
	                _react2["default"].createElement(
	                    'div',
	                    { className: 'pagination-left' },
	                    type != "simple" && _react2["default"].createElement(
	                        'span',
	                        null,
	                        '\u5171',
	                        total,
	                        '\u6761'
	                    ),
	                    showSizeChanger && _react2["default"].createElement(
	                        'div',
	                        { className: 'pagination-size-changer' },
	                        _react2["default"].createElement(
	                            'span',
	                            { className: 'pagination-size-changer-text1' },
	                            '\u6BCF\u9875\u663E\u793A'
	                        ),
	                        pageSizeOptions && pageSizeOptions.length > 0 ? _react2["default"].createElement(
	                            _select2["default"],
	                            { defaultValue: pageSize + "", onChange: this.onShowSizeChange.bind(this) },
	                            pageSizeOptions.map(function (item, index) {
	                                return _react2["default"].createElement(
	                                    Option,
	                                    { key: index, value: item + "" },
	                                    item
	                                );
	                            })
	                        ) : _react2["default"].createElement(
	                            _select2["default"],
	                            { defaultValue: 10 + "", onChange: this.onShowSizeChange.bind(this) },
	                            _react2["default"].createElement(
	                                Option,
	                                { value: 10 + "" },
	                                '10'
	                            ),
	                            _react2["default"].createElement(
	                                Option,
	                                { value: 20 + "" },
	                                '20'
	                            ),
	                            _react2["default"].createElement(
	                                Option,
	                                { value: 30 + "" },
	                                '30'
	                            ),
	                            _react2["default"].createElement(
	                                Option,
	                                { value: 40 + "" },
	                                '40'
	                            )
	                        ),
	                        _react2["default"].createElement(
	                            'span',
	                            { className: 'pagination-size-changer-text2' },
	                            '\u6761'
	                        )
	                    )
	                ),
	                showQuickJumper && _react2["default"].createElement(
	                    'div',
	                    { className: 'pagination-right' },
	                    _react2["default"].createElement(
	                        'span',
	                        { className: 'pagination-right-text1' },
	                        '\u8DF3\u81F3'
	                    ),
	                    _react2["default"].createElement(_inputNumber2["default"], { ref: 'pagination_jump_to', min: 1, max: Math.ceil(total / parseInt(state.currentPageSize)) ? maxPage : 1, value: state.current, onChange: this.onJumpChange.bind(this) }),
	                    _react2["default"].createElement(
	                        'span',
	                        { className: 'pagination-right-text2' },
	                        '/\xA0',
	                        Math.ceil(total / parseInt(state.currentPageSize)) ? maxPage : 1,
	                        '\u9875'
	                    ),
	                    _react2["default"].createElement(
	                        _button2["default"],
	                        { size: 'small', className: 'pagination-btn-jump', onClick: this.jumpToPage.bind(this) },
	                        '\u8DF3\u8F6C'
	                    )
	                ),
	                type != "simple" ? _react2["default"].createElement(_pagination2["default"], props_new) : _react2["default"].createElement(
	                    'div',
	                    { className: 'pagination-right' },
	                    _react2["default"].createElement(
	                        'span',
	                        { title: '\u7B2C\u4E00\u9875', className: "pagination-simple " + (state.current == 1 || total == 0 ? " ant-pagination-disabled" : ""), onClick: this.goPageFirst.bind(this) },
	                        _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-lineangle-left' })
	                    ),
	                    _react2["default"].createElement(
	                        'span',
	                        { title: '\u4E0A\u4E00\u9875', className: "pagination-simple " + (state.current == 1 || total == 0 ? " ant-pagination-disabled" : ""), onClick: this.goPagePre.bind(this) },
	                        _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-angle-sm-left' })
	                    ),
	                    _react2["default"].createElement(
	                        'span',
	                        { title: '\u4E0B\u4E00\u9875', className: "pagination-simple " + (state.current == maxPage || total == 0 ? " ant-pagination-disabled" : ""), onClick: this.goPageNext.bind(this) },
	                        _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-angle-sm-right' })
	                    ),
	                    _react2["default"].createElement(
	                        'span',
	                        { title: '\u6700\u540E\u4E00\u9875', className: "pagination-simple " + (state.current == maxPage || total == 0 ? " ant-pagination-disabled" : ""), onClick: this.goPageLast.bind(this) },
	                        _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-lineangle-right' })
	                    )
	                )
	            );
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	exports["default"] = App;

/***/ }),
/* 868 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class, _temp;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _rcInputNumber = __webpack_require__(869);
	
	var _rcInputNumber2 = _interopRequireDefault(_rcInputNumber);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var InputNumber = (_temp = _class = function (_React$Component) {
	  _inherits(InputNumber, _React$Component);
	
	  function InputNumber() {
	    _classCallCheck(this, InputNumber);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  InputNumber.prototype.render = function render() {
	    var _classNames;
	
	    var _props = this.props,
	        className = _props.className,
	        size = _props.size,
	        other = _objectWithoutProperties(_props, ['className', 'size']);
	
	    var inputNumberClass = (0, _classnames2["default"])((_classNames = {}, _defineProperty(_classNames, this.props.prefixCls + '-lg', size === 'large'), _defineProperty(_classNames, this.props.prefixCls + '-sm', size === 'small'), _defineProperty(_classNames, className, !!className), _classNames));
	
	    return _react2["default"].createElement(_rcInputNumber2["default"], _extends({ className: inputNumberClass }, other));
	  };
	
	  return InputNumber;
	}(_react2["default"].Component), _class.defaultProps = {
	  prefixCls: 'ant-input-number',
	  step: 1
	}, _temp);
	exports["default"] = InputNumber;
	module.exports = exports['default'];

/***/ }),
/* 869 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(508);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _extends2 = __webpack_require__(424);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _mixin = __webpack_require__(870);
	
	var _mixin2 = _interopRequireDefault(_mixin);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function noop() {}
	
	function preventDefault(e) {
	  e.preventDefault();
	}
	
	var InputNumber = _react2["default"].createClass({
	  displayName: 'InputNumber',
	
	  propTypes: {
	    onChange: _react.PropTypes.func,
	    onKeyDown: _react.PropTypes.func,
	    onFocus: _react.PropTypes.func,
	    onBlur: _react.PropTypes.func,
	    max: _react.PropTypes.number,
	    min: _react.PropTypes.number,
	    step: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
	  },
	
	  mixins: [_mixin2["default"]],
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-input-number'
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    this.componentDidUpdate();
	  },
	  componentDidUpdate: function componentDidUpdate() {
	    if (this.state.focused && document.activeElement !== this.refs.input) {
	      this.refs.input.focus();
	    }
	  },
	  onKeyDown: function onKeyDown(e) {
	    var _props;
	
	    if (e.keyCode === 38) {
	      this.up(e);
	    } else if (e.keyCode === 40) {
	      this.down(e);
	    }
	
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	
	    (_props = this.props).onKeyDown.apply(_props, [e].concat(args));
	  },
	  getValueFromEvent: function getValueFromEvent(e) {
	    return e.target.value;
	  },
	  focus: function focus() {
	    this.refs.input.focus();
	  },
	  render: function render() {
	    var _classNames;
	
	    var props = (0, _extends3["default"])({}, this.props);
	    var prefixCls = props.prefixCls;
	    var classes = (0, _classnames2["default"])((_classNames = {}, (0, _defineProperty3["default"])(_classNames, prefixCls, true), (0, _defineProperty3["default"])(_classNames, props.className, !!props.className), (0, _defineProperty3["default"])(_classNames, prefixCls + '-disabled', props.disabled), (0, _defineProperty3["default"])(_classNames, prefixCls + '-focused', this.state.focused), _classNames));
	    var upDisabledClass = '';
	    var downDisabledClass = '';
	    var value = this.state.value;
	    if (!isNaN(value)) {
	      var val = Number(value);
	      if (val >= props.max) {
	        upDisabledClass = prefixCls + '-handler-up-disabled';
	      }
	      if (val <= props.min) {
	        downDisabledClass = prefixCls + '-handler-down-disabled';
	      }
	    } else {
	      upDisabledClass = prefixCls + '-handler-up-disabled';
	      downDisabledClass = prefixCls + '-handler-down-disabled';
	    }
	
	    // focus state, show input value
	    // unfocus state, show valid value
	    var inputDisplayValue = void 0;
	    if (this.state.focused) {
	      inputDisplayValue = this.state.inputValue;
	    } else {
	      inputDisplayValue = this.state.value;
	    }
	
	    if (inputDisplayValue === undefined) {
	      inputDisplayValue = '';
	    }
	
	    // Remove React warning.
	    // Warning: Input elements must be either controlled
	    // or uncontrolled (specify either the value prop, or
	    // the defaultValue prop, but not both).
	    delete props.defaultValue;
	    // https://fb.me/react-unknown-prop
	    delete props.prefixCls;
	
	    // ref for test
	    return _react2["default"].createElement(
	      'div',
	      { className: classes, style: props.style },
	      _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-handler-wrap' },
	        _react2["default"].createElement(
	          'a',
	          {
	            unselectable: 'unselectable',
	            ref: 'up',
	            onClick: upDisabledClass ? noop : this.up,
	            className: prefixCls + '-handler ' + prefixCls + '-handler-up ' + upDisabledClass
	          },
	          _react2["default"].createElement('span', {
	            unselectable: 'unselectable',
	            className: prefixCls + '-handler-up-inner',
	            onClick: preventDefault
	          })
	        ),
	        _react2["default"].createElement(
	          'a',
	          {
	            unselectable: 'unselectable',
	            ref: 'down',
	            onClick: downDisabledClass ? noop : this.down,
	            className: prefixCls + '-handler ' + prefixCls + '-handler-down ' + downDisabledClass
	          },
	          _react2["default"].createElement('span', {
	            unselectable: 'unselectable',
	            className: prefixCls + '-handler-down-inner',
	            onClick: preventDefault
	          })
	        )
	      ),
	      _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-input-wrap' },
	        _react2["default"].createElement('input', (0, _extends3["default"])({}, props, {
	          style: null,
	          className: prefixCls + '-input',
	          autoComplete: 'off',
	          onFocus: this.onFocus,
	          onBlur: this.onBlur,
	          onKeyDown: this.onKeyDown,
	          autoFocus: props.autoFocus,
	          readOnly: props.readOnly,
	          disabled: props.disabled,
	          max: props.max,
	          min: props.min,
	          name: props.name,
	          onChange: this.onChange,
	          ref: 'input',
	          value: inputDisplayValue
	        }))
	      )
	    );
	  }
	});
	
	exports["default"] = InputNumber;
	module.exports = exports['default'];

/***/ }),
/* 870 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	function noop() {}
	
	exports["default"] = {
	  getDefaultProps: function getDefaultProps() {
	    return {
	      max: Infinity,
	      min: -Infinity,
	      step: 1,
	      style: {},
	      defaultValue: null,
	      onChange: noop,
	      onKeyDown: noop,
	      onFocus: noop,
	      onBlur: noop
	    };
	  },
	  getInitialState: function getInitialState() {
	    var value = void 0;
	    var props = this.props;
	    if ('value' in props) {
	      value = props.value;
	    } else {
	      value = props.defaultValue;
	    }
	    value = this.toPrecisionAsStep(value);
	    return {
	      inputValue: value,
	      value: value,
	      focused: props.autoFocus
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if ('value' in nextProps) {
	      var value = this.toPrecisionAsStep(nextProps.value);
	      this.setState({
	        inputValue: value,
	        value: value
	      });
	    }
	  },
	  onChange: function onChange(e) {
	    this.setInputValue(this.getValueFromEvent(e).trim());
	  },
	  onFocus: function onFocus() {
	    var _props;
	
	    this.setState({
	      focused: true
	    });
	    (_props = this.props).onFocus.apply(_props, arguments);
	  },
	  onBlur: function onBlur(e) {
	    var _props2;
	
	    this.setState({
	      focused: false
	    });
	    var value = this.getCurrentValidValue(this.getValueFromEvent(e).trim());
	    this.setValue(value);
	
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	
	    (_props2 = this.props).onBlur.apply(_props2, [e].concat(args));
	  },
	  getCurrentValidValue: function getCurrentValidValue(value) {
	    var val = value;
	    var props = this.props;
	    if (val === '') {
	      val = '';
	    } else if (!isNaN(val)) {
	      val = Number(val);
	      if (val < props.min) {
	        val = props.min;
	      }
	      if (val > props.max) {
	        val = props.max;
	      }
	    } else {
	      val = this.state.value;
	    }
	    return this.toPrecisionAsStep(val);
	  },
	  setValue: function setValue(v) {
	    if (!('value' in this.props)) {
	      this.setState({
	        value: v,
	        inputValue: v
	      });
	    }
	    var newValue = isNaN(v) || v === '' ? undefined : v;
	    if (newValue !== this.state.value) {
	      this.props.onChange(newValue);
	    } else {
	      // revert input value
	      this.setState({
	        inputValue: this.state.value
	      });
	    }
	  },
	  setInputValue: function setInputValue(v) {
	    this.setState({
	      inputValue: v
	    });
	  },
	  getPrecision: function getPrecision() {
	    var props = this.props;
	    var stepString = props.step.toString();
	    if (stepString.indexOf('e-') >= 0) {
	      return parseInt(stepString.slice(stepString.indexOf('e-') + 1), 10);
	    }
	    var precision = 0;
	    if (stepString.indexOf('.') >= 0) {
	      precision = stepString.length - stepString.indexOf('.') - 1;
	    }
	    return precision;
	  },
	  getPrecisionFactor: function getPrecisionFactor() {
	    var precision = this.getPrecision();
	    return Math.pow(10, precision);
	  },
	  toPrecisionAsStep: function toPrecisionAsStep(num) {
	    if (isNaN(num) || num === '') {
	      return num;
	    }
	    var precision = this.getPrecision();
	    return Number(Number(num).toFixed(Math.abs(precision)));
	  },
	  upStep: function upStep(val) {
	    var _props3 = this.props;
	    var step = _props3.step;
	    var min = _props3.min;
	
	    var precisionFactor = this.getPrecisionFactor();
	    var result = void 0;
	    if (typeof val === 'number') {
	      result = (precisionFactor * val + precisionFactor * step) / precisionFactor;
	    } else {
	      result = min === -Infinity ? step : min;
	    }
	    return this.toPrecisionAsStep(result);
	  },
	  downStep: function downStep(val) {
	    var _props4 = this.props;
	    var step = _props4.step;
	    var min = _props4.min;
	
	    var precisionFactor = this.getPrecisionFactor();
	    var result = void 0;
	    if (typeof val === 'number') {
	      result = (precisionFactor * val - precisionFactor * step) / precisionFactor;
	    } else {
	      result = min === -Infinity ? -step : min;
	    }
	    return this.toPrecisionAsStep(result);
	  },
	  step: function step(type, e) {
	    if (e) {
	      e.preventDefault();
	    }
	    var props = this.props;
	    if (props.disabled) {
	      return;
	    }
	    var value = this.getCurrentValidValue(this.state.value);
	    this.setState({ value: value });
	    if (isNaN(value)) {
	      return;
	    }
	    var val = this[type + 'Step'](value);
	    if (val > props.max || val < props.min) {
	      return;
	    }
	    this.setValue(val);
	    this.setState({
	      focused: true
	    });
	  },
	  down: function down(e) {
	    this.step('down', e);
	  },
	  up: function up(e) {
	    this.step('up', e);
	  }
	};
	module.exports = exports['default'];

/***/ }),
/* 871 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(399);
	
	__webpack_require__(872);

/***/ }),
/* 872 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 873 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 874 */,
/* 875 */,
/* 876 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _class, _temp;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _icon = __webpack_require__(477);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	__webpack_require__(877);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = (_temp = _class = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.state = {
	            show: [],
	            hidden: []
	        };
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.setShowHiddenList(this.props);
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (nextProps.total_width != this.props.total_width) {
	                this.setShowHiddenList(nextProps);
	            }
	
	            if (nextProps.list.length !== this.props.list.length) {
	                this.setShowHiddenList(nextProps);
	            }
	        }
	    }, {
	        key: 'setShowHiddenList',
	        value: function setShowHiddenList(_ref) {
	            var list = _ref.list,
	                total_width = _ref.total_width,
	                width = _ref.width;
	
	            var max = Math.floor(total_width / width);
	            var length = list.length;
	            if (max < length) {
	                max--; // 还要考虑more的位置
	            }
	            var show = [],
	                hidden = [];
	            list.forEach(function (item, index) {
	                if (index < max) {
	                    show.push(item);
	                } else {
	                    hidden.push(item);
	                }
	            });
	            this.setState({ show: show, hidden: hidden });
	        }
	    }, {
	        key: 'getDropdownStyle',
	        value: function getDropdownStyle() {
	            var placement = this.props.placement;
	            if (placement === 'bottom') {
	                return { top: '100%', left: 0 };
	            } else if (placement === 'top') {
	                return { top: 'auto', bottom: '100%', left: 0 };
	            }
	            return {};
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var props = this.props,
	                state = this.state;
	            var width = props.width,
	                renderItem = props.renderItem,
	                renderHidden = props.renderHidden;
	
	            var hidden = state.hidden;
	            var hasHidden = hidden.length > 0;
	
	            return _react2["default"].createElement(
	                'ul',
	                { className: 'auto-hide', style: { width: props.total_width } },
	                state.show.map(function (item, index) {
	                    return _react2["default"].createElement(
	                        'li',
	                        { className: 'auto-hide-item', style: { width: width }, key: index },
	                        renderItem(item)
	                    );
	                }),
	                hasHidden && _react2["default"].createElement(
	                    'li',
	                    { className: 'auto-hide-item more', style: { width: width } },
	                    props.more,
	                    _react2["default"].createElement(
	                        'div',
	                        { className: 'ant-dropdown', style: this.getDropdownStyle() },
	                        _react2["default"].createElement(
	                            'ul',
	                            { className: 'ant-dropdown-menu' },
	                            hidden.map(function (item, index) {
	                                return _react2["default"].createElement(
	                                    'li',
	                                    { className: 'ant-dropdown-menu-item', style: { width: width }, key: index },
	                                    (renderHidden || renderItem)(item)
	                                );
	                            })
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component), _class.defaultProps = {
	    total_width: 100,
	    width: 20,
	    placement: 'bottom',
	    more: _react2["default"].createElement(_icon2["default"], { type: 'more-horizontal' })
	}, _temp);
	exports["default"] = App;

/***/ }),
/* 877 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 878 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _loader = __webpack_require__(410);
	
	var _loader2 = _interopRequireDefault(_loader);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.ImageListDetailTemplate = (0, _loader2["default"])(function (a) {
	            return __webpack_require__.e/* require */(16, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(879)("./" + props.type)]; (a.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
	        });
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: "componentWillReceiveProps",
	        value: function componentWillReceiveProps(nextProps) {
	            if (nextProps.type !== this.props.type) {
	                this.ImageListDetailTemplate = (0, _loader2["default"])(function (a) {
	                    return __webpack_require__.e/* require */(16/* duplicate */, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(879)("./" + nextProps.type)]; (a.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
	                });
	            }
	        }
	    }, {
	        key: "render",
	        value: function render() {
	            var props = this.props;
	
	            return _react2["default"].createElement(this.ImageListDetailTemplate, {
	                height: props.height,
	                viewRoute: props.viewRoute,
	                value: props.value,
	                updateTime: props.updateTime,
	                uploadImgList: props.uploadImgList,
	                submitCallback: props.submitCallback,
	                condition: props.condition
	            });
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	exports["default"] = App;

/***/ }),
/* 879 */,
/* 880 */,
/* 881 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _class, _temp2;
	
	var _rcTabs = __webpack_require__(882);
	
	var _rcTabs2 = _interopRequireDefault(_rcTabs);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _icon = __webpack_require__(394);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
	
	var Tabs = (_temp2 = _class = function (_React$Component) {
	  _inherits(Tabs, _React$Component);
	
	  function Tabs() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, Tabs);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createNewTab = function (targetKey) {
	      _this.props.onEdit(targetKey, 'add');
	    }, _this.removeTab = function (targetKey, e) {
	      e.stopPropagation();
	      if (!targetKey) {
	        return;
	      }
	      _this.props.onEdit(targetKey, 'remove');
	    }, _this.handleChange = function (activeKey) {
	      _this.props.onChange(activeKey);
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  Tabs.prototype.render = function render() {
	    var _classNames,
	        _this2 = this;
	
	    var _props = this.props,
	        prefixCls = _props.prefixCls,
	        size = _props.size,
	        tabPosition = _props.tabPosition,
	        animation = _props.animation,
	        type = _props.type,
	        children = _props.children,
	        tabBarExtraContent = _props.tabBarExtraContent,
	        hideAdd = _props.hideAdd;
	
	    var className = (0, _classnames2["default"])((_classNames = {}, _defineProperty(_classNames, this.props.className, !!this.props.className), _defineProperty(_classNames, prefixCls + '-mini', size === 'small' || size === 'mini'), _defineProperty(_classNames, prefixCls + '-vertical', tabPosition === 'left' || tabPosition === 'right'), _defineProperty(_classNames, prefixCls + '-card', type.indexOf('card') >= 0), _defineProperty(_classNames, prefixCls + '-' + type, true), _classNames));
	    if (tabPosition === 'left' || tabPosition === 'right' || type.indexOf('card') >= 0) {
	      animation = null;
	    }
	    // only card type tabs can be added and closed
	    var childrenWithCross = void 0;
	    if (type === 'editable-card') {
	      childrenWithCross = [];
	      _react2["default"].Children.forEach(children, function (child, index) {
	        childrenWithCross.push((0, _react.cloneElement)(child, {
	          tab: _react2["default"].createElement(
	            'div',
	            null,
	            child.props.tab,
	            _react2["default"].createElement(_icon2["default"], { type: 'cross', onClick: function onClick(e) {
	                return _this2.removeTab(child.key, e);
	              } })
	          ),
	          key: child.key || index
	        }));
	      });
	      // Add new tab handler
	      if (!hideAdd) {
	        tabBarExtraContent = _react2["default"].createElement(
	          'span',
	          null,
	          _react2["default"].createElement(_icon2["default"], { type: 'plus', className: prefixCls + '-new-tab', onClick: this.createNewTab }),
	          tabBarExtraContent
	        );
	      }
	    }
	
	    tabBarExtraContent = tabBarExtraContent ? _react2["default"].createElement(
	      'div',
	      { className: prefixCls + '-extra-content' },
	      tabBarExtraContent
	    ) : null;
	
	    return _react2["default"].createElement(
	      _rcTabs2["default"],
	      _extends({}, this.props, {
	        className: className,
	        tabBarExtraContent: tabBarExtraContent,
	        onChange: this.handleChange,
	        animation: animation
	      }),
	      childrenWithCross || children
	    );
	  };
	
	  return Tabs;
	}(_react2["default"].Component), _class.TabPane = _rcTabs2["default"].TabPane, _class.defaultProps = {
	  prefixCls: 'ant-tabs',
	  animation: 'slide-horizontal',
	  type: 'line', // or 'card' 'editable-card'
	  onChange: function onChange() {},
	  onEdit: function onEdit() {},
	
	  hideAdd: false
	}, _temp2);
	exports["default"] = Tabs;
	module.exports = exports['default'];

/***/ }),
/* 882 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TabPane = exports["default"] = undefined;
	
	var _Tabs = __webpack_require__(883);
	
	var _Tabs2 = _interopRequireDefault(_Tabs);
	
	var _TabPane2 = __webpack_require__(885);
	
	var _TabPane3 = _interopRequireDefault(_TabPane2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports["default"] = _Tabs2["default"];
	exports.TabPane = _TabPane3["default"];

/***/ }),
/* 883 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(508);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _KeyCode = __webpack_require__(884);
	
	var _KeyCode2 = _interopRequireDefault(_KeyCode);
	
	var _TabPane = __webpack_require__(885);
	
	var _TabPane2 = _interopRequireDefault(_TabPane);
	
	var _Nav = __webpack_require__(886);
	
	var _Nav2 = _interopRequireDefault(_Nav);
	
	var _rcAnimate = __webpack_require__(313);
	
	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);
	
	var _classnames2 = __webpack_require__(393);
	
	var _classnames3 = _interopRequireDefault(_classnames2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function noop() {}
	
	function getDefaultActiveKey(props) {
	  var activeKey = void 0;
	  _react2["default"].Children.forEach(props.children, function (child) {
	    if (!activeKey && !child.props.disabled) {
	      activeKey = child.key;
	    }
	  });
	  return activeKey;
	}
	
	var Tabs = _react2["default"].createClass({
	  displayName: 'Tabs',
	
	  propTypes: {
	    destroyInactiveTabPane: _react.PropTypes.bool,
	    onTabClick: _react.PropTypes.func,
	    onChange: _react.PropTypes.func,
	    children: _react.PropTypes.any,
	    tabBarExtraContent: _react.PropTypes.any,
	    animation: _react.PropTypes.string,
	    prefixCls: _react.PropTypes.string,
	    className: _react.PropTypes.string,
	    tabPosition: _react.PropTypes.string
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-tabs',
	      destroyInactiveTabPane: false,
	      tabBarExtraContent: null,
	      onChange: noop,
	      tabPosition: 'top',
	      style: {},
	      contentStyle: {},
	      navStyle: {},
	      onTabClick: noop
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var activeKey = void 0;
	    if ('activeKey' in props) {
	      activeKey = props.activeKey;
	    } else if ('defaultActiveKey' in props) {
	      activeKey = props.defaultActiveKey;
	    } else {
	      activeKey = getDefaultActiveKey(props);
	    }
	    return {
	      activeKey: activeKey
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var newActiveKey = this.state.activeKey;
	    if ('activeKey' in nextProps) {
	      newActiveKey = nextProps.activeKey;
	      if (!newActiveKey) {
	        this.setState({
	          activeKey: newActiveKey
	        });
	        return;
	      }
	    }
	    var found = void 0;
	    _react2["default"].Children.forEach(nextProps.children, function (child) {
	      if (child.key === newActiveKey) {
	        found = true;
	      }
	    });
	    if (found) {
	      this.setActiveKey(newActiveKey, nextProps);
	    } else {
	      this.setActiveKey(getDefaultActiveKey(nextProps), nextProps);
	    }
	  },
	  onTabClick: function onTabClick(key) {
	    this.setActiveKey(key);
	    this.props.onTabClick(key);
	    if (this.state.activeKey !== key) {
	      this.props.onChange(key);
	    }
	  },
	  onNavKeyDown: function onNavKeyDown(e) {
	    var eventKeyCode = e.keyCode;
	    if (eventKeyCode === _KeyCode2["default"].RIGHT || eventKeyCode === _KeyCode2["default"].DOWN) {
	      e.preventDefault();
	      var nextKey = this.getNextActiveKey(true);
	      this.onTabClick(nextKey);
	    } else if (eventKeyCode === _KeyCode2["default"].LEFT || eventKeyCode === _KeyCode2["default"].UP) {
	      e.preventDefault();
	      var previousKey = this.getNextActiveKey(false);
	      this.onTabClick(previousKey);
	    }
	  },
	  getNextActiveKey: function getNextActiveKey(next) {
	    var activeKey = this.state.activeKey;
	    var children = [];
	    _react2["default"].Children.forEach(this.props.children, function (c) {
	      if (!c.props.disabled) {
	        if (next) {
	          children.push(c);
	        } else {
	          children.unshift(c);
	        }
	      }
	    });
	    var length = children.length;
	    var ret = length && children[0].key;
	    children.forEach(function (child, i) {
	      if (child.key === activeKey) {
	        if (i === length - 1) {
	          ret = children[0].key;
	        } else {
	          ret = children[i + 1].key;
	        }
	      }
	    });
	    return ret;
	  },
	  getTabPanes: function getTabPanes() {
	    var state = this.state;
	    var props = this.props;
	    var activeKey = state.activeKey;
	    var children = props.children;
	    var newChildren = [];
	
	    _react2["default"].Children.forEach(children, function (child) {
	      var key = child.key;
	      var active = activeKey === key;
	      newChildren.push(_react2["default"].cloneElement(child, {
	        active: active,
	        // eventKey: key,
	        rootPrefixCls: props.prefixCls
	      }));
	    });
	
	    return newChildren;
	  },
	  getIndexPair: function getIndexPair(props, currentActiveKey, activeKey) {
	    var keys = [];
	    _react2["default"].Children.forEach(props.children, function (c) {
	      keys.push(c.key);
	    });
	    var currentIndex = keys.indexOf(currentActiveKey);
	    var nextIndex = keys.indexOf(activeKey);
	    return {
	      currentIndex: currentIndex, nextIndex: nextIndex
	    };
	  },
	  setActiveKey: function setActiveKey(activeKey, ps) {
	    var props = ps || this.props;
	    var currentActiveKey = this.state.activeKey;
	    if (currentActiveKey === activeKey || 'activeKey' in props && props === this.props) {
	      return;
	    }
	    if (!currentActiveKey) {
	      this.setState({
	        activeKey: activeKey
	      });
	    } else {
	      var _getIndexPair = this.getIndexPair(props, currentActiveKey, activeKey);
	
	      var currentIndex = _getIndexPair.currentIndex;
	      var nextIndex = _getIndexPair.nextIndex;
	      // removed
	
	      if (currentIndex === -1) {
	        var newPair = this.getIndexPair(this.props, currentActiveKey, activeKey);
	        currentIndex = newPair.currentIndex;
	        nextIndex = newPair.nextIndex;
	      }
	      var tabMovingDirection = currentIndex > nextIndex ? 'backward' : 'forward';
	      this.setState({
	        activeKey: activeKey,
	        tabMovingDirection: tabMovingDirection
	      });
	    }
	  },
	  render: function render() {
	    var _classnames;
	
	    var props = this.props;
	    var destroyInactiveTabPane = props.destroyInactiveTabPane;
	    var prefixCls = props.prefixCls;
	    var tabPosition = props.tabPosition;
	    var className = props.className;
	    var animation = props.animation;
	
	    var cls = (0, _classnames3["default"])((_classnames = {}, (0, _defineProperty3["default"])(_classnames, prefixCls, 1), (0, _defineProperty3["default"])(_classnames, prefixCls + '-' + tabPosition, 1), (0, _defineProperty3["default"])(_classnames, className, !!className), _classnames));
	    var tabMovingDirection = this.state.tabMovingDirection;
	    var tabPanes = this.getTabPanes();
	    var transitionName = void 0;
	    transitionName = props.transitionName && props.transitionName[tabMovingDirection || 'backward'];
	    if (!transitionName && animation) {
	      transitionName = prefixCls + '-' + animation + '-' + (tabMovingDirection || 'backward');
	    }
	    if (destroyInactiveTabPane) {
	      tabPanes = tabPanes.filter(function (panel) {
	        return panel.props.active;
	      });
	    }
	    if (transitionName) {
	      if (destroyInactiveTabPane) {
	        tabPanes = _react2["default"].createElement(
	          _rcAnimate2["default"],
	          {
	            exclusive: true,
	            component: 'div',
	            transitionName: transitionName
	          },
	          tabPanes
	        );
	      } else {
	        tabPanes = _react2["default"].createElement(
	          _rcAnimate2["default"],
	          {
	            showProp: 'active',
	            exclusive: true,
	            component: 'div',
	            transitionName: transitionName
	          },
	          tabPanes
	        );
	      }
	    }
	    var contents = [_react2["default"].createElement(_Nav2["default"], {
	      prefixCls: prefixCls,
	      key: 'nav',
	      onKeyDown: this.onNavKeyDown,
	      tabBarExtraContent: this.props.tabBarExtraContent,
	      tabPosition: tabPosition,
	      style: props.navStyle,
	      onTabClick: this.onTabClick,
	      tabMovingDirection: tabMovingDirection,
	      panels: this.props.children,
	      activeKey: this.state.activeKey
	    }), _react2["default"].createElement(
	      'div',
	      {
	        className: prefixCls + '-content',
	        style: props.contentStyle,
	        key: 'content'
	      },
	      tabPanes
	    )];
	    if (tabPosition === 'bottom') {
	      contents.reverse();
	    }
	    return _react2["default"].createElement(
	      'div',
	      {
	        className: cls,
	        style: props.style
	      },
	      contents
	    );
	  }
	});
	
	Tabs.TabPane = _TabPane2["default"];
	
	exports["default"] = Tabs;
	module.exports = exports['default'];

/***/ }),
/* 884 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  /**
	   * LEFT
	   */
	  LEFT: 37, // also NUM_WEST
	  /**
	   * UP
	   */
	  UP: 38, // also NUM_NORTH
	  /**
	   * RIGHT
	   */
	  RIGHT: 39, // also NUM_EAST
	  /**
	   * DOWN
	   */
	  DOWN: 40 };
	module.exports = exports['default'];

/***/ }),
/* 885 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(508);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames2 = __webpack_require__(393);
	
	var _classnames3 = _interopRequireDefault(_classnames2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var TabPane = _react2["default"].createClass({
	  displayName: 'TabPane',
	
	  propTypes: {
	    active: _react.PropTypes.bool
	  },
	  render: function render() {
	    var _classnames;
	
	    var props = this.props;
	    this._isActived = this._isActived || props.active;
	    if (!this._isActived) {
	      return null;
	    }
	    var prefixCls = props.rootPrefixCls + '-tabpane';
	    var cls = (0, _classnames3["default"])((_classnames = {}, (0, _defineProperty3["default"])(_classnames, prefixCls + '-hidden', !props.active), (0, _defineProperty3["default"])(_classnames, prefixCls, 1), _classnames));
	    return _react2["default"].createElement(
	      'div',
	      {
	        role: 'tabpanel',
	        'aria-hidden': props.active ? 'false' : 'true',
	        className: cls
	      },
	      props.children
	    );
	  }
	});
	
	exports["default"] = TabPane;
	module.exports = exports['default'];

/***/ }),
/* 886 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(508);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _extends2 = __webpack_require__(424);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames3 = __webpack_require__(393);
	
	var _classnames4 = _interopRequireDefault(_classnames3);
	
	var _InkBarMixin = __webpack_require__(887);
	
	var _InkBarMixin2 = _interopRequireDefault(_InkBarMixin);
	
	var _utils = __webpack_require__(888);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var tabBarExtraContentStyle = {
	  "float": 'right'
	};
	
	function noop() {}
	
	var Nav = _react2["default"].createClass({
	  displayName: 'Nav',
	
	  propTypes: {
	    tabPosition: _react.PropTypes.string,
	    tabBarExtraContent: _react.PropTypes.any,
	    onTabClick: _react.PropTypes.func,
	    onKeyDown: _react.PropTypes.func
	  },
	
	  mixins: [_InkBarMixin2["default"]],
	
	  getInitialState: function getInitialState() {
	    this.offset = 0;
	    return {
	      next: false,
	      prev: false
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    this.componentDidUpdate();
	  },
	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    var props = this.props;
	    if (prevProps && prevProps.tabPosition !== props.tabPosition) {
	      this.setOffset(0);
	      return;
	    }
	    var nextPrev = this.setNextPrev();
	    // wait next, prev show hide
	    /* eslint react/no-did-update-set-state:0 */
	    if (this.isNextPrevShown(this.state) !== this.isNextPrevShown(nextPrev)) {
	      this.setState({}, this.scrollToActiveTab);
	    } else {
	      // can not use props.activeKey
	      if (!prevProps || props.activeKey !== prevProps.activeKey) {
	        this.scrollToActiveTab();
	      }
	    }
	  },
	  onTabClick: function onTabClick(key) {
	    this.props.onTabClick(key);
	  },
	  setNextPrev: function setNextPrev() {
	    var navNode = this.refs.nav;
	    var navNodeWH = this.getOffsetWH(navNode);
	    var navWrapNode = this.refs.navWrap;
	    var navWrapNodeWH = this.getOffsetWH(navWrapNode);
	    var offset = this.offset;
	
	    var minOffset = navWrapNodeWH - navNodeWH;
	    var _state = this.state;
	    var next = _state.next;
	    var prev = _state.prev;
	
	    if (minOffset >= 0) {
	      next = false;
	      this.setOffset(0, false);
	      offset = 0;
	    } else if (minOffset < offset) {
	      next = true;
	    } else {
	      next = false;
	      this.setOffset(minOffset, false);
	      offset = minOffset;
	    }
	
	    if (offset < 0) {
	      prev = true;
	    } else {
	      prev = false;
	    }
	
	    this.setNext(next);
	    this.setPrev(prev);
	    return {
	      next: next,
	      prev: prev
	    };
	  },
	  getTabs: function getTabs() {
	    var _this = this;
	
	    var props = this.props;
	    var children = props.panels;
	    var activeKey = props.activeKey;
	    var rst = [];
	    var prefixCls = props.prefixCls;
	
	    _react2["default"].Children.forEach(children, function (child) {
	      var key = child.key;
	      var cls = activeKey === key ? prefixCls + '-tab-active' : '';
	      cls += ' ' + prefixCls + '-tab';
	      var events = {};
	      if (child.props.disabled) {
	        cls += ' ' + prefixCls + '-tab-disabled';
	      } else {
	        events = {
	          onClick: _this.onTabClick.bind(_this, key)
	        };
	      }
	      var ref = {};
	      if (activeKey === key) {
	        ref.ref = 'activeTab';
	      }
	      rst.push(_react2["default"].createElement(
	        'div',
	        (0, _extends3["default"])({
	          role: 'tab',
	          'aria-disabled': child.props.disabled ? 'true' : 'false',
	          'aria-selected': activeKey === key ? 'true' : 'false'
	        }, events, {
	          className: cls,
	          key: key
	        }, ref),
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-tab-inner' },
	          child.props.tab
	        )
	      ));
	    });
	
	    return rst;
	  },
	  getOffsetWH: function getOffsetWH(node) {
	    var tabPosition = this.props.tabPosition;
	    var prop = 'offsetWidth';
	    if (tabPosition === 'left' || tabPosition === 'right') {
	      prop = 'offsetHeight';
	    }
	    return node[prop];
	  },
	  getOffsetLT: function getOffsetLT(node) {
	    var tabPosition = this.props.tabPosition;
	    var prop = 'left';
	    if (tabPosition === 'left' || tabPosition === 'right') {
	      prop = 'top';
	    }
	    return node.getBoundingClientRect()[prop];
	  },
	  setOffset: function setOffset(offset) {
	    var checkNextPrev = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	
	    var target = Math.min(0, offset);
	    if (this.offset !== target) {
	      this.offset = target;
	      var navOffset = {};
	      var tabPosition = this.props.tabPosition;
	      var transformProperty = (0, _utils.getTransformPropertyName)();
	      if (tabPosition === 'left' || tabPosition === 'right') {
	        if (transformProperty) {
	          navOffset = {
	            name: transformProperty,
	            value: 'translate3d(0,' + target + 'px,0)'
	          };
	        } else {
	          navOffset = {
	            name: 'top',
	            value: target + 'px'
	          };
	        }
	      } else {
	        if (transformProperty) {
	          navOffset = {
	            name: transformProperty,
	            value: 'translate3d(' + target + 'px,0,0)'
	          };
	        } else {
	          navOffset = {
	            name: 'left',
	            value: target + 'px'
	          };
	        }
	      }
	      this.refs.nav.style[navOffset.name] = navOffset.value;
	      if (checkNextPrev) {
	        this.setNextPrev();
	      }
	    }
	  },
	  setPrev: function setPrev(v) {
	    if (this.state.prev !== v) {
	      this.setState({
	        prev: v
	      });
	    }
	  },
	  setNext: function setNext(v) {
	    if (this.state.next !== v) {
	      this.setState({
	        next: v
	      });
	    }
	  },
	  isNextPrevShown: function isNextPrevShown(state) {
	    return state.next || state.prev;
	  },
	  scrollToActiveTab: function scrollToActiveTab() {
	    var _refs = this.refs;
	    var activeTab = _refs.activeTab;
	    var navWrap = _refs.navWrap;
	
	    if (activeTab) {
	      var activeTabWH = this.getOffsetWH(activeTab);
	      var navWrapNodeWH = this.getOffsetWH(navWrap);
	      var offset = this.offset;
	
	      var wrapOffset = this.getOffsetLT(navWrap);
	      var activeTabOffset = this.getOffsetLT(activeTab);
	      if (wrapOffset > activeTabOffset) {
	        offset += wrapOffset - activeTabOffset;
	        this.setOffset(offset);
	      } else if (wrapOffset + navWrapNodeWH < activeTabOffset + activeTabWH) {
	        offset -= activeTabOffset + activeTabWH - (wrapOffset + navWrapNodeWH);
	        this.setOffset(offset);
	      }
	    }
	  },
	  prev: function prev() {
	    var navWrapNode = this.refs.navWrap;
	    var navWrapNodeWH = this.getOffsetWH(navWrapNode);
	    var offset = this.offset;
	
	    this.setOffset(offset + navWrapNodeWH);
	  },
	  next: function next() {
	    var navWrapNode = this.refs.navWrap;
	    var navWrapNodeWH = this.getOffsetWH(navWrapNode);
	    var offset = this.offset;
	
	    this.setOffset(offset - navWrapNodeWH);
	  },
	  render: function render() {
	    var props = this.props;
	    var state = this.state;
	    var prefixCls = props.prefixCls;
	    var tabs = this.getTabs();
	    var tabMovingDirection = props.tabMovingDirection;
	    var inkBarClass = prefixCls + '-ink-bar';
	    if (tabMovingDirection) {
	      inkBarClass += ' ' + prefixCls + '-ink-bar-transition-' + tabMovingDirection;
	    }
	    var nextButton = void 0;
	    var prevButton = void 0;
	
	    var showNextPrev = state.prev || state.next;
	
	    if (showNextPrev) {
	      var _classnames, _classnames2;
	
	      prevButton = _react2["default"].createElement(
	        'span',
	        {
	          onClick: state.prev ? this.prev : noop,
	          unselectable: 'unselectable',
	          className: (0, _classnames4["default"])((_classnames = {}, (0, _defineProperty3["default"])(_classnames, prefixCls + '-tab-prev', 1), (0, _defineProperty3["default"])(_classnames, prefixCls + '-tab-btn-disabled', !state.prev), _classnames))
	        },
	        _react2["default"].createElement('span', { className: prefixCls + '-tab-prev-icon' })
	      );
	
	      nextButton = _react2["default"].createElement(
	        'span',
	        {
	          onClick: state.next ? this.next : noop,
	          unselectable: 'unselectable',
	          className: (0, _classnames4["default"])((_classnames2 = {}, (0, _defineProperty3["default"])(_classnames2, prefixCls + '-tab-next', 1), (0, _defineProperty3["default"])(_classnames2, prefixCls + '-tab-btn-disabled', !state.next), _classnames2))
	        },
	        _react2["default"].createElement('span', { className: prefixCls + '-tab-next-icon' })
	      );
	    }
	
	    var tabBarExtraContent = this.props.tabBarExtraContent;
	
	    return _react2["default"].createElement(
	      'div',
	      {
	        role: 'tablist',
	        className: prefixCls + '-bar',
	        tabIndex: '0',
	        onKeyDown: this.props.onKeyDown
	      },
	      tabBarExtraContent ? _react2["default"].createElement(
	        'div',
	        { style: tabBarExtraContentStyle },
	        tabBarExtraContent
	      ) : null,
	      _react2["default"].createElement(
	        'div',
	        {
	          className: prefixCls + '-nav-container ' + (showNextPrev ? prefixCls + '-nav-container-scrolling' : ''),
	          style: props.style,
	          ref: 'container'
	        },
	        prevButton,
	        nextButton,
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-nav-wrap', ref: 'navWrap' },
	          _react2["default"].createElement(
	            'div',
	            { className: prefixCls + '-nav-scroll' },
	            _react2["default"].createElement(
	              'div',
	              { className: prefixCls + '-nav', ref: 'nav' },
	              _react2["default"].createElement('div', { className: inkBarClass, ref: 'inkBar' }),
	              tabs
	            )
	          )
	        )
	      )
	    );
	  }
	});
	
	exports["default"] = Nav;
	module.exports = exports['default'];

/***/ }),
/* 887 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _utils = __webpack_require__(888);
	
	function _componentDidUpdate(component) {
	  var refs = component.refs;
	  var containerNode = refs.nav;
	  var containerOffset = (0, _utils.offset)(containerNode);
	  var inkBarNode = refs.inkBar;
	  var activeTab = refs.activeTab;
	  var tabPosition = component.props.tabPosition;
	  if (activeTab) {
	    var tabNode = activeTab;
	    var tabOffset = (0, _utils.offset)(tabNode);
	    var transformPropertyName = (0, _utils.getTransformPropertyName)();
	    if (tabPosition === 'top' || tabPosition === 'bottom') {
	      var left = tabOffset.left - containerOffset.left;
	      // use 3d gpu to optimize render
	      if (transformPropertyName) {
	        inkBarNode.style[transformPropertyName] = 'translate3d(' + left + 'px,0,0)';
	        inkBarNode.style.width = tabNode.offsetWidth + 'px';
	        inkBarNode.style.height = '';
	      } else {
	        inkBarNode.style.left = left + 'px';
	        inkBarNode.style.top = '';
	        inkBarNode.style.bottom = '';
	        inkBarNode.style.right = containerNode.offsetWidth - left - tabNode.offsetWidth + 'px';
	      }
	    } else {
	      var top = tabOffset.top - containerOffset.top;
	      if (transformPropertyName) {
	        inkBarNode.style[transformPropertyName] = 'translate3d(0,' + top + 'px,0)';
	        inkBarNode.style.height = tabNode.offsetHeight + 'px';
	        inkBarNode.style.width = '';
	      } else {
	        inkBarNode.style.left = '';
	        inkBarNode.style.right = '';
	        inkBarNode.style.top = top + 'px';
	        inkBarNode.style.bottom = containerNode.offsetHeight - top - tabNode.offsetHeight + 'px';
	      }
	    }
	  }
	  inkBarNode.style.display = activeTab ? 'block' : 'none';
	}
	
	exports["default"] = {
	  componentDidUpdate: function componentDidUpdate() {
	    _componentDidUpdate(this);
	  },
	  componentDidMount: function componentDidMount() {
	    _componentDidUpdate(this);
	  }
	};
	module.exports = exports['default'];

/***/ }),
/* 888 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getScroll = getScroll;
	exports.offset = offset;
	exports.getTransformPropertyName = getTransformPropertyName;
	function getScroll(w, top) {
	  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	  var method = 'scroll' + (top ? 'Top' : 'Left');
	  if (typeof ret !== 'number') {
	    var d = w.document;
	    // ie6,7,8 standard mode
	    ret = d.documentElement[method];
	    if (typeof ret !== 'number') {
	      // quirks mode
	      ret = d.body[method];
	    }
	  }
	  return ret;
	}
	
	function offset(elem) {
	  var box = void 0;
	  var x = void 0;
	  var y = void 0;
	  var doc = elem.ownerDocument;
	  var body = doc.body;
	  var docElem = doc && doc.documentElement;
	  box = elem.getBoundingClientRect();
	  x = box.left;
	  y = box.top;
	  x -= docElem.clientLeft || body.clientLeft || 0;
	  y -= docElem.clientTop || body.clientTop || 0;
	  var w = doc.defaultView || doc.parentWindow;
	  x += getScroll(w);
	  y += getScroll(w, true);
	  return {
	    left: x, top: y
	  };
	}
	
	var transformPropertyName = void 0;
	
	function getTransformPropertyName() {
	  if (!window.getComputedStyle) {
	    return false;
	  }
	  if (transformPropertyName !== undefined) {
	    return transformPropertyName;
	  }
	  var el = document.createElement('p');
	  var has3d = void 0;
	  var transforms = {
	    webkitTransform: '-webkit-transform',
	    OTransform: '-o-transform',
	    msTransform: '-ms-transform',
	    MozTransform: '-moz-transform',
	    transform: 'transform'
	  };
	  // Add it to the body to get the computed style.
	  document.body.insertBefore(el, null);
	  for (var t in transforms) {
	    if (el.style[t] !== undefined) {
	      el.style[t] = 'translate3d(1px,1px,1px)';
	      has3d = window.getComputedStyle(el).getPropertyValue(transforms[t]);
	      if (has3d !== undefined && has3d.length > 0 && has3d !== 'none') {
	        transformPropertyName = t;
	      }
	    }
	  }
	  document.body.removeChild(el);
	  return transformPropertyName;
	}

/***/ }),
/* 889 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(399);
	
	__webpack_require__(890);

/***/ }),
/* 890 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 891 */,
/* 892 */,
/* 893 */,
/* 894 */,
/* 895 */,
/* 896 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.urlParam = exports.goToApp = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _urlParse = __webpack_require__(268);
	
	var _urlParse2 = _interopRequireDefault(_urlParse);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function goToApp(param) {
	    if (top === window) {
	        window.open(param.url);
	        return false;
	    }
	    // 门户新开页top.window.goToApp()
	    var _componentId = param.componentId || "" + CONTEXTPATH;
	    var _componentMenuId = param.componentMenuId || "";
	    var _url = param.url.substr(0, 4) === "http" ? param.url : location.protocol + "//" + location.hostname + ":" + location.port + "/" + CONTEXTPATH + "-web/index.do" + param.url;
	    var _param = param.param || "";
	    var _reload = param.reload || true;
	    var _callback = param.callback || {
	        func: '',
	        param: {}
	    };
	    var p = {
	        componentId: _componentId,
	        componentMenuId: _componentMenuId,
	        param: _param,
	        url: _url,
	        name: param.title,
	        callback: _callback,
	        reload: _reload
	    };
	    top.window.goToApp(p);
	}
	
	/**
	 * 设置url参数,接收一个对象为参数,type为get时返回query，只传param时type默认为set，type为cover覆盖原有param
	 */
	function urlParam() {
	    var param = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'set';
	
	    var url = (0, _urlParse2["default"])(location.hash.split('#')[1], true);
	    var query = url.query;
	    if (query['_k']) {
	        delete query['_k'];
	    }
	    if (typeof param == 'string') {
	        type = param;
	        param = {};
	    }
	    if (type == 'get') {
	        if (query && JSON.stringify(query) != "{}") {
	            return query;
	        } else {
	            return false;
	        }
	    } else {
	        var _queryObj = void 0;
	        if (type == 'set') {
	            _queryObj = _extends({}, query, param);
	        } else if (type == 'cover') {
	            _queryObj = _extends({}, param);
	        }
	        var keyArr = Object.keys(_queryObj);
	        if (keyArr.length > 0) {
	            keyArr.map(function (item, i) {
	                if (_queryObj[item] == "" || _queryObj[item] == "undefined" || _queryObj[item] == "null" || _queryObj[item] == undefined || _queryObj[item] == null || item == "_k") {
	                    delete _queryObj[item];
	                }
	            });
	            url.set("query", _queryObj);
	            var newHash = url.href.replace(url.origin, "#");
	            var newOrigin = window.location.href.replace(window.location.hash, '');
	            window.location.href = newOrigin + newHash;
	        }
	    }
	}
	
	exports.goToApp = goToApp;
	exports.urlParam = urlParam;

/***/ }),
/* 897 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.MapShow = exports.ShowMarker = exports.LocationResource = exports.ShowTrackLine = exports.MapTreeQuery = exports.MapQuery = exports.TargetLocationModal = exports.TargetLocation = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _targetLocation = __webpack_require__(898);
	
	var _targetLocation2 = _interopRequireDefault(_targetLocation);
	
	var _showMarker = __webpack_require__(902);
	
	var _showMarker2 = _interopRequireDefault(_showMarker);
	
	var _targetLocationModal = __webpack_require__(903);
	
	var _targetLocationModal2 = _interopRequireDefault(_targetLocationModal);
	
	var _mapQuery = __webpack_require__(904);
	
	var _mapQuery2 = _interopRequireDefault(_mapQuery);
	
	var _mapTreeQuery = __webpack_require__(905);
	
	var _mapTreeQuery2 = _interopRequireDefault(_mapTreeQuery);
	
	var _showTrackLine = __webpack_require__(907);
	
	var _showTrackLine2 = _interopRequireDefault(_showTrackLine);
	
	var _locationResource = __webpack_require__(908);
	
	var _locationResource2 = _interopRequireDefault(_locationResource);
	
	var _maps = __webpack_require__(909);
	
	var _mapShow = __webpack_require__(910);
	
	var _mapShow2 = _interopRequireDefault(_mapShow);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	//地图定位
	var TargetLocation = function (_React$Component) {
	    _inherits(TargetLocation, _React$Component);
	
	    function TargetLocation(props) {
	        _classCallCheck(this, TargetLocation);
	
	        return _possibleConstructorReturn(this, (TargetLocation.__proto__ || Object.getPrototypeOf(TargetLocation)).call(this, props));
	    }
	
	    _createClass(TargetLocation, [{
	        key: 'render',
	        value: function render() {
	            var _props = this.props,
	                url = _props.url,
	                data = _props.data,
	                width = _props.width,
	                height = _props.height;
	
	            return _react2["default"].createElement(_targetLocation2["default"], { url: url, data: data, width: width, height: height });
	        }
	    }]);
	
	    return TargetLocation;
	}(_react2["default"].Component);
	
	//地图定位(带图)
	
	
	var ShowMarker = function (_React$Component2) {
	    _inherits(ShowMarker, _React$Component2);
	
	    function ShowMarker(props) {
	        _classCallCheck(this, ShowMarker);
	
	        return _possibleConstructorReturn(this, (ShowMarker.__proto__ || Object.getPrototypeOf(ShowMarker)).call(this, props));
	    }
	
	    _createClass(ShowMarker, [{
	        key: 'render',
	        value: function render() {
	            var _props2 = this.props,
	                url = _props2.url,
	                data = _props2.data,
	                width = _props2.width,
	                height = _props2.height;
	
	            return _react2["default"].createElement(_showMarker2["default"], { url: url, data: data, width: width, height: height });
	        }
	    }]);
	
	    return ShowMarker;
	}(_react2["default"].Component);
	
	//地图定位弹窗
	
	
	var TargetLocationModal = function (_React$Component3) {
	    _inherits(TargetLocationModal, _React$Component3);
	
	    function TargetLocationModal(props) {
	        _classCallCheck(this, TargetLocationModal);
	
	        return _possibleConstructorReturn(this, (TargetLocationModal.__proto__ || Object.getPrototypeOf(TargetLocationModal)).call(this, props));
	    }
	
	    _createClass(TargetLocationModal, [{
	        key: 'render',
	        value: function render() {
	            var _props3 = this.props,
	                url = _props3.url,
	                data = _props3.data,
	                visible = _props3.visible,
	                closeCallback = _props3.closeCallback;
	
	            return _react2["default"].createElement(_targetLocationModal2["default"], { url: url, data: data, visible: visible, closeCallback: closeCallback });
	        }
	    }]);
	
	    return TargetLocationModal;
	}(_react2["default"].Component);
	
	//纯地图选点
	
	
	var MapQuery = function (_React$Component4) {
	    _inherits(MapQuery, _React$Component4);
	
	    function MapQuery(props) {
	        _classCallCheck(this, MapQuery);
	
	        return _possibleConstructorReturn(this, (MapQuery.__proto__ || Object.getPrototypeOf(MapQuery)).call(this, props));
	    }
	
	    _createClass(MapQuery, [{
	        key: 'render',
	        value: function render() {
	            var _props4 = this.props,
	                url = _props4.url,
	                onChange = _props4.onChange,
	                reset = _props4.reset,
	                setPoints = _props4.setPoints,
	                maxNum = _props4.maxNum,
	                btnName = _props4.btnName,
	                className = _props4.className,
	                btnW = _props4.btnW;
	
	            return _react2["default"].createElement(_mapQuery2["default"], { url: url, onChange: onChange, reset: reset, setPoints: setPoints, maxNum: maxNum, btnName: btnName, className: className, btnW: btnW });
	        }
	    }]);
	
	    return MapQuery;
	}(_react2["default"].Component);
	
	//树地图切换选点
	
	
	var MapTreeQuery = function (_React$Component5) {
	    _inherits(MapTreeQuery, _React$Component5);
	
	    function MapTreeQuery(props) {
	        _classCallCheck(this, MapTreeQuery);
	
	        return _possibleConstructorReturn(this, (MapTreeQuery.__proto__ || Object.getPrototypeOf(MapTreeQuery)).call(this, props));
	    }
	
	    _createClass(MapTreeQuery, [{
	        key: 'render',
	        value: function render() {
	            var _props5 = this.props,
	                url = _props5.url,
	                onChange = _props5.onChange,
	                reset = _props5.reset,
	                setPoints = _props5.setPoints,
	                maxNum = _props5.maxNum,
	                treeData = _props5.treeData,
	                btnName = _props5.btnName,
	                className = _props5.className,
	                btnW = _props5.btnW,
	                setDefaultTtreeUrl = _props5.setDefaultTtreeUrl,
	                autoParam = _props5.autoParam;
	
	            return _react2["default"].createElement(_mapTreeQuery2["default"], { url: url, onChange: onChange, reset: reset, setPoints: setPoints, maxNum: maxNum, treeData: treeData, btnName: btnName, className: className, btnW: btnW, setDefaultTtreeUrl: setDefaultTtreeUrl, autoParam: autoParam });
	        }
	    }]);
	
	    return MapTreeQuery;
	}(_react2["default"].Component);
	
	//生成轨迹
	
	
	var ShowTrackLine = function (_React$Component6) {
	    _inherits(ShowTrackLine, _React$Component6);
	
	    function ShowTrackLine(props) {
	        _classCallCheck(this, ShowTrackLine);
	
	        return _possibleConstructorReturn(this, (ShowTrackLine.__proto__ || Object.getPrototypeOf(ShowTrackLine)).call(this, props));
	    }
	
	    _createClass(ShowTrackLine, [{
	        key: 'render',
	        value: function render() {
	            var _props6 = this.props,
	                url = _props6.url,
	                data = _props6.data,
	                visible = _props6.visible,
	                closeCallback = _props6.closeCallback,
	                modalName = _props6.modalName;
	
	            return _react2["default"].createElement(_showTrackLine2["default"], { url: url, data: data, visible: visible, closeCallback: closeCallback, modalName: modalName });
	        }
	    }]);
	
	    return ShowTrackLine;
	}(_react2["default"].Component);
	
	//标注经纬度
	
	
	var LocationResource = function (_React$Component7) {
	    _inherits(LocationResource, _React$Component7);
	
	    function LocationResource(props) {
	        _classCallCheck(this, LocationResource);
	
	        return _possibleConstructorReturn(this, (LocationResource.__proto__ || Object.getPrototypeOf(LocationResource)).call(this, props));
	    }
	
	    _createClass(LocationResource, [{
	        key: 'render',
	        value: function render() {
	            var _props7 = this.props,
	                url = _props7.url,
	                onChange = _props7.onChange,
	                btnName = _props7.btnName,
	                className = _props7.className;
	
	            return _react2["default"].createElement(_locationResource2["default"], { url: url, onChange: onChange, btnName: btnName, className: className });
	        }
	    }]);
	
	    return LocationResource;
	}(_react2["default"].Component);
	
	//纯地图展示
	
	
	var MapShow = function (_React$Component8) {
	    _inherits(MapShow, _React$Component8);
	
	    function MapShow(props) {
	        _classCallCheck(this, MapShow);
	
	        return _possibleConstructorReturn(this, (MapShow.__proto__ || Object.getPrototypeOf(MapShow)).call(this, props));
	    }
	
	    _createClass(MapShow, [{
	        key: 'render',
	        value: function render() {
	            var _props8 = this.props,
	                url = _props8.url,
	                className = _props8.className,
	                width = _props8.width,
	                height = _props8.height;
	
	            return _react2["default"].createElement(_mapShow2["default"], { url: url, className: className, width: width, height: height });
	        }
	    }]);
	
	    return MapShow;
	}(_react2["default"].Component);
	
	exports.TargetLocation = TargetLocation;
	exports.TargetLocationModal = TargetLocationModal;
	exports.MapQuery = MapQuery;
	exports.MapTreeQuery = MapTreeQuery;
	exports.ShowTrackLine = ShowTrackLine;
	exports.LocationResource = LocationResource;
	exports.ShowMarker = ShowMarker;
	exports.MapShow = MapShow;

/***/ }),
/* 898 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _icon = __webpack_require__(394);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	__webpack_require__(899);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _mapIframe = __webpack_require__(900);
	
	var _mapIframe2 = _interopRequireDefault(_mapIframe);
	
	__webpack_require__(901);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.type = 'showTargetLocation';
	        _this.state = _extends({
	            action: null
	        }, props.data, {
	            loaded: false,
	            url: props.url || ''
	        });
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var _nextProps$data = nextProps.data,
	                latitude = _nextProps$data.latitude,
	                longitude = _nextProps$data.longitude,
	                name = _nextProps$data.name;
	            var url = nextProps.url;
	
	            if (latitude != this.state.latitude || longitude != this.state.longitude || name != this.state.name) {
	                this.setState({
	                    action: {
	                        type: this.type,
	                        payload: { latitude: latitude, longitude: longitude, name: name }
	                    },
	                    latitude: latitude,
	                    longitude: longitude,
	                    name: name
	                });
	            }
	            if (url && url != '' && url != this.state.url) {
	                this.setState({
	                    url: url
	                });
	            }
	        }
	    }, {
	        key: 'metisCallback',
	        value: function metisCallback(_ref) {
	            var type = _ref.type,
	                payload = _ref.payload;
	            var _state = this.state,
	                latitude = _state.latitude,
	                longitude = _state.longitude,
	                name = _state.name;
	
	            if (type === 'onMapLoaded') {
	                this.setState({
	                    action: {
	                        type: this.type,
	                        payload: { latitude: latitude, longitude: longitude, name: name }
	                    },
	                    loaded: true
	                });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _props = this.props,
	                width = _props.width,
	                height = _props.height;
	            var _state2 = this.state,
	                url = _state2.url,
	                loaded = _state2.loaded,
	                latitude = _state2.latitude,
	                longitude = _state2.longitude,
	                action = _state2.action;
	
	            var map_show = { position: 'absolute', visibility: 'hidden' };
	            var showMap = false;
	            if (latitude && Number(latitude) != 0 && longitude && Number(longitude) != 0 && loaded) {
	                showMap = true;
	                map_show = {};
	            }
	
	            return _react2["default"].createElement(
	                'div',
	                { className: 'map-no-result', style: { width: width, height: height } },
	                !showMap && _react2["default"].createElement(
	                    'div',
	                    { className: 'map-no-result-inner' },
	                    _react2["default"].createElement(_icon2["default"], { type: 'environment-o', className: 'map-no-result-icon' }),
	                    _react2["default"].createElement(
	                        'p',
	                        { className: 'map-no-result-text' },
	                        latitude && Number(latitude) != 0 && longitude && Number(longitude) != 0 ? "正在加载地图" : "该目标无经纬度"
	                    )
	                ),
	                _react2["default"].createElement(
	                    'div',
	                    { style: map_show },
	                    _react2["default"].createElement(_mapIframe2["default"], {
	                        type: this.type,
	                        url: url,
	                        width: width,
	                        height: height,
	                        action: action,
	                        callback: this.metisCallback.bind(this)
	                    })
	                )
	            );
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	;
	
	exports["default"] = App;

/***/ }),
/* 899 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(399);

/***/ }),
/* 900 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _addDomEventListener = __webpack_require__(273);
	
	var _addDomEventListener2 = _interopRequireDefault(_addDomEventListener);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.state = {
	            mapUrl: props.url
	        };
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.eventListener = (0, _addDomEventListener2["default"])(window, 'message', this.handleMessage.bind(this));
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            this.eventListener.remove();
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var action = nextProps.action,
	                url = nextProps.url;
	
	            if (action) {
	                this.postMessage(action.type, action.payload);
	            }
	            if (url && url != '' && url != this.state.mapUrl) {
	                this.setState({
	                    mapUrl: url
	                });
	            }
	        }
	    }, {
	        key: 'handleMessage',
	        value: function handleMessage(_ref) {
	            var nativeEvent = _ref.nativeEvent;
	
	            var data = nativeEvent.data;
	            if (typeof data === 'string') {
	                try {
	                    data = data.replace(/undefined/g, null);
	                    data = JSON.parse(data);
	                } catch (e) {
	                    data = JSON.parse(data.replace(/undefined/g, '-1'));
	                }
	                var payload = data['param'];
	                /*      if (payload) {
	                          try {
	                              payload = JSON.parse(payload.replace(/'/g, `"`))
	                          } catch(e) {
	                              // pure string
	                              // payload = payload
	                          }
	                      }*/
	                this.props.callback({ type: data['function'], payload: payload });
	            }
	        }
	    }, {
	        key: 'postMessage',
	        value: function postMessage(type, payload) {
	            var message = {};
	            message['function'] = type;
	            if (payload) {
	                //     payload = JSON.stringify(payload).replace(/"/g, `'`)
	                message['param'] = payload;
	            }
	            message = JSON.stringify(message);
	            this.refs.iframe.contentWindow.postMessage(message, '*');
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var props = this.props;
	            return _react2["default"].createElement('iframe', {
	                src: this.state.mapUrl,
	                width: props.width || '100%',
	                height: props.height || 500,
	                frameBorder: 'no',
	                border: '0',
	                ref: 'iframe' });
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	;
	
	exports["default"] = App;

/***/ }),
/* 901 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 902 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _icon = __webpack_require__(394);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	__webpack_require__(899);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _mapIframe = __webpack_require__(900);
	
	var _mapIframe2 = _interopRequireDefault(_mapIframe);
	
	__webpack_require__(901);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.type = 'showMarker';
	        _this.state = _extends({
	            action: null
	        }, props.data, {
	            loaded: false,
	            url: props.url || ''
	        });
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var state = this.state;
	            var _nextProps$data = nextProps.data,
	                latitude = _nextProps$data.latitude,
	                longitude = _nextProps$data.longitude,
	                address = _nextProps$data.address;
	            var url = nextProps.url;
	
	            if (latitude != state.latitude || longitude != state.longitude || address != state.address) {
	                this.setState({
	                    action: {
	                        type: this.type,
	                        payload: { latitude: latitude, longitude: longitude, address: address }
	                    },
	                    latitude: latitude,
	                    longitude: longitude,
	                    address: address
	                });
	            }
	            if (url && url != '' && url != this.state.url) {
	                this.setState({
	                    url: url
	                });
	            }
	        }
	    }, {
	        key: 'metisCallback',
	        value: function metisCallback(_ref) {
	            var type = _ref.type,
	                payload = _ref.payload;
	            var _state = this.state,
	                latitude = _state.latitude,
	                longitude = _state.longitude,
	                address = _state.address;
	
	            if (type === 'onMapLoaded') {
	                this.setState({
	                    action: {
	                        type: this.type,
	                        payload: { latitude: latitude, longitude: longitude, address: address }
	                    },
	                    loaded: true
	                });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _props = this.props,
	                width = _props.width,
	                height = _props.height;
	            var _state2 = this.state,
	                url = _state2.url,
	                loaded = _state2.loaded,
	                latitude = _state2.latitude,
	                longitude = _state2.longitude,
	                action = _state2.action;
	
	            var map_show = { position: 'absolute', visibility: 'hidden' };
	            var showMap = false;
	            if (latitude && Number(latitude) != 0 && longitude && Number(longitude) != 0 && loaded) {
	                showMap = true;
	                map_show = {};
	            }
	            return _react2["default"].createElement(
	                'div',
	                { className: 'map-no-result', style: { width: width, height: height } },
	                !showMap && _react2["default"].createElement(
	                    'div',
	                    { className: 'map-no-result-inner' },
	                    _react2["default"].createElement(_icon2["default"], { type: 'environment-o', className: 'map-no-result-icon' }),
	                    _react2["default"].createElement(
	                        'p',
	                        { className: 'map-no-result-text' },
	                        latitude && Number(latitude) != 0 && longitude && Number(longitude) != 0 ? "正在加载地图" : "该目标无经纬度"
	                    )
	                ),
	                _react2["default"].createElement(
	                    'div',
	                    { style: map_show },
	                    _react2["default"].createElement(_mapIframe2["default"], {
	                        type: this.type,
	                        url: url,
	                        width: width,
	                        height: height,
	                        action: action,
	                        callback: this.metisCallback.bind(this)
	                    })
	                )
	            );
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	exports["default"] = App;

/***/ }),
/* 903 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _modal = __webpack_require__(307);
	
	var _modal2 = _interopRequireDefault(_modal);
	
	var _icon = __webpack_require__(394);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	__webpack_require__(398);
	
	__webpack_require__(899);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(158);
	
	var _mapIframe = __webpack_require__(900);
	
	var _mapIframe2 = _interopRequireDefault(_mapIframe);
	
	__webpack_require__(901);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.dDialogW = 470;
	        _this.dDialogH = 350;
	        _this.type = 'showTargetLocation';
	        _this.state = _extends({
	            url: props.url || '',
	            action: null
	        }, props.data, {
	            dialogW: _this.dDialogW,
	            dialogH: _this.dDialogH,
	            modal_show: props.visible || false,
	            modal_fullscreen_className: '',
	            isFullScreen: false,
	            loaded: false
	        });
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var _nextProps$data = nextProps.data,
	                latitude = _nextProps$data.latitude,
	                longitude = _nextProps$data.longitude,
	                name = _nextProps$data.name;
	            var url = nextProps.url,
	                visible = nextProps.visible;
	
	            if (latitude != this.state.latitude || longitude != this.state.longitude || name != this.state.name) {
	                this.setState({
	                    action: {
	                        type: this.type,
	                        payload: { latitude: latitude, longitude: longitude, name: name }
	                    },
	                    latitude: latitude,
	                    longitude: longitude,
	                    name: name
	                });
	            }
	            if (visible != this.state.modal_show) {
	                this.setState({
	                    modal_show: visible
	                });
	            }
	            if (url && url != '' && url != this.state.url) {
	                this.setState({
	                    url: url
	                });
	            }
	        }
	    }, {
	        key: 'metisCallback',
	        value: function metisCallback(_ref) {
	            var type = _ref.type,
	                payload = _ref.payload;
	            var _state = this.state,
	                latitude = _state.latitude,
	                longitude = _state.longitude,
	                name = _state.name;
	
	            if (type === 'onMapLoaded') {
	                this.setState({
	                    action: {
	                        type: this.type,
	                        payload: { latitude: latitude, longitude: longitude, name: name }
	                    },
	                    loaded: true
	                });
	            }
	            if (type === 'fullscreen') {
	                this.onFullScreen(payload.flag);
	            }
	        }
	    }, {
	        key: 'showModal',
	        value: function showModal() {
	            this.setState({
	                modal_show: true
	            });
	        }
	    }, {
	        key: 'hideModal',
	        value: function hideModal() {
	            this.setState({
	                modal_show: false
	            });
	            this.props.closeCallback(false);
	        }
	    }, {
	        key: 'onFullScreen',
	        value: function onFullScreen(isFullScreen) {
	            if (isFullScreen) {
	                this.setState({
	                    modal_fullscreen_className: 'map-modal-fullscreen',
	                    dialogW: '100%',
	                    dialogH: this.props.browser.height,
	                    isFullScreen: true
	                });
	            } else {
	                this.setState({
	                    modal_fullscreen_className: '',
	                    dialogW: this.dDialogW,
	                    dialogH: this.dDialogH,
	                    isFullScreen: false
	                });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _state2 = this.state,
	                url = _state2.url,
	                modal_show = _state2.modal_show,
	                loaded = _state2.loaded,
	                latitude = _state2.latitude,
	                longitude = _state2.longitude,
	                action = _state2.action,
	                modal_fullscreen_className = _state2.modal_fullscreen_className,
	                dialogW = _state2.dialogW,
	                dialogH = _state2.dialogH,
	                isFullScreen = _state2.isFullScreen;
	
	            var map_show = { position: 'absolute', visibility: 'hidden' };
	            var showMap = false;
	            if (latitude && Number(latitude) != 0 && longitude && Number(longitude) != 0 && loaded) {
	                showMap = true;
	                map_show = {};
	            }
	            var modal_top = isFullScreen ? 0 : (this.props.browser.height - dialogH) / 2;
	            return _react2["default"].createElement(
	                _modal2["default"],
	                {
	                    className: "map-modal map-location-modal " + modal_fullscreen_className,
	                    title: '\u5730\u56FE\u5B9A\u4F4D',
	                    visible: modal_show,
	                    width: dialogW,
	                    footer: null,
	                    onCancel: this.hideModal.bind(this),
	                    mask: false,
	                    wrapClassName: 'map-location-modal-wrap'
	                },
	                _react2["default"].createElement(
	                    'div',
	                    { className: !showMap ? "map-no-result" : "", style: { width: dialogW, height: isFullScreen ? this.props.browser.height - 40 : dialogH - 40 } },
	                    !showMap && _react2["default"].createElement(
	                        'div',
	                        { className: 'map-no-result-inner' },
	                        _react2["default"].createElement(_icon2["default"], { type: 'environment-o', className: 'map-no-result-icon' }),
	                        _react2["default"].createElement(
	                            'p',
	                            { className: 'map-no-result-text' },
	                            latitude && Number(latitude) != 0 && longitude && Number(longitude) != 0 ? "正在加载地图" : "该目标无经纬度"
	                        )
	                    ),
	                    _react2["default"].createElement(
	                        'div',
	                        { style: map_show },
	                        _react2["default"].createElement(_mapIframe2["default"], {
	                            type: this.type,
	                            url: url,
	                            width: dialogW,
	                            height: isFullScreen ? this.props.browser.height - 40 : dialogH - 40,
	                            action: action,
	                            callback: this.metisCallback.bind(this)
	                        })
	                    )
	                )
	            );
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	;
	
	exports["default"] = (0, _reactRedux.connect)(function (state) {
	    return { browser: state.browser };
	})(App);

/***/ }),
/* 904 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _modal = __webpack_require__(307);
	
	var _modal2 = _interopRequireDefault(_modal);
	
	var _pagination = __webpack_require__(848);
	
	var _pagination2 = _interopRequireDefault(_pagination);
	
	var _button = __webpack_require__(391);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _message2 = __webpack_require__(500);
	
	var _message3 = _interopRequireDefault(_message2);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	__webpack_require__(398);
	
	__webpack_require__(865);
	
	__webpack_require__(401);
	
	__webpack_require__(580);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(158);
	
	var _icon = __webpack_require__(477);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _mapIframe = __webpack_require__(900);
	
	var _mapIframe2 = _interopRequireDefault(_mapIframe);
	
	__webpack_require__(901);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.setPoints = props.setPoints;
	        _this.loaded = false;
	        _this.dBtnName = '单击选择点位';
	        _this.dEmpty = '';
	        _this.dBtnW = 336;
	        _this.dDialogW = 1026;
	        _this.dDialogH = 695;
	        _this.maxNum = props.maxNum || 100;
	        _this.state = {
	            mapUrl: props.url || '',
	            action: null,
	            className: props.className || _this.dEmpty,
	            btnName: props.btnName || _this.dBtnName,
	            btnW: props.btnW || _this.dBtnW,
	            dialogW: _this.dDialogW,
	            dialogH: _this.dDialogH,
	            modal_fullscreen_className: _this.dEmpty,
	            modal_show: false,
	            selected: _this.setPoints || [],
	            map_selected: _this.setPoints || [],
	            query_x_show: false,
	            isFullScreen: false,
	            selected_show_bypage: [],
	            page_num: 1,
	            map_selected_li_hover_indexcode: null
	        };
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            if (this.setPoints) {
	                this.assembleTitle(this.setPoints);
	            }
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var browser = nextProps.browser,
	                reset = nextProps.reset,
	                url = nextProps.url,
	                setPoints = nextProps.setPoints;
	
	            this.setState({
	                dialogH: this.state.isFullScreen ? browser.height : this.dDialogH
	            });
	            if (reset) {
	                this.clearSelectedPoints();
	            }
	            if (url && url != '' && url != this.state.mapUrl) {
	                this.setState({
	                    mapUrl: url
	                });
	            }
	            if (setPoints && Array.isArray(setPoints) && JSON.stringify(setPoints) != JSON.stringify(this.setPoints)) {
	                this.setPoints = setPoints;
	                this.assembleTitle(setPoints);
	                this.setState({
	                    selected: setPoints
	                });
	            }
	        }
	    }, {
	        key: 'metisCallback',
	        value: function metisCallback(_ref) {
	            var type = _ref.type,
	                payload = _ref.payload;
	
	            this.setState({
	                action: null
	            });
	            if (type === 'onMapLoaded') {
	                this.onMapLoaded();
	            } else if (type === 'mapQueryEnded' || type === 'onMapClear') {
	                this.mapQuery(payload);
	            } else if (type === 'fullscreen') {
	                this.onFullScreen(payload);
	            }
	        }
	    }, {
	        key: 'onMapLoaded',
	        value: function onMapLoaded() {
	            this.loaded = true;
	            var selected = this.state.selected;
	            if (selected.length > 0) {
	                this.setState({
	                    action: {
	                        type: 'mapResourceLocation',
	                        payload: {
	                            highlightType: 1,
	                            resources: selected
	                        }
	                    }
	                });
	            }
	        }
	    }, {
	        key: 'mapQuery',
	        value: function mapQuery(selected) {
	            var _this2 = this;
	
	            this.setState({
	                map_selected: selected
	            }, function (u) {
	                _this2.pageChange(1);
	            });
	        }
	    }, {
	        key: 'onFullScreen',
	        value: function onFullScreen(isFullScreen) {
	            if (isFullScreen.flag) {
	                this.setState({
	                    modal_fullscreen_className: 'map-modal-fullscreen',
	                    dialogW: '100%',
	                    dialogH: this.props.browser.height,
	                    isFullScreen: true
	                });
	            } else {
	                this.setState({
	                    modal_fullscreen_className: this.dEmpty,
	                    dialogW: this.dDialogW,
	                    dialogH: this.dDialogH,
	                    isFullScreen: false
	                });
	            }
	        }
	    }, {
	        key: 'showModal',
	        value: function showModal() {
	            this.setState({
	                modal_show: true
	            });
	            this.pageChange(1);
	        }
	    }, {
	        key: 'hideModal',
	        value: function hideModal() {
	            var _this3 = this;
	
	            this.setState({
	                modal_show: false,
	                action: {
	                    type: 'mapResourceLocation',
	                    payload: {
	                        highlightType: 1,
	                        resources: []
	                    }
	                }
	            }, function (u) {
	                _this3.setState({
	                    action: {
	                        type: 'mapResourceLocation',
	                        payload: {
	                            highlightType: 1,
	                            resources: _this3.state.selected
	                        }
	                    },
	                    map_selected: _this3.state.selected
	                });
	            });
	        }
	    }, {
	        key: 'onOk',
	        value: function onOk() {
	            var _this4 = this;
	
	            if (this.loaded) {
	                if (this.state.map_selected.length > this.maxNum) {
	                    _message3["default"].warning("最多只能选择" + this.maxNum + "个点位");
	                } else {
	                    this.setState({
	                        selected: this.state.map_selected,
	                        modal_show: false
	                    }, function (u) {
	                        _this4.props.onChange(_this4.state.selected);
	                        _this4.assembleTitle(_this4.state.selected);
	                    });
	                }
	            }
	        }
	    }, {
	        key: 'assembleTitle',
	        value: function assembleTitle(selected) {
	            if (selected.length === 0) {
	                this.setState({
	                    btnName: this.props.btnName || this.dBtnName,
	                    btnW: this.props.btnW || this.dBtnW
	                });
	            } else {
	                var btnTitle = void 0;
	                if (selected.length === 1) {
	                    btnTitle = selected[0].name;
	                } else {
	                    btnTitle = '"' + selected[0].name + '"等' + selected.length + '个点位';
	                }
	
	                this.setState({
	                    btnName: btnTitle,
	                    btnW: this.props.btnW || this.dBtnW
	                });
	            }
	        }
	    }, {
	        key: 'btnMouseEnter',
	        value: function btnMouseEnter() {
	            this.setState({
	                query_x_show: true
	            });
	        }
	    }, {
	        key: 'btnMouseLeave',
	        value: function btnMouseLeave() {
	            this.setState({
	                query_x_show: false
	            });
	        }
	    }, {
	        key: 'liMouseOver',
	        value: function liMouseOver(e) {
	            this.setState({
	                map_selected_li_hover_indexcode: e.currentTarget.getAttribute('data-indexcode')
	            });
	        }
	    }, {
	        key: 'liMouseLeave',
	        value: function liMouseLeave(e) {
	            this.setState({
	                map_selected_li_hover_indexcode: null
	            });
	        }
	    }, {
	        key: 'delectOnePoint',
	        value: function delectOnePoint(e) {
	            var _this5 = this;
	
	            var delectIndexCode = e.currentTarget.getAttribute('data-indexcode');
	            var map_selected = this.state.map_selected.filter(function (item) {
	                return item.indexCode != delectIndexCode;
	            });
	            this.setState({
	                map_selected: map_selected,
	                action: {
	                    type: 'mapResourceLocation',
	                    payload: {
	                        highlightType: 1,
	                        resources: map_selected
	                    }
	
	                },
	                map_selected_li_hover_indexcode: null
	            }, function (u) {
	                _this5.pageChange(1);
	            });
	        }
	    }, {
	        key: 'clearMapSelectedPoints',
	        value: function clearMapSelectedPoints() {
	            this.setState({
	                map_selected: [],
	                action: {
	                    type: 'mapResourceLocation',
	                    payload: {
	                        highlightType: 1,
	                        resources: []
	                    }
	
	                },
	                selected_show_bypage: []
	            });
	        }
	    }, {
	        key: 'clearSelectedPoints',
	        value: function clearSelectedPoints() {
	            var _this6 = this;
	
	            this.setState({
	                btnName: this.props.btnName || this.dBtnName,
	                selected: [],
	                map_selected: [],
	                action: {
	                    type: 'mapResourceLocation',
	                    payload: {
	                        highlightType: 1,
	                        resources: []
	                    }
	                },
	                selected_show_bypage: [],
	                query_x_show: false
	            }, function (u) {
	                _this6.props.onChange(_this6.state.selected);
	            });
	        }
	    }, {
	        key: 'pageChange',
	        value: function pageChange(noop) {
	            var selected_show_bypage = this.state.map_selected.slice(15 * (noop - 1), 15 * noop);
	            this.setState({
	                selected_show_bypage: selected_show_bypage,
	                page_num: noop
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this7 = this;
	
	            var _state = this.state,
	                mapUrl = _state.mapUrl,
	                action = _state.action,
	                className = _state.className,
	                btnName = _state.btnName,
	                btnW = _state.btnW,
	                dialogW = _state.dialogW,
	                dialogH = _state.dialogH,
	                modal_fullscreen_className = _state.modal_fullscreen_className,
	                modal_show = _state.modal_show,
	                selected = _state.selected,
	                map_selected = _state.map_selected,
	                query_x_show = _state.query_x_show,
	                isFullScreen = _state.isFullScreen,
	                selected_show_bypage = _state.selected_show_bypage,
	                page_num = _state.page_num,
	                map_selected_li_hover_indexcode = _state.map_selected_li_hover_indexcode;
	
	            var modal_top = isFullScreen ? 0 : (this.props.browser.height - dialogH) / 2;
	            var mapSelectedLen = map_selected.length;
	            var selectedLen = selected.length;
	
	            return _react2["default"].createElement(
	                'div',
	                { className: 'position-relative inline-block' },
	                _react2["default"].createElement(
	                    'div',
	                    { onMouseEnter: selectedLen > 0 && this.btnMouseEnter.bind(this), onMouseLeave: selectedLen > 0 && this.btnMouseLeave.bind(this) },
	                    _react2["default"].createElement(
	                        _button2["default"],
	                        { style: { width: btnW }, className: selectedLen == 0 ? 'map-query-btn ' + className : 'map-query-btn ' + className + ' map-query-selected-btn', title: btnName, onClick: this.showModal.bind(this) },
	                        _react2["default"].createElement(_icon2["default"], {
	                            type: 'lidaicon-h-add',
	                            className: 'anticon-plus',
	                            title: '',
	                            style: selectedLen > 0 ? { display: 'none' } : { display: 'inline-block' }
	                        }),
	                        btnName
	                    ),
	                    selectedLen > 0 && query_x_show && _react2["default"].createElement(_icon2["default"], {
	                        type: 'lidaicon-h-close-circle-f',
	                        className: 'map-query-close-x',
	                        onClick: this.clearSelectedPoints.bind(this),
	                        title: '\u6E05\u7A7A'
	                    })
	                ),
	                selectedLen > 0 && _react2["default"].createElement(
	                    _button2["default"],
	                    { className: 'map-query-detail-btn', onClick: this.showModal.bind(this) },
	                    _react2["default"].createElement(_icon2["default"], {
	                        type: 'lidaicon-h-arrow-right',
	                        className: '',
	                        title: '\u70B9\u4F4D\u8BE6\u60C5'
	                    })
	                ),
	                _react2["default"].createElement(
	                    _modal2["default"],
	                    {
	                        style: { top: modal_top < 0 ? 0 : modal_top },
	                        className: "map-modal map-query-modal " + modal_fullscreen_className,
	                        title: '\u9009\u62E9\u70B9\u4F4D',
	                        visible: modal_show,
	                        width: dialogW,
	                        onOk: this.onOk.bind(this),
	                        onCancel: this.hideModal.bind(this),
	                        maskClosable: false
	                    },
	                    _react2["default"].createElement(
	                        'div',
	                        { className: 'map-query-only', style: isFullScreen ? { width: dialogW, height: dialogH - 96 } : { width: dialogW - 328, height: dialogH - 128 } },
	                        _react2["default"].createElement(_mapIframe2["default"], {
	                            type: 'mapQuery',
	                            url: mapUrl,
	                            height: isFullScreen ? dialogH - 96 : dialogH - 130,
	                            action: action,
	                            callback: this.metisCallback.bind(this)
	                        })
	                    ),
	                    _react2["default"].createElement(
	                        'div',
	                        { className: 'map-query-result position-relative', style: { height: dialogH - 128 } },
	                        _react2["default"].createElement(
	                            'div',
	                            { className: 'map-query-nav' },
	                            _react2["default"].createElement(
	                                'span',
	                                { className: 'fl map-query-num' },
	                                '\u5DF2\u9009\u62E9   ',
	                                mapSelectedLen,
	                                '   \u4E2A\u70B9\u4F4D'
	                            ),
	                            mapSelectedLen > 0 && _react2["default"].createElement(
	                                'span',
	                                { className: 'fr map-query-clear', onClick: this.clearMapSelectedPoints.bind(this) },
	                                _react2["default"].createElement(_icon2["default"], {
	                                    type: 'trashcan',
	                                    className: '',
	                                    onClick: this.clearMapSelectedPoints.bind(this),
	                                    title: ''
	                                }),
	                                '\u6E05\u7A7A'
	                            )
	                        ),
	                        _react2["default"].createElement(
	                            'ul',
	                            { className: 'map-query-content', style: { height: dialogH - 236 } },
	                            selected_show_bypage.map(function (item, index) {
	                                return _react2["default"].createElement(
	                                    'li',
	                                    { key: index, 'data-indexcode': item.indexCode, onMouseOver: _this7.liMouseOver.bind(_this7), onMouseLeave: _this7.liMouseLeave.bind(_this7) },
	                                    _react2["default"].createElement(
	                                        'span',
	                                        { className: 'li-num' },
	                                        15 * (page_num - 1) + index + 1
	                                    ),
	                                    _react2["default"].createElement(
	                                        'span',
	                                        { title: item.name },
	                                        item.name
	                                    ),
	                                    _react2["default"].createElement('i', { style: map_selected_li_hover_indexcode == item.indexCode ? { display: 'block' } : { display: 'none' }, className: 'anticon anticon-cross map-query-close-x', 'data-indexcode': item.indexCode, onClick: _this7.delectOnePoint.bind(_this7), title: '\u5220\u9664' })
	                                );
	                            })
	                        ),
	                        mapSelectedLen > 0 && _react2["default"].createElement(
	                            'div',
	                            { className: 'map-query-pagination' },
	                            _react2["default"].createElement(_pagination2["default"], { size: 'small', total: mapSelectedLen, onChange: this.pageChange.bind(this), defaultPageSize: 15 })
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	exports["default"] = (0, _reactRedux.connect)(function (state) {
	    return { browser: state.browser };
	})(App);

/***/ }),
/* 905 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _modal = __webpack_require__(307);
	
	var _modal2 = _interopRequireDefault(_modal);
	
	var _pagination = __webpack_require__(848);
	
	var _pagination2 = _interopRequireDefault(_pagination);
	
	var _checkbox = __webpack_require__(845);
	
	var _checkbox2 = _interopRequireDefault(_checkbox);
	
	var _button = __webpack_require__(391);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _input = __webpack_require__(492);
	
	var _input2 = _interopRequireDefault(_input);
	
	var _select = __webpack_require__(505);
	
	var _select2 = _interopRequireDefault(_select);
	
	var _tabs = __webpack_require__(881);
	
	var _tabs2 = _interopRequireDefault(_tabs);
	
	var _message2 = __webpack_require__(500);
	
	var _message3 = _interopRequireDefault(_message2);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	__webpack_require__(398);
	
	__webpack_require__(865);
	
	__webpack_require__(601);
	
	__webpack_require__(401);
	
	__webpack_require__(578);
	
	__webpack_require__(582);
	
	__webpack_require__(889);
	
	__webpack_require__(580);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(158);
	
	var _http = __webpack_require__(277);
	
	var _http2 = _interopRequireDefault(_http);
	
	var _classnames = __webpack_require__(393);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _mapIframe = __webpack_require__(900);
	
	var _mapIframe2 = _interopRequireDefault(_mapIframe);
	
	var _asyncTree = __webpack_require__(906);
	
	var _asyncTree2 = _interopRequireDefault(_asyncTree);
	
	var _icon = __webpack_require__(477);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	__webpack_require__(901);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.setPoints = props.setPoints;
	        _this.pageSize = 14;
	        _this.loaded = false;
	        _this.dBtnName = '单击选择点位';
	        _this.dEmpty = '';
	        _this.dBtnW = 336;
	        _this.dDialogW = 792;
	        _this.dDialogWT = 1026;
	        _this.dDialogH = 695;
	        _this.tree = 1;
	        _this.map = 2;
	        _this.maxNum = props.maxNum || 100;
	        _this.asyncTreeAutoParam = ['indexCode']; //树异步请求所需传的属性
	        _this.autoParam = props.autoParam || ['indexCode']; //选择点位后返回的属性
	        _this.map_url = '';
	        _this.state = {
	            //按钮相关变量
	            className: props.className || _this.dEmpty,
	            btnName: props.btnName || _this.dBtnName,
	            btnW: props.btnW || _this.dBtnW,
	            selected: _this.setPoints || [],
	            //弹窗相关变量
	            modal_show: false,
	            dialogW: _this.dDialogW,
	            dialogH: _this.dDialogH,
	            modal_fullscreen_className: _this.dEmpty,
	            isFullScreen: false,
	            //地图选点显示列表、分页相关变量
	            action: null,
	            map_selected: _this.setPoints || [],
	            query_x_show: false,
	            selected_show_bypage: [],
	            page_num: 1,
	            map_selected_li_hover_indexcode: null,
	            //树地图选择切换相关变量
	            tab_active: _this.tree,
	            url: props.url || '',
	            map_url: '', //*
	            //树切换搜索相关变量
	            resetTree: false,
	            selected_treeData: {}, //*
	            selected_resourceType: '', //*
	            selected_resourceType_id: '', //*
	            selected_capabilitySet: [], //*
	            selected_intelligentSet: null, //*
	            keyword: '',
	            searchParams: null,
	            search_input_clear_show: false,
	            requestType: 0,
	            tree_url: '', //*
	            treeData: null
	        };
	        _this.setParams(props.treeData, props.url, true);
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'setParams',
	        value: function setParams(propTreeData, url, isState) {
	            var props = this.props,
	                state = this.state;
	
	            if (propTreeData && Array.isArray(propTreeData)) {
	                var treeData = propTreeData.map(function (item) {
	                    if (item.resourceTypes && Array.isArray(item.resourceTypes)) {
	                        item.resourceTypes.map(function (a, i) {
	                            a.id = "" + i + "";
	                            if (!a.capabilitySet) {
	                                a.capabilitySet = [];
	                            }
	                            return a;
	                        });
	                        return item;
	                    }
	                });
	                if (treeData[0]) {
	                    var selected_treeData = treeData.filter(function (item) {
	                        return item.isDefault;
	                    })[0];
	                    var selected_resourceType = selected_treeData.resourceTypes[0].value;
	                    var selected_resourceType_id = selected_treeData.resourceTypes[0].id;
	                    var selected_capabilitySet = selected_treeData.resourceTypes[0].capabilitySet;
	                    var selected_intelligentSet = selected_treeData.resourceTypes[0].intelligentSet ? selected_treeData.resourceTypes[0].intelligentSet : null;
	                    if (url && url != '') {
	                        this.map_url = url + '?queryType=1&resourceType=' + selected_resourceType + '&treeCode=' + selected_treeData.value;
	                    }
	                    if (isState) {
	                        this.state.treeData = treeData;
	                        this.state.selected_treeData = selected_treeData;
	                        this.state.selected_resourceType = selected_resourceType;
	                        this.state.selected_resourceType_id = selected_resourceType_id;
	                        this.state.selected_capabilitySet = selected_capabilitySet;
	                        this.state.selected_intelligentSet = selected_intelligentSet;
	                        this.state.tree_url = selected_treeData.url + '?treeCode=' + selected_treeData.value + '&resourceType=' + selected_resourceType + (selected_capabilitySet && selected_capabilitySet.length > 0 ? '&capabilitySet=' + selected_capabilitySet.join(',') : '') + (selected_intelligentSet && selected_intelligentSet.length > 0 ? '&intelligentSet=' + selected_intelligentSet.join(',') : '');
	                    } else {
	                        this.setState({
	                            treeData: treeData,
	                            selected_treeData: selected_treeData,
	                            selected_resourceType: selected_resourceType,
	                            selected_resourceType_id: selected_resourceType_id,
	                            selected_capabilitySet: selected_capabilitySet,
	                            selected_intelligentSet: selected_intelligentSet,
	                            tree_url: selected_treeData.url + '?treeCode=' + selected_treeData.value + '&resourceType=' + selected_resourceType + (selected_capabilitySet && selected_capabilitySet.length > 0 ? '&capabilitySet=' + selected_capabilitySet.join(',') : '') + (selected_intelligentSet && selected_intelligentSet.length > 0 ? '&intelligentSet=' + selected_intelligentSet.join(',') : '')
	                        });
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            if (this.setPoints) {
	                this.assembleTitle(this.setPoints);
	            }
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var browser = nextProps.browser,
	                treeData = nextProps.treeData,
	                reset = nextProps.reset,
	                url = nextProps.url,
	                setPoints = nextProps.setPoints;
	
	            this.setState({
	                dialogH: this.state.isFullScreen ? browser.height : this.dDialogH
	            });
	            if (reset) {
	                this.clearSelectedPoints();
	            }
	            if (JSON.stringify(treeData) != JSON.stringify(this.state.treeData) || url && url != this.state.url) {
	                var setUrl = this.state.url;
	                if (url && url != this.state.url) {
	                    setUrl = url;
	                }
	                this.setParams(treeData, setUrl, false);
	            }
	            if (setPoints && Array.isArray(setPoints) && JSON.stringify(setPoints) != JSON.stringify(this.setPoints)) {
	                this.setPoints = setPoints;
	                this.assembleTitle(setPoints);
	                this.setState({
	                    selected: setPoints,
	                    map_selected: setPoints
	                });
	            }
	        }
	    }, {
	        key: 'metisCallback',
	        value: function metisCallback(_ref) {
	            var type = _ref.type,
	                payload = _ref.payload;
	
	            this.setState({
	                action: null
	            });
	            if (type === 'onMapLoaded') {
	                this.onMapLoaded();
	            } else if (type === 'mapQueryEnded' || type === 'onMapClear') {
	                this.mapQuery(payload);
	            } else if (type === 'fullscreen') {
	                this.onFullScreen(payload);
	            }
	        }
	    }, {
	        key: 'onMapLoaded',
	        value: function onMapLoaded() {
	            this.loaded = true;
	            this.mapFilterResource();
	            var selectedLen = this.state.map_selected.length;
	            if (selectedLen > 0) {
	                this.setState({
	                    action: {
	                        type: 'mapResourceLocation',
	                        payload: {
	                            highlightType: 1,
	                            resources: this.state.map_selected
	                        }
	                    }
	                });
	            }
	        }
	    }, {
	        key: 'mapQuery',
	        value: function mapQuery(selected) {
	            var _this2 = this;
	
	            this.setState({
	                map_selected: selected
	            }, function (u) {
	                _this2.pageChange(1);
	            });
	        }
	    }, {
	        key: 'onFullScreen',
	        value: function onFullScreen(isFullScreen) {
	            if (isFullScreen.flag) {
	                this.setState({
	                    modal_fullscreen_className: 'map-modal-fullscreen',
	                    dialogW: this.props.browser.width,
	                    dialogH: this.props.browser.height,
	                    isFullScreen: true
	                });
	            } else {
	                this.setState({
	                    modal_fullscreen_className: this.dEmpty,
	                    dialogW: this.state.tab_active == this.tree ? this.dDialogW : this.dDialogWT,
	                    dialogH: this.dDialogH,
	                    isFullScreen: false
	                });
	            }
	        }
	    }, {
	        key: 'showModal',
	        value: function showModal() {
	            this.setState({
	                modal_show: true
	            });
	            this.pageChange(1);
	        }
	    }, {
	        key: 'hideModal',
	        value: function hideModal() {
	            var _this3 = this;
	
	            this.setState({
	                modal_show: false,
	                action: {
	                    type: 'mapResourceLocation',
	                    payload: {
	                        highlightType: 1,
	                        resources: []
	                    }
	                }
	            }, function (u) {
	                _this3.setState({
	                    action: {
	                        type: 'mapResourceLocation',
	                        payload: {
	                            highlightType: 1,
	                            resources: _this3.state.selected
	                        }
	                    },
	                    map_selected: _this3.state.selected
	                });
	            });
	        }
	    }, {
	        key: 'onOk',
	        value: function onOk() {
	            var _this4 = this;
	
	            var map_selected = this.state.map_selected;
	
	            var autoParam = this.autoParam;
	            if (map_selected.length > this.maxNum) {
	                _message3["default"].warning("最多只能选择" + this.maxNum + "个点位");
	            } else {
	                this.setState({
	                    selected: map_selected,
	                    modal_show: false
	                }, function (u) {
	                    _this4.props.onChange(_this4.state.selected.map(function (item) {
	                        if (autoParam.length > 1) {
	                            var params = {};
	                            autoParam.forEach(function (key) {
	                                params[key] = item[key];
	                            });
	                            return params;
	                        }
	                        if (autoParam.length == 1) {
	                            return item[autoParam[0]];
	                        }
	                    }));
	                    _this4.assembleTitle(_this4.state.selected);
	                });
	            }
	        }
	    }, {
	        key: 'assembleTitle',
	        value: function assembleTitle(selected) {
	            var selectedLen = selected.length;
	            if (selectedLen === 0) {
	                this.setState({
	                    btnName: this.props.btnName || this.dBtnName,
	                    btnW: this.props.btnW || this.dBtnW
	                });
	            } else {
	                var btnTitle = void 0;
	                if (selectedLen === 1) {
	                    btnTitle = selected[0].name;
	                } else {
	                    btnTitle = '"' + selected[0].name + '"等' + selectedLen + '个点位';
	                }
	
	                this.setState({
	                    btnName: btnTitle,
	                    btnW: this.props.btnW || this.dBtnW
	                });
	            }
	        }
	    }, {
	        key: 'btnMouseEnter',
	        value: function btnMouseEnter() {
	            this.setState({
	                query_x_show: true
	            });
	        }
	    }, {
	        key: 'btnMouseLeave',
	        value: function btnMouseLeave() {
	            this.setState({
	                query_x_show: false
	            });
	        }
	    }, {
	        key: 'liMouseOver',
	        value: function liMouseOver(e) {
	            this.setState({
	                map_selected_li_hover_indexcode: e.currentTarget.getAttribute('data-indexcode')
	            });
	        }
	    }, {
	        key: 'liMouseLeave',
	        value: function liMouseLeave(e) {
	            this.setState({
	                map_selected_li_hover_indexcode: null
	            });
	        }
	    }, {
	        key: 'searchInputEnter',
	        value: function searchInputEnter() {
	            this.setState({
	                search_input_clear_show: true
	            });
	        }
	    }, {
	        key: 'searchInputLeave',
	        value: function searchInputLeave() {
	            this.setState({
	                search_input_clear_show: false
	            });
	        }
	        //单个删除已选择的点位
	
	    }, {
	        key: 'delectOnePoint',
	        value: function delectOnePoint(e) {
	            var _this5 = this;
	
	            var delectIndexCode = e.currentTarget.getAttribute('data-indexcode');
	            var map_selected = this.state.map_selected.filter(function (item) {
	                return item.indexCode != delectIndexCode;
	            });
	            this.setState({
	                map_selected: map_selected,
	                action: {
	                    type: 'mapResourceLocation',
	                    payload: {
	                        highlightType: 1,
	                        resources: map_selected
	                    }
	
	                },
	                map_selected_li_hover_indexcode: null
	            }, function (u) {
	                _this5.pageChange(1);
	            });
	        }
	        //清空弹窗中选择的点位
	
	    }, {
	        key: 'clearMapSelectedPoints',
	        value: function clearMapSelectedPoints() {
	            this.setState({
	                map_selected: [],
	                action: {
	                    type: 'mapResourceLocation',
	                    payload: {
	                        highlightType: 1,
	                        resources: []
	                    }
	                },
	                selected_show_bypage: []
	            });
	        }
	        //清空已选择的点位
	
	    }, {
	        key: 'clearSelectedPoints',
	        value: function clearSelectedPoints() {
	            var _this6 = this;
	
	            this.setState({
	                btnName: this.props.btnName || this.dBtnName,
	                selected: [],
	                map_selected: [],
	                action: {
	                    type: 'mapResourceLocation',
	                    payload: {
	                        highlightType: 1,
	                        resources: []
	                    }
	                },
	                selected_show_bypage: [],
	                query_x_show: false,
	                resetTree: true
	            }, function (u) {
	                _this6.props.onChange(_this6.state.selected);
	            });
	        }
	        //树选择、地图选择tab切换
	
	    }, {
	        key: 'tabChange',
	        value: function tabChange(key) {
	            var _this7 = this;
	
	            if (key == this.tree) {
	                this.setState({
	                    dialogW: this.dDialogW,
	                    tab_active: this.tree,
	                    map_selected: this.state.map_selected
	                });
	            } else {
	                this.setState({
	                    dialogW: this.dDialogWT,
	                    tab_active: this.map,
	                    action: {
	                        type: 'mapResourceLocation',
	                        payload: {
	                            highlightType: 1,
	                            resources: this.state.map_selected
	                        }
	                    }
	                }, function (u) {
	                    _this7.setState({
	                        map_url: _this7.map_url
	                    });
	                });
	                this.mapFilterResource();
	            }
	        }
	        //翻页
	
	    }, {
	        key: 'pageChange',
	        value: function pageChange(noop) {
	            var selected_show_bypage = this.state.map_selected.slice(this.pageSize * (noop - 1), this.pageSize * noop);
	            this.setState({
	                selected_show_bypage: selected_show_bypage,
	                page_num: noop
	            });
	        }
	        //切换树
	
	    }, {
	        key: 'treeChange',
	        value: function treeChange(value) {
	            var _this8 = this;
	
	            var setDefaultTtreeUrl = this.props.setDefaultTtreeUrl;
	            var treeData = this.state.treeData;
	
	            var selected_treeData = treeData.filter(function (item) {
	                return item.value === value;
	            })[0];
	            var treeCode = selected_treeData.value;
	            var selected_resourceType = selected_treeData.resourceTypes[0].value;
	            var selected_resourceType_id = selected_treeData.resourceTypes[0].id;
	            var selected_capabilitySet = selected_treeData.resourceTypes[0].capabilitySet;
	            var selected_intelligentSet = selected_treeData.resourceTypes[0].intelligentSet ? selected_treeData.resourceTypes[0].intelligentSet : null;
	            this.map_url = this.props.url + '?queryType=1&resourceType=' + selected_resourceType + '&treeCode=' + treeCode;
	            var tree_url = selected_treeData.url + '?treeCode=' + treeCode + '&resourceType=' + selected_resourceType + (selected_capabilitySet && selected_capabilitySet.length > 0 ? '&capabilitySet=' + selected_capabilitySet.join(',') : '') + (selected_intelligentSet && selected_intelligentSet.length > 0 ? '&intelligentSet=' + selected_intelligentSet.join(',') : '');
	            this.setState({
	                selected_treeData: selected_treeData,
	                tree_url: tree_url,
	                keyword: '',
	                map_selected: [],
	                selected_resourceType: selected_resourceType,
	                selected_resourceType_id: selected_resourceType_id,
	                selected_capabilitySet: selected_capabilitySet
	            }, function (u) {
	                _this8.pageChange(1);
	            });
	            if (setDefaultTtreeUrl) {
	                _http2["default"].post(setDefaultTtreeUrl, { treeCode: treeCode }).then(function (_ref2) {
	                    var data = _ref2.data;
	                    return data;
	                })["catch"](function (e) {});
	            }
	            this.mapFilterResource();
	        }
	        //切换监控点类型
	
	    }, {
	        key: 'resourceTypeChange',
	        value: function resourceTypeChange(value) {
	            var id = Number(value);
	            var selected_treeData = this.state.selected_treeData;
	
	            var treeCode = selected_treeData.value;
	            var selected_resourceType = selected_treeData.resourceTypes[id].value;
	            var selected_resourceType_id = selected_treeData.resourceTypes[id].id;
	            var selected_capabilitySet = selected_treeData.resourceTypes[id].capabilitySet;
	            var selected_intelligentSet = selected_treeData.resourceTypes[id].intelligentSet ? selected_treeData.resourceTypes[id].intelligentSet : null;
	            this.map_url = this.props.url + '?queryType=1&resourceType=' + selected_resourceType + '&treeCode=' + treeCode;
	            var tree_url = selected_treeData.url + '?treeCode=' + treeCode + '&resourceType=' + selected_resourceType + (selected_capabilitySet && selected_capabilitySet.length > 0 ? '&capabilitySet=' + selected_capabilitySet.join(',') : '') + (selected_intelligentSet && selected_intelligentSet.length > 0 ? '&intelligentSet=' + selected_intelligentSet.join(',') : '');
	            this.setState({
	                tree_url: tree_url,
	                selected_resourceType: selected_resourceType,
	                selected_resourceType_id: selected_resourceType_id,
	                selected_capabilitySet: selected_capabilitySet
	            });
	        }
	        //能力集及智能能力集通过postMessage发送
	
	    }, {
	        key: 'mapFilterResource',
	        value: function mapFilterResource() {
	            var _state = this.state,
	                selected_resourceType = _state.selected_resourceType,
	                selected_capabilitySet = _state.selected_capabilitySet,
	                selected_intelligentSet = _state.selected_intelligentSet;
	
	            var payload = {};
	            var termObj = {};
	            if (selected_capabilitySet && selected_capabilitySet.length > 0) {
	                termObj['capabilitySet'] = '(' + selected_capabilitySet.join(' OR ') + ')';
	            }
	            if (selected_intelligentSet && selected_intelligentSet.length > 0) {
	                termObj['intelligentSet'] = '(' + selected_intelligentSet.join(' OR ') + ')';
	            }
	            payload[selected_resourceType] = termObj;
	            this.setState({
	                action: {
	                    type: 'filterResource',
	                    payload: payload
	                }
	            });
	        }
	        //获取输入框值
	
	    }, {
	        key: 'handleInputChange',
	        value: function handleInputChange(e) {
	            this.setState({
	                keyword: e.target.value
	            });
	        }
	        //搜索
	
	    }, {
	        key: 'treeOnSearch',
	        value: function treeOnSearch() {
	            var _state2 = this.state,
	                selected_treeData = _state2.selected_treeData,
	                selected_resourceType = _state2.selected_resourceType,
	                selected_capabilitySet = _state2.selected_capabilitySet,
	                keyword = _state2.keyword;
	            //    let searchParams = {treeCode:selected_treeData.value,resourceType:selected_resourceType,capabilitySet:selected_capabilitySet,keyword:keyword};
	
	            var searchParams = { keyword: keyword };
	            this.setState({
	                searchParams: searchParams
	            });
	        }
	        //重置搜索
	
	    }, {
	        key: 'clearSearchInput',
	        value: function clearSearchInput() {
	            this.setState({
	                resetTree: true,
	                keyword: ''
	            });
	        }
	        //勾选树节点回调
	
	    }, {
	        key: 'onCheckTree',
	        value: function onCheckTree(selected, allLeafsIndexcode) {
	            var _this9 = this;
	
	            var unExpendSelected = this.state.map_selected.filter(function (item) {
	                return allLeafsIndexcode.indexOf(item.indexCode) < 0;
	            });
	            var map_selected = Array.from(new Set([].concat(_toConsumableArray(selected), _toConsumableArray(unExpendSelected))));
	            this.setState({
	                map_selected: map_selected
	            }, function (u) {
	                _this9.pageChange(1);
	            });
	        }
	        //重置树
	
	    }, {
	        key: 'resetCallback',
	        value: function resetCallback(resetTree) {
	            this.setState({
	                resetTree: resetTree
	            });
	        }
	
	        //是否包含下级组织的点位
	
	    }, {
	        key: 'treeRequireTypeOnChange',
	        value: function treeRequireTypeOnChange(e) {
	            this.setState({
	                requestType: e.target.checked ? 1 : 0
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this10 = this;
	
	            var TabPane = _tabs2["default"].TabPane;
	            var Option = _select2["default"].Option;
	            var InputGroup = _input2["default"].Group;
	            //  let {treeData} = this.props
	            var _state3 = this.state,
	                treeData = _state3.treeData,
	                className = _state3.className,
	                btnName = _state3.btnName,
	                btnW = _state3.btnW,
	                selected = _state3.selected,
	                modal_show = _state3.modal_show,
	                dialogW = _state3.dialogW,
	                dialogH = _state3.dialogH,
	                modal_fullscreen_className = _state3.modal_fullscreen_className,
	                isFullScreen = _state3.isFullScreen,
	                action = _state3.action,
	                map_selected = _state3.map_selected,
	                query_x_show = _state3.query_x_show,
	                selected_show_bypage = _state3.selected_show_bypage,
	                page_num = _state3.page_num,
	                map_selected_li_hover_indexcode = _state3.map_selected_li_hover_indexcode,
	                tab_active = _state3.tab_active,
	                map_url = _state3.map_url,
	                resetTree = _state3.resetTree,
	                selected_treeData = _state3.selected_treeData,
	                selected_resourceType = _state3.selected_resourceType,
	                selected_resourceType_id = _state3.selected_resourceType_id,
	                searchParams = _state3.searchParams,
	                search_input_clear_show = _state3.search_input_clear_show,
	                keyword = _state3.keyword,
	                requestType = _state3.requestType,
	                tree_url = _state3.tree_url;
	
	            var modal_top = isFullScreen ? 0 : (this.props.browser.height - dialogH) / 2;
	            var mapSelectedLen = map_selected.length;
	            var selectedLen = selected.length;
	            var btnCls = (0, _classnames2["default"])({
	                'ant-search-btn': true,
	                'ant-search-btn-noempty': 'noempty'
	            });
	            var searchCls = (0, _classnames2["default"])({
	                'ant-search-input': true,
	                'ant-search-input-focus': 'focus'
	            });
	
	            return _react2["default"].createElement(
	                'div',
	                { className: 'position-relative inline-block' },
	                _react2["default"].createElement(
	                    'div',
	                    { onMouseEnter: selectedLen > 0 && this.btnMouseEnter.bind(this), onMouseLeave: selectedLen > 0 && this.btnMouseLeave.bind(this) },
	                    _react2["default"].createElement(
	                        _button2["default"],
	                        { style: { width: btnW }, className: selectedLen == 0 ? 'map-query-btn ' + className : 'map-query-btn ' + className + ' map-query-selected-btn', title: btnName, onClick: this.showModal.bind(this) },
	                        _react2["default"].createElement(_icon2["default"], {
	                            type: 'lidaicon-h-add',
	                            className: 'anticon-plus',
	                            title: '',
	                            style: selectedLen > 0 ? { display: 'none' } : { display: 'inline-block' }
	                        }),
	                        btnName
	                    ),
	                    selectedLen > 0 && query_x_show && _react2["default"].createElement(_icon2["default"], {
	                        type: 'lidaicon-h-close-circle-f',
	                        className: 'map-query-close-x',
	                        onClick: this.clearSelectedPoints.bind(this),
	                        title: '\u6E05\u7A7A'
	                    })
	                ),
	                selectedLen > 0 && _react2["default"].createElement(
	                    _button2["default"],
	                    { className: 'map-query-detail-btn', onClick: this.showModal.bind(this) },
	                    _react2["default"].createElement(_icon2["default"], {
	                        type: 'lidaicon-h-arrow-right',
	                        className: '',
	                        title: '\u70B9\u4F4D\u8BE6\u60C5'
	                    })
	                ),
	                _react2["default"].createElement(
	                    _modal2["default"],
	                    {
	                        style: { top: modal_top < 0 ? 0 : modal_top },
	                        className: "map-modal map-query-modal " + modal_fullscreen_className,
	                        title: '\u9009\u62E9\u70B9\u4F4D',
	                        visible: modal_show,
	                        width: dialogW,
	                        onOk: this.onOk.bind(this),
	                        onCancel: this.hideModal.bind(this),
	                        maskClosable: false
	                    },
	                    treeData ? _react2["default"].createElement(
	                        'div',
	                        null,
	                        _react2["default"].createElement(
	                            'div',
	                            { className: 'position-relative inline-block', style: isFullScreen ? { width: dialogW, height: dialogH - 96 } : { width: dialogW - 328, height: dialogH - 144 } },
	                            _react2["default"].createElement(
	                                _tabs2["default"],
	                                { onChange: this.tabChange.bind(this), type: 'card', style: isFullScreen ? { width: dialogW, height: dialogH - 96 } : { width: dialogW - 328, height: dialogH - 144 } },
	                                _react2["default"].createElement(
	                                    TabPane,
	                                    { tab: '\u6811\u9009\u62E9', key: '1' },
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'map-tree-search' },
	                                        _react2["default"].createElement(
	                                            _select2["default"],
	                                            { defaultValue: selected_treeData.resourceTypes[0].id, value: selected_resourceType_id, style: { width: 100 }, onChange: this.resourceTypeChange.bind(this) },
	                                            selected_treeData.resourceTypes.map(function (item, index) {
	                                                return _react2["default"].createElement(
	                                                    Option,
	                                                    { key: index, value: item.id },
	                                                    item.name
	                                                );
	                                            })
	                                        ),
	                                        _react2["default"].createElement(
	                                            'div',
	                                            { className: 'ant-search-input-wrapper', onMouseEnter: this.searchInputEnter.bind(this), onMouseLeave: this.searchInputLeave.bind(this) },
	                                            _react2["default"].createElement(
	                                                InputGroup,
	                                                { className: 'ant-search-input' },
	                                                _react2["default"].createElement(_input2["default"], { placeholder: '\u8F93\u5165\u5173\u952E\u5B57\u67E5\u8BE2', value: keyword, onChange: this.handleInputChange.bind(this), onPressEnter: this.treeOnSearch.bind(this) }),
	                                                search_input_clear_show && _react2["default"].createElement(_icon2["default"], {
	                                                    type: 'lidaicon-h-close',
	                                                    className: '',
	                                                    onClick: this.clearSearchInput.bind(this),
	                                                    title: '\u6E05\u7A7A'
	                                                }),
	                                                _react2["default"].createElement(
	                                                    'div',
	                                                    { className: 'ant-input-group-wrap' },
	                                                    _react2["default"].createElement(
	                                                        _button2["default"],
	                                                        { className: 'ant-search-btn', onClick: this.treeOnSearch.bind(this) },
	                                                        _react2["default"].createElement(_icon2["default"], {
	                                                            type: 'lidaicon-h-search',
	                                                            className: '',
	                                                            title: ''
	                                                        })
	                                                    )
	                                                )
	                                            )
	                                        )
	                                    ),
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'map-tree-box', style: { width: dialogW - 362, height: dialogH - 265 } },
	                                        _react2["default"].createElement(_asyncTree2["default"], {
	                                            resetTree: resetTree,
	                                            resetCallback: this.resetCallback.bind(this),
	                                            mapSelected: map_selected,
	                                            source: tree_url,
	                                            onCheck: this.onCheckTree.bind(this),
	                                            searchParams: searchParams,
	                                            autoParam: this.asyncTreeAutoParam,
	                                            requestType: requestType
	                                        })
	                                    ),
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'map-tree-require-type', style: { width: dialogW - 330 } },
	                                        _react2["default"].createElement(
	                                            _checkbox2["default"],
	                                            { onChange: this.treeRequireTypeOnChange.bind(this) },
	                                            '\u5305\u542B\u4E0B\u7EA7\u7EC4\u7EC7\u7684\u70B9\u4F4D'
	                                        )
	                                    )
	                                ),
	                                _react2["default"].createElement(
	                                    TabPane,
	                                    { tab: '\u5730\u56FE\u9009\u62E9', key: '2' },
	                                    map_url != '' ? _react2["default"].createElement(_mapIframe2["default"], {
	                                        type: 'mapQuery',
	                                        url: map_url,
	                                        height: isFullScreen ? dialogH - 96 : dialogH - 218,
	                                        action: action,
	                                        callback: this.metisCallback.bind(this)
	                                    }) : _react2["default"].createElement(
	                                        'div',
	                                        { className: 'map-no-result', style: { width: dialogW - 362, height: dialogH - 265 } },
	                                        _react2["default"].createElement(
	                                            'div',
	                                            { className: 'map-no-result-inner' },
	                                            _react2["default"].createElement(_icon2["default"], { type: 'environment-o', className: 'map-no-result-icon' }),
	                                            _react2["default"].createElement(
	                                                'p',
	                                                { className: 'map-no-result-text' },
	                                                '\u5730\u56FE\u94FE\u63A5\u5F02\u5E38'
	                                            )
	                                        )
	                                    )
	                                )
	                            ),
	                            _react2["default"].createElement(
	                                _select2["default"],
	                                { className: 'map-tree-select', defaultValue: selected_treeData.value, style: { width: 100 }, onChange: this.treeChange.bind(this) },
	                                treeData.map(function (item, index) {
	                                    return _react2["default"].createElement(
	                                        Option,
	                                        { key: index, value: item.value },
	                                        item.name
	                                    );
	                                })
	                            )
	                        ),
	                        _react2["default"].createElement(
	                            'div',
	                            { className: 'map-query-result position-relative', style: { height: dialogH - 144 } },
	                            _react2["default"].createElement(
	                                'div',
	                                { className: 'map-query-nav' },
	                                _react2["default"].createElement(
	                                    'span',
	                                    { className: 'fl map-query-num' },
	                                    '\u5DF2\u9009\u62E9   ',
	                                    mapSelectedLen,
	                                    '   \u4E2A\u70B9\u4F4D'
	                                ),
	                                mapSelectedLen > 0 && _react2["default"].createElement(
	                                    'span',
	                                    { className: 'fr map-query-clear', onClick: this.clearMapSelectedPoints.bind(this) },
	                                    _react2["default"].createElement(_icon2["default"], {
	                                        type: 'trashcan',
	                                        className: '',
	                                        onClick: this.clearMapSelectedPoints.bind(this),
	                                        title: ''
	                                    }),
	                                    '\u6E05\u7A7A'
	                                )
	                            ),
	                            _react2["default"].createElement(
	                                'ul',
	                                { className: 'map-query-content', style: { height: dialogH - 236 } },
	                                selected_show_bypage.map(function (item, index) {
	                                    return _react2["default"].createElement(
	                                        'li',
	                                        { key: index, 'data-indexcode': item.indexCode, onMouseOver: _this10.liMouseOver.bind(_this10), onMouseLeave: _this10.liMouseLeave.bind(_this10) },
	                                        _react2["default"].createElement(
	                                            'span',
	                                            { className: 'li-num' },
	                                            _this10.pageSize * (page_num - 1) + index + 1
	                                        ),
	                                        _react2["default"].createElement(
	                                            'span',
	                                            { title: item.name },
	                                            item.name
	                                        ),
	                                        _react2["default"].createElement('i', { style: map_selected_li_hover_indexcode == item.indexCode ? { display: 'block' } : { display: 'none' }, className: 'anticon anticon-cross map-query-close-x', 'data-indexcode': item.indexCode, onClick: _this10.delectOnePoint.bind(_this10), title: '\u5220\u9664' })
	                                    );
	                                })
	                            ),
	                            mapSelectedLen > 0 && _react2["default"].createElement(
	                                'div',
	                                { className: 'map-query-pagination' },
	                                _react2["default"].createElement(_pagination2["default"], { size: 'small', total: mapSelectedLen, current: page_num, onChange: this.pageChange.bind(this), defaultPageSize: this.pageSize })
	                            )
	                        )
	                    ) : _react2["default"].createElement(
	                        'div',
	                        { className: 'map-no-result', style: { width: dialogW - 48, height: dialogH - 144 } },
	                        _react2["default"].createElement(
	                            'div',
	                            { className: 'map-no-result-inner' },
	                            _react2["default"].createElement(_icon2["default"], { type: 'environment-o', className: 'map-no-result-icon' }),
	                            _react2["default"].createElement(
	                                'p',
	                                { className: 'map-no-result-text' },
	                                '\u65E0\u8D44\u6E90\u6811\u76F8\u5173\u6570\u636E'
	                            )
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	;
	
	exports["default"] = (0, _reactRedux.connect)(function (state) {
	    return { browser: state.browser };
	})(App);

/***/ }),
/* 906 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _tree = __webpack_require__(593);
	
	var _tree2 = _interopRequireDefault(_tree);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	__webpack_require__(599);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _http = __webpack_require__(277);
	
	var _http2 = _interopRequireDefault(_http);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var TreeNode = _tree2["default"].TreeNode;
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.state = {
	            source: props.source,
	            treeData: [],
	            checkedKeys: [],
	            checkedLeafs: [],
	            expandedKeys: [],
	            autoExpandParent: true,
	            searchParams: null,
	            requestType: props.requestType || 0
	        };
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'initTree',
	        value: function initTree() {
	            var _this2 = this;
	
	            if (!this.state.source) return;
	            this.fetch({ requestType: this.state.requestType }).then(function (treeData) {
	                if (treeData && treeData.length > 0) {
	                    _this2.setState({
	                        treeData: treeData,
	                        expandedKeys: [treeData[0].indexCode]
	                    });
	                } else {
	                    _this2.setState({
	                        treeData: []
	                    });
	                }
	            });
	        }
	    }, {
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            this.initTree();
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var _this3 = this;
	
	            var mapSelected = nextProps.mapSelected,
	                resetTree = nextProps.resetTree,
	                source = nextProps.source,
	                searchParams = nextProps.searchParams,
	                requestType = nextProps.requestType;
	
	            if (resetTree) {
	                this.initTree();
	                this.props.resetCallback(false);
	            } else if (mapSelected && JSON.stringify(mapSelected) != JSON.stringify(this.state.checkedLeafs)) {
	                var checkedLeafs = mapSelected;
	                var checkedKeys = mapSelected.length > 0 ? mapSelected.map(function (item) {
	                    return item.indexCode;
	                }) : [];
	                this.setState({
	                    checkedLeafs: checkedLeafs,
	                    checkedKeys: checkedKeys
	                });
	            }
	
	            if (source && source != this.state.source) {
	                this.setState({
	                    source: source
	                }, function (u) {
	                    _this3.initTree();
	                    if (JSON.stringify(searchParams) == JSON.stringify(_this3.state.searchParams)) {
	                        _this3.searchTree(searchParams);
	                    }
	                });
	            }
	
	            if (JSON.stringify(searchParams) != JSON.stringify(this.state.searchParams)) {
	                this.setState({
	                    searchParams: searchParams
	                }, function (u) {
	                    _this3.searchTree(searchParams);
	                });
	            }
	
	            if (requestType != this.state.requestType) {
	                this.setState({
	                    requestType: requestType
	                });
	            }
	        }
	    }, {
	        key: 'searchTree',
	        value: function searchTree(searchParams) {
	            var _this4 = this;
	
	            var state = this.state;
	
	            if (!state.source) return;
	            this.fetch(searchParams).then(function (treeData) {
	                var expandedKeys = [];
	                _this4.searchOrgKeys(treeData, expandedKeys);
	                _this4.setState({
	                    treeData: treeData,
	                    expandedKeys: expandedKeys
	                });
	            });
	        }
	    }, {
	        key: 'searchOrgKeys',
	        value: function searchOrgKeys(data, keyArray) {
	            var _this5 = this;
	
	            //遍历组织节点indexCode
	            data.map(function (item) {
	                var indexCode = item.indexCode,
	                    children = item.children;
	
	                if (children && children.length > 0) {
	                    keyArray.push(indexCode);
	                    _this5.searchOrgKeys(children, keyArray);
	                    return keyArray;
	                }
	            });
	        }
	    }, {
	        key: 'searchLeafs',
	        value: function searchLeafs(data, LeafArray) {
	            var _this6 = this;
	
	            //遍历叶子节点
	            if (data && Array.isArray(data)) {
	                data.map(function (item) {
	                    var isLeaf = item.isLeaf,
	                        children = item.children;
	
	                    if (isLeaf) {
	                        LeafArray.push(item);
	                        return LeafArray;
	                    } else {
	                        _this6.searchLeafs(children, LeafArray);
	                    }
	                });
	            }
	        }
	    }, {
	        key: 'fetch',
	        value: function fetch(params) {
	            var source = this.state.source;
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;
	
	            try {
	                for (var _iterator = this.entries(params)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var _step$value = _slicedToArray(_step.value, 2),
	                        key = _step$value[0],
	                        value = _step$value[1];
	
	                    source = source + '&' + key + '=' + value;
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator["return"]) {
	                        _iterator["return"]();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	
	            return _http2["default"].get(source, {}).then(function (_ref) {
	                var data = _ref.data;
	                return data;
	            })["catch"](function (e) {});
	        }
	    }, {
	        key: 'entries',
	        value: function entries(obj) {
	            var arr = [];
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;
	
	            try {
	                for (var _iterator2 = Object.keys(obj)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var key = _step2.value;
	
	                    arr.push([key, obj[key]]);
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
	                        _iterator2["return"]();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }
	
	            return arr;
	        }
	    }, {
	        key: 'arrayDelDuplicate',
	        value: function arrayDelDuplicate(objArray) {
	            //数组去重
	            var hash = {};
	            var arr = objArray.reduce(function (item, next) {
	                hash[next.indexCode] ? '' : hash[next.indexCode] = true && item.push(next);
	                return item;
	            }, []);
	            return arr;
	        }
	    }, {
	        key: 'allLeafsIndexcode',
	        value: function allLeafsIndexcode() {
	            //返回树中叶子节点
	            var allLeafs = [];
	            this.searchLeafs(this.state.treeData, allLeafs);
	            var allLeafsIndexcode = allLeafs.map(function (item) {
	                return item.indexCode;
	            });
	            return allLeafsIndexcode;
	        }
	    }, {
	        key: 'onTreeLoadData',
	        value: function onTreeLoadData(treeNode, checked, asyncAll, callback) {
	            var _this7 = this;
	
	            return new Promise(function (resolve) {
	                if (treeNode.props.children != undefined && treeNode.props.children.length > 0 && !asyncAll) {
	                    resolve();
	                    return;
	                }
	                var dataRef = treeNode.props.dataRef;
	                var params = {};
	                _this7.props.autoParam.forEach(function (key) {
	                    params[key] = dataRef[key];
	                });
	                params.requestType = _this7.state.requestType;
	                _this7.fetch(params).then(function (data) {
	                    dataRef.children = data;
	                    var treeData = [].concat(_toConsumableArray(_this7.state.treeData));
	                    if (_this7.state.requestType == 0) {
	                        _this7.setState({
	                            treeData: treeData
	                        });
	                    } else {
	                        //展开同步请求的组织节点
	                        var expandedKeys = [];
	                        _this7.searchOrgKeys(data, expandedKeys);
	                        _this7.setState({
	                            treeData: treeData,
	                            expandedKeys: Array.from(new Set([].concat(_toConsumableArray(_this7.state.expandedKeys), expandedKeys)))
	                        });
	                    }
	                    if (checked) {
	                        var needCheckedLeafs = [];
	                        _this7.searchLeafs(data, needCheckedLeafs);
	                        var needCheckedKeys = needCheckedLeafs.map(function (item) {
	                            return item.indexCode;
	                        });
	                        var checkedKeys = Array.from(new Set([].concat(_toConsumableArray(_this7.state.checkedKeys), _toConsumableArray(needCheckedKeys))));
	                        var checkedLeafs = _this7.arrayDelDuplicate([].concat(_toConsumableArray(_this7.state.checkedLeafs), needCheckedLeafs));
	                        _this7.setState({
	                            checkedKeys: checkedKeys,
	                            checkedLeafs: checkedLeafs
	                        });
	                        callback && callback(checkedLeafs);
	                    }
	                    resolve();
	                });
	            });
	        }
	    }, {
	        key: 'onCheck',
	        value: function onCheck(a, _ref2) {
	            var _this8 = this;
	
	            var checked = _ref2.checked,
	                checkedNodes = _ref2.checkedNodes,
	                node = _ref2.node,
	                event = _ref2.event;
	
	            if (checked && !node.props.dataRef.isLeaf) {
	                this.setState({
	                    expandedKeys: [].concat(_toConsumableArray(this.state.expandedKeys), [node.props.dataRef.indexCode])
	                });
	            }
	            var checkedTotalDataRef = checkedNodes.map(function (treeNode) {
	                return treeNode.props.dataRef;
	            });
	            if (this.state.requestType === 0) {
	                //只处理下级叶子节点
	                if (checked && !node.props.dataRef.isLeaf && (!node.props.children || node.props.children.length === 0)) {
	                    //组织节点异步展开
	                    this.onTreeLoadData(node, checked, false, function (checkedLeafs) {
	                        var onCheck = _this8.props.onCheck;
	                        if (onCheck) {
	                            onCheck(checkedLeafs, _this8.allLeafsIndexcode());
	                        }
	                    });
	                } else {
	                    //同步
	                    if (checked && !node.props.halfChecked && !node.props.dataRef.isLeaf) {
	                        //勾选组织节点
	                        checkedTotalDataRef = this.arrayDelDuplicate([].concat(_toConsumableArray(node.props.dataRef.children), _toConsumableArray(this.state.checkedLeafs)));
	                    }
	                    if (!checked && !node.props.halfChecked && !node.props.dataRef.isLeaf) {
	                        //组织节点全选状态，取消勾选组织节点
	                        var d = new Set([].concat(_toConsumableArray(this.state.checkedLeafs)));
	                        var e = new Set([].concat(_toConsumableArray(node.props.dataRef.children)));
	                        var f = new Set([].concat(_toConsumableArray(d)).filter(function (x) {
	                            return !e.has(x);
	                        }));
	                        checkedTotalDataRef = [].concat(_toConsumableArray(f));
	                    }
	                    if (checked && node.props.halfChecked && !node.props.dataRef.isLeaf) {
	                        //组织节点半选状态，取消勾选组织节点
	                        var OldcheckedLeafs = this.state.checkedLeafs;
	                        var nextLeafs = node.props.dataRef.children.filter(function (item) {
	                            return item.isLeaf;
	                        });
	                        var nextLeafHasUnChecked = nextLeafs.some(function (item) {
	                            return OldcheckedLeafs.indexOf(item) < 0;
	                        });
	                        if (!nextLeafHasUnChecked) {
	                            var _d = new Set([].concat(_toConsumableArray(this.state.checkedLeafs)));
	                            var _e = new Set([].concat(_toConsumableArray(nextLeafs)));
	                            var _f = new Set([].concat(_toConsumableArray(_d)).filter(function (x) {
	                                return !_e.has(x);
	                            }));
	                            checkedTotalDataRef = [].concat(_toConsumableArray(_f));
	                        } else {
	                            checkedTotalDataRef = this.arrayDelDuplicate([].concat(_toConsumableArray(OldcheckedLeafs), _toConsumableArray(nextLeafs)));
	                        }
	                    }
	                }
	            }
	            if (this.state.requestType === 1 && checked && !node.props.dataRef.isLeaf) {
	                this.onTreeLoadData(node, checked, true, function (checkedLeafs) {
	                    var onCheck = _this8.props.onCheck;
	                    if (onCheck) {
	                        onCheck(checkedLeafs, _this8.allLeafsIndexcode());
	                    }
	                });
	            }
	            var checkedLeafs = checkedTotalDataRef.filter(function (item) {
	                return item.isLeaf;
	            }); //勾选的叶子节点对象数组
	            var checkedKeys = checkedTotalDataRef.filter(function (item) {
	                return item.isLeaf;
	            }).map(function (item) {
	                return item.indexCode;
	            }); //勾选的叶子节点key数组
	            this.setState({
	                checkedKeys: checkedKeys,
	                checkedLeafs: checkedLeafs
	            }, function (u) {
	                var onCheck = _this8.props.onCheck;
	                var filterCheckedLeafs = _this8.state.checkedLeafs.map(function (item) {
	                    item.name = item.name.replace(/<[\s\S]*?>/gi, "");return item;
	                });
	                if (onCheck) {
	                    onCheck(filterCheckedLeafs, _this8.allLeafsIndexcode());
	                }
	            });
	        }
	    }, {
	        key: 'onExpand',
	        value: function onExpand(expandedKeys, _ref3) {
	            var expanded = _ref3.expanded,
	                node = _ref3.node;
	
	            this.setState({
	                expandedKeys: expandedKeys,
	                autoExpandParent: false
	            });
	        }
	    }, {
	        key: 'renderTreeNodes',
	        value: function renderTreeNodes(data) {
	            var _this9 = this;
	
	            return Array.isArray(data) && data.length > 0 ? data.map(function (item) {
	                var indexCode = item.indexCode,
	                    children = item.children;
	
	                var iconOrder = '';
	                if (item.isLeaf) {
	                    iconOrder = (item.iOnLine === 0 || item.iOnLine === 1 ? item.iOnLine.toString() : '1') + (item.iRelation === 0 || item.iRelation === 1 ? item.iRelation.toString() : '0') + (item.iCascade === 0 || item.iCascade === 1 ? item.iCascade.toString() : '0') + (item.iLongitudeLatitude === 0 || item.iLongitudeLatitude === 1 ? item.iLongitudeLatitude.toString() : '1');
	                }
	                var props = {
	                    key: item.indexCode,
	                    title: _react2["default"].createElement('span', { title: item.name.replace(/<[\s\S]*?>/gi, ""), dangerouslySetInnerHTML: { __html: item.name } }),
	                    isLeaf: item.isLeaf,
	                    className: item.isLeaf ? 'ant-tree-node-icon-' + item.icon + ' ant-tree-node-icon-' + item.icon + iconOrder : 'ant-tree-node-icon-area ant-tree-node-icon-' + item.icon
	                };
	                return children && children.length > 0 ? _react2["default"].createElement(
	                    TreeNode,
	                    _extends({}, props, { dataRef: item, key: indexCode }),
	                    _this9.renderTreeNodes(children)
	                ) : _react2["default"].createElement(TreeNode, _extends({}, props, { dataRef: item, key: indexCode }));
	            }) : _react2["default"].createElement(TreeNode, { title: '\u67E5\u8BE2\u65E0\u7ED3\u679C', isLeaf: true, disabled: true });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var props = this.props,
	                state = this.state;
	
	            return state.source ? _react2["default"].createElement(
	                _tree2["default"],
	                {
	                    checkable: true,
	                    onExpand: this.onExpand.bind(this),
	                    expandedKeys: state.expandedKeys,
	                    autoExpandParent: state.autoExpandParent,
	                    onCheck: this.onCheck.bind(this),
	                    checkedKeys: state.checkedKeys,
	                    defaultExpandedKeys: props.defaultExpandedKeys,
	                    loadData: this.onTreeLoadData.bind(this)
	                },
	                this.renderTreeNodes(state.treeData)
	            ) : _react2["default"].createElement(
	                _tree2["default"],
	                null,
	                _react2["default"].createElement(TreeNode, { isLeaf: true, disabled: true })
	            );
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	exports["default"] = App;

/***/ }),
/* 907 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _modal = __webpack_require__(307);
	
	var _modal2 = _interopRequireDefault(_modal);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	__webpack_require__(398);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(158);
	
	var _mapIframe = __webpack_require__(900);
	
	var _mapIframe2 = _interopRequireDefault(_mapIframe);
	
	__webpack_require__(901);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.type = 'showTrackLine';
	        _this.state = {
	            action: {
	                type: _this.type,
	                payload: props.data
	            },
	            url: props.url || '',
	            modalName: props.modalName || '',
	            modal_show: props.visible || false
	        };
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var data = nextProps.data,
	                url = nextProps.url,
	                visible = nextProps.visible;
	
	            if (JSON.stringify(data) != JSON.stringify(this.state.action.payload)) {
	                this.setState({
	                    action: {
	                        type: this.type,
	                        payload: data
	                    }
	                });
	            }
	            if (visible != this.state.modal_show) {
	                this.setState({
	                    modal_show: visible
	                });
	            }
	            if (url && url != '' && url != this.state.url) {
	                this.setState({
	                    url: url
	                });
	            }
	        }
	    }, {
	        key: 'metisCallback',
	        value: function metisCallback(_ref) {
	            var type = _ref.type,
	                payload = _ref.payload;
	
	            if (type === 'onMapLoaded') {
	                this.setState({
	                    action: {
	                        type: this.type,
	                        payload: this.props.data
	                    }
	                });
	            }
	        }
	    }, {
	        key: 'showModal',
	        value: function showModal() {
	            this.setState({
	                modal_show: true
	            });
	        }
	    }, {
	        key: 'hideModal',
	        value: function hideModal() {
	            this.setState({
	                modal_show: false
	            });
	            this.props.closeCallback(false);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _state = this.state,
	                url = _state.url,
	                modal_show = _state.modal_show,
	                action = _state.action,
	                modalName = _state.modalName;
	
	            var dialogH = this.props.browser.height - 40;
	            return _react2["default"].createElement(
	                _modal2["default"],
	                {
	                    className: 'map-modal map-modal-fullscreen',
	                    title: modalName,
	                    visible: modal_show,
	                    width: '100%',
	                    footer: null,
	                    onCancel: this.hideModal.bind(this),
	                    maskClosable: false
	                },
	                _react2["default"].createElement(_mapIframe2["default"], {
	                    type: this.type,
	                    url: url,
	                    height: dialogH,
	                    action: action,
	                    callback: this.metisCallback.bind(this)
	                })
	            );
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	;
	
	exports["default"] = (0, _reactRedux.connect)(function (state) {
	    return { browser: state.browser };
	})(App);

/***/ }),
/* 908 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _modal = __webpack_require__(307);
	
	var _modal2 = _interopRequireDefault(_modal);
	
	var _button = __webpack_require__(391);
	
	var _button2 = _interopRequireDefault(_button);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	__webpack_require__(398);
	
	__webpack_require__(401);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(158);
	
	var _mapIframe = __webpack_require__(900);
	
	var _mapIframe2 = _interopRequireDefault(_mapIframe);
	
	__webpack_require__(901);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.dDialogW = 800;
	        _this.dDialogH = 500;
	        _this.type = 'locationResource';
	        _this.state = {
	            url: props.url || '',
	            action: null,
	            dialogW: _this.dDialogW,
	            dialogH: _this.dDialogH,
	            className: props.className || '',
	            btnName: props.btnName || '标注经纬度',
	            modal_show: false,
	            modal_fullscreen_className: '',
	            isFullScreen: false
	        };
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var url = nextProps.url;
	
	            if (url && url != '' && url != this.state.url) {
	                this.setState({
	                    url: url
	                });
	            }
	        }
	    }, {
	        key: 'metisCallback',
	        value: function metisCallback(_ref) {
	            var type = _ref.type,
	                payload = _ref.payload;
	
	            if (type === 'saveLocation') {
	                this.hideModal();
	                this.props.onChange(payload);
	            }
	            if (type === 'fullscreen') {
	                this.onFullScreen(payload.flag);
	            }
	        }
	    }, {
	        key: 'showModal',
	        value: function showModal() {
	            this.setState({
	                modal_show: true
	            });
	        }
	    }, {
	        key: 'hideModal',
	        value: function hideModal() {
	            this.setState({
	                modal_show: false
	            });
	        }
	    }, {
	        key: 'onFullScreen',
	        value: function onFullScreen(isFullScreen) {
	            if (isFullScreen) {
	                this.setState({
	                    modal_fullscreen_className: 'map-modal-fullscreen',
	                    dialogW: '100%',
	                    dialogH: this.props.browser.height,
	                    isFullScreen: true
	                });
	            } else {
	                this.setState({
	                    modal_fullscreen_className: '',
	                    dialogW: this.dDialogW,
	                    dialogH: this.dDialogH,
	                    isFullScreen: false
	                });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _state = this.state,
	                url = _state.url,
	                className = _state.className,
	                btnName = _state.btnName,
	                modal_show = _state.modal_show,
	                action = _state.action,
	                modal_fullscreen_className = _state.modal_fullscreen_className,
	                dialogW = _state.dialogW,
	                dialogH = _state.dialogH,
	                isFullScreen = _state.isFullScreen;
	
	            var modal_top = isFullScreen ? 0 : (this.props.browser.height - dialogH) / 2;
	            return _react2["default"].createElement(
	                'div',
	                { className: 'inline-block' },
	                _react2["default"].createElement(
	                    _button2["default"],
	                    { className: className, title: btnName, onClick: this.showModal.bind(this) },
	                    btnName
	                ),
	                _react2["default"].createElement(
	                    _modal2["default"],
	                    {
	                        style: { top: modal_top < 0 ? 0 : modal_top },
	                        className: "map-modal " + modal_fullscreen_className,
	                        title: '\u6807\u6CE8\u7ECF\u7EAC\u5EA6',
	                        visible: modal_show,
	                        width: dialogW,
	                        footer: null,
	                        onCancel: this.hideModal.bind(this),
	                        maskClosable: false
	                    },
	                    _react2["default"].createElement(_mapIframe2["default"], {
	                        type: this.type,
	                        url: url,
	                        height: isFullScreen ? this.props.browser.height - 40 : dialogH - 40,
	                        action: action,
	                        callback: this.metisCallback.bind(this)
	                    })
	                )
	            );
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	;
	
	exports["default"] = (0, _reactRedux.connect)(function (state) {
	    return { browser: state.browser };
	})(App);

/***/ }),
/* 909 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var prefix =  true ? 'http://10.2.145.103' : '';
	
	var mapQueryUrl = prefix + '/xmap-web/third/mapQuery/index.do';
	
	var targetLocationUrl = prefix + '/xmap-web/third/targetLocation/index.do?fullScreen=0';
	
	var targetLocationFullScreenUrl = prefix + '/xmap-web/third/targetLocation/index.do?fullScreen=1';
	
	var trackLineUrl = prefix + '/xmap-web/third/trackLine/index.do?isShowPanel=true';
	
	exports.mapQueryUrl = mapQueryUrl;
	exports.targetLocationUrl = targetLocationUrl;
	exports.targetLocationFullScreenUrl = targetLocationFullScreenUrl;
	exports.trackLineUrl = trackLineUrl;

/***/ }),
/* 910 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _icon = __webpack_require__(394);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	__webpack_require__(899);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _mapIframe = __webpack_require__(900);
	
	var _mapIframe2 = _interopRequireDefault(_mapIframe);
	
	__webpack_require__(901);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.type = 'mapShow';
	        _this.state = {
	            loaded: false,
	            url: props.url || ''
	        };
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var url = nextProps.url;
	
	            if (url && url != '' && url != this.state.url) {
	                this.setState({
	                    url: url
	                });
	            }
	        }
	    }, {
	        key: 'metisCallback',
	        value: function metisCallback(_ref) {
	            var type = _ref.type,
	                payload = _ref.payload;
	
	            if (type === 'onMapLoaded') {
	                this.setState({
	                    loaded: true
	                });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _props = this.props,
	                width = _props.width,
	                height = _props.height;
	            var _state = this.state,
	                url = _state.url,
	                loaded = _state.loaded;
	
	            var map_show = { position: 'absolute', visibility: 'hidden' };
	            var showMap = false;
	            if (loaded) {
	                showMap = true;
	                map_show = {};
	            }
	
	            return _react2["default"].createElement(
	                'div',
	                { className: 'map-no-result', style: { width: width, height: height } },
	                !showMap && _react2["default"].createElement(
	                    'div',
	                    { className: 'map-no-result-inner' },
	                    _react2["default"].createElement(_icon2["default"], { type: 'environment-o', className: 'map-no-result-icon' }),
	                    _react2["default"].createElement(
	                        'p',
	                        { className: 'map-no-result-text' },
	                        '\u6B63\u5728\u52A0\u8F7D\u5730\u56FE'
	                    )
	                ),
	                _react2["default"].createElement(
	                    'div',
	                    { style: map_show },
	                    _react2["default"].createElement(_mapIframe2["default"], {
	                        type: this.type,
	                        url: url,
	                        width: width,
	                        height: height,
	                        callback: this.metisCallback.bind(this)
	                    })
	                )
	            );
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	exports["default"] = App;

/***/ }),
/* 911 */,
/* 912 */,
/* 913 */,
/* 914 */,
/* 915 */,
/* 916 */,
/* 917 */,
/* 918 */,
/* 919 */,
/* 920 */,
/* 921 */,
/* 922 */,
/* 923 */,
/* 924 */,
/* 925 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.OutHabitLine = exports.OutTimeLine = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _http = __webpack_require__(277);
	
	var _http2 = _interopRequireDefault(_http);
	
	var _echarts = __webpack_require__(926);
	
	var _echarts2 = _interopRequireDefault(_echarts);
	
	__webpack_require__(1069);
	
	__webpack_require__(1091);
	
	__webpack_require__(1102);
	
	__webpack_require__(1115);
	
	__webpack_require__(1116);
	
	__webpack_require__(1122);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function httpRequest(type, url, params, callback) {
	    if (type === "get") {
	        _http2["default"][type](url, { params: params }).then(function (response) {
	            callback && callback(response);
	        })["catch"](function (e) {
	            return _http2["default"].showError(e);
	        });
	    } else if (type === "post") {
	        _http2["default"][type](url, params).then(function (response) {
	            callback && callback(response);
	        })["catch"](function (e) {
	            return _http2["default"].showError(e);
	        });
	    }
	}
	
	var OutTimeLine = function (_React$Component) {
	    _inherits(OutTimeLine, _React$Component);
	
	    function OutTimeLine(props) {
	        _classCallCheck(this, OutTimeLine);
	
	        var _this = _possibleConstructorReturn(this, (OutTimeLine.__proto__ || Object.getPrototypeOf(OutTimeLine)).call(this, props));
	
	        _this.outTimeLine = null;
	
	        return _this;
	    }
	
	    _createClass(OutTimeLine, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.initOutTimeLine();
	        }
	    }, {
	        key: 'initOutTimeLine',
	        value: function initOutTimeLine() {
	            var _this2 = this;
	
	            var callback = function callback(res) {
	                var list = res.data.list;
	                _this2.outTimeLine = _echarts2["default"].init(_this2.refs.outTimeLine);
	                _this2.outTimeLine.setOption({
	                    tooltip: {
	                        trigger: "axis"
	                    },
	                    xAxis: {
	                        type: 'category',
	                        data: list.map(function (item) {
	                            return item.time;
	                        })
	                    },
	                    yAxis: {
	                        type: 'value',
	                        axisTick: {
	                            show: true
	                        }
	                    },
	                    series: [{
	                        name: '夜出次数',
	                        data: list.map(function (item) {
	                            return item.num;
	                        }),
	                        type: 'line',
	                        itemStyle: {
	                            normal: {
	                                lineStyle: {
	                                    color: "#3d6ce5"
	                                }
	                            }
	                        }
	                    }],
	                    grid: {
	                        x: 30,
	                        y: 10,
	                        x2: 15,
	                        y2: 25
	                    }
	                });
	            };
	            httpRequest('post', '/mock/statistic/outTime.do', {}, callback);
	        }
	    }, {
	        key: 'resizeChart',
	        value: function resizeChart() {
	            this.outTimeLine && this.outTimeLine.resize();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2["default"].createElement('div', { ref: "outTimeLine", style: { height: this.props.height } });
	        }
	    }]);
	
	    return OutTimeLine;
	}(_react2["default"].Component);
	
	var OutHabitLine = function (_React$Component2) {
	    _inherits(OutHabitLine, _React$Component2);
	
	    function OutHabitLine(props) {
	        _classCallCheck(this, OutHabitLine);
	
	        var _this3 = _possibleConstructorReturn(this, (OutHabitLine.__proto__ || Object.getPrototypeOf(OutHabitLine)).call(this, props));
	
	        _this3.outHabitLine = null;
	        return _this3;
	    }
	
	    _createClass(OutHabitLine, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.initOutHabitLine();
	        }
	    }, {
	        key: 'initOutHabitLine',
	        value: function initOutHabitLine() {
	            var _this4 = this;
	
	            var callback = function callback(res) {
	                var list = res.data.list;
	                _this4.outHabitLine = _echarts2["default"].init(_this4.refs.outHabitLine);
	                _this4.outHabitLine.setOption({
	                    tooltip: {
	                        trigger: "axis"
	                    },
	                    xAxis: {
	                        type: 'category',
	                        data: list.map(function (item) {
	                            return item.time;
	                        })
	                    },
	                    yAxis: {
	                        type: 'value'
	                    },
	                    series: [{
	                        name: '夜出次数',
	                        data: list.map(function (item) {
	                            return item.num;
	                        }),
	                        type: 'line',
	                        itemStyle: {
	                            normal: {
	                                lineStyle: {
	                                    color: "#3DA8F2"
	                                }
	                            }
	                        }
	                    }],
	                    grid: {
	                        x: 30,
	                        y: 10,
	                        x2: 15,
	                        y2: 25
	                    }
	                });
	            };
	            httpRequest('post', '/mock/statistic/outHabit.do', {}, callback);
	        }
	    }, {
	        key: 'resizeChart',
	        value: function resizeChart() {
	            this.outHabitLine && this.outHabitLine.resize();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2["default"].createElement('div', { ref: "outHabitLine", style: { height: this.props.height } });
	        }
	    }]);
	
	    return OutHabitLine;
	}(_react2["default"].Component);
	
	exports.OutTimeLine = OutTimeLine;
	exports.OutHabitLine = OutHabitLine;

/***/ }),
/* 926 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	var zrender = __webpack_require__(928);
	
	var zrUtil = __webpack_require__(931);
	
	var colorTool = __webpack_require__(945);
	
	var env = __webpack_require__(930);
	
	var timsort = __webpack_require__(950);
	
	var Eventful = __webpack_require__(935);
	
	var GlobalModel = __webpack_require__(968);
	
	var ExtensionAPI = __webpack_require__(1022);
	
	var CoordinateSystemManager = __webpack_require__(1023);
	
	var OptionManager = __webpack_require__(1024);
	
	var backwardCompat = __webpack_require__(1025);
	
	var dataStack = __webpack_require__(1027);
	
	var ComponentModel = __webpack_require__(1010);
	
	var SeriesModel = __webpack_require__(1028);
	
	var ComponentView = __webpack_require__(1032);
	
	var ChartView = __webpack_require__(1033);
	
	var graphic = __webpack_require__(976);
	
	var modelUtil = __webpack_require__(969);
	
	var _throttle = __webpack_require__(1035);
	
	var throttle = _throttle.throttle;
	
	var seriesColor = __webpack_require__(1036);
	
	var aria = __webpack_require__(1037);
	
	var loadingDefault = __webpack_require__(1039);
	
	var Scheduler = __webpack_require__(1040);
	
	var lightTheme = __webpack_require__(1041);
	
	var darkTheme = __webpack_require__(1042);
	
	__webpack_require__(1043);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var assert = zrUtil.assert;
	var each = zrUtil.each;
	var isFunction = zrUtil.isFunction;
	var isObject = zrUtil.isObject;
	var parseClassType = ComponentModel.parseClassType;
	var version = '4.1.0';
	var dependencies = {
	  zrender: '4.0.4'
	};
	var TEST_FRAME_REMAIN_TIME = 1;
	var PRIORITY_PROCESSOR_FILTER = 1000;
	var PRIORITY_PROCESSOR_STATISTIC = 5000;
	var PRIORITY_VISUAL_LAYOUT = 1000;
	var PRIORITY_VISUAL_GLOBAL = 2000;
	var PRIORITY_VISUAL_CHART = 3000;
	var PRIORITY_VISUAL_COMPONENT = 4000; // FIXME
	// necessary?
	
	var PRIORITY_VISUAL_BRUSH = 5000;
	var PRIORITY = {
	  PROCESSOR: {
	    FILTER: PRIORITY_PROCESSOR_FILTER,
	    STATISTIC: PRIORITY_PROCESSOR_STATISTIC
	  },
	  VISUAL: {
	    LAYOUT: PRIORITY_VISUAL_LAYOUT,
	    GLOBAL: PRIORITY_VISUAL_GLOBAL,
	    CHART: PRIORITY_VISUAL_CHART,
	    COMPONENT: PRIORITY_VISUAL_COMPONENT,
	    BRUSH: PRIORITY_VISUAL_BRUSH
	  }
	}; // Main process have three entries: `setOption`, `dispatchAction` and `resize`,
	// where they must not be invoked nestedly, except the only case: invoke
	// dispatchAction with updateMethod "none" in main process.
	// This flag is used to carry out this rule.
	// All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).
	
	var IN_MAIN_PROCESS = '__flagInMainProcess';
	var OPTION_UPDATED = '__optionUpdated';
	var ACTION_REG = /^[a-zA-Z0-9_]+$/;
	
	function createRegisterEventWithLowercaseName(method) {
	  return function (eventName, handler, context) {
	    // Event name is all lowercase
	    eventName = eventName && eventName.toLowerCase();
	    Eventful.prototype[method].call(this, eventName, handler, context);
	  };
	}
	/**
	 * @module echarts~MessageCenter
	 */
	
	
	function MessageCenter() {
	  Eventful.call(this);
	}
	
	MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');
	MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');
	MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');
	zrUtil.mixin(MessageCenter, Eventful);
	/**
	 * @module echarts~ECharts
	 */
	
	function ECharts(dom, theme, opts) {
	  opts = opts || {}; // Get theme by name
	
	  if (typeof theme === 'string') {
	    theme = themeStorage[theme];
	  }
	  /**
	   * @type {string}
	   */
	
	
	  this.id;
	  /**
	   * Group id
	   * @type {string}
	   */
	
	  this.group;
	  /**
	   * @type {HTMLElement}
	   * @private
	   */
	
	  this._dom = dom;
	  var defaultRenderer = 'canvas';
	
	  /**
	   * @type {module:zrender/ZRender}
	   * @private
	   */
	  var zr = this._zr = zrender.init(dom, {
	    renderer: opts.renderer || defaultRenderer,
	    devicePixelRatio: opts.devicePixelRatio,
	    width: opts.width,
	    height: opts.height
	  });
	  /**
	   * Expect 60 pfs.
	   * @type {Function}
	   * @private
	   */
	
	  this._throttledZrFlush = throttle(zrUtil.bind(zr.flush, zr), 17);
	  var theme = zrUtil.clone(theme);
	  theme && backwardCompat(theme, true);
	  /**
	   * @type {Object}
	   * @private
	   */
	
	  this._theme = theme;
	  /**
	   * @type {Array.<module:echarts/view/Chart>}
	   * @private
	   */
	
	  this._chartsViews = [];
	  /**
	   * @type {Object.<string, module:echarts/view/Chart>}
	   * @private
	   */
	
	  this._chartsMap = {};
	  /**
	   * @type {Array.<module:echarts/view/Component>}
	   * @private
	   */
	
	  this._componentsViews = [];
	  /**
	   * @type {Object.<string, module:echarts/view/Component>}
	   * @private
	   */
	
	  this._componentsMap = {};
	  /**
	   * @type {module:echarts/CoordinateSystem}
	   * @private
	   */
	
	  this._coordSysMgr = new CoordinateSystemManager();
	  /**
	   * @type {module:echarts/ExtensionAPI}
	   * @private
	   */
	
	  var api = this._api = createExtensionAPI(this); // Sort on demand
	
	  function prioritySortFunc(a, b) {
	    return a.__prio - b.__prio;
	  }
	
	  timsort(visualFuncs, prioritySortFunc);
	  timsort(dataProcessorFuncs, prioritySortFunc);
	  /**
	   * @type {module:echarts/stream/Scheduler}
	   */
	
	  this._scheduler = new Scheduler(this, api, dataProcessorFuncs, visualFuncs);
	  Eventful.call(this);
	  /**
	   * @type {module:echarts~MessageCenter}
	   * @private
	   */
	
	  this._messageCenter = new MessageCenter(); // Init mouse events
	
	  this._initEvents(); // In case some people write `window.onresize = chart.resize`
	
	
	  this.resize = zrUtil.bind(this.resize, this); // Can't dispatch action during rendering procedure
	
	  this._pendingActions = [];
	  zr.animation.on('frame', this._onframe, this);
	  bindRenderedEvent(zr, this); // ECharts instance can be used as value.
	
	  zrUtil.setAsPrimitive(this);
	}
	
	var echartsProto = ECharts.prototype;
	
	echartsProto._onframe = function () {
	  if (this._disposed) {
	    return;
	  }
	
	  var scheduler = this._scheduler; // Lazy update
	
	  if (this[OPTION_UPDATED]) {
	    var silent = this[OPTION_UPDATED].silent;
	    this[IN_MAIN_PROCESS] = true;
	    prepare(this);
	    updateMethods.update.call(this);
	    this[IN_MAIN_PROCESS] = false;
	    this[OPTION_UPDATED] = false;
	    flushPendingActions.call(this, silent);
	    triggerUpdatedEvent.call(this, silent);
	  } // Avoid do both lazy update and progress in one frame.
	  else if (scheduler.unfinished) {
	      // Stream progress.
	      var remainTime = TEST_FRAME_REMAIN_TIME;
	      var ecModel = this._model;
	      var api = this._api;
	      scheduler.unfinished = false;
	
	      do {
	        var startTime = +new Date();
	        scheduler.performSeriesTasks(ecModel); // Currently dataProcessorFuncs do not check threshold.
	
	        scheduler.performDataProcessorTasks(ecModel);
	        updateStreamModes(this, ecModel); // Do not update coordinate system here. Because that coord system update in
	        // each frame is not a good user experience. So we follow the rule that
	        // the extent of the coordinate system is determin in the first frame (the
	        // frame is executed immedietely after task reset.
	        // this._coordSysMgr.update(ecModel, api);
	        // console.log('--- ec frame visual ---', remainTime);
	
	        scheduler.performVisualTasks(ecModel);
	        renderSeries(this, this._model, api, 'remain');
	        remainTime -= +new Date() - startTime;
	      } while (remainTime > 0 && scheduler.unfinished); // Call flush explicitly for trigger finished event.
	
	
	      if (!scheduler.unfinished) {
	        this._zr.flush();
	      } // Else, zr flushing be ensue within the same frame,
	      // because zr flushing is after onframe event.
	
	    }
	};
	/**
	 * @return {HTMLElement}
	 */
	
	
	echartsProto.getDom = function () {
	  return this._dom;
	};
	/**
	 * @return {module:zrender~ZRender}
	 */
	
	
	echartsProto.getZr = function () {
	  return this._zr;
	};
	/**
	 * Usage:
	 * chart.setOption(option, notMerge, lazyUpdate);
	 * chart.setOption(option, {
	 *     notMerge: ...,
	 *     lazyUpdate: ...,
	 *     silent: ...
	 * });
	 *
	 * @param {Object} option
	 * @param {Object|boolean} [opts] opts or notMerge.
	 * @param {boolean} [opts.notMerge=false]
	 * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.
	 */
	
	
	echartsProto.setOption = function (option, notMerge, lazyUpdate) {
	  var silent;
	
	  if (isObject(notMerge)) {
	    lazyUpdate = notMerge.lazyUpdate;
	    silent = notMerge.silent;
	    notMerge = notMerge.notMerge;
	  }
	
	  this[IN_MAIN_PROCESS] = true;
	
	  if (!this._model || notMerge) {
	    var optionManager = new OptionManager(this._api);
	    var theme = this._theme;
	    var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);
	    ecModel.scheduler = this._scheduler;
	    ecModel.init(null, null, theme, optionManager);
	  }
	
	  this._model.setOption(option, optionPreprocessorFuncs);
	
	  if (lazyUpdate) {
	    this[OPTION_UPDATED] = {
	      silent: silent
	    };
	    this[IN_MAIN_PROCESS] = false;
	  } else {
	    prepare(this);
	    updateMethods.update.call(this); // Ensure zr refresh sychronously, and then pixel in canvas can be
	    // fetched after `setOption`.
	
	    this._zr.flush();
	
	    this[OPTION_UPDATED] = false;
	    this[IN_MAIN_PROCESS] = false;
	    flushPendingActions.call(this, silent);
	    triggerUpdatedEvent.call(this, silent);
	  }
	};
	/**
	 * @DEPRECATED
	 */
	
	
	echartsProto.setTheme = function () {
	  console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');
	};
	/**
	 * @return {module:echarts/model/Global}
	 */
	
	
	echartsProto.getModel = function () {
	  return this._model;
	};
	/**
	 * @return {Object}
	 */
	
	
	echartsProto.getOption = function () {
	  return this._model && this._model.getOption();
	};
	/**
	 * @return {number}
	 */
	
	
	echartsProto.getWidth = function () {
	  return this._zr.getWidth();
	};
	/**
	 * @return {number}
	 */
	
	
	echartsProto.getHeight = function () {
	  return this._zr.getHeight();
	};
	/**
	 * @return {number}
	 */
	
	
	echartsProto.getDevicePixelRatio = function () {
	  return this._zr.painter.dpr || window.devicePixelRatio || 1;
	};
	/**
	 * Get canvas which has all thing rendered
	 * @param {Object} opts
	 * @param {string} [opts.backgroundColor]
	 * @return {string}
	 */
	
	
	echartsProto.getRenderedCanvas = function (opts) {
	  if (!env.canvasSupported) {
	    return;
	  }
	
	  opts = opts || {};
	  opts.pixelRatio = opts.pixelRatio || 1;
	  opts.backgroundColor = opts.backgroundColor || this._model.get('backgroundColor');
	  var zr = this._zr; // var list = zr.storage.getDisplayList();
	  // Stop animations
	  // Never works before in init animation, so remove it.
	  // zrUtil.each(list, function (el) {
	  //     el.stopAnimation(true);
	  // });
	
	  return zr.painter.getRenderedCanvas(opts);
	};
	/**
	 * Get svg data url
	 * @return {string}
	 */
	
	
	echartsProto.getSvgDataUrl = function () {
	  if (!env.svgSupported) {
	    return;
	  }
	
	  var zr = this._zr;
	  var list = zr.storage.getDisplayList(); // Stop animations
	
	  zrUtil.each(list, function (el) {
	    el.stopAnimation(true);
	  });
	  return zr.painter.pathToDataUrl();
	};
	/**
	 * @return {string}
	 * @param {Object} opts
	 * @param {string} [opts.type='png']
	 * @param {string} [opts.pixelRatio=1]
	 * @param {string} [opts.backgroundColor]
	 * @param {string} [opts.excludeComponents]
	 */
	
	
	echartsProto.getDataURL = function (opts) {
	  opts = opts || {};
	  var excludeComponents = opts.excludeComponents;
	  var ecModel = this._model;
	  var excludesComponentViews = [];
	  var self = this;
	  each(excludeComponents, function (componentType) {
	    ecModel.eachComponent({
	      mainType: componentType
	    }, function (component) {
	      var view = self._componentsMap[component.__viewId];
	
	      if (!view.group.ignore) {
	        excludesComponentViews.push(view);
	        view.group.ignore = true;
	      }
	    });
	  });
	  var url = this._zr.painter.getType() === 'svg' ? this.getSvgDataUrl() : this.getRenderedCanvas(opts).toDataURL('image/' + (opts && opts.type || 'png'));
	  each(excludesComponentViews, function (view) {
	    view.group.ignore = false;
	  });
	  return url;
	};
	/**
	 * @return {string}
	 * @param {Object} opts
	 * @param {string} [opts.type='png']
	 * @param {string} [opts.pixelRatio=1]
	 * @param {string} [opts.backgroundColor]
	 */
	
	
	echartsProto.getConnectedDataURL = function (opts) {
	  if (!env.canvasSupported) {
	    return;
	  }
	
	  var groupId = this.group;
	  var mathMin = Math.min;
	  var mathMax = Math.max;
	  var MAX_NUMBER = Infinity;
	
	  if (connectedGroups[groupId]) {
	    var left = MAX_NUMBER;
	    var top = MAX_NUMBER;
	    var right = -MAX_NUMBER;
	    var bottom = -MAX_NUMBER;
	    var canvasList = [];
	    var dpr = opts && opts.pixelRatio || 1;
	    zrUtil.each(instances, function (chart, id) {
	      if (chart.group === groupId) {
	        var canvas = chart.getRenderedCanvas(zrUtil.clone(opts));
	        var boundingRect = chart.getDom().getBoundingClientRect();
	        left = mathMin(boundingRect.left, left);
	        top = mathMin(boundingRect.top, top);
	        right = mathMax(boundingRect.right, right);
	        bottom = mathMax(boundingRect.bottom, bottom);
	        canvasList.push({
	          dom: canvas,
	          left: boundingRect.left,
	          top: boundingRect.top
	        });
	      }
	    });
	    left *= dpr;
	    top *= dpr;
	    right *= dpr;
	    bottom *= dpr;
	    var width = right - left;
	    var height = bottom - top;
	    var targetCanvas = zrUtil.createCanvas();
	    targetCanvas.width = width;
	    targetCanvas.height = height;
	    var zr = zrender.init(targetCanvas);
	    each(canvasList, function (item) {
	      var img = new graphic.Image({
	        style: {
	          x: item.left * dpr - left,
	          y: item.top * dpr - top,
	          image: item.dom
	        }
	      });
	      zr.add(img);
	    });
	    zr.refreshImmediately();
	    return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));
	  } else {
	    return this.getDataURL(opts);
	  }
	};
	/**
	 * Convert from logical coordinate system to pixel coordinate system.
	 * See CoordinateSystem#convertToPixel.
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            geoIndex / geoId, geoName,
	 *            bmapIndex / bmapId / bmapName,
	 *            xAxisIndex / xAxisId / xAxisName,
	 *            yAxisIndex / yAxisId / yAxisName,
	 *            gridIndex / gridId / gridName,
	 *            ... (can be extended)
	 *        }
	 * @param {Array|number} value
	 * @return {Array|number} result
	 */
	
	
	echartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');
	/**
	 * Convert from pixel coordinate system to logical coordinate system.
	 * See CoordinateSystem#convertFromPixel.
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            geoIndex / geoId / geoName,
	 *            bmapIndex / bmapId / bmapName,
	 *            xAxisIndex / xAxisId / xAxisName,
	 *            yAxisIndex / yAxisId / yAxisName
	 *            gridIndex / gridId / gridName,
	 *            ... (can be extended)
	 *        }
	 * @param {Array|number} value
	 * @return {Array|number} result
	 */
	
	echartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');
	
	function doConvertPixel(methodName, finder, value) {
	  var ecModel = this._model;
	
	  var coordSysList = this._coordSysMgr.getCoordinateSystems();
	
	  var result;
	  finder = modelUtil.parseFinder(ecModel, finder);
	
	  for (var i = 0; i < coordSysList.length; i++) {
	    var coordSys = coordSysList[i];
	
	    if (coordSys[methodName] && (result = coordSys[methodName](ecModel, finder, value)) != null) {
	      return result;
	    }
	  }
	}
	/**
	 * Is the specified coordinate systems or components contain the given pixel point.
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            geoIndex / geoId / geoName,
	 *            bmapIndex / bmapId / bmapName,
	 *            xAxisIndex / xAxisId / xAxisName,
	 *            yAxisIndex / yAxisId / yAxisName,
	 *            gridIndex / gridId / gridName,
	 *            ... (can be extended)
	 *        }
	 * @param {Array|number} value
	 * @return {boolean} result
	 */
	
	
	echartsProto.containPixel = function (finder, value) {
	  var ecModel = this._model;
	  var result;
	  finder = modelUtil.parseFinder(ecModel, finder);
	  zrUtil.each(finder, function (models, key) {
	    key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {
	      var coordSys = model.coordinateSystem;
	
	      if (coordSys && coordSys.containPoint) {
	        result |= !!coordSys.containPoint(value);
	      } else if (key === 'seriesModels') {
	        var view = this._chartsMap[model.__viewId];
	
	        if (view && view.containPoint) {
	          result |= view.containPoint(value, model);
	        } else {}
	      } else {}
	    }, this);
	  }, this);
	  return !!result;
	};
	/**
	 * Get visual from series or data.
	 * @param {string|Object} finder
	 *        If string, e.g., 'series', means {seriesIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            dataIndex / dataIndexInside
	 *        }
	 *        If dataIndex is not specified, series visual will be fetched,
	 *        but not data item visual.
	 *        If all of seriesIndex, seriesId, seriesName are not specified,
	 *        visual will be fetched from first series.
	 * @param {string} visualType 'color', 'symbol', 'symbolSize'
	 */
	
	
	echartsProto.getVisual = function (finder, visualType) {
	  var ecModel = this._model;
	  finder = modelUtil.parseFinder(ecModel, finder, {
	    defaultMainType: 'series'
	  });
	  var seriesModel = finder.seriesModel;
	  var data = seriesModel.getData();
	  var dataIndexInside = finder.hasOwnProperty('dataIndexInside') ? finder.dataIndexInside : finder.hasOwnProperty('dataIndex') ? data.indexOfRawIndex(finder.dataIndex) : null;
	  return dataIndexInside != null ? data.getItemVisual(dataIndexInside, visualType) : data.getVisual(visualType);
	};
	/**
	 * Get view of corresponding component model
	 * @param  {module:echarts/model/Component} componentModel
	 * @return {module:echarts/view/Component}
	 */
	
	
	echartsProto.getViewOfComponentModel = function (componentModel) {
	  return this._componentsMap[componentModel.__viewId];
	};
	/**
	 * Get view of corresponding series model
	 * @param  {module:echarts/model/Series} seriesModel
	 * @return {module:echarts/view/Chart}
	 */
	
	
	echartsProto.getViewOfSeriesModel = function (seriesModel) {
	  return this._chartsMap[seriesModel.__viewId];
	};
	
	var updateMethods = {
	  prepareAndUpdate: function (payload) {
	    prepare(this);
	    updateMethods.update.call(this, payload);
	  },
	
	  /**
	   * @param {Object} payload
	   * @private
	   */
	  update: function (payload) {
	    // console.profile && console.profile('update');
	    var ecModel = this._model;
	    var api = this._api;
	    var zr = this._zr;
	    var coordSysMgr = this._coordSysMgr;
	    var scheduler = this._scheduler; // update before setOption
	
	    if (!ecModel) {
	      return;
	    }
	
	    scheduler.restoreData(ecModel, payload);
	    scheduler.performSeriesTasks(ecModel); // TODO
	    // Save total ecModel here for undo/redo (after restoring data and before processing data).
	    // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.
	    // Create new coordinate system each update
	    // In LineView may save the old coordinate system and use it to get the orignal point
	
	    coordSysMgr.create(ecModel, api);
	    scheduler.performDataProcessorTasks(ecModel, payload); // Current stream render is not supported in data process. So we can update
	    // stream modes after data processing, where the filtered data is used to
	    // deteming whether use progressive rendering.
	
	    updateStreamModes(this, ecModel); // We update stream modes before coordinate system updated, then the modes info
	    // can be fetched when coord sys updating (consider the barGrid extent fix). But
	    // the drawback is the full coord info can not be fetched. Fortunately this full
	    // coord is not requied in stream mode updater currently.
	
	    coordSysMgr.update(ecModel, api);
	    clearColorPalette(ecModel);
	    scheduler.performVisualTasks(ecModel, payload);
	    render(this, ecModel, api, payload); // Set background
	
	    var backgroundColor = ecModel.get('backgroundColor') || 'transparent'; // In IE8
	
	    if (!env.canvasSupported) {
	      var colorArr = colorTool.parse(backgroundColor);
	      backgroundColor = colorTool.stringify(colorArr, 'rgb');
	
	      if (colorArr[3] === 0) {
	        backgroundColor = 'transparent';
	      }
	    } else {
	      zr.setBackgroundColor(backgroundColor);
	    }
	
	    performPostUpdateFuncs(ecModel, api); // console.profile && console.profileEnd('update');
	  },
	
	  /**
	   * @param {Object} payload
	   * @private
	   */
	  updateTransform: function (payload) {
	    var ecModel = this._model;
	    var ecIns = this;
	    var api = this._api; // update before setOption
	
	    if (!ecModel) {
	      return;
	    } // ChartView.markUpdateMethod(payload, 'updateTransform');
	
	
	    var componentDirtyList = [];
	    ecModel.eachComponent(function (componentType, componentModel) {
	      var componentView = ecIns.getViewOfComponentModel(componentModel);
	
	      if (componentView && componentView.__alive) {
	        if (componentView.updateTransform) {
	          var result = componentView.updateTransform(componentModel, ecModel, api, payload);
	          result && result.update && componentDirtyList.push(componentView);
	        } else {
	          componentDirtyList.push(componentView);
	        }
	      }
	    });
	    var seriesDirtyMap = zrUtil.createHashMap();
	    ecModel.eachSeries(function (seriesModel) {
	      var chartView = ecIns._chartsMap[seriesModel.__viewId];
	
	      if (chartView.updateTransform) {
	        var result = chartView.updateTransform(seriesModel, ecModel, api, payload);
	        result && result.update && seriesDirtyMap.set(seriesModel.uid, 1);
	      } else {
	        seriesDirtyMap.set(seriesModel.uid, 1);
	      }
	    });
	    clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
	    // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);
	
	    this._scheduler.performVisualTasks(ecModel, payload, {
	      setDirty: true,
	      dirtyMap: seriesDirtyMap
	    }); // Currently, not call render of components. Geo render cost a lot.
	    // renderComponents(ecIns, ecModel, api, payload, componentDirtyList);
	
	
	    renderSeries(ecIns, ecModel, api, payload, seriesDirtyMap);
	    performPostUpdateFuncs(ecModel, this._api);
	  },
	
	  /**
	   * @param {Object} payload
	   * @private
	   */
	  updateView: function (payload) {
	    var ecModel = this._model; // update before setOption
	
	    if (!ecModel) {
	      return;
	    }
	
	    ChartView.markUpdateMethod(payload, 'updateView');
	    clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
	
	    this._scheduler.performVisualTasks(ecModel, payload, {
	      setDirty: true
	    });
	
	    render(this, this._model, this._api, payload);
	    performPostUpdateFuncs(ecModel, this._api);
	  },
	
	  /**
	   * @param {Object} payload
	   * @private
	   */
	  updateVisual: function (payload) {
	    updateMethods.update.call(this, payload); // var ecModel = this._model;
	    // // update before setOption
	    // if (!ecModel) {
	    //     return;
	    // }
	    // ChartView.markUpdateMethod(payload, 'updateVisual');
	    // clearColorPalette(ecModel);
	    // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
	    // this._scheduler.performVisualTasks(ecModel, payload, {visualType: 'visual', setDirty: true});
	    // render(this, this._model, this._api, payload);
	    // performPostUpdateFuncs(ecModel, this._api);
	  },
	
	  /**
	   * @param {Object} payload
	   * @private
	   */
	  updateLayout: function (payload) {
	    updateMethods.update.call(this, payload); // var ecModel = this._model;
	    // // update before setOption
	    // if (!ecModel) {
	    //     return;
	    // }
	    // ChartView.markUpdateMethod(payload, 'updateLayout');
	    // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
	    // // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);
	    // this._scheduler.performVisualTasks(ecModel, payload, {setDirty: true});
	    // render(this, this._model, this._api, payload);
	    // performPostUpdateFuncs(ecModel, this._api);
	  }
	};
	
	function prepare(ecIns) {
	  var ecModel = ecIns._model;
	  var scheduler = ecIns._scheduler;
	  scheduler.restorePipelines(ecModel);
	  scheduler.prepareStageTasks();
	  prepareView(ecIns, 'component', ecModel, scheduler);
	  prepareView(ecIns, 'chart', ecModel, scheduler);
	  scheduler.plan();
	}
	/**
	 * @private
	 */
	
	
	function updateDirectly(ecIns, method, payload, mainType, subType) {
	  var ecModel = ecIns._model; // broadcast
	
	  if (!mainType) {
	    // FIXME
	    // Chart will not be update directly here, except set dirty.
	    // But there is no such scenario now.
	    each(ecIns._componentsViews.concat(ecIns._chartsViews), callView);
	    return;
	  }
	
	  var query = {};
	  query[mainType + 'Id'] = payload[mainType + 'Id'];
	  query[mainType + 'Index'] = payload[mainType + 'Index'];
	  query[mainType + 'Name'] = payload[mainType + 'Name'];
	  var condition = {
	    mainType: mainType,
	    query: query
	  };
	  subType && (condition.subType = subType); // subType may be '' by parseClassType;
	
	  var excludeSeriesId = payload.excludeSeriesId;
	
	  if (excludeSeriesId != null) {
	    excludeSeriesId = zrUtil.createHashMap(modelUtil.normalizeToArray(excludeSeriesId));
	  } // If dispatchAction before setOption, do nothing.
	
	
	  ecModel && ecModel.eachComponent(condition, function (model) {
	    if (!excludeSeriesId || excludeSeriesId.get(model.id) == null) {
	      callView(ecIns[mainType === 'series' ? '_chartsMap' : '_componentsMap'][model.__viewId]);
	    }
	  }, ecIns);
	
	  function callView(view) {
	    view && view.__alive && view[method] && view[method](view.__model, ecModel, ecIns._api, payload);
	  }
	}
	/**
	 * Resize the chart
	 * @param {Object} opts
	 * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
	 * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
	 * @param {boolean} [opts.silent=false]
	 */
	
	
	echartsProto.resize = function (opts) {
	  this._zr.resize(opts);
	
	  var ecModel = this._model; // Resize loading effect
	
	  this._loadingFX && this._loadingFX.resize();
	
	  if (!ecModel) {
	    return;
	  }
	
	  var optionChanged = ecModel.resetOption('media');
	  var silent = opts && opts.silent;
	  this[IN_MAIN_PROCESS] = true;
	  optionChanged && prepare(this);
	  updateMethods.update.call(this);
	  this[IN_MAIN_PROCESS] = false;
	  flushPendingActions.call(this, silent);
	  triggerUpdatedEvent.call(this, silent);
	};
	
	function updateStreamModes(ecIns, ecModel) {
	  var chartsMap = ecIns._chartsMap;
	  var scheduler = ecIns._scheduler;
	  ecModel.eachSeries(function (seriesModel) {
	    scheduler.updateStreamModes(seriesModel, chartsMap[seriesModel.__viewId]);
	  });
	}
	/**
	 * Show loading effect
	 * @param  {string} [name='default']
	 * @param  {Object} [cfg]
	 */
	
	
	echartsProto.showLoading = function (name, cfg) {
	  if (isObject(name)) {
	    cfg = name;
	    name = '';
	  }
	
	  name = name || 'default';
	  this.hideLoading();
	
	  if (!loadingEffects[name]) {
	    return;
	  }
	
	  var el = loadingEffects[name](this._api, cfg);
	  var zr = this._zr;
	  this._loadingFX = el;
	  zr.add(el);
	};
	/**
	 * Hide loading effect
	 */
	
	
	echartsProto.hideLoading = function () {
	  this._loadingFX && this._zr.remove(this._loadingFX);
	  this._loadingFX = null;
	};
	/**
	 * @param {Object} eventObj
	 * @return {Object}
	 */
	
	
	echartsProto.makeActionFromEvent = function (eventObj) {
	  var payload = zrUtil.extend({}, eventObj);
	  payload.type = eventActionMap[eventObj.type];
	  return payload;
	};
	/**
	 * @pubilc
	 * @param {Object} payload
	 * @param {string} [payload.type] Action type
	 * @param {Object|boolean} [opt] If pass boolean, means opt.silent
	 * @param {boolean} [opt.silent=false] Whether trigger events.
	 * @param {boolean} [opt.flush=undefined]
	 *                  true: Flush immediately, and then pixel in canvas can be fetched
	 *                      immediately. Caution: it might affect performance.
	 *                  false: Not not flush.
	 *                  undefined: Auto decide whether perform flush.
	 */
	
	
	echartsProto.dispatchAction = function (payload, opt) {
	  if (!isObject(opt)) {
	    opt = {
	      silent: !!opt
	    };
	  }
	
	  if (!actions[payload.type]) {
	    return;
	  } // Avoid dispatch action before setOption. Especially in `connect`.
	
	
	  if (!this._model) {
	    return;
	  } // May dispatchAction in rendering procedure
	
	
	  if (this[IN_MAIN_PROCESS]) {
	    this._pendingActions.push(payload);
	
	    return;
	  }
	
	  doDispatchAction.call(this, payload, opt.silent);
	
	  if (opt.flush) {
	    this._zr.flush(true);
	  } else if (opt.flush !== false && env.browser.weChat) {
	    // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`
	    // hang when sliding page (on touch event), which cause that zr does not
	    // refresh util user interaction finished, which is not expected.
	    // But `dispatchAction` may be called too frequently when pan on touch
	    // screen, which impacts performance if do not throttle them.
	    this._throttledZrFlush();
	  }
	
	  flushPendingActions.call(this, opt.silent);
	  triggerUpdatedEvent.call(this, opt.silent);
	};
	
	function doDispatchAction(payload, silent) {
	  var payloadType = payload.type;
	  var escapeConnect = payload.escapeConnect;
	  var actionWrap = actions[payloadType];
	  var actionInfo = actionWrap.actionInfo;
	  var cptType = (actionInfo.update || 'update').split(':');
	  var updateMethod = cptType.pop();
	  cptType = cptType[0] != null && parseClassType(cptType[0]);
	  this[IN_MAIN_PROCESS] = true;
	  var payloads = [payload];
	  var batched = false; // Batch action
	
	  if (payload.batch) {
	    batched = true;
	    payloads = zrUtil.map(payload.batch, function (item) {
	      item = zrUtil.defaults(zrUtil.extend({}, item), payload);
	      item.batch = null;
	      return item;
	    });
	  }
	
	  var eventObjBatch = [];
	  var eventObj;
	  var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';
	  each(payloads, function (batchItem) {
	    // Action can specify the event by return it.
	    eventObj = actionWrap.action(batchItem, this._model, this._api); // Emit event outside
	
	    eventObj = eventObj || zrUtil.extend({}, batchItem); // Convert type to eventType
	
	    eventObj.type = actionInfo.event || eventObj.type;
	    eventObjBatch.push(eventObj); // light update does not perform data process, layout and visual.
	
	    if (isHighDown) {
	      // method, payload, mainType, subType
	      updateDirectly(this, updateMethod, batchItem, 'series');
	    } else if (cptType) {
	      updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);
	    }
	  }, this);
	
	  if (updateMethod !== 'none' && !isHighDown && !cptType) {
	    // Still dirty
	    if (this[OPTION_UPDATED]) {
	      // FIXME Pass payload ?
	      prepare(this);
	      updateMethods.update.call(this, payload);
	      this[OPTION_UPDATED] = false;
	    } else {
	      updateMethods[updateMethod].call(this, payload);
	    }
	  } // Follow the rule of action batch
	
	
	  if (batched) {
	    eventObj = {
	      type: actionInfo.event || payloadType,
	      escapeConnect: escapeConnect,
	      batch: eventObjBatch
	    };
	  } else {
	    eventObj = eventObjBatch[0];
	  }
	
	  this[IN_MAIN_PROCESS] = false;
	  !silent && this._messageCenter.trigger(eventObj.type, eventObj);
	}
	
	function flushPendingActions(silent) {
	  var pendingActions = this._pendingActions;
	
	  while (pendingActions.length) {
	    var payload = pendingActions.shift();
	    doDispatchAction.call(this, payload, silent);
	  }
	}
	
	function triggerUpdatedEvent(silent) {
	  !silent && this.trigger('updated');
	}
	/**
	 * Event `rendered` is triggered when zr
	 * rendered. It is useful for realtime
	 * snapshot (reflect animation).
	 *
	 * Event `finished` is triggered when:
	 * (1) zrender rendering finished.
	 * (2) initial animation finished.
	 * (3) progressive rendering finished.
	 * (4) no pending action.
	 * (5) no delayed setOption needs to be processed.
	 */
	
	
	function bindRenderedEvent(zr, ecIns) {
	  zr.on('rendered', function () {
	    ecIns.trigger('rendered'); // The `finished` event should not be triggered repeatly,
	    // so it should only be triggered when rendering indeed happend
	    // in zrender. (Consider the case that dipatchAction is keep
	    // triggering when mouse move).
	
	    if ( // Although zr is dirty if initial animation is not finished
	    // and this checking is called on frame, we also check
	    // animation finished for robustness.
	    zr.animation.isFinished() && !ecIns[OPTION_UPDATED] && !ecIns._scheduler.unfinished && !ecIns._pendingActions.length) {
	      ecIns.trigger('finished');
	    }
	  });
	}
	/**
	 * @param {Object} params
	 * @param {number} params.seriesIndex
	 * @param {Array|TypedArray} params.data
	 */
	
	
	echartsProto.appendData = function (params) {
	  var seriesIndex = params.seriesIndex;
	  var ecModel = this.getModel();
	  var seriesModel = ecModel.getSeriesByIndex(seriesIndex);
	  seriesModel.appendData(params); // Note: `appendData` does not support that update extent of coordinate
	  // system, util some scenario require that. In the expected usage of
	  // `appendData`, the initial extent of coordinate system should better
	  // be fixed by axis `min`/`max` setting or initial data, otherwise if
	  // the extent changed while `appendData`, the location of the painted
	  // graphic elements have to be changed, which make the usage of
	  // `appendData` meaningless.
	
	  this._scheduler.unfinished = true;
	};
	/**
	 * Register event
	 * @method
	 */
	
	
	echartsProto.on = createRegisterEventWithLowercaseName('on');
	echartsProto.off = createRegisterEventWithLowercaseName('off');
	echartsProto.one = createRegisterEventWithLowercaseName('one');
	/**
	 * Prepare view instances of charts and components
	 * @param  {module:echarts/model/Global} ecModel
	 * @private
	 */
	
	function prepareView(ecIns, type, ecModel, scheduler) {
	  var isComponent = type === 'component';
	  var viewList = isComponent ? ecIns._componentsViews : ecIns._chartsViews;
	  var viewMap = isComponent ? ecIns._componentsMap : ecIns._chartsMap;
	  var zr = ecIns._zr;
	  var api = ecIns._api;
	
	  for (var i = 0; i < viewList.length; i++) {
	    viewList[i].__alive = false;
	  }
	
	  isComponent ? ecModel.eachComponent(function (componentType, model) {
	    componentType !== 'series' && doPrepare(model);
	  }) : ecModel.eachSeries(doPrepare);
	
	  function doPrepare(model) {
	    // Consider: id same and type changed.
	    var viewId = '_ec_' + model.id + '_' + model.type;
	    var view = viewMap[viewId];
	
	    if (!view) {
	      var classType = parseClassType(model.type);
	      var Clazz = isComponent ? ComponentView.getClass(classType.main, classType.sub) : ChartView.getClass(classType.sub);
	      view = new Clazz();
	      view.init(ecModel, api);
	      viewMap[viewId] = view;
	      viewList.push(view);
	      zr.add(view.group);
	    }
	
	    model.__viewId = view.__id = viewId;
	    view.__alive = true;
	    view.__model = model;
	    view.group.__ecComponentInfo = {
	      mainType: model.mainType,
	      index: model.componentIndex
	    };
	    !isComponent && scheduler.prepareView(view, model, ecModel, api);
	  }
	
	  for (var i = 0; i < viewList.length;) {
	    var view = viewList[i];
	
	    if (!view.__alive) {
	      !isComponent && view.renderTask.dispose();
	      zr.remove(view.group);
	      view.dispose(ecModel, api);
	      viewList.splice(i, 1);
	      delete viewMap[view.__id];
	      view.__id = view.group.__ecComponentInfo = null;
	    } else {
	      i++;
	    }
	  }
	} // /**
	//  * Encode visual infomation from data after data processing
	//  *
	//  * @param {module:echarts/model/Global} ecModel
	//  * @param {object} layout
	//  * @param {boolean} [layoutFilter] `true`: only layout,
	//  *                                 `false`: only not layout,
	//  *                                 `null`/`undefined`: all.
	//  * @param {string} taskBaseTag
	//  * @private
	//  */
	// function startVisualEncoding(ecIns, ecModel, api, payload, layoutFilter) {
	//     each(visualFuncs, function (visual, index) {
	//         var isLayout = visual.isLayout;
	//         if (layoutFilter == null
	//             || (layoutFilter === false && !isLayout)
	//             || (layoutFilter === true && isLayout)
	//         ) {
	//             visual.func(ecModel, api, payload);
	//         }
	//     });
	// }
	
	
	function clearColorPalette(ecModel) {
	  ecModel.clearColorPalette();
	  ecModel.eachSeries(function (seriesModel) {
	    seriesModel.clearColorPalette();
	  });
	}
	
	function render(ecIns, ecModel, api, payload) {
	  renderComponents(ecIns, ecModel, api, payload);
	  each(ecIns._chartsViews, function (chart) {
	    chart.__alive = false;
	  });
	  renderSeries(ecIns, ecModel, api, payload); // Remove groups of unrendered charts
	
	  each(ecIns._chartsViews, function (chart) {
	    if (!chart.__alive) {
	      chart.remove(ecModel, api);
	    }
	  });
	}
	
	function renderComponents(ecIns, ecModel, api, payload, dirtyList) {
	  each(dirtyList || ecIns._componentsViews, function (componentView) {
	    var componentModel = componentView.__model;
	    componentView.render(componentModel, ecModel, api, payload);
	    updateZ(componentModel, componentView);
	  });
	}
	/**
	 * Render each chart and component
	 * @private
	 */
	
	
	function renderSeries(ecIns, ecModel, api, payload, dirtyMap) {
	  // Render all charts
	  var scheduler = ecIns._scheduler;
	  var unfinished;
	  ecModel.eachSeries(function (seriesModel) {
	    var chartView = ecIns._chartsMap[seriesModel.__viewId];
	    chartView.__alive = true;
	    var renderTask = chartView.renderTask;
	    scheduler.updatePayload(renderTask, payload);
	
	    if (dirtyMap && dirtyMap.get(seriesModel.uid)) {
	      renderTask.dirty();
	    }
	
	    unfinished |= renderTask.perform(scheduler.getPerformArgs(renderTask));
	    chartView.group.silent = !!seriesModel.get('silent');
	    updateZ(seriesModel, chartView);
	    updateBlend(seriesModel, chartView);
	  });
	  scheduler.unfinished |= unfinished; // If use hover layer
	
	  updateHoverLayerStatus(ecIns._zr, ecModel); // Add aria
	
	  aria(ecIns._zr.dom, ecModel);
	}
	
	function performPostUpdateFuncs(ecModel, api) {
	  each(postUpdateFuncs, function (func) {
	    func(ecModel, api);
	  });
	}
	
	var MOUSE_EVENT_NAMES = ['click', 'dblclick', 'mouseover', 'mouseout', 'mousemove', 'mousedown', 'mouseup', 'globalout', 'contextmenu'];
	/**
	 * @private
	 */
	
	echartsProto._initEvents = function () {
	  each(MOUSE_EVENT_NAMES, function (eveName) {
	    this._zr.on(eveName, function (e) {
	      var ecModel = this.getModel();
	      var el = e.target;
	      var params; // no e.target when 'globalout'.
	
	      if (eveName === 'globalout') {
	        params = {};
	      } else if (el && el.dataIndex != null) {
	        var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
	        params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};
	      } // If element has custom eventData of components
	      else if (el && el.eventData) {
	          params = zrUtil.extend({}, el.eventData);
	        }
	
	      if (params) {
	        params.event = e;
	        params.type = eveName;
	        this.trigger(eveName, params);
	      }
	    }, this);
	  }, this);
	  each(eventActionMap, function (actionType, eventType) {
	    this._messageCenter.on(eventType, function (event) {
	      this.trigger(eventType, event);
	    }, this);
	  }, this);
	};
	/**
	 * @return {boolean}
	 */
	
	
	echartsProto.isDisposed = function () {
	  return this._disposed;
	};
	/**
	 * Clear
	 */
	
	
	echartsProto.clear = function () {
	  this.setOption({
	    series: []
	  }, true);
	};
	/**
	 * Dispose instance
	 */
	
	
	echartsProto.dispose = function () {
	  if (this._disposed) {
	    return;
	  }
	
	  this._disposed = true;
	  modelUtil.setAttribute(this.getDom(), DOM_ATTRIBUTE_KEY, '');
	  var api = this._api;
	  var ecModel = this._model;
	  each(this._componentsViews, function (component) {
	    component.dispose(ecModel, api);
	  });
	  each(this._chartsViews, function (chart) {
	    chart.dispose(ecModel, api);
	  }); // Dispose after all views disposed
	
	  this._zr.dispose();
	
	  delete instances[this.id];
	};
	
	zrUtil.mixin(ECharts, Eventful);
	
	function updateHoverLayerStatus(zr, ecModel) {
	  var storage = zr.storage;
	  var elCount = 0;
	  storage.traverse(function (el) {
	    if (!el.isGroup) {
	      elCount++;
	    }
	  });
	
	  if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {
	    storage.traverse(function (el) {
	      if (!el.isGroup) {
	        // Don't switch back.
	        el.useHoverLayer = true;
	      }
	    });
	  }
	}
	/**
	 * Update chart progressive and blend.
	 * @param {module:echarts/model/Series|module:echarts/model/Component} model
	 * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	 */
	
	
	function updateBlend(seriesModel, chartView) {
	  var blendMode = seriesModel.get('blendMode') || null;
	  chartView.group.traverse(function (el) {
	    // FIXME marker and other components
	    if (!el.isGroup) {
	      // Only set if blendMode is changed. In case element is incremental and don't wan't to rerender.
	      if (el.style.blend !== blendMode) {
	        el.setStyle('blend', blendMode);
	      }
	    }
	
	    if (el.eachPendingDisplayable) {
	      el.eachPendingDisplayable(function (displayable) {
	        displayable.setStyle('blend', blendMode);
	      });
	    }
	  });
	}
	/**
	 * @param {module:echarts/model/Series|module:echarts/model/Component} model
	 * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	 */
	
	
	function updateZ(model, view) {
	  var z = model.get('z');
	  var zlevel = model.get('zlevel'); // Set z and zlevel
	
	  view.group.traverse(function (el) {
	    if (el.type !== 'group') {
	      z != null && (el.z = z);
	      zlevel != null && (el.zlevel = zlevel);
	    }
	  });
	}
	
	function createExtensionAPI(ecInstance) {
	  var coordSysMgr = ecInstance._coordSysMgr;
	  return zrUtil.extend(new ExtensionAPI(ecInstance), {
	    // Inject methods
	    getCoordinateSystems: zrUtil.bind(coordSysMgr.getCoordinateSystems, coordSysMgr),
	    getComponentByElement: function (el) {
	      while (el) {
	        var modelInfo = el.__ecComponentInfo;
	
	        if (modelInfo != null) {
	          return ecInstance._model.getComponent(modelInfo.mainType, modelInfo.index);
	        }
	
	        el = el.parent;
	      }
	    }
	  });
	}
	/**
	 * @type {Object} key: actionType.
	 * @inner
	 */
	
	
	var actions = {};
	/**
	 * Map eventType to actionType
	 * @type {Object}
	 */
	
	var eventActionMap = {};
	/**
	 * Data processor functions of each stage
	 * @type {Array.<Object.<string, Function>>}
	 * @inner
	 */
	
	var dataProcessorFuncs = [];
	/**
	 * @type {Array.<Function>}
	 * @inner
	 */
	
	var optionPreprocessorFuncs = [];
	/**
	 * @type {Array.<Function>}
	 * @inner
	 */
	
	var postUpdateFuncs = [];
	/**
	 * Visual encoding functions of each stage
	 * @type {Array.<Object.<string, Function>>}
	 */
	
	var visualFuncs = [];
	/**
	 * Theme storage
	 * @type {Object.<key, Object>}
	 */
	
	var themeStorage = {};
	/**
	 * Loading effects
	 */
	
	var loadingEffects = {};
	var instances = {};
	var connectedGroups = {};
	var idBase = new Date() - 0;
	var groupIdBase = new Date() - 0;
	var DOM_ATTRIBUTE_KEY = '_echarts_instance_';
	var mapDataStores = {};
	
	function enableConnect(chart) {
	  var STATUS_PENDING = 0;
	  var STATUS_UPDATING = 1;
	  var STATUS_UPDATED = 2;
	  var STATUS_KEY = '__connectUpdateStatus';
	
	  function updateConnectedChartsStatus(charts, status) {
	    for (var i = 0; i < charts.length; i++) {
	      var otherChart = charts[i];
	      otherChart[STATUS_KEY] = status;
	    }
	  }
	
	  each(eventActionMap, function (actionType, eventType) {
	    chart._messageCenter.on(eventType, function (event) {
	      if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {
	        if (event && event.escapeConnect) {
	          return;
	        }
	
	        var action = chart.makeActionFromEvent(event);
	        var otherCharts = [];
	        each(instances, function (otherChart) {
	          if (otherChart !== chart && otherChart.group === chart.group) {
	            otherCharts.push(otherChart);
	          }
	        });
	        updateConnectedChartsStatus(otherCharts, STATUS_PENDING);
	        each(otherCharts, function (otherChart) {
	          if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {
	            otherChart.dispatchAction(action);
	          }
	        });
	        updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);
	      }
	    });
	  });
	}
	/**
	 * @param {HTMLElement} dom
	 * @param {Object} [theme]
	 * @param {Object} opts
	 * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default
	 * @param {string} [opts.renderer] Currently only 'canvas' is supported.
	 * @param {number} [opts.width] Use clientWidth of the input `dom` by default.
	 *                              Can be 'auto' (the same as null/undefined)
	 * @param {number} [opts.height] Use clientHeight of the input `dom` by default.
	 *                               Can be 'auto' (the same as null/undefined)
	 */
	
	
	function init(dom, theme, opts) {
	  var existInstance = getInstanceByDom(dom);
	
	  if (existInstance) {
	    return existInstance;
	  }
	
	  var chart = new ECharts(dom, theme, opts);
	  chart.id = 'ec_' + idBase++;
	  instances[chart.id] = chart;
	  modelUtil.setAttribute(dom, DOM_ATTRIBUTE_KEY, chart.id);
	  enableConnect(chart);
	  return chart;
	}
	/**
	 * @return {string|Array.<module:echarts~ECharts>} groupId
	 */
	
	
	function connect(groupId) {
	  // Is array of charts
	  if (zrUtil.isArray(groupId)) {
	    var charts = groupId;
	    groupId = null; // If any chart has group
	
	    each(charts, function (chart) {
	      if (chart.group != null) {
	        groupId = chart.group;
	      }
	    });
	    groupId = groupId || 'g_' + groupIdBase++;
	    each(charts, function (chart) {
	      chart.group = groupId;
	    });
	  }
	
	  connectedGroups[groupId] = true;
	  return groupId;
	}
	/**
	 * @DEPRECATED
	 * @return {string} groupId
	 */
	
	
	function disConnect(groupId) {
	  connectedGroups[groupId] = false;
	}
	/**
	 * @return {string} groupId
	 */
	
	
	var disconnect = disConnect;
	/**
	 * Dispose a chart instance
	 * @param  {module:echarts~ECharts|HTMLDomElement|string} chart
	 */
	
	function dispose(chart) {
	  if (typeof chart === 'string') {
	    chart = instances[chart];
	  } else if (!(chart instanceof ECharts)) {
	    // Try to treat as dom
	    chart = getInstanceByDom(chart);
	  }
	
	  if (chart instanceof ECharts && !chart.isDisposed()) {
	    chart.dispose();
	  }
	}
	/**
	 * @param  {HTMLElement} dom
	 * @return {echarts~ECharts}
	 */
	
	
	function getInstanceByDom(dom) {
	  return instances[modelUtil.getAttribute(dom, DOM_ATTRIBUTE_KEY)];
	}
	/**
	 * @param {string} key
	 * @return {echarts~ECharts}
	 */
	
	
	function getInstanceById(key) {
	  return instances[key];
	}
	/**
	 * Register theme
	 */
	
	
	function registerTheme(name, theme) {
	  themeStorage[name] = theme;
	}
	/**
	 * Register option preprocessor
	 * @param {Function} preprocessorFunc
	 */
	
	
	function registerPreprocessor(preprocessorFunc) {
	  optionPreprocessorFuncs.push(preprocessorFunc);
	}
	/**
	 * @param {number} [priority=1000]
	 * @param {Object|Function} processor
	 */
	
	
	function registerProcessor(priority, processor) {
	  normalizeRegister(dataProcessorFuncs, priority, processor, PRIORITY_PROCESSOR_FILTER);
	}
	/**
	 * Register postUpdater
	 * @param {Function} postUpdateFunc
	 */
	
	
	function registerPostUpdate(postUpdateFunc) {
	  postUpdateFuncs.push(postUpdateFunc);
	}
	/**
	 * Usage:
	 * registerAction('someAction', 'someEvent', function () { ... });
	 * registerAction('someAction', function () { ... });
	 * registerAction(
	 *     {type: 'someAction', event: 'someEvent', update: 'updateView'},
	 *     function () { ... }
	 * );
	 *
	 * @param {(string|Object)} actionInfo
	 * @param {string} actionInfo.type
	 * @param {string} [actionInfo.event]
	 * @param {string} [actionInfo.update]
	 * @param {string} [eventName]
	 * @param {Function} action
	 */
	
	
	function registerAction(actionInfo, eventName, action) {
	  if (typeof eventName === 'function') {
	    action = eventName;
	    eventName = '';
	  }
	
	  var actionType = isObject(actionInfo) ? actionInfo.type : [actionInfo, actionInfo = {
	    event: eventName
	  }][0]; // Event name is all lowercase
	
	  actionInfo.event = (actionInfo.event || actionType).toLowerCase();
	  eventName = actionInfo.event; // Validate action type and event name.
	
	  assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));
	
	  if (!actions[actionType]) {
	    actions[actionType] = {
	      action: action,
	      actionInfo: actionInfo
	    };
	  }
	
	  eventActionMap[eventName] = actionType;
	}
	/**
	 * @param {string} type
	 * @param {*} CoordinateSystem
	 */
	
	
	function registerCoordinateSystem(type, CoordinateSystem) {
	  CoordinateSystemManager.register(type, CoordinateSystem);
	}
	/**
	 * Get dimensions of specified coordinate system.
	 * @param {string} type
	 * @return {Array.<string|Object>}
	 */
	
	
	function getCoordinateSystemDimensions(type) {
	  var coordSysCreator = CoordinateSystemManager.get(type);
	
	  if (coordSysCreator) {
	    return coordSysCreator.getDimensionsInfo ? coordSysCreator.getDimensionsInfo() : coordSysCreator.dimensions.slice();
	  }
	}
	/**
	 * Layout is a special stage of visual encoding
	 * Most visual encoding like color are common for different chart
	 * But each chart has it's own layout algorithm
	 *
	 * @param {number} [priority=1000]
	 * @param {Function} layoutTask
	 */
	
	
	function registerLayout(priority, layoutTask) {
	  normalizeRegister(visualFuncs, priority, layoutTask, PRIORITY_VISUAL_LAYOUT, 'layout');
	}
	/**
	 * @param {number} [priority=3000]
	 * @param {module:echarts/stream/Task} visualTask
	 */
	
	
	function registerVisual(priority, visualTask) {
	  normalizeRegister(visualFuncs, priority, visualTask, PRIORITY_VISUAL_CHART, 'visual');
	}
	/**
	 * @param {Object|Function} fn: {seriesType, createOnAllSeries, performRawSeries, reset}
	 */
	
	
	function normalizeRegister(targetList, priority, fn, defaultPriority, visualType) {
	  if (isFunction(priority) || isObject(priority)) {
	    fn = priority;
	    priority = defaultPriority;
	  }
	
	  var stageHandler = Scheduler.wrapStageHandler(fn, visualType);
	  stageHandler.__prio = priority;
	  stageHandler.__raw = fn;
	  targetList.push(stageHandler);
	  return stageHandler;
	}
	/**
	 * @param {string} name
	 */
	
	
	function registerLoading(name, loadingFx) {
	  loadingEffects[name] = loadingFx;
	}
	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */
	
	
	function extendComponentModel(opts
	/*, superClass*/
	) {
	  // var Clazz = ComponentModel;
	  // if (superClass) {
	  //     var classType = parseClassType(superClass);
	  //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
	  // }
	  return ComponentModel.extend(opts);
	}
	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */
	
	
	function extendComponentView(opts
	/*, superClass*/
	) {
	  // var Clazz = ComponentView;
	  // if (superClass) {
	  //     var classType = parseClassType(superClass);
	  //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);
	  // }
	  return ComponentView.extend(opts);
	}
	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */
	
	
	function extendSeriesModel(opts
	/*, superClass*/
	) {
	  // var Clazz = SeriesModel;
	  // if (superClass) {
	  //     superClass = 'series.' + superClass.replace('series.', '');
	  //     var classType = parseClassType(superClass);
	  //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
	  // }
	  return SeriesModel.extend(opts);
	}
	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */
	
	
	function extendChartView(opts
	/*, superClass*/
	) {
	  // var Clazz = ChartView;
	  // if (superClass) {
	  //     superClass = superClass.replace('series.', '');
	  //     var classType = parseClassType(superClass);
	  //     Clazz = ChartView.getClass(classType.main, true);
	  // }
	  return ChartView.extend(opts);
	}
	/**
	 * ZRender need a canvas context to do measureText.
	 * But in node environment canvas may be created by node-canvas.
	 * So we need to specify how to create a canvas instead of using document.createElement('canvas')
	 *
	 * Be careful of using it in the browser.
	 *
	 * @param {Function} creator
	 * @example
	 *     var Canvas = require('canvas');
	 *     var echarts = require('echarts');
	 *     echarts.setCanvasCreator(function () {
	 *         // Small size is enough.
	 *         return new Canvas(32, 32);
	 *     });
	 */
	
	
	function setCanvasCreator(creator) {
	  zrUtil.$override('createCanvas', creator);
	}
	/**
	 * @param {string} mapName
	 * @param {Object|string} geoJson
	 * @param {Object} [specialAreas]
	 *
	 * @example
	 *     $.get('USA.json', function (geoJson) {
	 *         echarts.registerMap('USA', geoJson);
	 *         // Or
	 *         echarts.registerMap('USA', {
	 *             geoJson: geoJson,
	 *             specialAreas: {}
	 *         })
	 *     });
	 */
	
	
	function registerMap(mapName, geoJson, specialAreas) {
	  if (geoJson.geoJson && !geoJson.features) {
	    specialAreas = geoJson.specialAreas;
	    geoJson = geoJson.geoJson;
	  }
	
	  if (typeof geoJson === 'string') {
	    geoJson = typeof JSON !== 'undefined' && JSON.parse ? JSON.parse(geoJson) : new Function('return (' + geoJson + ');')();
	  }
	
	  mapDataStores[mapName] = {
	    geoJson: geoJson,
	    specialAreas: specialAreas
	  };
	}
	/**
	 * @param {string} mapName
	 * @return {Object}
	 */
	
	
	function getMap(mapName) {
	  return mapDataStores[mapName];
	}
	
	registerVisual(PRIORITY_VISUAL_GLOBAL, seriesColor);
	registerPreprocessor(backwardCompat);
	registerProcessor(PRIORITY_PROCESSOR_STATISTIC, dataStack);
	registerLoading('default', loadingDefault); // Default actions
	
	registerAction({
	  type: 'highlight',
	  event: 'highlight',
	  update: 'highlight'
	}, zrUtil.noop);
	registerAction({
	  type: 'downplay',
	  event: 'downplay',
	  update: 'downplay'
	}, zrUtil.noop); // Default theme
	
	registerTheme('light', lightTheme);
	registerTheme('dark', darkTheme); // For backward compatibility, where the namespace `dataTool` will
	// be mounted on `echarts` is the extension `dataTool` is imported.
	
	var dataTool = {};
	exports.version = version;
	exports.dependencies = dependencies;
	exports.PRIORITY = PRIORITY;
	exports.init = init;
	exports.connect = connect;
	exports.disConnect = disConnect;
	exports.disconnect = disconnect;
	exports.dispose = dispose;
	exports.getInstanceByDom = getInstanceByDom;
	exports.getInstanceById = getInstanceById;
	exports.registerTheme = registerTheme;
	exports.registerPreprocessor = registerPreprocessor;
	exports.registerProcessor = registerProcessor;
	exports.registerPostUpdate = registerPostUpdate;
	exports.registerAction = registerAction;
	exports.registerCoordinateSystem = registerCoordinateSystem;
	exports.getCoordinateSystemDimensions = getCoordinateSystemDimensions;
	exports.registerLayout = registerLayout;
	exports.registerVisual = registerVisual;
	exports.registerLoading = registerLoading;
	exports.extendComponentModel = extendComponentModel;
	exports.extendComponentView = extendComponentView;
	exports.extendSeriesModel = extendSeriesModel;
	exports.extendChartView = extendChartView;
	exports.setCanvasCreator = setCanvasCreator;
	exports.registerMap = registerMap;
	exports.getMap = getMap;
	exports.dataTool = dataTool;
	var ___ec_export = __webpack_require__(1044);
	(function () {
	    for (var key in ___ec_export) {
	        if (___ec_export.hasOwnProperty(key)) {
	            exports[key] = ___ec_export[key];
	        }
	    }
	})();

/***/ }),
/* 927 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// (1) The code `if (__DEV__) ...` can be removed by build tool.
	// (2) If intend to use `__DEV__`, this module should be imported. Use a global
	// variable `__DEV__` may cause that miss the declaration (see #6535), or the
	// declaration is behind of the using position (for example in `Model.extent`,
	// And tools like rollup can not analysis the dependency if not import).
	var dev; // In browser
	
	if (typeof window !== 'undefined') {
	  dev = window.__DEV__;
	} // In node
	else if (typeof global !== 'undefined') {
	    dev = global.__DEV__;
	  }
	
	if (typeof dev === 'undefined') {
	  dev = true;
	}
	
	var __DEV__ = dev;
	exports.__DEV__ = __DEV__;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 928 */
/***/ (function(module, exports, __webpack_require__) {

	var guid = __webpack_require__(929);
	
	var env = __webpack_require__(930);
	
	var zrUtil = __webpack_require__(931);
	
	var Handler = __webpack_require__(932);
	
	var Storage = __webpack_require__(936);
	
	var Painter = __webpack_require__(951);
	
	var Animation = __webpack_require__(964);
	
	var HandlerProxy = __webpack_require__(966);
	
	/*!
	* ZRender, a high performance 2d drawing library.
	*
	* Copyright (c) 2013, Baidu Inc.
	* All rights reserved.
	*
	* LICENSE
	* https://github.com/ecomfe/zrender/blob/master/LICENSE.txt
	*/
	var useVML = !env.canvasSupported;
	var painterCtors = {
	  canvas: Painter
	};
	var instances = {}; // ZRender实例map索引
	
	/**
	 * @type {string}
	 */
	
	var version = '4.0.4';
	/**
	 * Initializing a zrender instance
	 * @param {HTMLElement} dom
	 * @param {Object} opts
	 * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	 * @param {number} [opts.devicePixelRatio]
	 * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
	 * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
	 * @return {module:zrender/ZRender}
	 */
	
	function init(dom, opts) {
	  var zr = new ZRender(guid(), dom, opts);
	  instances[zr.id] = zr;
	  return zr;
	}
	/**
	 * Dispose zrender instance
	 * @param {module:zrender/ZRender} zr
	 */
	
	
	function dispose(zr) {
	  if (zr) {
	    zr.dispose();
	  } else {
	    for (var key in instances) {
	      if (instances.hasOwnProperty(key)) {
	        instances[key].dispose();
	      }
	    }
	
	    instances = {};
	  }
	
	  return this;
	}
	/**
	 * Get zrender instance by id
	 * @param {string} id zrender instance id
	 * @return {module:zrender/ZRender}
	 */
	
	
	function getInstance(id) {
	  return instances[id];
	}
	
	function registerPainter(name, Ctor) {
	  painterCtors[name] = Ctor;
	}
	
	function delInstance(id) {
	  delete instances[id];
	}
	/**
	 * @module zrender/ZRender
	 */
	
	/**
	 * @constructor
	 * @alias module:zrender/ZRender
	 * @param {string} id
	 * @param {HTMLElement} dom
	 * @param {Object} opts
	 * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	 * @param {number} [opts.devicePixelRatio]
	 * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
	 * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
	 */
	
	
	var ZRender = function (id, dom, opts) {
	  opts = opts || {};
	  /**
	   * @type {HTMLDomElement}
	   */
	
	  this.dom = dom;
	  /**
	   * @type {string}
	   */
	
	  this.id = id;
	  var self = this;
	  var storage = new Storage();
	  var rendererType = opts.renderer; // TODO WebGL
	
	  if (useVML) {
	    if (!painterCtors.vml) {
	      throw new Error('You need to require \'zrender/vml/vml\' to support IE8');
	    }
	
	    rendererType = 'vml';
	  } else if (!rendererType || !painterCtors[rendererType]) {
	    rendererType = 'canvas';
	  }
	
	  var painter = new painterCtors[rendererType](dom, storage, opts, id);
	  this.storage = storage;
	  this.painter = painter;
	  var handerProxy = !env.node && !env.worker ? new HandlerProxy(painter.getViewportRoot()) : null;
	  this.handler = new Handler(storage, painter, handerProxy, painter.root);
	  /**
	   * @type {module:zrender/animation/Animation}
	   */
	
	  this.animation = new Animation({
	    stage: {
	      update: zrUtil.bind(this.flush, this)
	    }
	  });
	  this.animation.start();
	  /**
	   * @type {boolean}
	   * @private
	   */
	
	  this._needsRefresh; // 修改 storage.delFromStorage, 每次删除元素之前删除动画
	  // FIXME 有点ugly
	
	  var oldDelFromStorage = storage.delFromStorage;
	  var oldAddToStorage = storage.addToStorage;
	
	  storage.delFromStorage = function (el) {
	    oldDelFromStorage.call(storage, el);
	    el && el.removeSelfFromZr(self);
	  };
	
	  storage.addToStorage = function (el) {
	    oldAddToStorage.call(storage, el);
	    el.addSelfToZr(self);
	  };
	};
	
	ZRender.prototype = {
	  constructor: ZRender,
	
	  /**
	   * 获取实例唯一标识
	   * @return {string}
	   */
	  getId: function () {
	    return this.id;
	  },
	
	  /**
	   * 添加元素
	   * @param  {module:zrender/Element} el
	   */
	  add: function (el) {
	    this.storage.addRoot(el);
	    this._needsRefresh = true;
	  },
	
	  /**
	   * 删除元素
	   * @param  {module:zrender/Element} el
	   */
	  remove: function (el) {
	    this.storage.delRoot(el);
	    this._needsRefresh = true;
	  },
	
	  /**
	   * Change configuration of layer
	   * @param {string} zLevel
	   * @param {Object} config
	   * @param {string} [config.clearColor=0] Clear color
	   * @param {string} [config.motionBlur=false] If enable motion blur
	   * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer
	  */
	  configLayer: function (zLevel, config) {
	    if (this.painter.configLayer) {
	      this.painter.configLayer(zLevel, config);
	    }
	
	    this._needsRefresh = true;
	  },
	
	  /**
	   * Set background color
	   * @param {string} backgroundColor
	   */
	  setBackgroundColor: function (backgroundColor) {
	    if (this.painter.setBackgroundColor) {
	      this.painter.setBackgroundColor(backgroundColor);
	    }
	
	    this._needsRefresh = true;
	  },
	
	  /**
	   * Repaint the canvas immediately
	   */
	  refreshImmediately: function () {
	    // var start = new Date();
	    // Clear needsRefresh ahead to avoid something wrong happens in refresh
	    // Or it will cause zrender refreshes again and again.
	    this._needsRefresh = false;
	    this.painter.refresh();
	    /**
	     * Avoid trigger zr.refresh in Element#beforeUpdate hook
	     */
	
	    this._needsRefresh = false; // var end = new Date();
	    // var log = document.getElementById('log');
	    // if (log) {
	    //     log.innerHTML = log.innerHTML + '<br>' + (end - start);
	    // }
	  },
	
	  /**
	   * Mark and repaint the canvas in the next frame of browser
	   */
	  refresh: function () {
	    this._needsRefresh = true;
	  },
	
	  /**
	   * Perform all refresh
	   */
	  flush: function () {
	    var triggerRendered;
	
	    if (this._needsRefresh) {
	      triggerRendered = true;
	      this.refreshImmediately();
	    }
	
	    if (this._needsRefreshHover) {
	      triggerRendered = true;
	      this.refreshHoverImmediately();
	    }
	
	    triggerRendered && this.trigger('rendered');
	  },
	
	  /**
	   * Add element to hover layer
	   * @param  {module:zrender/Element} el
	   * @param {Object} style
	   */
	  addHover: function (el, style) {
	    if (this.painter.addHover) {
	      this.painter.addHover(el, style);
	      this.refreshHover();
	    }
	  },
	
	  /**
	   * Add element from hover layer
	   * @param  {module:zrender/Element} el
	   */
	  removeHover: function (el) {
	    if (this.painter.removeHover) {
	      this.painter.removeHover(el);
	      this.refreshHover();
	    }
	  },
	
	  /**
	   * Clear all hover elements in hover layer
	   * @param  {module:zrender/Element} el
	   */
	  clearHover: function () {
	    if (this.painter.clearHover) {
	      this.painter.clearHover();
	      this.refreshHover();
	    }
	  },
	
	  /**
	   * Refresh hover in next frame
	   */
	  refreshHover: function () {
	    this._needsRefreshHover = true;
	  },
	
	  /**
	   * Refresh hover immediately
	   */
	  refreshHoverImmediately: function () {
	    this._needsRefreshHover = false;
	    this.painter.refreshHover && this.painter.refreshHover();
	  },
	
	  /**
	   * Resize the canvas.
	   * Should be invoked when container size is changed
	   * @param {Object} [opts]
	   * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
	   * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
	   */
	  resize: function (opts) {
	    opts = opts || {};
	    this.painter.resize(opts.width, opts.height);
	    this.handler.resize();
	  },
	
	  /**
	   * Stop and clear all animation immediately
	   */
	  clearAnimation: function () {
	    this.animation.clear();
	  },
	
	  /**
	   * Get container width
	   */
	  getWidth: function () {
	    return this.painter.getWidth();
	  },
	
	  /**
	   * Get container height
	   */
	  getHeight: function () {
	    return this.painter.getHeight();
	  },
	
	  /**
	   * Export the canvas as Base64 URL
	   * @param {string} type
	   * @param {string} [backgroundColor='#fff']
	   * @return {string} Base64 URL
	   */
	  // toDataURL: function(type, backgroundColor) {
	  //     return this.painter.getRenderedCanvas({
	  //         backgroundColor: backgroundColor
	  //     }).toDataURL(type);
	  // },
	
	  /**
	   * Converting a path to image.
	   * It has much better performance of drawing image rather than drawing a vector path.
	   * @param {module:zrender/graphic/Path} e
	   * @param {number} width
	   * @param {number} height
	   */
	  pathToImage: function (e, dpr) {
	    return this.painter.pathToImage(e, dpr);
	  },
	
	  /**
	   * Set default cursor
	   * @param {string} [cursorStyle='default'] 例如 crosshair
	   */
	  setCursorStyle: function (cursorStyle) {
	    this.handler.setCursorStyle(cursorStyle);
	  },
	
	  /**
	   * Find hovered element
	   * @param {number} x
	   * @param {number} y
	   * @return {Object} {target, topTarget}
	   */
	  findHover: function (x, y) {
	    return this.handler.findHover(x, y);
	  },
	
	  /**
	   * Bind event
	   *
	   * @param {string} eventName Event name
	   * @param {Function} eventHandler Handler function
	   * @param {Object} [context] Context object
	   */
	  on: function (eventName, eventHandler, context) {
	    this.handler.on(eventName, eventHandler, context);
	  },
	
	  /**
	   * Unbind event
	   * @param {string} eventName Event name
	   * @param {Function} [eventHandler] Handler function
	   */
	  off: function (eventName, eventHandler) {
	    this.handler.off(eventName, eventHandler);
	  },
	
	  /**
	   * Trigger event manually
	   *
	   * @param {string} eventName Event name
	   * @param {event=} event Event object
	   */
	  trigger: function (eventName, event) {
	    this.handler.trigger(eventName, event);
	  },
	
	  /**
	   * Clear all objects and the canvas.
	   */
	  clear: function () {
	    this.storage.delRoot();
	    this.painter.clear();
	  },
	
	  /**
	   * Dispose self.
	   */
	  dispose: function () {
	    this.animation.stop();
	    this.clear();
	    this.storage.dispose();
	    this.painter.dispose();
	    this.handler.dispose();
	    this.animation = this.storage = this.painter = this.handler = null;
	    delInstance(this.id);
	  }
	};
	exports.version = version;
	exports.init = init;
	exports.dispose = dispose;
	exports.getInstance = getInstance;
	exports.registerPainter = registerPainter;

/***/ }),
/* 929 */
/***/ (function(module, exports) {

	/**
	 * zrender: 生成唯一id
	 *
	 * @author errorrik (errorrik@gmail.com)
	 */
	var idStart = 0x0907;
	
	function _default() {
	  return idStart++;
	}
	
	module.exports = _default;

/***/ }),
/* 930 */
/***/ (function(module, exports) {

	/**
	 * echarts设备环境识别
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author firede[firede@firede.us]
	 * @desc thanks zepto.
	 */
	var env = {};
	
	if (typeof wx === 'object' && typeof wx.getSystemInfoSync === 'function') {
	  // In Weixin Application
	  env = {
	    browser: {},
	    os: {},
	    node: false,
	    wxa: true,
	    // Weixin Application
	    canvasSupported: true,
	    svgSupported: false,
	    touchEventsSupported: true
	  };
	} else if (typeof document === 'undefined' && typeof self !== 'undefined') {
	  // In worker
	  env = {
	    browser: {},
	    os: {},
	    node: false,
	    worker: true,
	    canvasSupported: true
	  };
	} else if (typeof navigator === 'undefined') {
	  // In node
	  env = {
	    browser: {},
	    os: {},
	    node: true,
	    worker: false,
	    // Assume canvas is supported
	    canvasSupported: true,
	    svgSupported: true
	  };
	} else {
	  env = detect(navigator.userAgent);
	}
	
	var _default = env; // Zepto.js
	// (c) 2010-2013 Thomas Fuchs
	// Zepto.js may be freely distributed under the MIT license.
	
	function detect(ua) {
	  var os = {};
	  var browser = {}; // var webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/);
	  // var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
	  // var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
	  // var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
	  // var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
	  // var webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/);
	  // var touchpad = webos && ua.match(/TouchPad/);
	  // var kindle = ua.match(/Kindle\/([\d.]+)/);
	  // var silk = ua.match(/Silk\/([\d._]+)/);
	  // var blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/);
	  // var bb10 = ua.match(/(BB10).*Version\/([\d.]+)/);
	  // var rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/);
	  // var playbook = ua.match(/PlayBook/);
	  // var chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/);
	
	  var firefox = ua.match(/Firefox\/([\d.]+)/); // var safari = webkit && ua.match(/Mobile\//) && !chrome;
	  // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;
	
	  var ie = ua.match(/MSIE\s([\d.]+)/) // IE 11 Trident/7.0; rv:11.0
	  || ua.match(/Trident\/.+?rv:(([\d.]+))/);
	  var edge = ua.match(/Edge\/([\d.]+)/); // IE 12 and 12+
	
	  var weChat = /micromessenger/i.test(ua); // Todo: clean this up with a better OS/browser seperation:
	  // - discern (more) between multiple browsers on android
	  // - decide if kindle fire in silk mode is android or not
	  // - Firefox on Android doesn't specify the Android version
	  // - possibly devide in os, device and browser hashes
	  // if (browser.webkit = !!webkit) browser.version = webkit[1];
	  // if (android) os.android = true, os.version = android[2];
	  // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');
	  // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');
	  // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
	  // if (webos) os.webos = true, os.version = webos[2];
	  // if (touchpad) os.touchpad = true;
	  // if (blackberry) os.blackberry = true, os.version = blackberry[2];
	  // if (bb10) os.bb10 = true, os.version = bb10[2];
	  // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];
	  // if (playbook) browser.playbook = true;
	  // if (kindle) os.kindle = true, os.version = kindle[1];
	  // if (silk) browser.silk = true, browser.version = silk[1];
	  // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;
	  // if (chrome) browser.chrome = true, browser.version = chrome[1];
	
	  if (firefox) {
	    browser.firefox = true;
	    browser.version = firefox[1];
	  } // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;
	  // if (webview) browser.webview = true;
	
	
	  if (ie) {
	    browser.ie = true;
	    browser.version = ie[1];
	  }
	
	  if (edge) {
	    browser.edge = true;
	    browser.version = edge[1];
	  } // It is difficult to detect WeChat in Win Phone precisely, because ua can
	  // not be set on win phone. So we do not consider Win Phone.
	
	
	  if (weChat) {
	    browser.weChat = true;
	  } // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||
	  //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));
	  // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||
	  //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) ||
	  //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));
	
	
	  return {
	    browser: browser,
	    os: os,
	    node: false,
	    // 原生canvas支持，改极端点了
	    // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)
	    canvasSupported: !!document.createElement('canvas').getContext,
	    svgSupported: typeof SVGRect !== 'undefined',
	    // works on most browsers
	    // IE10/11 does not support touch event, and MS Edge supports them but not by
	    // default, so we dont check navigator.maxTouchPoints for them here.
	    touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,
	    // <http://caniuse.com/#search=pointer%20event>.
	    pointerEventsSupported: 'onpointerdown' in window // Firefox supports pointer but not by default, only MS browsers are reliable on pointer
	    // events currently. So we dont use that on other browsers unless tested sufficiently.
	    // Although IE 10 supports pointer event, it use old style and is different from the
	    // standard. So we exclude that. (IE 10 is hardly used on touch device)
	    && (browser.edge || browser.ie && browser.version >= 11) // passiveSupported: detectPassiveSupport()
	
	  };
	} // See https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
	// function detectPassiveSupport() {
	//     // Test via a getter in the options object to see if the passive property is accessed
	//     var supportsPassive = false;
	//     try {
	//         var opts = Object.defineProperty({}, 'passive', {
	//             get: function() {
	//                 supportsPassive = true;
	//             }
	//         });
	//         window.addEventListener('testPassive', function() {}, opts);
	//     } catch (e) {
	//     }
	//     return supportsPassive;
	// }
	
	
	module.exports = _default;

/***/ }),
/* 931 */
/***/ (function(module, exports) {

	/**
	 * @module zrender/core/util
	 */
	// 用于处理merge时无法遍历Date等对象的问题
	var BUILTIN_OBJECT = {
	  '[object Function]': 1,
	  '[object RegExp]': 1,
	  '[object Date]': 1,
	  '[object Error]': 1,
	  '[object CanvasGradient]': 1,
	  '[object CanvasPattern]': 1,
	  // For node-canvas
	  '[object Image]': 1,
	  '[object Canvas]': 1
	};
	var TYPED_ARRAY = {
	  '[object Int8Array]': 1,
	  '[object Uint8Array]': 1,
	  '[object Uint8ClampedArray]': 1,
	  '[object Int16Array]': 1,
	  '[object Uint16Array]': 1,
	  '[object Int32Array]': 1,
	  '[object Uint32Array]': 1,
	  '[object Float32Array]': 1,
	  '[object Float64Array]': 1
	};
	var objToString = Object.prototype.toString;
	var arrayProto = Array.prototype;
	var nativeForEach = arrayProto.forEach;
	var nativeFilter = arrayProto.filter;
	var nativeSlice = arrayProto.slice;
	var nativeMap = arrayProto.map;
	var nativeReduce = arrayProto.reduce; // Avoid assign to an exported variable, for transforming to cjs.
	
	var methods = {};
	
	function $override(name, fn) {
	  // Clear ctx instance for different environment
	  if (name === 'createCanvas') {
	    _ctx = null;
	  }
	
	  methods[name] = fn;
	}
	/**
	 * Those data types can be cloned:
	 *     Plain object, Array, TypedArray, number, string, null, undefined.
	 * Those data types will be assgined using the orginal data:
	 *     BUILTIN_OBJECT
	 * Instance of user defined class will be cloned to a plain object, without
	 * properties in prototype.
	 * Other data types is not supported (not sure what will happen).
	 *
	 * Caution: do not support clone Date, for performance consideration.
	 * (There might be a large number of date in `series.data`).
	 * So date should not be modified in and out of echarts.
	 *
	 * @param {*} source
	 * @return {*} new
	 */
	
	
	function clone(source) {
	  if (source == null || typeof source != 'object') {
	    return source;
	  }
	
	  var result = source;
	  var typeStr = objToString.call(source);
	
	  if (typeStr === '[object Array]') {
	    if (!isPrimitive(source)) {
	      result = [];
	
	      for (var i = 0, len = source.length; i < len; i++) {
	        result[i] = clone(source[i]);
	      }
	    }
	  } else if (TYPED_ARRAY[typeStr]) {
	    if (!isPrimitive(source)) {
	      var Ctor = source.constructor;
	
	      if (source.constructor.from) {
	        result = Ctor.from(source);
	      } else {
	        result = new Ctor(source.length);
	
	        for (var i = 0, len = source.length; i < len; i++) {
	          result[i] = clone(source[i]);
	        }
	      }
	    }
	  } else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive(source) && !isDom(source)) {
	    result = {};
	
	    for (var key in source) {
	      if (source.hasOwnProperty(key)) {
	        result[key] = clone(source[key]);
	      }
	    }
	  }
	
	  return result;
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} target
	 * @param {*} source
	 * @param {boolean} [overwrite=false]
	 */
	
	
	function merge(target, source, overwrite) {
	  // We should escapse that source is string
	  // and enter for ... in ...
	  if (!isObject(source) || !isObject(target)) {
	    return overwrite ? clone(source) : target;
	  }
	
	  for (var key in source) {
	    if (source.hasOwnProperty(key)) {
	      var targetProp = target[key];
	      var sourceProp = source[key];
	
	      if (isObject(sourceProp) && isObject(targetProp) && !isArray(sourceProp) && !isArray(targetProp) && !isDom(sourceProp) && !isDom(targetProp) && !isBuiltInObject(sourceProp) && !isBuiltInObject(targetProp) && !isPrimitive(sourceProp) && !isPrimitive(targetProp)) {
	        // 如果需要递归覆盖，就递归调用merge
	        merge(targetProp, sourceProp, overwrite);
	      } else if (overwrite || !(key in target)) {
	        // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
	        // NOTE，在 target[key] 不存在的时候也是直接覆盖
	        target[key] = clone(source[key], true);
	      }
	    }
	  }
	
	  return target;
	}
	/**
	 * @param {Array} targetAndSources The first item is target, and the rests are source.
	 * @param {boolean} [overwrite=false]
	 * @return {*} target
	 */
	
	
	function mergeAll(targetAndSources, overwrite) {
	  var result = targetAndSources[0];
	
	  for (var i = 1, len = targetAndSources.length; i < len; i++) {
	    result = merge(result, targetAndSources[i], overwrite);
	  }
	
	  return result;
	}
	/**
	 * @param {*} target
	 * @param {*} source
	 * @memberOf module:zrender/core/util
	 */
	
	
	function extend(target, source) {
	  for (var key in source) {
	    if (source.hasOwnProperty(key)) {
	      target[key] = source[key];
	    }
	  }
	
	  return target;
	}
	/**
	 * @param {*} target
	 * @param {*} source
	 * @param {boolean} [overlay=false]
	 * @memberOf module:zrender/core/util
	 */
	
	
	function defaults(target, source, overlay) {
	  for (var key in source) {
	    if (source.hasOwnProperty(key) && (overlay ? source[key] != null : target[key] == null)) {
	      target[key] = source[key];
	    }
	  }
	
	  return target;
	}
	
	var createCanvas = function () {
	  return methods.createCanvas();
	};
	
	methods.createCanvas = function () {
	  return document.createElement('canvas');
	}; // FIXME
	
	
	var _ctx;
	
	function getContext() {
	  if (!_ctx) {
	    // Use util.createCanvas instead of createCanvas
	    // because createCanvas may be overwritten in different environment
	    _ctx = createCanvas().getContext('2d');
	  }
	
	  return _ctx;
	}
	/**
	 * 查询数组中元素的index
	 * @memberOf module:zrender/core/util
	 */
	
	
	function indexOf(array, value) {
	  if (array) {
	    if (array.indexOf) {
	      return array.indexOf(value);
	    }
	
	    for (var i = 0, len = array.length; i < len; i++) {
	      if (array[i] === value) {
	        return i;
	      }
	    }
	  }
	
	  return -1;
	}
	/**
	 * 构造类继承关系
	 *
	 * @memberOf module:zrender/core/util
	 * @param {Function} clazz 源类
	 * @param {Function} baseClazz 基类
	 */
	
	
	function inherits(clazz, baseClazz) {
	  var clazzPrototype = clazz.prototype;
	
	  function F() {}
	
	  F.prototype = baseClazz.prototype;
	  clazz.prototype = new F();
	
	  for (var prop in clazzPrototype) {
	    clazz.prototype[prop] = clazzPrototype[prop];
	  }
	
	  clazz.prototype.constructor = clazz;
	  clazz.superClass = baseClazz;
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {Object|Function} target
	 * @param {Object|Function} sorce
	 * @param {boolean} overlay
	 */
	
	
	function mixin(target, source, overlay) {
	  target = 'prototype' in target ? target.prototype : target;
	  source = 'prototype' in source ? source.prototype : source;
	  defaults(target, source, overlay);
	}
	/**
	 * Consider typed array.
	 * @param {Array|TypedArray} data
	 */
	
	
	function isArrayLike(data) {
	  if (!data) {
	    return;
	  }
	
	  if (typeof data == 'string') {
	    return false;
	  }
	
	  return typeof data.length == 'number';
	}
	/**
	 * 数组或对象遍历
	 * @memberOf module:zrender/core/util
	 * @param {Object|Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 */
	
	
	function each(obj, cb, context) {
	  if (!(obj && cb)) {
	    return;
	  }
	
	  if (obj.forEach && obj.forEach === nativeForEach) {
	    obj.forEach(cb, context);
	  } else if (obj.length === +obj.length) {
	    for (var i = 0, len = obj.length; i < len; i++) {
	      cb.call(context, obj[i], i, obj);
	    }
	  } else {
	    for (var key in obj) {
	      if (obj.hasOwnProperty(key)) {
	        cb.call(context, obj[key], key, obj);
	      }
	    }
	  }
	}
	/**
	 * 数组映射
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 * @return {Array}
	 */
	
	
	function map(obj, cb, context) {
	  if (!(obj && cb)) {
	    return;
	  }
	
	  if (obj.map && obj.map === nativeMap) {
	    return obj.map(cb, context);
	  } else {
	    var result = [];
	
	    for (var i = 0, len = obj.length; i < len; i++) {
	      result.push(cb.call(context, obj[i], i, obj));
	    }
	
	    return result;
	  }
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {Object} [memo]
	 * @param {*} [context]
	 * @return {Array}
	 */
	
	
	function reduce(obj, cb, memo, context) {
	  if (!(obj && cb)) {
	    return;
	  }
	
	  if (obj.reduce && obj.reduce === nativeReduce) {
	    return obj.reduce(cb, memo, context);
	  } else {
	    for (var i = 0, len = obj.length; i < len; i++) {
	      memo = cb.call(context, memo, obj[i], i, obj);
	    }
	
	    return memo;
	  }
	}
	/**
	 * 数组过滤
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 * @return {Array}
	 */
	
	
	function filter(obj, cb, context) {
	  if (!(obj && cb)) {
	    return;
	  }
	
	  if (obj.filter && obj.filter === nativeFilter) {
	    return obj.filter(cb, context);
	  } else {
	    var result = [];
	
	    for (var i = 0, len = obj.length; i < len; i++) {
	      if (cb.call(context, obj[i], i, obj)) {
	        result.push(obj[i]);
	      }
	    }
	
	    return result;
	  }
	}
	/**
	 * 数组项查找
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 * @return {*}
	 */
	
	
	function find(obj, cb, context) {
	  if (!(obj && cb)) {
	    return;
	  }
	
	  for (var i = 0, len = obj.length; i < len; i++) {
	    if (cb.call(context, obj[i], i, obj)) {
	      return obj[i];
	    }
	  }
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {Function} func
	 * @param {*} context
	 * @return {Function}
	 */
	
	
	function bind(func, context) {
	  var args = nativeSlice.call(arguments, 2);
	  return function () {
	    return func.apply(context, args.concat(nativeSlice.call(arguments)));
	  };
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {Function} func
	 * @return {Function}
	 */
	
	
	function curry(func) {
	  var args = nativeSlice.call(arguments, 1);
	  return function () {
	    return func.apply(this, args.concat(nativeSlice.call(arguments)));
	  };
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */
	
	
	function isArray(value) {
	  return objToString.call(value) === '[object Array]';
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */
	
	
	function isFunction(value) {
	  return typeof value === 'function';
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */
	
	
	function isString(value) {
	  return objToString.call(value) === '[object String]';
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */
	
	
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return type === 'function' || !!value && type == 'object';
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */
	
	
	function isBuiltInObject(value) {
	  return !!BUILTIN_OBJECT[objToString.call(value)];
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */
	
	
	function isTypedArray(value) {
	  return !!TYPED_ARRAY[objToString.call(value)];
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */
	
	
	function isDom(value) {
	  return typeof value === 'object' && typeof value.nodeType === 'number' && typeof value.ownerDocument === 'object';
	}
	/**
	 * Whether is exactly NaN. Notice isNaN('a') returns true.
	 * @param {*} value
	 * @return {boolean}
	 */
	
	
	function eqNaN(value) {
	  return value !== value;
	}
	/**
	 * If value1 is not null, then return value1, otherwise judget rest of values.
	 * Low performance.
	 * @memberOf module:zrender/core/util
	 * @return {*} Final value
	 */
	
	
	function retrieve(values) {
	  for (var i = 0, len = arguments.length; i < len; i++) {
	    if (arguments[i] != null) {
	      return arguments[i];
	    }
	  }
	}
	
	function retrieve2(value0, value1) {
	  return value0 != null ? value0 : value1;
	}
	
	function retrieve3(value0, value1, value2) {
	  return value0 != null ? value0 : value1 != null ? value1 : value2;
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {Array} arr
	 * @param {number} startIndex
	 * @param {number} endIndex
	 * @return {Array}
	 */
	
	
	function slice() {
	  return Function.call.apply(nativeSlice, arguments);
	}
	/**
	 * Normalize css liked array configuration
	 * e.g.
	 *  3 => [3, 3, 3, 3]
	 *  [4, 2] => [4, 2, 4, 2]
	 *  [4, 3, 2] => [4, 3, 2, 3]
	 * @param {number|Array.<number>} val
	 * @return {Array.<number>}
	 */
	
	
	function normalizeCssArray(val) {
	  if (typeof val === 'number') {
	    return [val, val, val, val];
	  }
	
	  var len = val.length;
	
	  if (len === 2) {
	    // vertical | horizontal
	    return [val[0], val[1], val[0], val[1]];
	  } else if (len === 3) {
	    // top | horizontal | bottom
	    return [val[0], val[1], val[2], val[1]];
	  }
	
	  return val;
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {boolean} condition
	 * @param {string} message
	 */
	
	
	function assert(condition, message) {
	  if (!condition) {
	    throw new Error(message);
	  }
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {string} str string to be trimed
	 * @return {string} trimed string
	 */
	
	
	function trim(str) {
	  if (str == null) {
	    return null;
	  } else if (typeof str.trim === 'function') {
	    return str.trim();
	  } else {
	    return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
	  }
	}
	
	var primitiveKey = '__ec_primitive__';
	/**
	 * Set an object as primitive to be ignored traversing children in clone or merge
	 */
	
	function setAsPrimitive(obj) {
	  obj[primitiveKey] = true;
	}
	
	function isPrimitive(obj) {
	  return obj[primitiveKey];
	}
	/**
	 * @constructor
	 * @param {Object} obj Only apply `ownProperty`.
	 */
	
	
	function HashMap(obj) {
	  var isArr = isArray(obj);
	  var thisMap = this;
	  obj instanceof HashMap ? obj.each(visit) : obj && each(obj, visit);
	
	  function visit(value, key) {
	    isArr ? thisMap.set(value, key) : thisMap.set(key, value);
	  }
	} // Add prefix to avoid conflict with Object.prototype.
	
	
	HashMap.prototype = {
	  constructor: HashMap,
	  // Do not provide `has` method to avoid defining what is `has`.
	  // (We usually treat `null` and `undefined` as the same, different
	  // from ES6 Map).
	  get: function (key) {
	    return this.hasOwnProperty(key) ? this[key] : null;
	  },
	  set: function (key, value) {
	    // Comparing with invocation chaining, `return value` is more commonly
	    // used in this case: `var someVal = map.set('a', genVal());`
	    return this[key] = value;
	  },
	  // Although util.each can be performed on this hashMap directly, user
	  // should not use the exposed keys, who are prefixed.
	  each: function (cb, context) {
	    context !== void 0 && (cb = bind(cb, context));
	
	    for (var key in this) {
	      this.hasOwnProperty(key) && cb(this[key], key);
	    }
	  },
	  // Do not use this method if performance sensitive.
	  removeKey: function (key) {
	    delete this[key];
	  }
	};
	
	function createHashMap(obj) {
	  return new HashMap(obj);
	}
	
	function concatArray(a, b) {
	  var newArray = new a.constructor(a.length + b.length);
	
	  for (var i = 0; i < a.length; i++) {
	    newArray[i] = a[i];
	  }
	
	  var offset = a.length;
	
	  for (i = 0; i < b.length; i++) {
	    newArray[i + offset] = b[i];
	  }
	
	  return newArray;
	}
	
	function noop() {}
	
	exports.$override = $override;
	exports.clone = clone;
	exports.merge = merge;
	exports.mergeAll = mergeAll;
	exports.extend = extend;
	exports.defaults = defaults;
	exports.createCanvas = createCanvas;
	exports.getContext = getContext;
	exports.indexOf = indexOf;
	exports.inherits = inherits;
	exports.mixin = mixin;
	exports.isArrayLike = isArrayLike;
	exports.each = each;
	exports.map = map;
	exports.reduce = reduce;
	exports.filter = filter;
	exports.find = find;
	exports.bind = bind;
	exports.curry = curry;
	exports.isArray = isArray;
	exports.isFunction = isFunction;
	exports.isString = isString;
	exports.isObject = isObject;
	exports.isBuiltInObject = isBuiltInObject;
	exports.isTypedArray = isTypedArray;
	exports.isDom = isDom;
	exports.eqNaN = eqNaN;
	exports.retrieve = retrieve;
	exports.retrieve2 = retrieve2;
	exports.retrieve3 = retrieve3;
	exports.slice = slice;
	exports.normalizeCssArray = normalizeCssArray;
	exports.assert = assert;
	exports.trim = trim;
	exports.setAsPrimitive = setAsPrimitive;
	exports.isPrimitive = isPrimitive;
	exports.createHashMap = createHashMap;
	exports.concatArray = concatArray;
	exports.noop = noop;

/***/ }),
/* 932 */
/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(931);
	
	var vec2 = __webpack_require__(933);
	
	var Draggable = __webpack_require__(934);
	
	var Eventful = __webpack_require__(935);
	
	var SILENT = 'silent';
	
	function makeEventPacket(eveType, targetInfo, event) {
	  return {
	    type: eveType,
	    event: event,
	    // target can only be an element that is not silent.
	    target: targetInfo.target,
	    // topTarget can be a silent element.
	    topTarget: targetInfo.topTarget,
	    cancelBubble: false,
	    offsetX: event.zrX,
	    offsetY: event.zrY,
	    gestureEvent: event.gestureEvent,
	    pinchX: event.pinchX,
	    pinchY: event.pinchY,
	    pinchScale: event.pinchScale,
	    wheelDelta: event.zrDelta,
	    zrByTouch: event.zrByTouch,
	    which: event.which
	  };
	}
	
	function EmptyProxy() {}
	
	EmptyProxy.prototype.dispose = function () {};
	
	var handlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];
	/**
	 * @alias module:zrender/Handler
	 * @constructor
	 * @extends module:zrender/mixin/Eventful
	 * @param {module:zrender/Storage} storage Storage instance.
	 * @param {module:zrender/Painter} painter Painter instance.
	 * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.
	 * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).
	 */
	
	var Handler = function (storage, painter, proxy, painterRoot) {
	  Eventful.call(this);
	  this.storage = storage;
	  this.painter = painter;
	  this.painterRoot = painterRoot;
	  proxy = proxy || new EmptyProxy();
	  /**
	   * Proxy of event. can be Dom, WebGLSurface, etc.
	   */
	
	  this.proxy = null;
	  /**
	   * {target, topTarget, x, y}
	   * @private
	   * @type {Object}
	   */
	
	  this._hovered = {};
	  /**
	   * @private
	   * @type {Date}
	   */
	
	  this._lastTouchMoment;
	  /**
	   * @private
	   * @type {number}
	   */
	
	  this._lastX;
	  /**
	   * @private
	   * @type {number}
	   */
	
	  this._lastY;
	  Draggable.call(this);
	  this.setHandlerProxy(proxy);
	};
	
	Handler.prototype = {
	  constructor: Handler,
	  setHandlerProxy: function (proxy) {
	    if (this.proxy) {
	      this.proxy.dispose();
	    }
	
	    if (proxy) {
	      util.each(handlerNames, function (name) {
	        proxy.on && proxy.on(name, this[name], this);
	      }, this); // Attach handler
	
	      proxy.handler = this;
	    }
	
	    this.proxy = proxy;
	  },
	  mousemove: function (event) {
	    var x = event.zrX;
	    var y = event.zrY;
	    var lastHovered = this._hovered;
	    var lastHoveredTarget = lastHovered.target; // If lastHoveredTarget is removed from zr (detected by '__zr') by some API call
	    // (like 'setOption' or 'dispatchAction') in event handlers, we should find
	    // lastHovered again here. Otherwise 'mouseout' can not be triggered normally.
	    // See #6198.
	
	    if (lastHoveredTarget && !lastHoveredTarget.__zr) {
	      lastHovered = this.findHover(lastHovered.x, lastHovered.y);
	      lastHoveredTarget = lastHovered.target;
	    }
	
	    var hovered = this._hovered = this.findHover(x, y);
	    var hoveredTarget = hovered.target;
	    var proxy = this.proxy;
	    proxy.setCursor && proxy.setCursor(hoveredTarget ? hoveredTarget.cursor : 'default'); // Mouse out on previous hovered element
	
	    if (lastHoveredTarget && hoveredTarget !== lastHoveredTarget) {
	      this.dispatchToElement(lastHovered, 'mouseout', event);
	    } // Mouse moving on one element
	
	
	    this.dispatchToElement(hovered, 'mousemove', event); // Mouse over on a new element
	
	    if (hoveredTarget && hoveredTarget !== lastHoveredTarget) {
	      this.dispatchToElement(hovered, 'mouseover', event);
	    }
	  },
	  mouseout: function (event) {
	    this.dispatchToElement(this._hovered, 'mouseout', event); // There might be some doms created by upper layer application
	    // at the same level of painter.getViewportRoot() (e.g., tooltip
	    // dom created by echarts), where 'globalout' event should not
	    // be triggered when mouse enters these doms. (But 'mouseout'
	    // should be triggered at the original hovered element as usual).
	
	    var element = event.toElement || event.relatedTarget;
	    var innerDom;
	
	    do {
	      element = element && element.parentNode;
	    } while (element && element.nodeType != 9 && !(innerDom = element === this.painterRoot));
	
	    !innerDom && this.trigger('globalout', {
	      event: event
	    });
	  },
	
	  /**
	   * Resize
	   */
	  resize: function (event) {
	    this._hovered = {};
	  },
	
	  /**
	   * Dispatch event
	   * @param {string} eventName
	   * @param {event=} eventArgs
	   */
	  dispatch: function (eventName, eventArgs) {
	    var handler = this[eventName];
	    handler && handler.call(this, eventArgs);
	  },
	
	  /**
	   * Dispose
	   */
	  dispose: function () {
	    this.proxy.dispose();
	    this.storage = this.proxy = this.painter = null;
	  },
	
	  /**
	   * 设置默认的cursor style
	   * @param {string} [cursorStyle='default'] 例如 crosshair
	   */
	  setCursorStyle: function (cursorStyle) {
	    var proxy = this.proxy;
	    proxy.setCursor && proxy.setCursor(cursorStyle);
	  },
	
	  /**
	   * 事件分发代理
	   *
	   * @private
	   * @param {Object} targetInfo {target, topTarget} 目标图形元素
	   * @param {string} eventName 事件名称
	   * @param {Object} event 事件对象
	   */
	  dispatchToElement: function (targetInfo, eventName, event) {
	    targetInfo = targetInfo || {};
	    var el = targetInfo.target;
	
	    if (el && el.silent) {
	      return;
	    }
	
	    var eventHandler = 'on' + eventName;
	    var eventPacket = makeEventPacket(eventName, targetInfo, event);
	
	    while (el) {
	      el[eventHandler] && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));
	      el.trigger(eventName, eventPacket);
	      el = el.parent;
	
	      if (eventPacket.cancelBubble) {
	        break;
	      }
	    }
	
	    if (!eventPacket.cancelBubble) {
	      // 冒泡到顶级 zrender 对象
	      this.trigger(eventName, eventPacket); // 分发事件到用户自定义层
	      // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在
	
	      this.painter && this.painter.eachOtherLayer(function (layer) {
	        if (typeof layer[eventHandler] == 'function') {
	          layer[eventHandler].call(layer, eventPacket);
	        }
	
	        if (layer.trigger) {
	          layer.trigger(eventName, eventPacket);
	        }
	      });
	    }
	  },
	
	  /**
	   * @private
	   * @param {number} x
	   * @param {number} y
	   * @param {module:zrender/graphic/Displayable} exclude
	   * @return {model:zrender/Element}
	   * @method
	   */
	  findHover: function (x, y, exclude) {
	    var list = this.storage.getDisplayList();
	    var out = {
	      x: x,
	      y: y
	    };
	
	    for (var i = list.length - 1; i >= 0; i--) {
	      var hoverCheckResult;
	
	      if (list[i] !== exclude // getDisplayList may include ignored item in VML mode
	      && !list[i].ignore && (hoverCheckResult = isHover(list[i], x, y))) {
	        !out.topTarget && (out.topTarget = list[i]);
	
	        if (hoverCheckResult !== SILENT) {
	          out.target = list[i];
	          break;
	        }
	      }
	    }
	
	    return out;
	  }
	}; // Common handlers
	
	util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
	  Handler.prototype[name] = function (event) {
	    // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover
	    var hovered = this.findHover(event.zrX, event.zrY);
	    var hoveredTarget = hovered.target;
	
	    if (name === 'mousedown') {
	      this._downEl = hoveredTarget;
	      this._downPoint = [event.zrX, event.zrY]; // In case click triggered before mouseup
	
	      this._upEl = hoveredTarget;
	    } else if (name === 'mouseup') {
	      this._upEl = hoveredTarget;
	    } else if (name === 'click') {
	      if (this._downEl !== this._upEl // Original click event is triggered on the whole canvas element,
	      // including the case that `mousedown` - `mousemove` - `mouseup`,
	      // which should be filtered, otherwise it will bring trouble to
	      // pan and zoom.
	      || !this._downPoint // Arbitrary value
	      || vec2.dist(this._downPoint, [event.zrX, event.zrY]) > 4) {
	        return;
	      }
	
	      this._downPoint = null;
	    }
	
	    this.dispatchToElement(hovered, name, event);
	  };
	});
	
	function isHover(displayable, x, y) {
	  if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {
	    var el = displayable;
	    var isSilent;
	
	    while (el) {
	      // If clipped by ancestor.
	      // FIXME: If clipPath has neither stroke nor fill,
	      // el.clipPath.contain(x, y) will always return false.
	      if (el.clipPath && !el.clipPath.contain(x, y)) {
	        return false;
	      }
	
	      if (el.silent) {
	        isSilent = true;
	      }
	
	      el = el.parent;
	    }
	
	    return isSilent ? SILENT : true;
	  }
	
	  return false;
	}
	
	util.mixin(Handler, Eventful);
	util.mixin(Handler, Draggable);
	var _default = Handler;
	module.exports = _default;

/***/ }),
/* 933 */
/***/ (function(module, exports) {

	var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
	/**
	 * 创建一个向量
	 * @param {number} [x=0]
	 * @param {number} [y=0]
	 * @return {Vector2}
	 */
	
	function create(x, y) {
	  var out = new ArrayCtor(2);
	
	  if (x == null) {
	    x = 0;
	  }
	
	  if (y == null) {
	    y = 0;
	  }
	
	  out[0] = x;
	  out[1] = y;
	  return out;
	}
	/**
	 * 复制向量数据
	 * @param {Vector2} out
	 * @param {Vector2} v
	 * @return {Vector2}
	 */
	
	
	function copy(out, v) {
	  out[0] = v[0];
	  out[1] = v[1];
	  return out;
	}
	/**
	 * 克隆一个向量
	 * @param {Vector2} v
	 * @return {Vector2}
	 */
	
	
	function clone(v) {
	  var out = new ArrayCtor(2);
	  out[0] = v[0];
	  out[1] = v[1];
	  return out;
	}
	/**
	 * 设置向量的两个项
	 * @param {Vector2} out
	 * @param {number} a
	 * @param {number} b
	 * @return {Vector2} 结果
	 */
	
	
	function set(out, a, b) {
	  out[0] = a;
	  out[1] = b;
	  return out;
	}
	/**
	 * 向量相加
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 */
	
	
	function add(out, v1, v2) {
	  out[0] = v1[0] + v2[0];
	  out[1] = v1[1] + v2[1];
	  return out;
	}
	/**
	 * 向量缩放后相加
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 * @param {number} a
	 */
	
	
	function scaleAndAdd(out, v1, v2, a) {
	  out[0] = v1[0] + v2[0] * a;
	  out[1] = v1[1] + v2[1] * a;
	  return out;
	}
	/**
	 * 向量相减
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 */
	
	
	function sub(out, v1, v2) {
	  out[0] = v1[0] - v2[0];
	  out[1] = v1[1] - v2[1];
	  return out;
	}
	/**
	 * 向量长度
	 * @param {Vector2} v
	 * @return {number}
	 */
	
	
	function len(v) {
	  return Math.sqrt(lenSquare(v));
	}
	
	var length = len; // jshint ignore:line
	
	/**
	 * 向量长度平方
	 * @param {Vector2} v
	 * @return {number}
	 */
	
	function lenSquare(v) {
	  return v[0] * v[0] + v[1] * v[1];
	}
	
	var lengthSquare = lenSquare;
	/**
	 * 向量乘法
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 */
	
	function mul(out, v1, v2) {
	  out[0] = v1[0] * v2[0];
	  out[1] = v1[1] * v2[1];
	  return out;
	}
	/**
	 * 向量除法
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 */
	
	
	function div(out, v1, v2) {
	  out[0] = v1[0] / v2[0];
	  out[1] = v1[1] / v2[1];
	  return out;
	}
	/**
	 * 向量点乘
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 * @return {number}
	 */
	
	
	function dot(v1, v2) {
	  return v1[0] * v2[0] + v1[1] * v2[1];
	}
	/**
	 * 向量缩放
	 * @param {Vector2} out
	 * @param {Vector2} v
	 * @param {number} s
	 */
	
	
	function scale(out, v, s) {
	  out[0] = v[0] * s;
	  out[1] = v[1] * s;
	  return out;
	}
	/**
	 * 向量归一化
	 * @param {Vector2} out
	 * @param {Vector2} v
	 */
	
	
	function normalize(out, v) {
	  var d = len(v);
	
	  if (d === 0) {
	    out[0] = 0;
	    out[1] = 0;
	  } else {
	    out[0] = v[0] / d;
	    out[1] = v[1] / d;
	  }
	
	  return out;
	}
	/**
	 * 计算向量间距离
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 * @return {number}
	 */
	
	
	function distance(v1, v2) {
	  return Math.sqrt((v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]));
	}
	
	var dist = distance;
	/**
	 * 向量距离平方
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 * @return {number}
	 */
	
	function distanceSquare(v1, v2) {
	  return (v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]);
	}
	
	var distSquare = distanceSquare;
	/**
	 * 求负向量
	 * @param {Vector2} out
	 * @param {Vector2} v
	 */
	
	function negate(out, v) {
	  out[0] = -v[0];
	  out[1] = -v[1];
	  return out;
	}
	/**
	 * 插值两个点
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 * @param {number} t
	 */
	
	
	function lerp(out, v1, v2, t) {
	  out[0] = v1[0] + t * (v2[0] - v1[0]);
	  out[1] = v1[1] + t * (v2[1] - v1[1]);
	  return out;
	}
	/**
	 * 矩阵左乘向量
	 * @param {Vector2} out
	 * @param {Vector2} v
	 * @param {Vector2} m
	 */
	
	
	function applyTransform(out, v, m) {
	  var x = v[0];
	  var y = v[1];
	  out[0] = m[0] * x + m[2] * y + m[4];
	  out[1] = m[1] * x + m[3] * y + m[5];
	  return out;
	}
	/**
	 * 求两个向量最小值
	 * @param  {Vector2} out
	 * @param  {Vector2} v1
	 * @param  {Vector2} v2
	 */
	
	
	function min(out, v1, v2) {
	  out[0] = Math.min(v1[0], v2[0]);
	  out[1] = Math.min(v1[1], v2[1]);
	  return out;
	}
	/**
	 * 求两个向量最大值
	 * @param  {Vector2} out
	 * @param  {Vector2} v1
	 * @param  {Vector2} v2
	 */
	
	
	function max(out, v1, v2) {
	  out[0] = Math.max(v1[0], v2[0]);
	  out[1] = Math.max(v1[1], v2[1]);
	  return out;
	}
	
	exports.create = create;
	exports.copy = copy;
	exports.clone = clone;
	exports.set = set;
	exports.add = add;
	exports.scaleAndAdd = scaleAndAdd;
	exports.sub = sub;
	exports.len = len;
	exports.length = length;
	exports.lenSquare = lenSquare;
	exports.lengthSquare = lengthSquare;
	exports.mul = mul;
	exports.div = div;
	exports.dot = dot;
	exports.scale = scale;
	exports.normalize = normalize;
	exports.distance = distance;
	exports.dist = dist;
	exports.distanceSquare = distanceSquare;
	exports.distSquare = distSquare;
	exports.negate = negate;
	exports.lerp = lerp;
	exports.applyTransform = applyTransform;
	exports.min = min;
	exports.max = max;

/***/ }),
/* 934 */
/***/ (function(module, exports) {

	// TODO Draggable for group
	// FIXME Draggable on element which has parent rotation or scale
	function Draggable() {
	  this.on('mousedown', this._dragStart, this);
	  this.on('mousemove', this._drag, this);
	  this.on('mouseup', this._dragEnd, this);
	  this.on('globalout', this._dragEnd, this); // this._dropTarget = null;
	  // this._draggingTarget = null;
	  // this._x = 0;
	  // this._y = 0;
	}
	
	Draggable.prototype = {
	  constructor: Draggable,
	  _dragStart: function (e) {
	    var draggingTarget = e.target;
	
	    if (draggingTarget && draggingTarget.draggable) {
	      this._draggingTarget = draggingTarget;
	      draggingTarget.dragging = true;
	      this._x = e.offsetX;
	      this._y = e.offsetY;
	      this.dispatchToElement(param(draggingTarget, e), 'dragstart', e.event);
	    }
	  },
	  _drag: function (e) {
	    var draggingTarget = this._draggingTarget;
	
	    if (draggingTarget) {
	      var x = e.offsetX;
	      var y = e.offsetY;
	      var dx = x - this._x;
	      var dy = y - this._y;
	      this._x = x;
	      this._y = y;
	      draggingTarget.drift(dx, dy, e);
	      this.dispatchToElement(param(draggingTarget, e), 'drag', e.event);
	      var dropTarget = this.findHover(x, y, draggingTarget).target;
	      var lastDropTarget = this._dropTarget;
	      this._dropTarget = dropTarget;
	
	      if (draggingTarget !== dropTarget) {
	        if (lastDropTarget && dropTarget !== lastDropTarget) {
	          this.dispatchToElement(param(lastDropTarget, e), 'dragleave', e.event);
	        }
	
	        if (dropTarget && dropTarget !== lastDropTarget) {
	          this.dispatchToElement(param(dropTarget, e), 'dragenter', e.event);
	        }
	      }
	    }
	  },
	  _dragEnd: function (e) {
	    var draggingTarget = this._draggingTarget;
	
	    if (draggingTarget) {
	      draggingTarget.dragging = false;
	    }
	
	    this.dispatchToElement(param(draggingTarget, e), 'dragend', e.event);
	
	    if (this._dropTarget) {
	      this.dispatchToElement(param(this._dropTarget, e), 'drop', e.event);
	    }
	
	    this._draggingTarget = null;
	    this._dropTarget = null;
	  }
	};
	
	function param(target, e) {
	  return {
	    target: target,
	    topTarget: e && e.topTarget
	  };
	}
	
	var _default = Draggable;
	module.exports = _default;

/***/ }),
/* 935 */
/***/ (function(module, exports) {

	/**
	 * 事件扩展
	 * @module zrender/mixin/Eventful
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */
	var arrySlice = Array.prototype.slice;
	/**
	 * 事件分发器
	 * @alias module:zrender/mixin/Eventful
	 * @constructor
	 */
	
	var Eventful = function () {
	  this._$handlers = {};
	};
	
	Eventful.prototype = {
	  constructor: Eventful,
	
	  /**
	   * 单次触发绑定，trigger后销毁
	   *
	   * @param {string} event 事件名
	   * @param {Function} handler 响应函数
	   * @param {Object} context
	   */
	  one: function (event, handler, context) {
	    var _h = this._$handlers;
	
	    if (!handler || !event) {
	      return this;
	    }
	
	    if (!_h[event]) {
	      _h[event] = [];
	    }
	
	    for (var i = 0; i < _h[event].length; i++) {
	      if (_h[event][i].h === handler) {
	        return this;
	      }
	    }
	
	    _h[event].push({
	      h: handler,
	      one: true,
	      ctx: context || this
	    });
	
	    return this;
	  },
	
	  /**
	   * 绑定事件
	   * @param {string} event 事件名
	   * @param {Function} handler 事件处理函数
	   * @param {Object} [context]
	   */
	  on: function (event, handler, context) {
	    var _h = this._$handlers;
	
	    if (!handler || !event) {
	      return this;
	    }
	
	    if (!_h[event]) {
	      _h[event] = [];
	    }
	
	    for (var i = 0; i < _h[event].length; i++) {
	      if (_h[event][i].h === handler) {
	        return this;
	      }
	    }
	
	    _h[event].push({
	      h: handler,
	      one: false,
	      ctx: context || this
	    });
	
	    return this;
	  },
	
	  /**
	   * 是否绑定了事件
	   * @param  {string}  event
	   * @return {boolean}
	   */
	  isSilent: function (event) {
	    var _h = this._$handlers;
	    return _h[event] && _h[event].length;
	  },
	
	  /**
	   * 解绑事件
	   * @param {string} event 事件名
	   * @param {Function} [handler] 事件处理函数
	   */
	  off: function (event, handler) {
	    var _h = this._$handlers;
	
	    if (!event) {
	      this._$handlers = {};
	      return this;
	    }
	
	    if (handler) {
	      if (_h[event]) {
	        var newList = [];
	
	        for (var i = 0, l = _h[event].length; i < l; i++) {
	          if (_h[event][i]['h'] != handler) {
	            newList.push(_h[event][i]);
	          }
	        }
	
	        _h[event] = newList;
	      }
	
	      if (_h[event] && _h[event].length === 0) {
	        delete _h[event];
	      }
	    } else {
	      delete _h[event];
	    }
	
	    return this;
	  },
	
	  /**
	   * 事件分发
	   *
	   * @param {string} type 事件类型
	   */
	  trigger: function (type) {
	    if (this._$handlers[type]) {
	      var args = arguments;
	      var argLen = args.length;
	
	      if (argLen > 3) {
	        args = arrySlice.call(args, 1);
	      }
	
	      var _h = this._$handlers[type];
	      var len = _h.length;
	
	      for (var i = 0; i < len;) {
	        // Optimize advise from backbone
	        switch (argLen) {
	          case 1:
	            _h[i]['h'].call(_h[i]['ctx']);
	
	            break;
	
	          case 2:
	            _h[i]['h'].call(_h[i]['ctx'], args[1]);
	
	            break;
	
	          case 3:
	            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);
	
	            break;
	
	          default:
	            // have more than 2 given arguments
	            _h[i]['h'].apply(_h[i]['ctx'], args);
	
	            break;
	        }
	
	        if (_h[i]['one']) {
	          _h.splice(i, 1);
	
	          len--;
	        } else {
	          i++;
	        }
	      }
	    }
	
	    return this;
	  },
	
	  /**
	   * 带有context的事件分发, 最后一个参数是事件回调的context
	   * @param {string} type 事件类型
	   */
	  triggerWithContext: function (type) {
	    if (this._$handlers[type]) {
	      var args = arguments;
	      var argLen = args.length;
	
	      if (argLen > 4) {
	        args = arrySlice.call(args, 1, args.length - 1);
	      }
	
	      var ctx = args[args.length - 1];
	      var _h = this._$handlers[type];
	      var len = _h.length;
	
	      for (var i = 0; i < len;) {
	        // Optimize advise from backbone
	        switch (argLen) {
	          case 1:
	            _h[i]['h'].call(ctx);
	
	            break;
	
	          case 2:
	            _h[i]['h'].call(ctx, args[1]);
	
	            break;
	
	          case 3:
	            _h[i]['h'].call(ctx, args[1], args[2]);
	
	            break;
	
	          default:
	            // have more than 2 given arguments
	            _h[i]['h'].apply(ctx, args);
	
	            break;
	        }
	
	        if (_h[i]['one']) {
	          _h.splice(i, 1);
	
	          len--;
	        } else {
	          i++;
	        }
	      }
	    }
	
	    return this;
	  }
	}; // 对象可以通过 onxxxx 绑定事件
	
	/**
	 * @event module:zrender/mixin/Eventful#onclick
	 * @type {Function}
	 * @default null
	 */
	
	/**
	 * @event module:zrender/mixin/Eventful#onmouseover
	 * @type {Function}
	 * @default null
	 */
	
	/**
	 * @event module:zrender/mixin/Eventful#onmouseout
	 * @type {Function}
	 * @default null
	 */
	
	/**
	 * @event module:zrender/mixin/Eventful#onmousemove
	 * @type {Function}
	 * @default null
	 */
	
	/**
	 * @event module:zrender/mixin/Eventful#onmousewheel
	 * @type {Function}
	 * @default null
	 */
	
	/**
	 * @event module:zrender/mixin/Eventful#onmousedown
	 * @type {Function}
	 * @default null
	 */
	
	/**
	 * @event module:zrender/mixin/Eventful#onmouseup
	 * @type {Function}
	 * @default null
	 */
	
	/**
	 * @event module:zrender/mixin/Eventful#ondrag
	 * @type {Function}
	 * @default null
	 */
	
	/**
	 * @event module:zrender/mixin/Eventful#ondragstart
	 * @type {Function}
	 * @default null
	 */
	
	/**
	 * @event module:zrender/mixin/Eventful#ondragend
	 * @type {Function}
	 * @default null
	 */
	
	/**
	 * @event module:zrender/mixin/Eventful#ondragenter
	 * @type {Function}
	 * @default null
	 */
	
	/**
	 * @event module:zrender/mixin/Eventful#ondragleave
	 * @type {Function}
	 * @default null
	 */
	
	/**
	 * @event module:zrender/mixin/Eventful#ondragover
	 * @type {Function}
	 * @default null
	 */
	
	/**
	 * @event module:zrender/mixin/Eventful#ondrop
	 * @type {Function}
	 * @default null
	 */
	
	var _default = Eventful;
	module.exports = _default;

/***/ }),
/* 936 */
/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(931);
	
	var env = __webpack_require__(930);
	
	var Group = __webpack_require__(937);
	
	var timsort = __webpack_require__(950);
	
	// Use timsort because in most case elements are partially sorted
	// https://jsfiddle.net/pissang/jr4x7mdm/8/
	function shapeCompareFunc(a, b) {
	  if (a.zlevel === b.zlevel) {
	    if (a.z === b.z) {
	      // if (a.z2 === b.z2) {
	      //     // FIXME Slow has renderidx compare
	      //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement
	      //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012
	      //     return a.__renderidx - b.__renderidx;
	      // }
	      return a.z2 - b.z2;
	    }
	
	    return a.z - b.z;
	  }
	
	  return a.zlevel - b.zlevel;
	}
	/**
	 * 内容仓库 (M)
	 * @alias module:zrender/Storage
	 * @constructor
	 */
	
	
	var Storage = function () {
	  // jshint ignore:line
	  this._roots = [];
	  this._displayList = [];
	  this._displayListLen = 0;
	};
	
	Storage.prototype = {
	  constructor: Storage,
	
	  /**
	   * @param  {Function} cb
	   *
	   */
	  traverse: function (cb, context) {
	    for (var i = 0; i < this._roots.length; i++) {
	      this._roots[i].traverse(cb, context);
	    }
	  },
	
	  /**
	   * 返回所有图形的绘制队列
	   * @param {boolean} [update=false] 是否在返回前更新该数组
	   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效
	   *
	   * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}
	   * @return {Array.<module:zrender/graphic/Displayable>}
	   */
	  getDisplayList: function (update, includeIgnore) {
	    includeIgnore = includeIgnore || false;
	
	    if (update) {
	      this.updateDisplayList(includeIgnore);
	    }
	
	    return this._displayList;
	  },
	
	  /**
	   * 更新图形的绘制队列。
	   * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，
	   * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列
	   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组
	   */
	  updateDisplayList: function (includeIgnore) {
	    this._displayListLen = 0;
	    var roots = this._roots;
	    var displayList = this._displayList;
	
	    for (var i = 0, len = roots.length; i < len; i++) {
	      this._updateAndAddDisplayable(roots[i], null, includeIgnore);
	    }
	
	    displayList.length = this._displayListLen;
	    env.canvasSupported && timsort(displayList, shapeCompareFunc);
	  },
	  _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {
	    if (el.ignore && !includeIgnore) {
	      return;
	    }
	
	    el.beforeUpdate();
	
	    if (el.__dirty) {
	      el.update();
	    }
	
	    el.afterUpdate();
	    var userSetClipPath = el.clipPath;
	
	    if (userSetClipPath) {
	      // FIXME 效率影响
	      if (clipPaths) {
	        clipPaths = clipPaths.slice();
	      } else {
	        clipPaths = [];
	      }
	
	      var currentClipPath = userSetClipPath;
	      var parentClipPath = el; // Recursively add clip path
	
	      while (currentClipPath) {
	        // clipPath 的变换是基于使用这个 clipPath 的元素
	        currentClipPath.parent = parentClipPath;
	        currentClipPath.updateTransform();
	        clipPaths.push(currentClipPath);
	        parentClipPath = currentClipPath;
	        currentClipPath = currentClipPath.clipPath;
	      }
	    }
	
	    if (el.isGroup) {
	      var children = el._children;
	
	      for (var i = 0; i < children.length; i++) {
	        var child = children[i]; // Force to mark as dirty if group is dirty
	        // FIXME __dirtyPath ?
	
	        if (el.__dirty) {
	          child.__dirty = true;
	        }
	
	        this._updateAndAddDisplayable(child, clipPaths, includeIgnore);
	      } // Mark group clean here
	
	
	      el.__dirty = false;
	    } else {
	      el.__clipPaths = clipPaths;
	      this._displayList[this._displayListLen++] = el;
	    }
	  },
	
	  /**
	   * 添加图形(Shape)或者组(Group)到根节点
	   * @param {module:zrender/Element} el
	   */
	  addRoot: function (el) {
	    if (el.__storage === this) {
	      return;
	    }
	
	    if (el instanceof Group) {
	      el.addChildrenToStorage(this);
	    }
	
	    this.addToStorage(el);
	
	    this._roots.push(el);
	  },
	
	  /**
	   * 删除指定的图形(Shape)或者组(Group)
	   * @param {string|Array.<string>} [el] 如果为空清空整个Storage
	   */
	  delRoot: function (el) {
	    if (el == null) {
	      // 不指定el清空
	      for (var i = 0; i < this._roots.length; i++) {
	        var root = this._roots[i];
	
	        if (root instanceof Group) {
	          root.delChildrenFromStorage(this);
	        }
	      }
	
	      this._roots = [];
	      this._displayList = [];
	      this._displayListLen = 0;
	      return;
	    }
	
	    if (el instanceof Array) {
	      for (var i = 0, l = el.length; i < l; i++) {
	        this.delRoot(el[i]);
	      }
	
	      return;
	    }
	
	    var idx = util.indexOf(this._roots, el);
	
	    if (idx >= 0) {
	      this.delFromStorage(el);
	
	      this._roots.splice(idx, 1);
	
	      if (el instanceof Group) {
	        el.delChildrenFromStorage(this);
	      }
	    }
	  },
	  addToStorage: function (el) {
	    if (el) {
	      el.__storage = this;
	      el.dirty(false);
	    }
	
	    return this;
	  },
	  delFromStorage: function (el) {
	    if (el) {
	      el.__storage = null;
	    }
	
	    return this;
	  },
	
	  /**
	   * 清空并且释放Storage
	   */
	  dispose: function () {
	    this._renderList = this._roots = null;
	  },
	  displayableSortFunc: shapeCompareFunc
	};
	var _default = Storage;
	module.exports = _default;

/***/ }),
/* 937 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var Element = __webpack_require__(938);
	
	var BoundingRect = __webpack_require__(949);
	
	/**
	 * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上
	 * @module zrender/graphic/Group
	 * @example
	 *     var Group = require('zrender/container/Group');
	 *     var Circle = require('zrender/graphic/shape/Circle');
	 *     var g = new Group();
	 *     g.position[0] = 100;
	 *     g.position[1] = 100;
	 *     g.add(new Circle({
	 *         style: {
	 *             x: 100,
	 *             y: 100,
	 *             r: 20,
	 *         }
	 *     }));
	 *     zr.add(g);
	 */
	
	/**
	 * @alias module:zrender/graphic/Group
	 * @constructor
	 * @extends module:zrender/mixin/Transformable
	 * @extends module:zrender/mixin/Eventful
	 */
	var Group = function (opts) {
	  opts = opts || {};
	  Element.call(this, opts);
	
	  for (var key in opts) {
	    if (opts.hasOwnProperty(key)) {
	      this[key] = opts[key];
	    }
	  }
	
	  this._children = [];
	  this.__storage = null;
	  this.__dirty = true;
	};
	
	Group.prototype = {
	  constructor: Group,
	  isGroup: true,
	
	  /**
	   * @type {string}
	   */
	  type: 'group',
	
	  /**
	   * 所有子孙元素是否响应鼠标事件
	   * @name module:/zrender/container/Group#silent
	   * @type {boolean}
	   * @default false
	   */
	  silent: false,
	
	  /**
	   * @return {Array.<module:zrender/Element>}
	   */
	  children: function () {
	    return this._children.slice();
	  },
	
	  /**
	   * 获取指定 index 的儿子节点
	   * @param  {number} idx
	   * @return {module:zrender/Element}
	   */
	  childAt: function (idx) {
	    return this._children[idx];
	  },
	
	  /**
	   * 获取指定名字的儿子节点
	   * @param  {string} name
	   * @return {module:zrender/Element}
	   */
	  childOfName: function (name) {
	    var children = this._children;
	
	    for (var i = 0; i < children.length; i++) {
	      if (children[i].name === name) {
	        return children[i];
	      }
	    }
	  },
	
	  /**
	   * @return {number}
	   */
	  childCount: function () {
	    return this._children.length;
	  },
	
	  /**
	   * 添加子节点到最后
	   * @param {module:zrender/Element} child
	   */
	  add: function (child) {
	    if (child && child !== this && child.parent !== this) {
	      this._children.push(child);
	
	      this._doAdd(child);
	    }
	
	    return this;
	  },
	
	  /**
	   * 添加子节点在 nextSibling 之前
	   * @param {module:zrender/Element} child
	   * @param {module:zrender/Element} nextSibling
	   */
	  addBefore: function (child, nextSibling) {
	    if (child && child !== this && child.parent !== this && nextSibling && nextSibling.parent === this) {
	      var children = this._children;
	      var idx = children.indexOf(nextSibling);
	
	      if (idx >= 0) {
	        children.splice(idx, 0, child);
	
	        this._doAdd(child);
	      }
	    }
	
	    return this;
	  },
	  _doAdd: function (child) {
	    if (child.parent) {
	      child.parent.remove(child);
	    }
	
	    child.parent = this;
	    var storage = this.__storage;
	    var zr = this.__zr;
	
	    if (storage && storage !== child.__storage) {
	      storage.addToStorage(child);
	
	      if (child instanceof Group) {
	        child.addChildrenToStorage(storage);
	      }
	    }
	
	    zr && zr.refresh();
	  },
	
	  /**
	   * 移除子节点
	   * @param {module:zrender/Element} child
	   */
	  remove: function (child) {
	    var zr = this.__zr;
	    var storage = this.__storage;
	    var children = this._children;
	    var idx = zrUtil.indexOf(children, child);
	
	    if (idx < 0) {
	      return this;
	    }
	
	    children.splice(idx, 1);
	    child.parent = null;
	
	    if (storage) {
	      storage.delFromStorage(child);
	
	      if (child instanceof Group) {
	        child.delChildrenFromStorage(storage);
	      }
	    }
	
	    zr && zr.refresh();
	    return this;
	  },
	
	  /**
	   * 移除所有子节点
	   */
	  removeAll: function () {
	    var children = this._children;
	    var storage = this.__storage;
	    var child;
	    var i;
	
	    for (i = 0; i < children.length; i++) {
	      child = children[i];
	
	      if (storage) {
	        storage.delFromStorage(child);
	
	        if (child instanceof Group) {
	          child.delChildrenFromStorage(storage);
	        }
	      }
	
	      child.parent = null;
	    }
	
	    children.length = 0;
	    return this;
	  },
	
	  /**
	   * 遍历所有子节点
	   * @param  {Function} cb
	   * @param  {}   context
	   */
	  eachChild: function (cb, context) {
	    var children = this._children;
	
	    for (var i = 0; i < children.length; i++) {
	      var child = children[i];
	      cb.call(context, child, i);
	    }
	
	    return this;
	  },
	
	  /**
	   * 深度优先遍历所有子孙节点
	   * @param  {Function} cb
	   * @param  {}   context
	   */
	  traverse: function (cb, context) {
	    for (var i = 0; i < this._children.length; i++) {
	      var child = this._children[i];
	      cb.call(context, child);
	
	      if (child.type === 'group') {
	        child.traverse(cb, context);
	      }
	    }
	
	    return this;
	  },
	  addChildrenToStorage: function (storage) {
	    for (var i = 0; i < this._children.length; i++) {
	      var child = this._children[i];
	      storage.addToStorage(child);
	
	      if (child instanceof Group) {
	        child.addChildrenToStorage(storage);
	      }
	    }
	  },
	  delChildrenFromStorage: function (storage) {
	    for (var i = 0; i < this._children.length; i++) {
	      var child = this._children[i];
	      storage.delFromStorage(child);
	
	      if (child instanceof Group) {
	        child.delChildrenFromStorage(storage);
	      }
	    }
	  },
	  dirty: function () {
	    this.__dirty = true;
	    this.__zr && this.__zr.refresh();
	    return this;
	  },
	
	  /**
	   * @return {module:zrender/core/BoundingRect}
	   */
	  getBoundingRect: function (includeChildren) {
	    // TODO Caching
	    var rect = null;
	    var tmpRect = new BoundingRect(0, 0, 0, 0);
	    var children = includeChildren || this._children;
	    var tmpMat = [];
	
	    for (var i = 0; i < children.length; i++) {
	      var child = children[i];
	
	      if (child.ignore || child.invisible) {
	        continue;
	      }
	
	      var childRect = child.getBoundingRect();
	      var transform = child.getLocalTransform(tmpMat); // TODO
	      // The boundingRect cacluated by transforming original
	      // rect may be bigger than the actual bundingRect when rotation
	      // is used. (Consider a circle rotated aginst its center, where
	      // the actual boundingRect should be the same as that not be
	      // rotated.) But we can not find better approach to calculate
	      // actual boundingRect yet, considering performance.
	
	      if (transform) {
	        tmpRect.copy(childRect);
	        tmpRect.applyTransform(transform);
	        rect = rect || tmpRect.clone();
	        rect.union(tmpRect);
	      } else {
	        rect = rect || childRect.clone();
	        rect.union(childRect);
	      }
	    }
	
	    return rect || tmpRect;
	  }
	};
	zrUtil.inherits(Group, Element);
	var _default = Group;
	module.exports = _default;

/***/ }),
/* 938 */
/***/ (function(module, exports, __webpack_require__) {

	var guid = __webpack_require__(929);
	
	var Eventful = __webpack_require__(935);
	
	var Transformable = __webpack_require__(939);
	
	var Animatable = __webpack_require__(941);
	
	var zrUtil = __webpack_require__(931);
	
	/**
	 * @alias module:zrender/Element
	 * @constructor
	 * @extends {module:zrender/mixin/Animatable}
	 * @extends {module:zrender/mixin/Transformable}
	 * @extends {module:zrender/mixin/Eventful}
	 */
	var Element = function (opts) {
	  // jshint ignore:line
	  Transformable.call(this, opts);
	  Eventful.call(this, opts);
	  Animatable.call(this, opts);
	  /**
	   * 画布元素ID
	   * @type {string}
	   */
	
	  this.id = opts.id || guid();
	};
	
	Element.prototype = {
	  /**
	   * 元素类型
	   * Element type
	   * @type {string}
	   */
	  type: 'element',
	
	  /**
	   * 元素名字
	   * Element name
	   * @type {string}
	   */
	  name: '',
	
	  /**
	   * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值
	   * ZRender instance will be assigned when element is associated with zrender
	   * @name module:/zrender/Element#__zr
	   * @type {module:zrender/ZRender}
	   */
	  __zr: null,
	
	  /**
	   * 图形是否忽略，为true时忽略图形的绘制以及事件触发
	   * If ignore drawing and events of the element object
	   * @name module:/zrender/Element#ignore
	   * @type {boolean}
	   * @default false
	   */
	  ignore: false,
	
	  /**
	   * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪
	   * 该路径会继承被裁减对象的变换
	   * @type {module:zrender/graphic/Path}
	   * @see http://www.w3.org/TR/2dcontext/#clipping-region
	   * @readOnly
	   */
	  clipPath: null,
	
	  /**
	   * 是否是 Group
	   * @type {boolean}
	   */
	  isGroup: false,
	
	  /**
	   * Drift element
	   * @param  {number} dx dx on the global space
	   * @param  {number} dy dy on the global space
	   */
	  drift: function (dx, dy) {
	    switch (this.draggable) {
	      case 'horizontal':
	        dy = 0;
	        break;
	
	      case 'vertical':
	        dx = 0;
	        break;
	    }
	
	    var m = this.transform;
	
	    if (!m) {
	      m = this.transform = [1, 0, 0, 1, 0, 0];
	    }
	
	    m[4] += dx;
	    m[5] += dy;
	    this.decomposeTransform();
	    this.dirty(false);
	  },
	
	  /**
	   * Hook before update
	   */
	  beforeUpdate: function () {},
	
	  /**
	   * Hook after update
	   */
	  afterUpdate: function () {},
	
	  /**
	   * Update each frame
	   */
	  update: function () {
	    this.updateTransform();
	  },
	
	  /**
	   * @param  {Function} cb
	   * @param  {}   context
	   */
	  traverse: function (cb, context) {},
	
	  /**
	   * @protected
	   */
	  attrKV: function (key, value) {
	    if (key === 'position' || key === 'scale' || key === 'origin') {
	      // Copy the array
	      if (value) {
	        var target = this[key];
	
	        if (!target) {
	          target = this[key] = [];
	        }
	
	        target[0] = value[0];
	        target[1] = value[1];
	      }
	    } else {
	      this[key] = value;
	    }
	  },
	
	  /**
	   * Hide the element
	   */
	  hide: function () {
	    this.ignore = true;
	    this.__zr && this.__zr.refresh();
	  },
	
	  /**
	   * Show the element
	   */
	  show: function () {
	    this.ignore = false;
	    this.__zr && this.__zr.refresh();
	  },
	
	  /**
	   * @param {string|Object} key
	   * @param {*} value
	   */
	  attr: function (key, value) {
	    if (typeof key === 'string') {
	      this.attrKV(key, value);
	    } else if (zrUtil.isObject(key)) {
	      for (var name in key) {
	        if (key.hasOwnProperty(name)) {
	          this.attrKV(name, key[name]);
	        }
	      }
	    }
	
	    this.dirty(false);
	    return this;
	  },
	
	  /**
	   * @param {module:zrender/graphic/Path} clipPath
	   */
	  setClipPath: function (clipPath) {
	    var zr = this.__zr;
	
	    if (zr) {
	      clipPath.addSelfToZr(zr);
	    } // Remove previous clip path
	
	
	    if (this.clipPath && this.clipPath !== clipPath) {
	      this.removeClipPath();
	    }
	
	    this.clipPath = clipPath;
	    clipPath.__zr = zr;
	    clipPath.__clipTarget = this;
	    this.dirty(false);
	  },
	
	  /**
	   */
	  removeClipPath: function () {
	    var clipPath = this.clipPath;
	
	    if (clipPath) {
	      if (clipPath.__zr) {
	        clipPath.removeSelfFromZr(clipPath.__zr);
	      }
	
	      clipPath.__zr = null;
	      clipPath.__clipTarget = null;
	      this.clipPath = null;
	      this.dirty(false);
	    }
	  },
	
	  /**
	   * Add self from zrender instance.
	   * Not recursively because it will be invoked when element added to storage.
	   * @param {module:zrender/ZRender} zr
	   */
	  addSelfToZr: function (zr) {
	    this.__zr = zr; // 添加动画
	
	    var animators = this.animators;
	
	    if (animators) {
	      for (var i = 0; i < animators.length; i++) {
	        zr.animation.addAnimator(animators[i]);
	      }
	    }
	
	    if (this.clipPath) {
	      this.clipPath.addSelfToZr(zr);
	    }
	  },
	
	  /**
	   * Remove self from zrender instance.
	   * Not recursively because it will be invoked when element added to storage.
	   * @param {module:zrender/ZRender} zr
	   */
	  removeSelfFromZr: function (zr) {
	    this.__zr = null; // 移除动画
	
	    var animators = this.animators;
	
	    if (animators) {
	      for (var i = 0; i < animators.length; i++) {
	        zr.animation.removeAnimator(animators[i]);
	      }
	    }
	
	    if (this.clipPath) {
	      this.clipPath.removeSelfFromZr(zr);
	    }
	  }
	};
	zrUtil.mixin(Element, Animatable);
	zrUtil.mixin(Element, Transformable);
	zrUtil.mixin(Element, Eventful);
	var _default = Element;
	module.exports = _default;

/***/ }),
/* 939 */
/***/ (function(module, exports, __webpack_require__) {

	var matrix = __webpack_require__(940);
	
	var vector = __webpack_require__(933);
	
	/**
	 * 提供变换扩展
	 * @module zrender/mixin/Transformable
	 * @author pissang (https://www.github.com/pissang)
	 */
	var mIdentity = matrix.identity;
	var EPSILON = 5e-5;
	
	function isNotAroundZero(val) {
	  return val > EPSILON || val < -EPSILON;
	}
	/**
	 * @alias module:zrender/mixin/Transformable
	 * @constructor
	 */
	
	
	var Transformable = function (opts) {
	  opts = opts || {}; // If there are no given position, rotation, scale
	
	  if (!opts.position) {
	    /**
	     * 平移
	     * @type {Array.<number>}
	     * @default [0, 0]
	     */
	    this.position = [0, 0];
	  }
	
	  if (opts.rotation == null) {
	    /**
	     * 旋转
	     * @type {Array.<number>}
	     * @default 0
	     */
	    this.rotation = 0;
	  }
	
	  if (!opts.scale) {
	    /**
	     * 缩放
	     * @type {Array.<number>}
	     * @default [1, 1]
	     */
	    this.scale = [1, 1];
	  }
	  /**
	   * 旋转和缩放的原点
	   * @type {Array.<number>}
	   * @default null
	   */
	
	
	  this.origin = this.origin || null;
	};
	
	var transformableProto = Transformable.prototype;
	transformableProto.transform = null;
	/**
	 * 判断是否需要有坐标变换
	 * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵
	 */
	
	transformableProto.needLocalTransform = function () {
	  return isNotAroundZero(this.rotation) || isNotAroundZero(this.position[0]) || isNotAroundZero(this.position[1]) || isNotAroundZero(this.scale[0] - 1) || isNotAroundZero(this.scale[1] - 1);
	};
	
	transformableProto.updateTransform = function () {
	  var parent = this.parent;
	  var parentHasTransform = parent && parent.transform;
	  var needLocalTransform = this.needLocalTransform();
	  var m = this.transform;
	
	  if (!(needLocalTransform || parentHasTransform)) {
	    m && mIdentity(m);
	    return;
	  }
	
	  m = m || matrix.create();
	
	  if (needLocalTransform) {
	    this.getLocalTransform(m);
	  } else {
	    mIdentity(m);
	  } // 应用父节点变换
	
	
	  if (parentHasTransform) {
	    if (needLocalTransform) {
	      matrix.mul(m, parent.transform, m);
	    } else {
	      matrix.copy(m, parent.transform);
	    }
	  } // 保存这个变换矩阵
	
	
	  this.transform = m;
	  this.invTransform = this.invTransform || matrix.create();
	  matrix.invert(this.invTransform, m);
	};
	
	transformableProto.getLocalTransform = function (m) {
	  return Transformable.getLocalTransform(this, m);
	};
	/**
	 * 将自己的transform应用到context上
	 * @param {CanvasRenderingContext2D} ctx
	 */
	
	
	transformableProto.setTransform = function (ctx) {
	  var m = this.transform;
	  var dpr = ctx.dpr || 1;
	
	  if (m) {
	    ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);
	  } else {
	    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
	  }
	};
	
	transformableProto.restoreTransform = function (ctx) {
	  var dpr = ctx.dpr || 1;
	  ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
	};
	
	var tmpTransform = [];
	/**
	 * 分解`transform`矩阵到`position`, `rotation`, `scale`
	 */
	
	transformableProto.decomposeTransform = function () {
	  if (!this.transform) {
	    return;
	  }
	
	  var parent = this.parent;
	  var m = this.transform;
	
	  if (parent && parent.transform) {
	    // Get local transform and decompose them to position, scale, rotation
	    matrix.mul(tmpTransform, parent.invTransform, m);
	    m = tmpTransform;
	  }
	
	  var sx = m[0] * m[0] + m[1] * m[1];
	  var sy = m[2] * m[2] + m[3] * m[3];
	  var position = this.position;
	  var scale = this.scale;
	
	  if (isNotAroundZero(sx - 1)) {
	    sx = Math.sqrt(sx);
	  }
	
	  if (isNotAroundZero(sy - 1)) {
	    sy = Math.sqrt(sy);
	  }
	
	  if (m[0] < 0) {
	    sx = -sx;
	  }
	
	  if (m[3] < 0) {
	    sy = -sy;
	  }
	
	  position[0] = m[4];
	  position[1] = m[5];
	  scale[0] = sx;
	  scale[1] = sy;
	  this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);
	};
	/**
	 * Get global scale
	 * @return {Array.<number>}
	 */
	
	
	transformableProto.getGlobalScale = function () {
	  var m = this.transform;
	
	  if (!m) {
	    return [1, 1];
	  }
	
	  var sx = Math.sqrt(m[0] * m[0] + m[1] * m[1]);
	  var sy = Math.sqrt(m[2] * m[2] + m[3] * m[3]);
	
	  if (m[0] < 0) {
	    sx = -sx;
	  }
	
	  if (m[3] < 0) {
	    sy = -sy;
	  }
	
	  return [sx, sy];
	};
	/**
	 * 变换坐标位置到 shape 的局部坐标空间
	 * @method
	 * @param {number} x
	 * @param {number} y
	 * @return {Array.<number>}
	 */
	
	
	transformableProto.transformCoordToLocal = function (x, y) {
	  var v2 = [x, y];
	  var invTransform = this.invTransform;
	
	  if (invTransform) {
	    vector.applyTransform(v2, v2, invTransform);
	  }
	
	  return v2;
	};
	/**
	 * 变换局部坐标位置到全局坐标空间
	 * @method
	 * @param {number} x
	 * @param {number} y
	 * @return {Array.<number>}
	 */
	
	
	transformableProto.transformCoordToGlobal = function (x, y) {
	  var v2 = [x, y];
	  var transform = this.transform;
	
	  if (transform) {
	    vector.applyTransform(v2, v2, transform);
	  }
	
	  return v2;
	};
	/**
	 * @static
	 * @param {Object} target
	 * @param {Array.<number>} target.origin
	 * @param {number} target.rotation
	 * @param {Array.<number>} target.position
	 * @param {Array.<number>} [m]
	 */
	
	
	Transformable.getLocalTransform = function (target, m) {
	  m = m || [];
	  mIdentity(m);
	  var origin = target.origin;
	  var scale = target.scale || [1, 1];
	  var rotation = target.rotation || 0;
	  var position = target.position || [0, 0];
	
	  if (origin) {
	    // Translate to origin
	    m[4] -= origin[0];
	    m[5] -= origin[1];
	  }
	
	  matrix.scale(m, m, scale);
	
	  if (rotation) {
	    matrix.rotate(m, m, rotation);
	  }
	
	  if (origin) {
	    // Translate back from origin
	    m[4] += origin[0];
	    m[5] += origin[1];
	  }
	
	  m[4] += position[0];
	  m[5] += position[1];
	  return m;
	};
	
	var _default = Transformable;
	module.exports = _default;

/***/ }),
/* 940 */
/***/ (function(module, exports) {

	/**
	 * 3x2矩阵操作类
	 * @exports zrender/tool/matrix
	 */
	var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
	/**
	 * Create a identity matrix.
	 * @return {Float32Array|Array.<number>}
	 */
	
	function create() {
	  var out = new ArrayCtor(6);
	  identity(out);
	  return out;
	}
	/**
	 * 设置矩阵为单位矩阵
	 * @param {Float32Array|Array.<number>} out
	 */
	
	
	function identity(out) {
	  out[0] = 1;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 1;
	  out[4] = 0;
	  out[5] = 0;
	  return out;
	}
	/**
	 * 复制矩阵
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} m
	 */
	
	
	function copy(out, m) {
	  out[0] = m[0];
	  out[1] = m[1];
	  out[2] = m[2];
	  out[3] = m[3];
	  out[4] = m[4];
	  out[5] = m[5];
	  return out;
	}
	/**
	 * 矩阵相乘
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} m1
	 * @param {Float32Array|Array.<number>} m2
	 */
	
	
	function mul(out, m1, m2) {
	  // Consider matrix.mul(m, m2, m);
	  // where out is the same as m2.
	  // So use temp variable to escape error.
	  var out0 = m1[0] * m2[0] + m1[2] * m2[1];
	  var out1 = m1[1] * m2[0] + m1[3] * m2[1];
	  var out2 = m1[0] * m2[2] + m1[2] * m2[3];
	  var out3 = m1[1] * m2[2] + m1[3] * m2[3];
	  var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
	  var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
	  out[0] = out0;
	  out[1] = out1;
	  out[2] = out2;
	  out[3] = out3;
	  out[4] = out4;
	  out[5] = out5;
	  return out;
	}
	/**
	 * 平移变换
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} a
	 * @param {Float32Array|Array.<number>} v
	 */
	
	
	function translate(out, a, v) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  out[4] = a[4] + v[0];
	  out[5] = a[5] + v[1];
	  return out;
	}
	/**
	 * 旋转变换
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} a
	 * @param {number} rad
	 */
	
	
	function rotate(out, a, rad) {
	  var aa = a[0];
	  var ac = a[2];
	  var atx = a[4];
	  var ab = a[1];
	  var ad = a[3];
	  var aty = a[5];
	  var st = Math.sin(rad);
	  var ct = Math.cos(rad);
	  out[0] = aa * ct + ab * st;
	  out[1] = -aa * st + ab * ct;
	  out[2] = ac * ct + ad * st;
	  out[3] = -ac * st + ct * ad;
	  out[4] = ct * atx + st * aty;
	  out[5] = ct * aty - st * atx;
	  return out;
	}
	/**
	 * 缩放变换
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} a
	 * @param {Float32Array|Array.<number>} v
	 */
	
	
	function scale(out, a, v) {
	  var vx = v[0];
	  var vy = v[1];
	  out[0] = a[0] * vx;
	  out[1] = a[1] * vy;
	  out[2] = a[2] * vx;
	  out[3] = a[3] * vy;
	  out[4] = a[4] * vx;
	  out[5] = a[5] * vy;
	  return out;
	}
	/**
	 * 求逆矩阵
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} a
	 */
	
	
	function invert(out, a) {
	  var aa = a[0];
	  var ac = a[2];
	  var atx = a[4];
	  var ab = a[1];
	  var ad = a[3];
	  var aty = a[5];
	  var det = aa * ad - ab * ac;
	
	  if (!det) {
	    return null;
	  }
	
	  det = 1.0 / det;
	  out[0] = ad * det;
	  out[1] = -ab * det;
	  out[2] = -ac * det;
	  out[3] = aa * det;
	  out[4] = (ac * aty - ad * atx) * det;
	  out[5] = (ab * atx - aa * aty) * det;
	  return out;
	}
	/**
	 * Clone a new matrix.
	 * @param {Float32Array|Array.<number>} a
	 */
	
	
	function clone(a) {
	  var b = create();
	  copy(b, a);
	  return b;
	}
	
	exports.create = create;
	exports.identity = identity;
	exports.copy = copy;
	exports.mul = mul;
	exports.translate = translate;
	exports.rotate = rotate;
	exports.scale = scale;
	exports.invert = invert;
	exports.clone = clone;

/***/ }),
/* 941 */
/***/ (function(module, exports, __webpack_require__) {

	var Animator = __webpack_require__(942);
	
	var log = __webpack_require__(947);
	
	var _util = __webpack_require__(931);
	
	var isString = _util.isString;
	var isFunction = _util.isFunction;
	var isObject = _util.isObject;
	var isArrayLike = _util.isArrayLike;
	var indexOf = _util.indexOf;
	
	/**
	 * @alias modue:zrender/mixin/Animatable
	 * @constructor
	 */
	var Animatable = function () {
	  /**
	   * @type {Array.<module:zrender/animation/Animator>}
	   * @readOnly
	   */
	  this.animators = [];
	};
	
	Animatable.prototype = {
	  constructor: Animatable,
	
	  /**
	   * 动画
	   *
	   * @param {string} path The path to fetch value from object, like 'a.b.c'.
	   * @param {boolean} [loop] Whether to loop animation.
	   * @return {module:zrender/animation/Animator}
	   * @example:
	   *     el.animate('style', false)
	   *         .when(1000, {x: 10} )
	   *         .done(function(){ // Animation done })
	   *         .start()
	   */
	  animate: function (path, loop) {
	    var target;
	    var animatingShape = false;
	    var el = this;
	    var zr = this.__zr;
	
	    if (path) {
	      var pathSplitted = path.split('.');
	      var prop = el; // If animating shape
	
	      animatingShape = pathSplitted[0] === 'shape';
	
	      for (var i = 0, l = pathSplitted.length; i < l; i++) {
	        if (!prop) {
	          continue;
	        }
	
	        prop = prop[pathSplitted[i]];
	      }
	
	      if (prop) {
	        target = prop;
	      }
	    } else {
	      target = el;
	    }
	
	    if (!target) {
	      log('Property "' + path + '" is not existed in element ' + el.id);
	      return;
	    }
	
	    var animators = el.animators;
	    var animator = new Animator(target, loop);
	    animator.during(function (target) {
	      el.dirty(animatingShape);
	    }).done(function () {
	      // FIXME Animator will not be removed if use `Animator#stop` to stop animation
	      animators.splice(indexOf(animators, animator), 1);
	    });
	    animators.push(animator); // If animate after added to the zrender
	
	    if (zr) {
	      zr.animation.addAnimator(animator);
	    }
	
	    return animator;
	  },
	
	  /**
	   * 停止动画
	   * @param {boolean} forwardToLast If move to last frame before stop
	   */
	  stopAnimation: function (forwardToLast) {
	    var animators = this.animators;
	    var len = animators.length;
	
	    for (var i = 0; i < len; i++) {
	      animators[i].stop(forwardToLast);
	    }
	
	    animators.length = 0;
	    return this;
	  },
	
	  /**
	   * Caution: this method will stop previous animation.
	   * So do not use this method to one element twice before
	   * animation starts, unless you know what you are doing.
	   * @param {Object} target
	   * @param {number} [time=500] Time in ms
	   * @param {string} [easing='linear']
	   * @param {number} [delay=0]
	   * @param {Function} [callback]
	   * @param {Function} [forceAnimate] Prevent stop animation and callback
	   *        immediently when target values are the same as current values.
	   *
	   * @example
	   *  // Animate position
	   *  el.animateTo({
	   *      position: [10, 10]
	   *  }, function () { // done })
	   *
	   *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing
	   *  el.animateTo({
	   *      shape: {
	   *          width: 500
	   *      },
	   *      style: {
	   *          fill: 'red'
	   *      }
	   *      position: [10, 10]
	   *  }, 100, 100, 'cubicOut', function () { // done })
	   */
	  // TODO Return animation key
	  animateTo: function (target, time, delay, easing, callback, forceAnimate) {
	    // animateTo(target, time, easing, callback);
	    if (isString(delay)) {
	      callback = easing;
	      easing = delay;
	      delay = 0;
	    } // animateTo(target, time, delay, callback);
	    else if (isFunction(easing)) {
	        callback = easing;
	        easing = 'linear';
	        delay = 0;
	      } // animateTo(target, time, callback);
	      else if (isFunction(delay)) {
	          callback = delay;
	          delay = 0;
	        } // animateTo(target, callback)
	        else if (isFunction(time)) {
	            callback = time;
	            time = 500;
	          } // animateTo(target)
	          else if (!time) {
	              time = 500;
	            } // Stop all previous animations
	
	
	    this.stopAnimation();
	
	    this._animateToShallow('', this, target, time, delay); // Animators may be removed immediately after start
	    // if there is nothing to animate
	
	
	    var animators = this.animators.slice();
	    var count = animators.length;
	
	    function done() {
	      count--;
	
	      if (!count) {
	        callback && callback();
	      }
	    } // No animators. This should be checked before animators[i].start(),
	    // because 'done' may be executed immediately if no need to animate.
	
	
	    if (!count) {
	      callback && callback();
	    } // Start after all animators created
	    // Incase any animator is done immediately when all animation properties are not changed
	
	
	    for (var i = 0; i < animators.length; i++) {
	      animators[i].done(done).start(easing, forceAnimate);
	    }
	  },
	
	  /**
	   * @private
	   * @param {string} path=''
	   * @param {Object} source=this
	   * @param {Object} target
	   * @param {number} [time=500]
	   * @param {number} [delay=0]
	   *
	   * @example
	   *  // Animate position
	   *  el._animateToShallow({
	   *      position: [10, 10]
	   *  })
	   *
	   *  // Animate shape, style and position in 100ms, delayed 100ms
	   *  el._animateToShallow({
	   *      shape: {
	   *          width: 500
	   *      },
	   *      style: {
	   *          fill: 'red'
	   *      }
	   *      position: [10, 10]
	   *  }, 100, 100)
	   */
	  _animateToShallow: function (path, source, target, time, delay) {
	    var objShallow = {};
	    var propertyCount = 0;
	
	    for (var name in target) {
	      if (!target.hasOwnProperty(name)) {
	        continue;
	      }
	
	      if (source[name] != null) {
	        if (isObject(target[name]) && !isArrayLike(target[name])) {
	          this._animateToShallow(path ? path + '.' + name : name, source[name], target[name], time, delay);
	        } else {
	          objShallow[name] = target[name];
	          propertyCount++;
	        }
	      } else if (target[name] != null) {
	        // Attr directly if not has property
	        // FIXME, if some property not needed for element ?
	        if (!path) {
	          this.attr(name, target[name]);
	        } else {
	          // Shape or style
	          var props = {};
	          props[path] = {};
	          props[path][name] = target[name];
	          this.attr(props);
	        }
	      }
	    }
	
	    if (propertyCount > 0) {
	      this.animate(path, false).when(time == null ? 500 : time, objShallow).delay(delay || 0);
	    }
	
	    return this;
	  }
	};
	var _default = Animatable;
	module.exports = _default;

/***/ }),
/* 942 */
/***/ (function(module, exports, __webpack_require__) {

	var Clip = __webpack_require__(943);
	
	var color = __webpack_require__(945);
	
	var _util = __webpack_require__(931);
	
	var isArrayLike = _util.isArrayLike;
	
	/**
	 * @module echarts/animation/Animator
	 */
	var arraySlice = Array.prototype.slice;
	
	function defaultGetter(target, key) {
	  return target[key];
	}
	
	function defaultSetter(target, key, value) {
	  target[key] = value;
	}
	/**
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} percent
	 * @return {number}
	 */
	
	
	function interpolateNumber(p0, p1, percent) {
	  return (p1 - p0) * percent + p0;
	}
	/**
	 * @param  {string} p0
	 * @param  {string} p1
	 * @param  {number} percent
	 * @return {string}
	 */
	
	
	function interpolateString(p0, p1, percent) {
	  return percent > 0.5 ? p1 : p0;
	}
	/**
	 * @param  {Array} p0
	 * @param  {Array} p1
	 * @param  {number} percent
	 * @param  {Array} out
	 * @param  {number} arrDim
	 */
	
	
	function interpolateArray(p0, p1, percent, out, arrDim) {
	  var len = p0.length;
	
	  if (arrDim == 1) {
	    for (var i = 0; i < len; i++) {
	      out[i] = interpolateNumber(p0[i], p1[i], percent);
	    }
	  } else {
	    var len2 = len && p0[0].length;
	
	    for (var i = 0; i < len; i++) {
	      for (var j = 0; j < len2; j++) {
	        out[i][j] = interpolateNumber(p0[i][j], p1[i][j], percent);
	      }
	    }
	  }
	} // arr0 is source array, arr1 is target array.
	// Do some preprocess to avoid error happened when interpolating from arr0 to arr1
	
	
	function fillArr(arr0, arr1, arrDim) {
	  var arr0Len = arr0.length;
	  var arr1Len = arr1.length;
	
	  if (arr0Len !== arr1Len) {
	    // FIXME Not work for TypedArray
	    var isPreviousLarger = arr0Len > arr1Len;
	
	    if (isPreviousLarger) {
	      // Cut the previous
	      arr0.length = arr1Len;
	    } else {
	      // Fill the previous
	      for (var i = arr0Len; i < arr1Len; i++) {
	        arr0.push(arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i]));
	      }
	    }
	  } // Handling NaN value
	
	
	  var len2 = arr0[0] && arr0[0].length;
	
	  for (var i = 0; i < arr0.length; i++) {
	    if (arrDim === 1) {
	      if (isNaN(arr0[i])) {
	        arr0[i] = arr1[i];
	      }
	    } else {
	      for (var j = 0; j < len2; j++) {
	        if (isNaN(arr0[i][j])) {
	          arr0[i][j] = arr1[i][j];
	        }
	      }
	    }
	  }
	}
	/**
	 * @param  {Array} arr0
	 * @param  {Array} arr1
	 * @param  {number} arrDim
	 * @return {boolean}
	 */
	
	
	function isArraySame(arr0, arr1, arrDim) {
	  if (arr0 === arr1) {
	    return true;
	  }
	
	  var len = arr0.length;
	
	  if (len !== arr1.length) {
	    return false;
	  }
	
	  if (arrDim === 1) {
	    for (var i = 0; i < len; i++) {
	      if (arr0[i] !== arr1[i]) {
	        return false;
	      }
	    }
	  } else {
	    var len2 = arr0[0].length;
	
	    for (var i = 0; i < len; i++) {
	      for (var j = 0; j < len2; j++) {
	        if (arr0[i][j] !== arr1[i][j]) {
	          return false;
	        }
	      }
	    }
	  }
	
	  return true;
	}
	/**
	 * Catmull Rom interpolate array
	 * @param  {Array} p0
	 * @param  {Array} p1
	 * @param  {Array} p2
	 * @param  {Array} p3
	 * @param  {number} t
	 * @param  {number} t2
	 * @param  {number} t3
	 * @param  {Array} out
	 * @param  {number} arrDim
	 */
	
	
	function catmullRomInterpolateArray(p0, p1, p2, p3, t, t2, t3, out, arrDim) {
	  var len = p0.length;
	
	  if (arrDim == 1) {
	    for (var i = 0; i < len; i++) {
	      out[i] = catmullRomInterpolate(p0[i], p1[i], p2[i], p3[i], t, t2, t3);
	    }
	  } else {
	    var len2 = p0[0].length;
	
	    for (var i = 0; i < len; i++) {
	      for (var j = 0; j < len2; j++) {
	        out[i][j] = catmullRomInterpolate(p0[i][j], p1[i][j], p2[i][j], p3[i][j], t, t2, t3);
	      }
	    }
	  }
	}
	/**
	 * Catmull Rom interpolate number
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @param  {number} t2
	 * @param  {number} t3
	 * @return {number}
	 */
	
	
	function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
	  var v0 = (p2 - p0) * 0.5;
	  var v1 = (p3 - p1) * 0.5;
	  return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
	}
	
	function cloneValue(value) {
	  if (isArrayLike(value)) {
	    var len = value.length;
	
	    if (isArrayLike(value[0])) {
	      var ret = [];
	
	      for (var i = 0; i < len; i++) {
	        ret.push(arraySlice.call(value[i]));
	      }
	
	      return ret;
	    }
	
	    return arraySlice.call(value);
	  }
	
	  return value;
	}
	
	function rgba2String(rgba) {
	  rgba[0] = Math.floor(rgba[0]);
	  rgba[1] = Math.floor(rgba[1]);
	  rgba[2] = Math.floor(rgba[2]);
	  return 'rgba(' + rgba.join(',') + ')';
	}
	
	function getArrayDim(keyframes) {
	  var lastValue = keyframes[keyframes.length - 1].value;
	  return isArrayLike(lastValue && lastValue[0]) ? 2 : 1;
	}
	
	function createTrackClip(animator, easing, oneTrackDone, keyframes, propName, forceAnimate) {
	  var getter = animator._getter;
	  var setter = animator._setter;
	  var useSpline = easing === 'spline';
	  var trackLen = keyframes.length;
	
	  if (!trackLen) {
	    return;
	  } // Guess data type
	
	
	  var firstVal = keyframes[0].value;
	  var isValueArray = isArrayLike(firstVal);
	  var isValueColor = false;
	  var isValueString = false; // For vertices morphing
	
	  var arrDim = isValueArray ? getArrayDim(keyframes) : 0;
	  var trackMaxTime; // Sort keyframe as ascending
	
	  keyframes.sort(function (a, b) {
	    return a.time - b.time;
	  });
	  trackMaxTime = keyframes[trackLen - 1].time; // Percents of each keyframe
	
	  var kfPercents = []; // Value of each keyframe
	
	  var kfValues = [];
	  var prevValue = keyframes[0].value;
	  var isAllValueEqual = true;
	
	  for (var i = 0; i < trackLen; i++) {
	    kfPercents.push(keyframes[i].time / trackMaxTime); // Assume value is a color when it is a string
	
	    var value = keyframes[i].value; // Check if value is equal, deep check if value is array
	
	    if (!(isValueArray && isArraySame(value, prevValue, arrDim) || !isValueArray && value === prevValue)) {
	      isAllValueEqual = false;
	    }
	
	    prevValue = value; // Try converting a string to a color array
	
	    if (typeof value == 'string') {
	      var colorArray = color.parse(value);
	
	      if (colorArray) {
	        value = colorArray;
	        isValueColor = true;
	      } else {
	        isValueString = true;
	      }
	    }
	
	    kfValues.push(value);
	  }
	
	  if (!forceAnimate && isAllValueEqual) {
	    return;
	  }
	
	  var lastValue = kfValues[trackLen - 1]; // Polyfill array and NaN value
	
	  for (var i = 0; i < trackLen - 1; i++) {
	    if (isValueArray) {
	      fillArr(kfValues[i], lastValue, arrDim);
	    } else {
	      if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {
	        kfValues[i] = lastValue;
	      }
	    }
	  }
	
	  isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim); // Cache the key of last frame to speed up when
	  // animation playback is sequency
	
	  var lastFrame = 0;
	  var lastFramePercent = 0;
	  var start;
	  var w;
	  var p0;
	  var p1;
	  var p2;
	  var p3;
	
	  if (isValueColor) {
	    var rgba = [0, 0, 0, 0];
	  }
	
	  var onframe = function (target, percent) {
	    // Find the range keyframes
	    // kf1-----kf2---------current--------kf3
	    // find kf2 and kf3 and do interpolation
	    var frame; // In the easing function like elasticOut, percent may less than 0
	
	    if (percent < 0) {
	      frame = 0;
	    } else if (percent < lastFramePercent) {
	      // Start from next key
	      // PENDING start from lastFrame ?
	      start = Math.min(lastFrame + 1, trackLen - 1);
	
	      for (frame = start; frame >= 0; frame--) {
	        if (kfPercents[frame] <= percent) {
	          break;
	        }
	      } // PENDING really need to do this ?
	
	
	      frame = Math.min(frame, trackLen - 2);
	    } else {
	      for (frame = lastFrame; frame < trackLen; frame++) {
	        if (kfPercents[frame] > percent) {
	          break;
	        }
	      }
	
	      frame = Math.min(frame - 1, trackLen - 2);
	    }
	
	    lastFrame = frame;
	    lastFramePercent = percent;
	    var range = kfPercents[frame + 1] - kfPercents[frame];
	
	    if (range === 0) {
	      return;
	    } else {
	      w = (percent - kfPercents[frame]) / range;
	    }
	
	    if (useSpline) {
	      p1 = kfValues[frame];
	      p0 = kfValues[frame === 0 ? frame : frame - 1];
	      p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];
	      p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];
	
	      if (isValueArray) {
	        catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, getter(target, propName), arrDim);
	      } else {
	        var value;
	
	        if (isValueColor) {
	          value = catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, rgba, 1);
	          value = rgba2String(rgba);
	        } else if (isValueString) {
	          // String is step(0.5)
	          return interpolateString(p1, p2, w);
	        } else {
	          value = catmullRomInterpolate(p0, p1, p2, p3, w, w * w, w * w * w);
	        }
	
	        setter(target, propName, value);
	      }
	    } else {
	      if (isValueArray) {
	        interpolateArray(kfValues[frame], kfValues[frame + 1], w, getter(target, propName), arrDim);
	      } else {
	        var value;
	
	        if (isValueColor) {
	          interpolateArray(kfValues[frame], kfValues[frame + 1], w, rgba, 1);
	          value = rgba2String(rgba);
	        } else if (isValueString) {
	          // String is step(0.5)
	          return interpolateString(kfValues[frame], kfValues[frame + 1], w);
	        } else {
	          value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);
	        }
	
	        setter(target, propName, value);
	      }
	    }
	  };
	
	  var clip = new Clip({
	    target: animator._target,
	    life: trackMaxTime,
	    loop: animator._loop,
	    delay: animator._delay,
	    onframe: onframe,
	    ondestroy: oneTrackDone
	  });
	
	  if (easing && easing !== 'spline') {
	    clip.easing = easing;
	  }
	
	  return clip;
	}
	/**
	 * @alias module:zrender/animation/Animator
	 * @constructor
	 * @param {Object} target
	 * @param {boolean} loop
	 * @param {Function} getter
	 * @param {Function} setter
	 */
	
	
	var Animator = function (target, loop, getter, setter) {
	  this._tracks = {};
	  this._target = target;
	  this._loop = loop || false;
	  this._getter = getter || defaultGetter;
	  this._setter = setter || defaultSetter;
	  this._clipCount = 0;
	  this._delay = 0;
	  this._doneList = [];
	  this._onframeList = [];
	  this._clipList = [];
	};
	
	Animator.prototype = {
	  /**
	   * 设置动画关键帧
	   * @param  {number} time 关键帧时间，单位是ms
	   * @param  {Object} props 关键帧的属性值，key-value表示
	   * @return {module:zrender/animation/Animator}
	   */
	  when: function (time
	  /* ms */
	  , props) {
	    var tracks = this._tracks;
	
	    for (var propName in props) {
	      if (!props.hasOwnProperty(propName)) {
	        continue;
	      }
	
	      if (!tracks[propName]) {
	        tracks[propName] = []; // Invalid value
	
	        var value = this._getter(this._target, propName);
	
	        if (value == null) {
	          // zrLog('Invalid property ' + propName);
	          continue;
	        } // If time is 0
	        //  Then props is given initialize value
	        // Else
	        //  Initialize value from current prop value
	
	
	        if (time !== 0) {
	          tracks[propName].push({
	            time: 0,
	            value: cloneValue(value)
	          });
	        }
	      }
	
	      tracks[propName].push({
	        time: time,
	        value: props[propName]
	      });
	    }
	
	    return this;
	  },
	
	  /**
	   * 添加动画每一帧的回调函数
	   * @param  {Function} callback
	   * @return {module:zrender/animation/Animator}
	   */
	  during: function (callback) {
	    this._onframeList.push(callback);
	
	    return this;
	  },
	  pause: function () {
	    for (var i = 0; i < this._clipList.length; i++) {
	      this._clipList[i].pause();
	    }
	
	    this._paused = true;
	  },
	  resume: function () {
	    for (var i = 0; i < this._clipList.length; i++) {
	      this._clipList[i].resume();
	    }
	
	    this._paused = false;
	  },
	  isPaused: function () {
	    return !!this._paused;
	  },
	  _doneCallback: function () {
	    // Clear all tracks
	    this._tracks = {}; // Clear all clips
	
	    this._clipList.length = 0;
	    var doneList = this._doneList;
	    var len = doneList.length;
	
	    for (var i = 0; i < len; i++) {
	      doneList[i].call(this);
	    }
	  },
	
	  /**
	   * 开始执行动画
	   * @param  {string|Function} [easing]
	   *         动画缓动函数，详见{@link module:zrender/animation/easing}
	   * @param  {boolean} forceAnimate
	   * @return {module:zrender/animation/Animator}
	   */
	  start: function (easing, forceAnimate) {
	    var self = this;
	    var clipCount = 0;
	
	    var oneTrackDone = function () {
	      clipCount--;
	
	      if (!clipCount) {
	        self._doneCallback();
	      }
	    };
	
	    var lastClip;
	
	    for (var propName in this._tracks) {
	      if (!this._tracks.hasOwnProperty(propName)) {
	        continue;
	      }
	
	      var clip = createTrackClip(this, easing, oneTrackDone, this._tracks[propName], propName, forceAnimate);
	
	      if (clip) {
	        this._clipList.push(clip);
	
	        clipCount++; // If start after added to animation
	
	        if (this.animation) {
	          this.animation.addClip(clip);
	        }
	
	        lastClip = clip;
	      }
	    } // Add during callback on the last clip
	
	
	    if (lastClip) {
	      var oldOnFrame = lastClip.onframe;
	
	      lastClip.onframe = function (target, percent) {
	        oldOnFrame(target, percent);
	
	        for (var i = 0; i < self._onframeList.length; i++) {
	          self._onframeList[i](target, percent);
	        }
	      };
	    } // This optimization will help the case that in the upper application
	    // the view may be refreshed frequently, where animation will be
	    // called repeatly but nothing changed.
	
	
	    if (!clipCount) {
	      this._doneCallback();
	    }
	
	    return this;
	  },
	
	  /**
	   * 停止动画
	   * @param {boolean} forwardToLast If move to last frame before stop
	   */
	  stop: function (forwardToLast) {
	    var clipList = this._clipList;
	    var animation = this.animation;
	
	    for (var i = 0; i < clipList.length; i++) {
	      var clip = clipList[i];
	
	      if (forwardToLast) {
	        // Move to last frame before stop
	        clip.onframe(this._target, 1);
	      }
	
	      animation && animation.removeClip(clip);
	    }
	
	    clipList.length = 0;
	  },
	
	  /**
	   * 设置动画延迟开始的时间
	   * @param  {number} time 单位ms
	   * @return {module:zrender/animation/Animator}
	   */
	  delay: function (time) {
	    this._delay = time;
	    return this;
	  },
	
	  /**
	   * 添加动画结束的回调
	   * @param  {Function} cb
	   * @return {module:zrender/animation/Animator}
	   */
	  done: function (cb) {
	    if (cb) {
	      this._doneList.push(cb);
	    }
	
	    return this;
	  },
	
	  /**
	   * @return {Array.<module:zrender/animation/Clip>}
	   */
	  getClips: function () {
	    return this._clipList;
	  }
	};
	var _default = Animator;
	module.exports = _default;

/***/ }),
/* 943 */
/***/ (function(module, exports, __webpack_require__) {

	var easingFuncs = __webpack_require__(944);
	
	/**
	 * 动画主控制器
	 * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件
	 * @config life(1000) 动画时长
	 * @config delay(0) 动画延迟时间
	 * @config loop(true)
	 * @config gap(0) 循环的间隔时间
	 * @config onframe
	 * @config easing(optional)
	 * @config ondestroy(optional)
	 * @config onrestart(optional)
	 *
	 * TODO pause
	 */
	function Clip(options) {
	  this._target = options.target; // 生命周期
	
	  this._life = options.life || 1000; // 延时
	
	  this._delay = options.delay || 0; // 开始时间
	  // this._startTime = new Date().getTime() + this._delay;// 单位毫秒
	
	  this._initialized = false; // 是否循环
	
	  this.loop = options.loop == null ? false : options.loop;
	  this.gap = options.gap || 0;
	  this.easing = options.easing || 'Linear';
	  this.onframe = options.onframe;
	  this.ondestroy = options.ondestroy;
	  this.onrestart = options.onrestart;
	  this._pausedTime = 0;
	  this._paused = false;
	}
	
	Clip.prototype = {
	  constructor: Clip,
	  step: function (globalTime, deltaTime) {
	    // Set startTime on first step, or _startTime may has milleseconds different between clips
	    // PENDING
	    if (!this._initialized) {
	      this._startTime = globalTime + this._delay;
	      this._initialized = true;
	    }
	
	    if (this._paused) {
	      this._pausedTime += deltaTime;
	      return;
	    }
	
	    var percent = (globalTime - this._startTime - this._pausedTime) / this._life; // 还没开始
	
	    if (percent < 0) {
	      return;
	    }
	
	    percent = Math.min(percent, 1);
	    var easing = this.easing;
	    var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;
	    var schedule = typeof easingFunc === 'function' ? easingFunc(percent) : percent;
	    this.fire('frame', schedule); // 结束
	
	    if (percent == 1) {
	      if (this.loop) {
	        this.restart(globalTime); // 重新开始周期
	        // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件
	
	        return 'restart';
	      } // 动画完成将这个控制器标识为待删除
	      // 在Animation.update中进行批量删除
	
	
	      this._needsRemove = true;
	      return 'destroy';
	    }
	
	    return null;
	  },
	  restart: function (globalTime) {
	    var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;
	    this._startTime = globalTime - remainder + this.gap;
	    this._pausedTime = 0;
	    this._needsRemove = false;
	  },
	  fire: function (eventType, arg) {
	    eventType = 'on' + eventType;
	
	    if (this[eventType]) {
	      this[eventType](this._target, arg);
	    }
	  },
	  pause: function () {
	    this._paused = true;
	  },
	  resume: function () {
	    this._paused = false;
	  }
	};
	var _default = Clip;
	module.exports = _default;

/***/ }),
/* 944 */
/***/ (function(module, exports) {

	/**
	 * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js
	 * @see http://sole.github.io/tween.js/examples/03_graphs.html
	 * @exports zrender/animation/easing
	 */
	var easing = {
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  linear: function (k) {
	    return k;
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quadraticIn: function (k) {
	    return k * k;
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quadraticOut: function (k) {
	    return k * (2 - k);
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quadraticInOut: function (k) {
	    if ((k *= 2) < 1) {
	      return 0.5 * k * k;
	    }
	
	    return -0.5 * (--k * (k - 2) - 1);
	  },
	  // 三次方的缓动（t^3）
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  cubicIn: function (k) {
	    return k * k * k;
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  cubicOut: function (k) {
	    return --k * k * k + 1;
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  cubicInOut: function (k) {
	    if ((k *= 2) < 1) {
	      return 0.5 * k * k * k;
	    }
	
	    return 0.5 * ((k -= 2) * k * k + 2);
	  },
	  // 四次方的缓动（t^4）
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quarticIn: function (k) {
	    return k * k * k * k;
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quarticOut: function (k) {
	    return 1 - --k * k * k * k;
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quarticInOut: function (k) {
	    if ((k *= 2) < 1) {
	      return 0.5 * k * k * k * k;
	    }
	
	    return -0.5 * ((k -= 2) * k * k * k - 2);
	  },
	  // 五次方的缓动（t^5）
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quinticIn: function (k) {
	    return k * k * k * k * k;
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quinticOut: function (k) {
	    return --k * k * k * k * k + 1;
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quinticInOut: function (k) {
	    if ((k *= 2) < 1) {
	      return 0.5 * k * k * k * k * k;
	    }
	
	    return 0.5 * ((k -= 2) * k * k * k * k + 2);
	  },
	  // 正弦曲线的缓动（sin(t)）
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  sinusoidalIn: function (k) {
	    return 1 - Math.cos(k * Math.PI / 2);
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  sinusoidalOut: function (k) {
	    return Math.sin(k * Math.PI / 2);
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  sinusoidalInOut: function (k) {
	    return 0.5 * (1 - Math.cos(Math.PI * k));
	  },
	  // 指数曲线的缓动（2^t）
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  exponentialIn: function (k) {
	    return k === 0 ? 0 : Math.pow(1024, k - 1);
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  exponentialOut: function (k) {
	    return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  exponentialInOut: function (k) {
	    if (k === 0) {
	      return 0;
	    }
	
	    if (k === 1) {
	      return 1;
	    }
	
	    if ((k *= 2) < 1) {
	      return 0.5 * Math.pow(1024, k - 1);
	    }
	
	    return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
	  },
	  // 圆形曲线的缓动（sqrt(1-t^2)）
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  circularIn: function (k) {
	    return 1 - Math.sqrt(1 - k * k);
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  circularOut: function (k) {
	    return Math.sqrt(1 - --k * k);
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  circularInOut: function (k) {
	    if ((k *= 2) < 1) {
	      return -0.5 * (Math.sqrt(1 - k * k) - 1);
	    }
	
	    return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
	  },
	  // 创建类似于弹簧在停止前来回振荡的动画
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  elasticIn: function (k) {
	    var s;
	    var a = 0.1;
	    var p = 0.4;
	
	    if (k === 0) {
	      return 0;
	    }
	
	    if (k === 1) {
	      return 1;
	    }
	
	    if (!a || a < 1) {
	      a = 1;
	      s = p / 4;
	    } else {
	      s = p * Math.asin(1 / a) / (2 * Math.PI);
	    }
	
	    return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  elasticOut: function (k) {
	    var s;
	    var a = 0.1;
	    var p = 0.4;
	
	    if (k === 0) {
	      return 0;
	    }
	
	    if (k === 1) {
	      return 1;
	    }
	
	    if (!a || a < 1) {
	      a = 1;
	      s = p / 4;
	    } else {
	      s = p * Math.asin(1 / a) / (2 * Math.PI);
	    }
	
	    return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  elasticInOut: function (k) {
	    var s;
	    var a = 0.1;
	    var p = 0.4;
	
	    if (k === 0) {
	      return 0;
	    }
	
	    if (k === 1) {
	      return 1;
	    }
	
	    if (!a || a < 1) {
	      a = 1;
	      s = p / 4;
	    } else {
	      s = p * Math.asin(1 / a) / (2 * Math.PI);
	    }
	
	    if ((k *= 2) < 1) {
	      return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
	    }
	
	    return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
	  },
	  // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  backIn: function (k) {
	    var s = 1.70158;
	    return k * k * ((s + 1) * k - s);
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  backOut: function (k) {
	    var s = 1.70158;
	    return --k * k * ((s + 1) * k + s) + 1;
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  backInOut: function (k) {
	    var s = 1.70158 * 1.525;
	
	    if ((k *= 2) < 1) {
	      return 0.5 * (k * k * ((s + 1) * k - s));
	    }
	
	    return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
	  },
	  // 创建弹跳效果
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  bounceIn: function (k) {
	    return 1 - easing.bounceOut(1 - k);
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  bounceOut: function (k) {
	    if (k < 1 / 2.75) {
	      return 7.5625 * k * k;
	    } else if (k < 2 / 2.75) {
	      return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
	    } else if (k < 2.5 / 2.75) {
	      return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
	    } else {
	      return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
	    }
	  },
	
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  bounceInOut: function (k) {
	    if (k < 0.5) {
	      return easing.bounceIn(k * 2) * 0.5;
	    }
	
	    return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
	  }
	};
	var _default = easing;
	module.exports = _default;

/***/ }),
/* 945 */
/***/ (function(module, exports, __webpack_require__) {

	var LRU = __webpack_require__(946);
	
	var kCSSColorTable = {
	  'transparent': [0, 0, 0, 0],
	  'aliceblue': [240, 248, 255, 1],
	  'antiquewhite': [250, 235, 215, 1],
	  'aqua': [0, 255, 255, 1],
	  'aquamarine': [127, 255, 212, 1],
	  'azure': [240, 255, 255, 1],
	  'beige': [245, 245, 220, 1],
	  'bisque': [255, 228, 196, 1],
	  'black': [0, 0, 0, 1],
	  'blanchedalmond': [255, 235, 205, 1],
	  'blue': [0, 0, 255, 1],
	  'blueviolet': [138, 43, 226, 1],
	  'brown': [165, 42, 42, 1],
	  'burlywood': [222, 184, 135, 1],
	  'cadetblue': [95, 158, 160, 1],
	  'chartreuse': [127, 255, 0, 1],
	  'chocolate': [210, 105, 30, 1],
	  'coral': [255, 127, 80, 1],
	  'cornflowerblue': [100, 149, 237, 1],
	  'cornsilk': [255, 248, 220, 1],
	  'crimson': [220, 20, 60, 1],
	  'cyan': [0, 255, 255, 1],
	  'darkblue': [0, 0, 139, 1],
	  'darkcyan': [0, 139, 139, 1],
	  'darkgoldenrod': [184, 134, 11, 1],
	  'darkgray': [169, 169, 169, 1],
	  'darkgreen': [0, 100, 0, 1],
	  'darkgrey': [169, 169, 169, 1],
	  'darkkhaki': [189, 183, 107, 1],
	  'darkmagenta': [139, 0, 139, 1],
	  'darkolivegreen': [85, 107, 47, 1],
	  'darkorange': [255, 140, 0, 1],
	  'darkorchid': [153, 50, 204, 1],
	  'darkred': [139, 0, 0, 1],
	  'darksalmon': [233, 150, 122, 1],
	  'darkseagreen': [143, 188, 143, 1],
	  'darkslateblue': [72, 61, 139, 1],
	  'darkslategray': [47, 79, 79, 1],
	  'darkslategrey': [47, 79, 79, 1],
	  'darkturquoise': [0, 206, 209, 1],
	  'darkviolet': [148, 0, 211, 1],
	  'deeppink': [255, 20, 147, 1],
	  'deepskyblue': [0, 191, 255, 1],
	  'dimgray': [105, 105, 105, 1],
	  'dimgrey': [105, 105, 105, 1],
	  'dodgerblue': [30, 144, 255, 1],
	  'firebrick': [178, 34, 34, 1],
	  'floralwhite': [255, 250, 240, 1],
	  'forestgreen': [34, 139, 34, 1],
	  'fuchsia': [255, 0, 255, 1],
	  'gainsboro': [220, 220, 220, 1],
	  'ghostwhite': [248, 248, 255, 1],
	  'gold': [255, 215, 0, 1],
	  'goldenrod': [218, 165, 32, 1],
	  'gray': [128, 128, 128, 1],
	  'green': [0, 128, 0, 1],
	  'greenyellow': [173, 255, 47, 1],
	  'grey': [128, 128, 128, 1],
	  'honeydew': [240, 255, 240, 1],
	  'hotpink': [255, 105, 180, 1],
	  'indianred': [205, 92, 92, 1],
	  'indigo': [75, 0, 130, 1],
	  'ivory': [255, 255, 240, 1],
	  'khaki': [240, 230, 140, 1],
	  'lavender': [230, 230, 250, 1],
	  'lavenderblush': [255, 240, 245, 1],
	  'lawngreen': [124, 252, 0, 1],
	  'lemonchiffon': [255, 250, 205, 1],
	  'lightblue': [173, 216, 230, 1],
	  'lightcoral': [240, 128, 128, 1],
	  'lightcyan': [224, 255, 255, 1],
	  'lightgoldenrodyellow': [250, 250, 210, 1],
	  'lightgray': [211, 211, 211, 1],
	  'lightgreen': [144, 238, 144, 1],
	  'lightgrey': [211, 211, 211, 1],
	  'lightpink': [255, 182, 193, 1],
	  'lightsalmon': [255, 160, 122, 1],
	  'lightseagreen': [32, 178, 170, 1],
	  'lightskyblue': [135, 206, 250, 1],
	  'lightslategray': [119, 136, 153, 1],
	  'lightslategrey': [119, 136, 153, 1],
	  'lightsteelblue': [176, 196, 222, 1],
	  'lightyellow': [255, 255, 224, 1],
	  'lime': [0, 255, 0, 1],
	  'limegreen': [50, 205, 50, 1],
	  'linen': [250, 240, 230, 1],
	  'magenta': [255, 0, 255, 1],
	  'maroon': [128, 0, 0, 1],
	  'mediumaquamarine': [102, 205, 170, 1],
	  'mediumblue': [0, 0, 205, 1],
	  'mediumorchid': [186, 85, 211, 1],
	  'mediumpurple': [147, 112, 219, 1],
	  'mediumseagreen': [60, 179, 113, 1],
	  'mediumslateblue': [123, 104, 238, 1],
	  'mediumspringgreen': [0, 250, 154, 1],
	  'mediumturquoise': [72, 209, 204, 1],
	  'mediumvioletred': [199, 21, 133, 1],
	  'midnightblue': [25, 25, 112, 1],
	  'mintcream': [245, 255, 250, 1],
	  'mistyrose': [255, 228, 225, 1],
	  'moccasin': [255, 228, 181, 1],
	  'navajowhite': [255, 222, 173, 1],
	  'navy': [0, 0, 128, 1],
	  'oldlace': [253, 245, 230, 1],
	  'olive': [128, 128, 0, 1],
	  'olivedrab': [107, 142, 35, 1],
	  'orange': [255, 165, 0, 1],
	  'orangered': [255, 69, 0, 1],
	  'orchid': [218, 112, 214, 1],
	  'palegoldenrod': [238, 232, 170, 1],
	  'palegreen': [152, 251, 152, 1],
	  'paleturquoise': [175, 238, 238, 1],
	  'palevioletred': [219, 112, 147, 1],
	  'papayawhip': [255, 239, 213, 1],
	  'peachpuff': [255, 218, 185, 1],
	  'peru': [205, 133, 63, 1],
	  'pink': [255, 192, 203, 1],
	  'plum': [221, 160, 221, 1],
	  'powderblue': [176, 224, 230, 1],
	  'purple': [128, 0, 128, 1],
	  'red': [255, 0, 0, 1],
	  'rosybrown': [188, 143, 143, 1],
	  'royalblue': [65, 105, 225, 1],
	  'saddlebrown': [139, 69, 19, 1],
	  'salmon': [250, 128, 114, 1],
	  'sandybrown': [244, 164, 96, 1],
	  'seagreen': [46, 139, 87, 1],
	  'seashell': [255, 245, 238, 1],
	  'sienna': [160, 82, 45, 1],
	  'silver': [192, 192, 192, 1],
	  'skyblue': [135, 206, 235, 1],
	  'slateblue': [106, 90, 205, 1],
	  'slategray': [112, 128, 144, 1],
	  'slategrey': [112, 128, 144, 1],
	  'snow': [255, 250, 250, 1],
	  'springgreen': [0, 255, 127, 1],
	  'steelblue': [70, 130, 180, 1],
	  'tan': [210, 180, 140, 1],
	  'teal': [0, 128, 128, 1],
	  'thistle': [216, 191, 216, 1],
	  'tomato': [255, 99, 71, 1],
	  'turquoise': [64, 224, 208, 1],
	  'violet': [238, 130, 238, 1],
	  'wheat': [245, 222, 179, 1],
	  'white': [255, 255, 255, 1],
	  'whitesmoke': [245, 245, 245, 1],
	  'yellow': [255, 255, 0, 1],
	  'yellowgreen': [154, 205, 50, 1]
	};
	
	function clampCssByte(i) {
	  // Clamp to integer 0 .. 255.
	  i = Math.round(i); // Seems to be what Chrome does (vs truncation).
	
	  return i < 0 ? 0 : i > 255 ? 255 : i;
	}
	
	function clampCssAngle(i) {
	  // Clamp to integer 0 .. 360.
	  i = Math.round(i); // Seems to be what Chrome does (vs truncation).
	
	  return i < 0 ? 0 : i > 360 ? 360 : i;
	}
	
	function clampCssFloat(f) {
	  // Clamp to float 0.0 .. 1.0.
	  return f < 0 ? 0 : f > 1 ? 1 : f;
	}
	
	function parseCssInt(str) {
	  // int or percentage.
	  if (str.length && str.charAt(str.length - 1) === '%') {
	    return clampCssByte(parseFloat(str) / 100 * 255);
	  }
	
	  return clampCssByte(parseInt(str, 10));
	}
	
	function parseCssFloat(str) {
	  // float or percentage.
	  if (str.length && str.charAt(str.length - 1) === '%') {
	    return clampCssFloat(parseFloat(str) / 100);
	  }
	
	  return clampCssFloat(parseFloat(str));
	}
	
	function cssHueToRgb(m1, m2, h) {
	  if (h < 0) {
	    h += 1;
	  } else if (h > 1) {
	    h -= 1;
	  }
	
	  if (h * 6 < 1) {
	    return m1 + (m2 - m1) * h * 6;
	  }
	
	  if (h * 2 < 1) {
	    return m2;
	  }
	
	  if (h * 3 < 2) {
	    return m1 + (m2 - m1) * (2 / 3 - h) * 6;
	  }
	
	  return m1;
	}
	
	function lerpNumber(a, b, p) {
	  return a + (b - a) * p;
	}
	
	function setRgba(out, r, g, b, a) {
	  out[0] = r;
	  out[1] = g;
	  out[2] = b;
	  out[3] = a;
	  return out;
	}
	
	function copyRgba(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  return out;
	}
	
	var colorCache = new LRU(20);
	var lastRemovedArr = null;
	
	function putToCache(colorStr, rgbaArr) {
	  // Reuse removed array
	  if (lastRemovedArr) {
	    copyRgba(lastRemovedArr, rgbaArr);
	  }
	
	  lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || rgbaArr.slice());
	}
	/**
	 * @param {string} colorStr
	 * @param {Array.<number>} out
	 * @return {Array.<number>}
	 * @memberOf module:zrender/util/color
	 */
	
	
	function parse(colorStr, rgbaArr) {
	  if (!colorStr) {
	    return;
	  }
	
	  rgbaArr = rgbaArr || [];
	  var cached = colorCache.get(colorStr);
	
	  if (cached) {
	    return copyRgba(rgbaArr, cached);
	  } // colorStr may be not string
	
	
	  colorStr = colorStr + ''; // Remove all whitespace, not compliant, but should just be more accepting.
	
	  var str = colorStr.replace(/ /g, '').toLowerCase(); // Color keywords (and transparent) lookup.
	
	  if (str in kCSSColorTable) {
	    copyRgba(rgbaArr, kCSSColorTable[str]);
	    putToCache(colorStr, rgbaArr);
	    return rgbaArr;
	  } // #abc and #abc123 syntax.
	
	
	  if (str.charAt(0) === '#') {
	    if (str.length === 4) {
	      var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.
	
	      if (!(iv >= 0 && iv <= 0xfff)) {
	        setRgba(rgbaArr, 0, 0, 0, 1);
	        return; // Covers NaN.
	      }
	
	      setRgba(rgbaArr, (iv & 0xf00) >> 4 | (iv & 0xf00) >> 8, iv & 0xf0 | (iv & 0xf0) >> 4, iv & 0xf | (iv & 0xf) << 4, 1);
	      putToCache(colorStr, rgbaArr);
	      return rgbaArr;
	    } else if (str.length === 7) {
	      var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.
	
	      if (!(iv >= 0 && iv <= 0xffffff)) {
	        setRgba(rgbaArr, 0, 0, 0, 1);
	        return; // Covers NaN.
	      }
	
	      setRgba(rgbaArr, (iv & 0xff0000) >> 16, (iv & 0xff00) >> 8, iv & 0xff, 1);
	      putToCache(colorStr, rgbaArr);
	      return rgbaArr;
	    }
	
	    return;
	  }
	
	  var op = str.indexOf('('),
	      ep = str.indexOf(')');
	
	  if (op !== -1 && ep + 1 === str.length) {
	    var fname = str.substr(0, op);
	    var params = str.substr(op + 1, ep - (op + 1)).split(',');
	    var alpha = 1; // To allow case fallthrough.
	
	    switch (fname) {
	      case 'rgba':
	        if (params.length !== 4) {
	          setRgba(rgbaArr, 0, 0, 0, 1);
	          return;
	        }
	
	        alpha = parseCssFloat(params.pop());
	      // jshint ignore:line
	      // Fall through.
	
	      case 'rgb':
	        if (params.length !== 3) {
	          setRgba(rgbaArr, 0, 0, 0, 1);
	          return;
	        }
	
	        setRgba(rgbaArr, parseCssInt(params[0]), parseCssInt(params[1]), parseCssInt(params[2]), alpha);
	        putToCache(colorStr, rgbaArr);
	        return rgbaArr;
	
	      case 'hsla':
	        if (params.length !== 4) {
	          setRgba(rgbaArr, 0, 0, 0, 1);
	          return;
	        }
	
	        params[3] = parseCssFloat(params[3]);
	        hsla2rgba(params, rgbaArr);
	        putToCache(colorStr, rgbaArr);
	        return rgbaArr;
	
	      case 'hsl':
	        if (params.length !== 3) {
	          setRgba(rgbaArr, 0, 0, 0, 1);
	          return;
	        }
	
	        hsla2rgba(params, rgbaArr);
	        putToCache(colorStr, rgbaArr);
	        return rgbaArr;
	
	      default:
	        return;
	    }
	  }
	
	  setRgba(rgbaArr, 0, 0, 0, 1);
	  return;
	}
	/**
	 * @param {Array.<number>} hsla
	 * @param {Array.<number>} rgba
	 * @return {Array.<number>} rgba
	 */
	
	
	function hsla2rgba(hsla, rgba) {
	  var h = (parseFloat(hsla[0]) % 360 + 360) % 360 / 360; // 0 .. 1
	  // NOTE(deanm): According to the CSS spec s/l should only be
	  // percentages, but we don't bother and let float or percentage.
	
	  var s = parseCssFloat(hsla[1]);
	  var l = parseCssFloat(hsla[2]);
	  var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
	  var m1 = l * 2 - m2;
	  rgba = rgba || [];
	  setRgba(rgba, clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255), clampCssByte(cssHueToRgb(m1, m2, h) * 255), clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255), 1);
	
	  if (hsla.length === 4) {
	    rgba[3] = hsla[3];
	  }
	
	  return rgba;
	}
	/**
	 * @param {Array.<number>} rgba
	 * @return {Array.<number>} hsla
	 */
	
	
	function rgba2hsla(rgba) {
	  if (!rgba) {
	    return;
	  } // RGB from 0 to 255
	
	
	  var R = rgba[0] / 255;
	  var G = rgba[1] / 255;
	  var B = rgba[2] / 255;
	  var vMin = Math.min(R, G, B); // Min. value of RGB
	
	  var vMax = Math.max(R, G, B); // Max. value of RGB
	
	  var delta = vMax - vMin; // Delta RGB value
	
	  var L = (vMax + vMin) / 2;
	  var H;
	  var S; // HSL results from 0 to 1
	
	  if (delta === 0) {
	    H = 0;
	    S = 0;
	  } else {
	    if (L < 0.5) {
	      S = delta / (vMax + vMin);
	    } else {
	      S = delta / (2 - vMax - vMin);
	    }
	
	    var deltaR = ((vMax - R) / 6 + delta / 2) / delta;
	    var deltaG = ((vMax - G) / 6 + delta / 2) / delta;
	    var deltaB = ((vMax - B) / 6 + delta / 2) / delta;
	
	    if (R === vMax) {
	      H = deltaB - deltaG;
	    } else if (G === vMax) {
	      H = 1 / 3 + deltaR - deltaB;
	    } else if (B === vMax) {
	      H = 2 / 3 + deltaG - deltaR;
	    }
	
	    if (H < 0) {
	      H += 1;
	    }
	
	    if (H > 1) {
	      H -= 1;
	    }
	  }
	
	  var hsla = [H * 360, S, L];
	
	  if (rgba[3] != null) {
	    hsla.push(rgba[3]);
	  }
	
	  return hsla;
	}
	/**
	 * @param {string} color
	 * @param {number} level
	 * @return {string}
	 * @memberOf module:zrender/util/color
	 */
	
	
	function lift(color, level) {
	  var colorArr = parse(color);
	
	  if (colorArr) {
	    for (var i = 0; i < 3; i++) {
	      if (level < 0) {
	        colorArr[i] = colorArr[i] * (1 - level) | 0;
	      } else {
	        colorArr[i] = (255 - colorArr[i]) * level + colorArr[i] | 0;
	      }
	
	      if (colorArr[i] > 255) {
	        colorArr[i] = 255;
	      } else if (color[i] < 0) {
	        colorArr[i] = 0;
	      }
	    }
	
	    return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
	  }
	}
	/**
	 * @param {string} color
	 * @return {string}
	 * @memberOf module:zrender/util/color
	 */
	
	
	function toHex(color) {
	  var colorArr = parse(color);
	
	  if (colorArr) {
	    return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + +colorArr[2]).toString(16).slice(1);
	  }
	}
	/**
	 * Map value to color. Faster than lerp methods because color is represented by rgba array.
	 * @param {number} normalizedValue A float between 0 and 1.
	 * @param {Array.<Array.<number>>} colors List of rgba color array
	 * @param {Array.<number>} [out] Mapped gba color array
	 * @return {Array.<number>} will be null/undefined if input illegal.
	 */
	
	
	function fastLerp(normalizedValue, colors, out) {
	  if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
	    return;
	  }
	
	  out = out || [];
	  var value = normalizedValue * (colors.length - 1);
	  var leftIndex = Math.floor(value);
	  var rightIndex = Math.ceil(value);
	  var leftColor = colors[leftIndex];
	  var rightColor = colors[rightIndex];
	  var dv = value - leftIndex;
	  out[0] = clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv));
	  out[1] = clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv));
	  out[2] = clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv));
	  out[3] = clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv));
	  return out;
	}
	/**
	 * @deprecated
	 */
	
	
	var fastMapToColor = fastLerp;
	/**
	 * @param {number} normalizedValue A float between 0 and 1.
	 * @param {Array.<string>} colors Color list.
	 * @param {boolean=} fullOutput Default false.
	 * @return {(string|Object)} Result color. If fullOutput,
	 *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
	 * @memberOf module:zrender/util/color
	 */
	
	function lerp(normalizedValue, colors, fullOutput) {
	  if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
	    return;
	  }
	
	  var value = normalizedValue * (colors.length - 1);
	  var leftIndex = Math.floor(value);
	  var rightIndex = Math.ceil(value);
	  var leftColor = parse(colors[leftIndex]);
	  var rightColor = parse(colors[rightIndex]);
	  var dv = value - leftIndex;
	  var color = stringify([clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv)), clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv)), clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv)), clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv))], 'rgba');
	  return fullOutput ? {
	    color: color,
	    leftIndex: leftIndex,
	    rightIndex: rightIndex,
	    value: value
	  } : color;
	}
	/**
	 * @deprecated
	 */
	
	
	var mapToColor = lerp;
	/**
	 * @param {string} color
	 * @param {number=} h 0 ~ 360, ignore when null.
	 * @param {number=} s 0 ~ 1, ignore when null.
	 * @param {number=} l 0 ~ 1, ignore when null.
	 * @return {string} Color string in rgba format.
	 * @memberOf module:zrender/util/color
	 */
	
	function modifyHSL(color, h, s, l) {
	  color = parse(color);
	
	  if (color) {
	    color = rgba2hsla(color);
	    h != null && (color[0] = clampCssAngle(h));
	    s != null && (color[1] = parseCssFloat(s));
	    l != null && (color[2] = parseCssFloat(l));
	    return stringify(hsla2rgba(color), 'rgba');
	  }
	}
	/**
	 * @param {string} color
	 * @param {number=} alpha 0 ~ 1
	 * @return {string} Color string in rgba format.
	 * @memberOf module:zrender/util/color
	 */
	
	
	function modifyAlpha(color, alpha) {
	  color = parse(color);
	
	  if (color && alpha != null) {
	    color[3] = clampCssFloat(alpha);
	    return stringify(color, 'rgba');
	  }
	}
	/**
	 * @param {Array.<number>} arrColor like [12,33,44,0.4]
	 * @param {string} type 'rgba', 'hsva', ...
	 * @return {string} Result color. (If input illegal, return undefined).
	 */
	
	
	function stringify(arrColor, type) {
	  if (!arrColor || !arrColor.length) {
	    return;
	  }
	
	  var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];
	
	  if (type === 'rgba' || type === 'hsva' || type === 'hsla') {
	    colorStr += ',' + arrColor[3];
	  }
	
	  return type + '(' + colorStr + ')';
	}
	
	exports.parse = parse;
	exports.lift = lift;
	exports.toHex = toHex;
	exports.fastLerp = fastLerp;
	exports.fastMapToColor = fastMapToColor;
	exports.lerp = lerp;
	exports.mapToColor = mapToColor;
	exports.modifyHSL = modifyHSL;
	exports.modifyAlpha = modifyAlpha;
	exports.stringify = stringify;

/***/ }),
/* 946 */
/***/ (function(module, exports) {

	// Simple LRU cache use doubly linked list
	// @module zrender/core/LRU
	
	/**
	 * Simple double linked list. Compared with array, it has O(1) remove operation.
	 * @constructor
	 */
	var LinkedList = function () {
	  /**
	   * @type {module:zrender/core/LRU~Entry}
	   */
	  this.head = null;
	  /**
	   * @type {module:zrender/core/LRU~Entry}
	   */
	
	  this.tail = null;
	  this._len = 0;
	};
	
	var linkedListProto = LinkedList.prototype;
	/**
	 * Insert a new value at the tail
	 * @param  {} val
	 * @return {module:zrender/core/LRU~Entry}
	 */
	
	linkedListProto.insert = function (val) {
	  var entry = new Entry(val);
	  this.insertEntry(entry);
	  return entry;
	};
	/**
	 * Insert an entry at the tail
	 * @param  {module:zrender/core/LRU~Entry} entry
	 */
	
	
	linkedListProto.insertEntry = function (entry) {
	  if (!this.head) {
	    this.head = this.tail = entry;
	  } else {
	    this.tail.next = entry;
	    entry.prev = this.tail;
	    entry.next = null;
	    this.tail = entry;
	  }
	
	  this._len++;
	};
	/**
	 * Remove entry.
	 * @param  {module:zrender/core/LRU~Entry} entry
	 */
	
	
	linkedListProto.remove = function (entry) {
	  var prev = entry.prev;
	  var next = entry.next;
	
	  if (prev) {
	    prev.next = next;
	  } else {
	    // Is head
	    this.head = next;
	  }
	
	  if (next) {
	    next.prev = prev;
	  } else {
	    // Is tail
	    this.tail = prev;
	  }
	
	  entry.next = entry.prev = null;
	  this._len--;
	};
	/**
	 * @return {number}
	 */
	
	
	linkedListProto.len = function () {
	  return this._len;
	};
	/**
	 * Clear list
	 */
	
	
	linkedListProto.clear = function () {
	  this.head = this.tail = null;
	  this._len = 0;
	};
	/**
	 * @constructor
	 * @param {} val
	 */
	
	
	var Entry = function (val) {
	  /**
	   * @type {}
	   */
	  this.value = val;
	  /**
	   * @type {module:zrender/core/LRU~Entry}
	   */
	
	  this.next;
	  /**
	   * @type {module:zrender/core/LRU~Entry}
	   */
	
	  this.prev;
	};
	/**
	 * LRU Cache
	 * @constructor
	 * @alias module:zrender/core/LRU
	 */
	
	
	var LRU = function (maxSize) {
	  this._list = new LinkedList();
	  this._map = {};
	  this._maxSize = maxSize || 10;
	  this._lastRemovedEntry = null;
	};
	
	var LRUProto = LRU.prototype;
	/**
	 * @param  {string} key
	 * @param  {} value
	 * @return {} Removed value
	 */
	
	LRUProto.put = function (key, value) {
	  var list = this._list;
	  var map = this._map;
	  var removed = null;
	
	  if (map[key] == null) {
	    var len = list.len(); // Reuse last removed entry
	
	    var entry = this._lastRemovedEntry;
	
	    if (len >= this._maxSize && len > 0) {
	      // Remove the least recently used
	      var leastUsedEntry = list.head;
	      list.remove(leastUsedEntry);
	      delete map[leastUsedEntry.key];
	      removed = leastUsedEntry.value;
	      this._lastRemovedEntry = leastUsedEntry;
	    }
	
	    if (entry) {
	      entry.value = value;
	    } else {
	      entry = new Entry(value);
	    }
	
	    entry.key = key;
	    list.insertEntry(entry);
	    map[key] = entry;
	  }
	
	  return removed;
	};
	/**
	 * @param  {string} key
	 * @return {}
	 */
	
	
	LRUProto.get = function (key) {
	  var entry = this._map[key];
	  var list = this._list;
	
	  if (entry != null) {
	    // Put the latest used entry in the tail
	    if (entry !== list.tail) {
	      list.remove(entry);
	      list.insertEntry(entry);
	    }
	
	    return entry.value;
	  }
	};
	/**
	 * Clear the cache
	 */
	
	
	LRUProto.clear = function () {
	  this._list.clear();
	
	  this._map = {};
	};
	
	var _default = LRU;
	module.exports = _default;

/***/ }),
/* 947 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(948);
	
	var debugMode = _config.debugMode;
	
	var log = function () {};
	
	if (debugMode === 1) {
	  log = function () {
	    for (var k in arguments) {
	      throw new Error(arguments[k]);
	    }
	  };
	} else if (debugMode > 1) {
	  log = function () {
	    for (var k in arguments) {
	      console.log(arguments[k]);
	    }
	  };
	}
	
	var _default = log;
	module.exports = _default;

/***/ }),
/* 948 */
/***/ (function(module, exports) {

	var dpr = 1; // If in browser environment
	
	if (typeof window !== 'undefined') {
	  dpr = Math.max(window.devicePixelRatio || 1, 1);
	}
	/**
	 * config默认配置项
	 * @exports zrender/config
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */
	
	/**
	 * debug日志选项：catchBrushException为true下有效
	 * 0 : 不生成debug数据，发布用
	 * 1 : 异常抛出，调试用
	 * 2 : 控制台输出，调试用
	 */
	
	
	var debugMode = 0; // retina 屏幕优化
	
	var devicePixelRatio = dpr;
	exports.debugMode = debugMode;
	exports.devicePixelRatio = devicePixelRatio;

/***/ }),
/* 949 */
/***/ (function(module, exports, __webpack_require__) {

	var vec2 = __webpack_require__(933);
	
	var matrix = __webpack_require__(940);
	
	/**
	 * @module echarts/core/BoundingRect
	 */
	var v2ApplyTransform = vec2.applyTransform;
	var mathMin = Math.min;
	var mathMax = Math.max;
	/**
	 * @alias module:echarts/core/BoundingRect
	 */
	
	function BoundingRect(x, y, width, height) {
	  if (width < 0) {
	    x = x + width;
	    width = -width;
	  }
	
	  if (height < 0) {
	    y = y + height;
	    height = -height;
	  }
	  /**
	   * @type {number}
	   */
	
	
	  this.x = x;
	  /**
	   * @type {number}
	   */
	
	  this.y = y;
	  /**
	   * @type {number}
	   */
	
	  this.width = width;
	  /**
	   * @type {number}
	   */
	
	  this.height = height;
	}
	
	BoundingRect.prototype = {
	  constructor: BoundingRect,
	
	  /**
	   * @param {module:echarts/core/BoundingRect} other
	   */
	  union: function (other) {
	    var x = mathMin(other.x, this.x);
	    var y = mathMin(other.y, this.y);
	    this.width = mathMax(other.x + other.width, this.x + this.width) - x;
	    this.height = mathMax(other.y + other.height, this.y + this.height) - y;
	    this.x = x;
	    this.y = y;
	  },
	
	  /**
	   * @param {Array.<number>} m
	   * @methods
	   */
	  applyTransform: function () {
	    var lt = [];
	    var rb = [];
	    var lb = [];
	    var rt = [];
	    return function (m) {
	      // In case usage like this
	      // el.getBoundingRect().applyTransform(el.transform)
	      // And element has no transform
	      if (!m) {
	        return;
	      }
	
	      lt[0] = lb[0] = this.x;
	      lt[1] = rt[1] = this.y;
	      rb[0] = rt[0] = this.x + this.width;
	      rb[1] = lb[1] = this.y + this.height;
	      v2ApplyTransform(lt, lt, m);
	      v2ApplyTransform(rb, rb, m);
	      v2ApplyTransform(lb, lb, m);
	      v2ApplyTransform(rt, rt, m);
	      this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);
	      this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);
	      var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);
	      var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);
	      this.width = maxX - this.x;
	      this.height = maxY - this.y;
	    };
	  }(),
	
	  /**
	   * Calculate matrix of transforming from self to target rect
	   * @param  {module:zrender/core/BoundingRect} b
	   * @return {Array.<number>}
	   */
	  calculateTransform: function (b) {
	    var a = this;
	    var sx = b.width / a.width;
	    var sy = b.height / a.height;
	    var m = matrix.create(); // 矩阵右乘
	
	    matrix.translate(m, m, [-a.x, -a.y]);
	    matrix.scale(m, m, [sx, sy]);
	    matrix.translate(m, m, [b.x, b.y]);
	    return m;
	  },
	
	  /**
	   * @param {(module:echarts/core/BoundingRect|Object)} b
	   * @return {boolean}
	   */
	  intersect: function (b) {
	    if (!b) {
	      return false;
	    }
	
	    if (!(b instanceof BoundingRect)) {
	      // Normalize negative width/height.
	      b = BoundingRect.create(b);
	    }
	
	    var a = this;
	    var ax0 = a.x;
	    var ax1 = a.x + a.width;
	    var ay0 = a.y;
	    var ay1 = a.y + a.height;
	    var bx0 = b.x;
	    var bx1 = b.x + b.width;
	    var by0 = b.y;
	    var by1 = b.y + b.height;
	    return !(ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
	  },
	  contain: function (x, y) {
	    var rect = this;
	    return x >= rect.x && x <= rect.x + rect.width && y >= rect.y && y <= rect.y + rect.height;
	  },
	
	  /**
	   * @return {module:echarts/core/BoundingRect}
	   */
	  clone: function () {
	    return new BoundingRect(this.x, this.y, this.width, this.height);
	  },
	
	  /**
	   * Copy from another rect
	   */
	  copy: function (other) {
	    this.x = other.x;
	    this.y = other.y;
	    this.width = other.width;
	    this.height = other.height;
	  },
	  plain: function () {
	    return {
	      x: this.x,
	      y: this.y,
	      width: this.width,
	      height: this.height
	    };
	  }
	};
	/**
	 * @param {Object|module:zrender/core/BoundingRect} rect
	 * @param {number} rect.x
	 * @param {number} rect.y
	 * @param {number} rect.width
	 * @param {number} rect.height
	 * @return {module:zrender/core/BoundingRect}
	 */
	
	BoundingRect.create = function (rect) {
	  return new BoundingRect(rect.x, rect.y, rect.width, rect.height);
	};
	
	var _default = BoundingRect;
	module.exports = _default;

/***/ }),
/* 950 */
/***/ (function(module, exports) {

	// https://github.com/mziccard/node-timsort
	var DEFAULT_MIN_MERGE = 32;
	var DEFAULT_MIN_GALLOPING = 7;
	var DEFAULT_TMP_STORAGE_LENGTH = 256;
	
	function minRunLength(n) {
	  var r = 0;
	
	  while (n >= DEFAULT_MIN_MERGE) {
	    r |= n & 1;
	    n >>= 1;
	  }
	
	  return n + r;
	}
	
	function makeAscendingRun(array, lo, hi, compare) {
	  var runHi = lo + 1;
	
	  if (runHi === hi) {
	    return 1;
	  }
	
	  if (compare(array[runHi++], array[lo]) < 0) {
	    while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {
	      runHi++;
	    }
	
	    reverseRun(array, lo, runHi);
	  } else {
	    while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {
	      runHi++;
	    }
	  }
	
	  return runHi - lo;
	}
	
	function reverseRun(array, lo, hi) {
	  hi--;
	
	  while (lo < hi) {
	    var t = array[lo];
	    array[lo++] = array[hi];
	    array[hi--] = t;
	  }
	}
	
	function binaryInsertionSort(array, lo, hi, start, compare) {
	  if (start === lo) {
	    start++;
	  }
	
	  for (; start < hi; start++) {
	    var pivot = array[start];
	    var left = lo;
	    var right = start;
	    var mid;
	
	    while (left < right) {
	      mid = left + right >>> 1;
	
	      if (compare(pivot, array[mid]) < 0) {
	        right = mid;
	      } else {
	        left = mid + 1;
	      }
	    }
	
	    var n = start - left;
	
	    switch (n) {
	      case 3:
	        array[left + 3] = array[left + 2];
	
	      case 2:
	        array[left + 2] = array[left + 1];
	
	      case 1:
	        array[left + 1] = array[left];
	        break;
	
	      default:
	        while (n > 0) {
	          array[left + n] = array[left + n - 1];
	          n--;
	        }
	
	    }
	
	    array[left] = pivot;
	  }
	}
	
	function gallopLeft(value, array, start, length, hint, compare) {
	  var lastOffset = 0;
	  var maxOffset = 0;
	  var offset = 1;
	
	  if (compare(value, array[start + hint]) > 0) {
	    maxOffset = length - hint;
	
	    while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {
	      lastOffset = offset;
	      offset = (offset << 1) + 1;
	
	      if (offset <= 0) {
	        offset = maxOffset;
	      }
	    }
	
	    if (offset > maxOffset) {
	      offset = maxOffset;
	    }
	
	    lastOffset += hint;
	    offset += hint;
	  } else {
	    maxOffset = hint + 1;
	
	    while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {
	      lastOffset = offset;
	      offset = (offset << 1) + 1;
	
	      if (offset <= 0) {
	        offset = maxOffset;
	      }
	    }
	
	    if (offset > maxOffset) {
	      offset = maxOffset;
	    }
	
	    var tmp = lastOffset;
	    lastOffset = hint - offset;
	    offset = hint - tmp;
	  }
	
	  lastOffset++;
	
	  while (lastOffset < offset) {
	    var m = lastOffset + (offset - lastOffset >>> 1);
	
	    if (compare(value, array[start + m]) > 0) {
	      lastOffset = m + 1;
	    } else {
	      offset = m;
	    }
	  }
	
	  return offset;
	}
	
	function gallopRight(value, array, start, length, hint, compare) {
	  var lastOffset = 0;
	  var maxOffset = 0;
	  var offset = 1;
	
	  if (compare(value, array[start + hint]) < 0) {
	    maxOffset = hint + 1;
	
	    while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {
	      lastOffset = offset;
	      offset = (offset << 1) + 1;
	
	      if (offset <= 0) {
	        offset = maxOffset;
	      }
	    }
	
	    if (offset > maxOffset) {
	      offset = maxOffset;
	    }
	
	    var tmp = lastOffset;
	    lastOffset = hint - offset;
	    offset = hint - tmp;
	  } else {
	    maxOffset = length - hint;
	
	    while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {
	      lastOffset = offset;
	      offset = (offset << 1) + 1;
	
	      if (offset <= 0) {
	        offset = maxOffset;
	      }
	    }
	
	    if (offset > maxOffset) {
	      offset = maxOffset;
	    }
	
	    lastOffset += hint;
	    offset += hint;
	  }
	
	  lastOffset++;
	
	  while (lastOffset < offset) {
	    var m = lastOffset + (offset - lastOffset >>> 1);
	
	    if (compare(value, array[start + m]) < 0) {
	      offset = m;
	    } else {
	      lastOffset = m + 1;
	    }
	  }
	
	  return offset;
	}
	
	function TimSort(array, compare) {
	  var minGallop = DEFAULT_MIN_GALLOPING;
	  var length = 0;
	  var tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;
	  var stackLength = 0;
	  var runStart;
	  var runLength;
	  var stackSize = 0;
	  length = array.length;
	
	  if (length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {
	    tmpStorageLength = length >>> 1;
	  }
	
	  var tmp = [];
	  stackLength = length < 120 ? 5 : length < 1542 ? 10 : length < 119151 ? 19 : 40;
	  runStart = [];
	  runLength = [];
	
	  function pushRun(_runStart, _runLength) {
	    runStart[stackSize] = _runStart;
	    runLength[stackSize] = _runLength;
	    stackSize += 1;
	  }
	
	  function mergeRuns() {
	    while (stackSize > 1) {
	      var n = stackSize - 2;
	
	      if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {
	        if (runLength[n - 1] < runLength[n + 1]) {
	          n--;
	        }
	      } else if (runLength[n] > runLength[n + 1]) {
	        break;
	      }
	
	      mergeAt(n);
	    }
	  }
	
	  function forceMergeRuns() {
	    while (stackSize > 1) {
	      var n = stackSize - 2;
	
	      if (n > 0 && runLength[n - 1] < runLength[n + 1]) {
	        n--;
	      }
	
	      mergeAt(n);
	    }
	  }
	
	  function mergeAt(i) {
	    var start1 = runStart[i];
	    var length1 = runLength[i];
	    var start2 = runStart[i + 1];
	    var length2 = runLength[i + 1];
	    runLength[i] = length1 + length2;
	
	    if (i === stackSize - 3) {
	      runStart[i + 1] = runStart[i + 2];
	      runLength[i + 1] = runLength[i + 2];
	    }
	
	    stackSize--;
	    var k = gallopRight(array[start2], array, start1, length1, 0, compare);
	    start1 += k;
	    length1 -= k;
	
	    if (length1 === 0) {
	      return;
	    }
	
	    length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);
	
	    if (length2 === 0) {
	      return;
	    }
	
	    if (length1 <= length2) {
	      mergeLow(start1, length1, start2, length2);
	    } else {
	      mergeHigh(start1, length1, start2, length2);
	    }
	  }
	
	  function mergeLow(start1, length1, start2, length2) {
	    var i = 0;
	
	    for (i = 0; i < length1; i++) {
	      tmp[i] = array[start1 + i];
	    }
	
	    var cursor1 = 0;
	    var cursor2 = start2;
	    var dest = start1;
	    array[dest++] = array[cursor2++];
	
	    if (--length2 === 0) {
	      for (i = 0; i < length1; i++) {
	        array[dest + i] = tmp[cursor1 + i];
	      }
	
	      return;
	    }
	
	    if (length1 === 1) {
	      for (i = 0; i < length2; i++) {
	        array[dest + i] = array[cursor2 + i];
	      }
	
	      array[dest + length2] = tmp[cursor1];
	      return;
	    }
	
	    var _minGallop = minGallop;
	    var count1, count2, exit;
	
	    while (1) {
	      count1 = 0;
	      count2 = 0;
	      exit = false;
	
	      do {
	        if (compare(array[cursor2], tmp[cursor1]) < 0) {
	          array[dest++] = array[cursor2++];
	          count2++;
	          count1 = 0;
	
	          if (--length2 === 0) {
	            exit = true;
	            break;
	          }
	        } else {
	          array[dest++] = tmp[cursor1++];
	          count1++;
	          count2 = 0;
	
	          if (--length1 === 1) {
	            exit = true;
	            break;
	          }
	        }
	      } while ((count1 | count2) < _minGallop);
	
	      if (exit) {
	        break;
	      }
	
	      do {
	        count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);
	
	        if (count1 !== 0) {
	          for (i = 0; i < count1; i++) {
	            array[dest + i] = tmp[cursor1 + i];
	          }
	
	          dest += count1;
	          cursor1 += count1;
	          length1 -= count1;
	
	          if (length1 <= 1) {
	            exit = true;
	            break;
	          }
	        }
	
	        array[dest++] = array[cursor2++];
	
	        if (--length2 === 0) {
	          exit = true;
	          break;
	        }
	
	        count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);
	
	        if (count2 !== 0) {
	          for (i = 0; i < count2; i++) {
	            array[dest + i] = array[cursor2 + i];
	          }
	
	          dest += count2;
	          cursor2 += count2;
	          length2 -= count2;
	
	          if (length2 === 0) {
	            exit = true;
	            break;
	          }
	        }
	
	        array[dest++] = tmp[cursor1++];
	
	        if (--length1 === 1) {
	          exit = true;
	          break;
	        }
	
	        _minGallop--;
	      } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
	
	      if (exit) {
	        break;
	      }
	
	      if (_minGallop < 0) {
	        _minGallop = 0;
	      }
	
	      _minGallop += 2;
	    }
	
	    minGallop = _minGallop;
	    minGallop < 1 && (minGallop = 1);
	
	    if (length1 === 1) {
	      for (i = 0; i < length2; i++) {
	        array[dest + i] = array[cursor2 + i];
	      }
	
	      array[dest + length2] = tmp[cursor1];
	    } else if (length1 === 0) {
	      throw new Error(); // throw new Error('mergeLow preconditions were not respected');
	    } else {
	      for (i = 0; i < length1; i++) {
	        array[dest + i] = tmp[cursor1 + i];
	      }
	    }
	  }
	
	  function mergeHigh(start1, length1, start2, length2) {
	    var i = 0;
	
	    for (i = 0; i < length2; i++) {
	      tmp[i] = array[start2 + i];
	    }
	
	    var cursor1 = start1 + length1 - 1;
	    var cursor2 = length2 - 1;
	    var dest = start2 + length2 - 1;
	    var customCursor = 0;
	    var customDest = 0;
	    array[dest--] = array[cursor1--];
	
	    if (--length1 === 0) {
	      customCursor = dest - (length2 - 1);
	
	      for (i = 0; i < length2; i++) {
	        array[customCursor + i] = tmp[i];
	      }
	
	      return;
	    }
	
	    if (length2 === 1) {
	      dest -= length1;
	      cursor1 -= length1;
	      customDest = dest + 1;
	      customCursor = cursor1 + 1;
	
	      for (i = length1 - 1; i >= 0; i--) {
	        array[customDest + i] = array[customCursor + i];
	      }
	
	      array[dest] = tmp[cursor2];
	      return;
	    }
	
	    var _minGallop = minGallop;
	
	    while (true) {
	      var count1 = 0;
	      var count2 = 0;
	      var exit = false;
	
	      do {
	        if (compare(tmp[cursor2], array[cursor1]) < 0) {
	          array[dest--] = array[cursor1--];
	          count1++;
	          count2 = 0;
	
	          if (--length1 === 0) {
	            exit = true;
	            break;
	          }
	        } else {
	          array[dest--] = tmp[cursor2--];
	          count2++;
	          count1 = 0;
	
	          if (--length2 === 1) {
	            exit = true;
	            break;
	          }
	        }
	      } while ((count1 | count2) < _minGallop);
	
	      if (exit) {
	        break;
	      }
	
	      do {
	        count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);
	
	        if (count1 !== 0) {
	          dest -= count1;
	          cursor1 -= count1;
	          length1 -= count1;
	          customDest = dest + 1;
	          customCursor = cursor1 + 1;
	
	          for (i = count1 - 1; i >= 0; i--) {
	            array[customDest + i] = array[customCursor + i];
	          }
	
	          if (length1 === 0) {
	            exit = true;
	            break;
	          }
	        }
	
	        array[dest--] = tmp[cursor2--];
	
	        if (--length2 === 1) {
	          exit = true;
	          break;
	        }
	
	        count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);
	
	        if (count2 !== 0) {
	          dest -= count2;
	          cursor2 -= count2;
	          length2 -= count2;
	          customDest = dest + 1;
	          customCursor = cursor2 + 1;
	
	          for (i = 0; i < count2; i++) {
	            array[customDest + i] = tmp[customCursor + i];
	          }
	
	          if (length2 <= 1) {
	            exit = true;
	            break;
	          }
	        }
	
	        array[dest--] = array[cursor1--];
	
	        if (--length1 === 0) {
	          exit = true;
	          break;
	        }
	
	        _minGallop--;
	      } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
	
	      if (exit) {
	        break;
	      }
	
	      if (_minGallop < 0) {
	        _minGallop = 0;
	      }
	
	      _minGallop += 2;
	    }
	
	    minGallop = _minGallop;
	
	    if (minGallop < 1) {
	      minGallop = 1;
	    }
	
	    if (length2 === 1) {
	      dest -= length1;
	      cursor1 -= length1;
	      customDest = dest + 1;
	      customCursor = cursor1 + 1;
	
	      for (i = length1 - 1; i >= 0; i--) {
	        array[customDest + i] = array[customCursor + i];
	      }
	
	      array[dest] = tmp[cursor2];
	    } else if (length2 === 0) {
	      throw new Error(); // throw new Error('mergeHigh preconditions were not respected');
	    } else {
	      customCursor = dest - (length2 - 1);
	
	      for (i = 0; i < length2; i++) {
	        array[customCursor + i] = tmp[i];
	      }
	    }
	  }
	
	  this.mergeRuns = mergeRuns;
	  this.forceMergeRuns = forceMergeRuns;
	  this.pushRun = pushRun;
	}
	
	function sort(array, compare, lo, hi) {
	  if (!lo) {
	    lo = 0;
	  }
	
	  if (!hi) {
	    hi = array.length;
	  }
	
	  var remaining = hi - lo;
	
	  if (remaining < 2) {
	    return;
	  }
	
	  var runLength = 0;
	
	  if (remaining < DEFAULT_MIN_MERGE) {
	    runLength = makeAscendingRun(array, lo, hi, compare);
	    binaryInsertionSort(array, lo, hi, lo + runLength, compare);
	    return;
	  }
	
	  var ts = new TimSort(array, compare);
	  var minRun = minRunLength(remaining);
	
	  do {
	    runLength = makeAscendingRun(array, lo, hi, compare);
	
	    if (runLength < minRun) {
	      var force = remaining;
	
	      if (force > minRun) {
	        force = minRun;
	      }
	
	      binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);
	      runLength = force;
	    }
	
	    ts.pushRun(lo, runLength);
	    ts.mergeRuns();
	    remaining -= runLength;
	    lo += runLength;
	  } while (remaining !== 0);
	
	  ts.forceMergeRuns();
	}
	
	module.exports = sort;

/***/ }),
/* 951 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(948);
	
	var devicePixelRatio = _config.devicePixelRatio;
	
	var util = __webpack_require__(931);
	
	var log = __webpack_require__(947);
	
	var BoundingRect = __webpack_require__(949);
	
	var timsort = __webpack_require__(950);
	
	var Layer = __webpack_require__(952);
	
	var requestAnimationFrame = __webpack_require__(956);
	
	var Image = __webpack_require__(957);
	
	var env = __webpack_require__(930);
	
	var HOVER_LAYER_ZLEVEL = 1e5;
	var CANVAS_ZLEVEL = 314159;
	var EL_AFTER_INCREMENTAL_INC = 0.01;
	var INCREMENTAL_INC = 0.001;
	
	function parseInt10(val) {
	  return parseInt(val, 10);
	}
	
	function isLayerValid(layer) {
	  if (!layer) {
	    return false;
	  }
	
	  if (layer.__builtin__) {
	    return true;
	  }
	
	  if (typeof layer.resize !== 'function' || typeof layer.refresh !== 'function') {
	    return false;
	  }
	
	  return true;
	}
	
	var tmpRect = new BoundingRect(0, 0, 0, 0);
	var viewRect = new BoundingRect(0, 0, 0, 0);
	
	function isDisplayableCulled(el, width, height) {
	  tmpRect.copy(el.getBoundingRect());
	
	  if (el.transform) {
	    tmpRect.applyTransform(el.transform);
	  }
	
	  viewRect.width = width;
	  viewRect.height = height;
	  return !tmpRect.intersect(viewRect);
	}
	
	function isClipPathChanged(clipPaths, prevClipPaths) {
	  if (clipPaths == prevClipPaths) {
	    // Can both be null or undefined
	    return false;
	  }
	
	  if (!clipPaths || !prevClipPaths || clipPaths.length !== prevClipPaths.length) {
	    return true;
	  }
	
	  for (var i = 0; i < clipPaths.length; i++) {
	    if (clipPaths[i] !== prevClipPaths[i]) {
	      return true;
	    }
	  }
	}
	
	function doClip(clipPaths, ctx) {
	  for (var i = 0; i < clipPaths.length; i++) {
	    var clipPath = clipPaths[i];
	    clipPath.setTransform(ctx);
	    ctx.beginPath();
	    clipPath.buildPath(ctx, clipPath.shape);
	    ctx.clip(); // Transform back
	
	    clipPath.restoreTransform(ctx);
	  }
	}
	
	function createRoot(width, height) {
	  var domRoot = document.createElement('div'); // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬
	
	  domRoot.style.cssText = ['position:relative', 'overflow:hidden', 'width:' + width + 'px', 'height:' + height + 'px', 'padding:0', 'margin:0', 'border-width:0'].join(';') + ';';
	  return domRoot;
	}
	/**
	 * @alias module:zrender/Painter
	 * @constructor
	 * @param {HTMLElement} root 绘图容器
	 * @param {module:zrender/Storage} storage
	 * @param {Object} opts
	 */
	
	
	var Painter = function (root, storage, opts) {
	  this.type = 'canvas'; // In node environment using node-canvas
	
	  var singleCanvas = !root.nodeName // In node ?
	  || root.nodeName.toUpperCase() === 'CANVAS';
	  this._opts = opts = util.extend({}, opts || {});
	  /**
	   * @type {number}
	   */
	
	  this.dpr = opts.devicePixelRatio || devicePixelRatio;
	  /**
	   * @type {boolean}
	   * @private
	   */
	
	  this._singleCanvas = singleCanvas;
	  /**
	   * 绘图容器
	   * @type {HTMLElement}
	   */
	
	  this.root = root;
	  var rootStyle = root.style;
	
	  if (rootStyle) {
	    rootStyle['-webkit-tap-highlight-color'] = 'transparent';
	    rootStyle['-webkit-user-select'] = rootStyle['user-select'] = rootStyle['-webkit-touch-callout'] = 'none';
	    root.innerHTML = '';
	  }
	  /**
	   * @type {module:zrender/Storage}
	   */
	
	
	  this.storage = storage;
	  /**
	   * @type {Array.<number>}
	   * @private
	   */
	
	  var zlevelList = this._zlevelList = [];
	  /**
	   * @type {Object.<string, module:zrender/Layer>}
	   * @private
	   */
	
	  var layers = this._layers = {};
	  /**
	   * @type {Object.<string, Object>}
	   * @private
	   */
	
	  this._layerConfig = {};
	  /**
	   * zrender will do compositing when root is a canvas and have multiple zlevels.
	   */
	
	  this._needsManuallyCompositing = false;
	
	  if (!singleCanvas) {
	    this._width = this._getSize(0);
	    this._height = this._getSize(1);
	    var domRoot = this._domRoot = createRoot(this._width, this._height);
	    root.appendChild(domRoot);
	  } else {
	    var width = root.width;
	    var height = root.height;
	
	    if (opts.width != null) {
	      width = opts.width;
	    }
	
	    if (opts.height != null) {
	      height = opts.height;
	    }
	
	    this.dpr = opts.devicePixelRatio || 1; // Use canvas width and height directly
	
	    root.width = width * this.dpr;
	    root.height = height * this.dpr;
	    this._width = width;
	    this._height = height; // Create layer if only one given canvas
	    // Device can be specified to create a high dpi image.
	
	    var mainLayer = new Layer(root, this, this.dpr);
	    mainLayer.__builtin__ = true;
	    mainLayer.initContext(); // FIXME Use canvas width and height
	    // mainLayer.resize(width, height);
	
	    layers[CANVAS_ZLEVEL] = mainLayer;
	    mainLayer.zlevel = CANVAS_ZLEVEL; // Not use common zlevel.
	
	    zlevelList.push(CANVAS_ZLEVEL);
	    this._domRoot = root;
	  }
	  /**
	   * @type {module:zrender/Layer}
	   * @private
	   */
	
	
	  this._hoverlayer = null;
	  this._hoverElements = [];
	};
	
	Painter.prototype = {
	  constructor: Painter,
	  getType: function () {
	    return 'canvas';
	  },
	
	  /**
	   * If painter use a single canvas
	   * @return {boolean}
	   */
	  isSingleCanvas: function () {
	    return this._singleCanvas;
	  },
	
	  /**
	   * @return {HTMLDivElement}
	   */
	  getViewportRoot: function () {
	    return this._domRoot;
	  },
	  getViewportRootOffset: function () {
	    var viewportRoot = this.getViewportRoot();
	
	    if (viewportRoot) {
	      return {
	        offsetLeft: viewportRoot.offsetLeft || 0,
	        offsetTop: viewportRoot.offsetTop || 0
	      };
	    }
	  },
	
	  /**
	   * 刷新
	   * @param {boolean} [paintAll=false] 强制绘制所有displayable
	   */
	  refresh: function (paintAll) {
	    var list = this.storage.getDisplayList(true);
	    var zlevelList = this._zlevelList;
	    this._redrawId = Math.random();
	
	    this._paintList(list, paintAll, this._redrawId); // Paint custum layers
	
	
	    for (var i = 0; i < zlevelList.length; i++) {
	      var z = zlevelList[i];
	      var layer = this._layers[z];
	
	      if (!layer.__builtin__ && layer.refresh) {
	        var clearColor = i === 0 ? this._backgroundColor : null;
	        layer.refresh(clearColor);
	      }
	    }
	
	    this.refreshHover();
	    return this;
	  },
	  addHover: function (el, hoverStyle) {
	    if (el.__hoverMir) {
	      return;
	    }
	
	    var elMirror = new el.constructor({
	      style: el.style,
	      shape: el.shape
	    });
	    elMirror.__from = el;
	    el.__hoverMir = elMirror;
	    elMirror.setStyle(hoverStyle);
	
	    this._hoverElements.push(elMirror);
	  },
	  removeHover: function (el) {
	    var elMirror = el.__hoverMir;
	    var hoverElements = this._hoverElements;
	    var idx = util.indexOf(hoverElements, elMirror);
	
	    if (idx >= 0) {
	      hoverElements.splice(idx, 1);
	    }
	
	    el.__hoverMir = null;
	  },
	  clearHover: function (el) {
	    var hoverElements = this._hoverElements;
	
	    for (var i = 0; i < hoverElements.length; i++) {
	      var from = hoverElements[i].__from;
	
	      if (from) {
	        from.__hoverMir = null;
	      }
	    }
	
	    hoverElements.length = 0;
	  },
	  refreshHover: function () {
	    var hoverElements = this._hoverElements;
	    var len = hoverElements.length;
	    var hoverLayer = this._hoverlayer;
	    hoverLayer && hoverLayer.clear();
	
	    if (!len) {
	      return;
	    }
	
	    timsort(hoverElements, this.storage.displayableSortFunc); // Use a extream large zlevel
	    // FIXME?
	
	    if (!hoverLayer) {
	      hoverLayer = this._hoverlayer = this.getLayer(HOVER_LAYER_ZLEVEL);
	    }
	
	    var scope = {};
	    hoverLayer.ctx.save();
	
	    for (var i = 0; i < len;) {
	      var el = hoverElements[i];
	      var originalEl = el.__from; // Original el is removed
	      // PENDING
	
	      if (!(originalEl && originalEl.__zr)) {
	        hoverElements.splice(i, 1);
	        originalEl.__hoverMir = null;
	        len--;
	        continue;
	      }
	
	      i++; // Use transform
	      // FIXME style and shape ?
	
	      if (!originalEl.invisible) {
	        el.transform = originalEl.transform;
	        el.invTransform = originalEl.invTransform;
	        el.__clipPaths = originalEl.__clipPaths; // el.
	
	        this._doPaintEl(el, hoverLayer, true, scope);
	      }
	    }
	
	    hoverLayer.ctx.restore();
	  },
	  getHoverLayer: function () {
	    return this.getLayer(HOVER_LAYER_ZLEVEL);
	  },
	  _paintList: function (list, paintAll, redrawId) {
	    if (this._redrawId !== redrawId) {
	      return;
	    }
	
	    paintAll = paintAll || false;
	
	    this._updateLayerStatus(list);
	
	    var finished = this._doPaintList(list, paintAll);
	
	    if (this._needsManuallyCompositing) {
	      this._compositeManually();
	    }
	
	    if (!finished) {
	      var self = this;
	      requestAnimationFrame(function () {
	        self._paintList(list, paintAll, redrawId);
	      });
	    }
	  },
	  _compositeManually: function () {
	    var ctx = this.getLayer(CANVAS_ZLEVEL).ctx;
	    var width = this._domRoot.width;
	    var height = this._domRoot.height;
	    ctx.clearRect(0, 0, width, height); // PENDING, If only builtin layer?
	
	    this.eachBuiltinLayer(function (layer) {
	      if (layer.virtual) {
	        ctx.drawImage(layer.dom, 0, 0, width, height);
	      }
	    });
	  },
	  _doPaintList: function (list, paintAll) {
	    var layerList = [];
	
	    for (var zi = 0; zi < this._zlevelList.length; zi++) {
	      var zlevel = this._zlevelList[zi];
	      var layer = this._layers[zlevel];
	
	      if (layer.__builtin__ && layer !== this._hoverlayer && (layer.__dirty || paintAll)) {
	        layerList.push(layer);
	      }
	    }
	
	    var finished = true;
	
	    for (var k = 0; k < layerList.length; k++) {
	      var layer = layerList[k];
	      var ctx = layer.ctx;
	      var scope = {};
	      ctx.save();
	      var start = paintAll ? layer.__startIndex : layer.__drawIndex;
	      var useTimer = !paintAll && layer.incremental && Date.now;
	      var startTime = useTimer && Date.now();
	      var clearColor = layer.zlevel === this._zlevelList[0] ? this._backgroundColor : null; // All elements in this layer are cleared.
	
	      if (layer.__startIndex === layer.__endIndex) {
	        layer.clear(false, clearColor);
	      } else if (start === layer.__startIndex) {
	        var firstEl = list[start];
	
	        if (!firstEl.incremental || !firstEl.notClear || paintAll) {
	          layer.clear(false, clearColor);
	        }
	      }
	
	      if (start === -1) {
	        console.error('For some unknown reason. drawIndex is -1');
	        start = layer.__startIndex;
	      }
	
	      for (var i = start; i < layer.__endIndex; i++) {
	        var el = list[i];
	
	        this._doPaintEl(el, layer, paintAll, scope);
	
	        el.__dirty = false;
	
	        if (useTimer) {
	          // Date.now can be executed in 13,025,305 ops/second.
	          var dTime = Date.now() - startTime; // Give 15 millisecond to draw.
	          // The rest elements will be drawn in the next frame.
	
	          if (dTime > 15) {
	            break;
	          }
	        }
	      }
	
	      layer.__drawIndex = i;
	
	      if (layer.__drawIndex < layer.__endIndex) {
	        finished = false;
	      }
	
	      if (scope.prevElClipPaths) {
	        // Needs restore the state. If last drawn element is in the clipping area.
	        ctx.restore();
	      }
	
	      ctx.restore();
	    }
	
	    if (env.wxa) {
	      // Flush for weixin application
	      util.each(this._layers, function (layer) {
	        if (layer && layer.ctx && layer.ctx.draw) {
	          layer.ctx.draw();
	        }
	      });
	    }
	
	    return finished;
	  },
	  _doPaintEl: function (el, currentLayer, forcePaint, scope) {
	    var ctx = currentLayer.ctx;
	    var m = el.transform;
	
	    if ((currentLayer.__dirty || forcePaint) && // Ignore invisible element
	    !el.invisible // Ignore transparent element
	    && el.style.opacity !== 0 // Ignore scale 0 element, in some environment like node-canvas
	    // Draw a scale 0 element can cause all following draw wrong
	    // And setTransform with scale 0 will cause set back transform failed.
	    && !(m && !m[0] && !m[3]) // Ignore culled element
	    && !(el.culling && isDisplayableCulled(el, this._width, this._height))) {
	      var clipPaths = el.__clipPaths; // Optimize when clipping on group with several elements
	
	      if (!scope.prevElClipPaths || isClipPathChanged(clipPaths, scope.prevElClipPaths)) {
	        // If has previous clipping state, restore from it
	        if (scope.prevElClipPaths) {
	          currentLayer.ctx.restore();
	          scope.prevElClipPaths = null; // Reset prevEl since context has been restored
	
	          scope.prevEl = null;
	        } // New clipping state
	
	
	        if (clipPaths) {
	          ctx.save();
	          doClip(clipPaths, ctx);
	          scope.prevElClipPaths = clipPaths;
	        }
	      }
	
	      el.beforeBrush && el.beforeBrush(ctx);
	      el.brush(ctx, scope.prevEl || null);
	      scope.prevEl = el;
	      el.afterBrush && el.afterBrush(ctx);
	    }
	  },
	
	  /**
	   * 获取 zlevel 所在层，如果不存在则会创建一个新的层
	   * @param {number} zlevel
	   * @param {boolean} virtual Virtual layer will not be inserted into dom.
	   * @return {module:zrender/Layer}
	   */
	  getLayer: function (zlevel, virtual) {
	    if (this._singleCanvas && !this._needsManuallyCompositing) {
	      zlevel = CANVAS_ZLEVEL;
	    }
	
	    var layer = this._layers[zlevel];
	
	    if (!layer) {
	      // Create a new layer
	      layer = new Layer('zr_' + zlevel, this, this.dpr);
	      layer.zlevel = zlevel;
	      layer.__builtin__ = true;
	
	      if (this._layerConfig[zlevel]) {
	        util.merge(layer, this._layerConfig[zlevel], true);
	      }
	
	      if (virtual) {
	        layer.virtual = virtual;
	      }
	
	      this.insertLayer(zlevel, layer); // Context is created after dom inserted to document
	      // Or excanvas will get 0px clientWidth and clientHeight
	
	      layer.initContext();
	    }
	
	    return layer;
	  },
	  insertLayer: function (zlevel, layer) {
	    var layersMap = this._layers;
	    var zlevelList = this._zlevelList;
	    var len = zlevelList.length;
	    var prevLayer = null;
	    var i = -1;
	    var domRoot = this._domRoot;
	
	    if (layersMap[zlevel]) {
	      log('ZLevel ' + zlevel + ' has been used already');
	      return;
	    } // Check if is a valid layer
	
	
	    if (!isLayerValid(layer)) {
	      log('Layer of zlevel ' + zlevel + ' is not valid');
	      return;
	    }
	
	    if (len > 0 && zlevel > zlevelList[0]) {
	      for (i = 0; i < len - 1; i++) {
	        if (zlevelList[i] < zlevel && zlevelList[i + 1] > zlevel) {
	          break;
	        }
	      }
	
	      prevLayer = layersMap[zlevelList[i]];
	    }
	
	    zlevelList.splice(i + 1, 0, zlevel);
	    layersMap[zlevel] = layer; // Vitual layer will not directly show on the screen.
	    // (It can be a WebGL layer and assigned to a ZImage element)
	    // But it still under management of zrender.
	
	    if (!layer.virtual) {
	      if (prevLayer) {
	        var prevDom = prevLayer.dom;
	
	        if (prevDom.nextSibling) {
	          domRoot.insertBefore(layer.dom, prevDom.nextSibling);
	        } else {
	          domRoot.appendChild(layer.dom);
	        }
	      } else {
	        if (domRoot.firstChild) {
	          domRoot.insertBefore(layer.dom, domRoot.firstChild);
	        } else {
	          domRoot.appendChild(layer.dom);
	        }
	      }
	    }
	  },
	  // Iterate each layer
	  eachLayer: function (cb, context) {
	    var zlevelList = this._zlevelList;
	    var z;
	    var i;
	
	    for (i = 0; i < zlevelList.length; i++) {
	      z = zlevelList[i];
	      cb.call(context, this._layers[z], z);
	    }
	  },
	  // Iterate each buildin layer
	  eachBuiltinLayer: function (cb, context) {
	    var zlevelList = this._zlevelList;
	    var layer;
	    var z;
	    var i;
	
	    for (i = 0; i < zlevelList.length; i++) {
	      z = zlevelList[i];
	      layer = this._layers[z];
	
	      if (layer.__builtin__) {
	        cb.call(context, layer, z);
	      }
	    }
	  },
	  // Iterate each other layer except buildin layer
	  eachOtherLayer: function (cb, context) {
	    var zlevelList = this._zlevelList;
	    var layer;
	    var z;
	    var i;
	
	    for (i = 0; i < zlevelList.length; i++) {
	      z = zlevelList[i];
	      layer = this._layers[z];
	
	      if (!layer.__builtin__) {
	        cb.call(context, layer, z);
	      }
	    }
	  },
	
	  /**
	   * 获取所有已创建的层
	   * @param {Array.<module:zrender/Layer>} [prevLayer]
	   */
	  getLayers: function () {
	    return this._layers;
	  },
	  _updateLayerStatus: function (list) {
	    this.eachBuiltinLayer(function (layer, z) {
	      layer.__dirty = layer.__used = false;
	    });
	
	    function updatePrevLayer(idx) {
	      if (prevLayer) {
	        if (prevLayer.__endIndex !== idx) {
	          prevLayer.__dirty = true;
	        }
	
	        prevLayer.__endIndex = idx;
	      }
	    }
	
	    if (this._singleCanvas) {
	      for (var i = 1; i < list.length; i++) {
	        var el = list[i];
	
	        if (el.zlevel !== list[i - 1].zlevel || el.incremental) {
	          this._needsManuallyCompositing = true;
	          break;
	        }
	      }
	    }
	
	    var prevLayer = null;
	    var incrementalLayerCount = 0;
	
	    for (var i = 0; i < list.length; i++) {
	      var el = list[i];
	      var zlevel = el.zlevel;
	      var layer; // PENDING If change one incremental element style ?
	      // TODO Where there are non-incremental elements between incremental elements.
	
	      if (el.incremental) {
	        layer = this.getLayer(zlevel + INCREMENTAL_INC, this._needsManuallyCompositing);
	        layer.incremental = true;
	        incrementalLayerCount = 1;
	      } else {
	        layer = this.getLayer(zlevel + (incrementalLayerCount > 0 ? EL_AFTER_INCREMENTAL_INC : 0), this._needsManuallyCompositing);
	      }
	
	      if (!layer.__builtin__) {
	        log('ZLevel ' + zlevel + ' has been used by unkown layer ' + layer.id);
	      }
	
	      if (layer !== prevLayer) {
	        layer.__used = true;
	
	        if (layer.__startIndex !== i) {
	          layer.__dirty = true;
	        }
	
	        layer.__startIndex = i;
	
	        if (!layer.incremental) {
	          layer.__drawIndex = i;
	        } else {
	          // Mark layer draw index needs to update.
	          layer.__drawIndex = -1;
	        }
	
	        updatePrevLayer(i);
	        prevLayer = layer;
	      }
	
	      if (el.__dirty) {
	        layer.__dirty = true;
	
	        if (layer.incremental && layer.__drawIndex < 0) {
	          // Start draw from the first dirty element.
	          layer.__drawIndex = i;
	        }
	      }
	    }
	
	    updatePrevLayer(i);
	    this.eachBuiltinLayer(function (layer, z) {
	      // Used in last frame but not in this frame. Needs clear
	      if (!layer.__used && layer.getElementCount() > 0) {
	        layer.__dirty = true;
	        layer.__startIndex = layer.__endIndex = layer.__drawIndex = 0;
	      } // For incremental layer. In case start index changed and no elements are dirty.
	
	
	      if (layer.__dirty && layer.__drawIndex < 0) {
	        layer.__drawIndex = layer.__startIndex;
	      }
	    });
	  },
	
	  /**
	   * 清除hover层外所有内容
	   */
	  clear: function () {
	    this.eachBuiltinLayer(this._clearLayer);
	    return this;
	  },
	  _clearLayer: function (layer) {
	    layer.clear();
	  },
	  setBackgroundColor: function (backgroundColor) {
	    this._backgroundColor = backgroundColor;
	  },
	
	  /**
	   * 修改指定zlevel的绘制参数
	   *
	   * @param {string} zlevel
	   * @param {Object} config 配置对象
	   * @param {string} [config.clearColor=0] 每次清空画布的颜色
	   * @param {string} [config.motionBlur=false] 是否开启动态模糊
	   * @param {number} [config.lastFrameAlpha=0.7]
	   *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	   */
	  configLayer: function (zlevel, config) {
	    if (config) {
	      var layerConfig = this._layerConfig;
	
	      if (!layerConfig[zlevel]) {
	        layerConfig[zlevel] = config;
	      } else {
	        util.merge(layerConfig[zlevel], config, true);
	      }
	
	      for (var i = 0; i < this._zlevelList.length; i++) {
	        var _zlevel = this._zlevelList[i];
	
	        if (_zlevel === zlevel || _zlevel === zlevel + EL_AFTER_INCREMENTAL_INC) {
	          var layer = this._layers[_zlevel];
	          util.merge(layer, layerConfig[zlevel], true);
	        }
	      }
	    }
	  },
	
	  /**
	   * 删除指定层
	   * @param {number} zlevel 层所在的zlevel
	   */
	  delLayer: function (zlevel) {
	    var layers = this._layers;
	    var zlevelList = this._zlevelList;
	    var layer = layers[zlevel];
	
	    if (!layer) {
	      return;
	    }
	
	    layer.dom.parentNode.removeChild(layer.dom);
	    delete layers[zlevel];
	    zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);
	  },
	
	  /**
	   * 区域大小变化后重绘
	   */
	  resize: function (width, height) {
	    if (!this._domRoot.style) {
	      // Maybe in node or worker
	      if (width == null || height == null) {
	        return;
	      }
	
	      this._width = width;
	      this._height = height;
	      this.getLayer(CANVAS_ZLEVEL).resize(width, height);
	    } else {
	      var domRoot = this._domRoot; // FIXME Why ?
	
	      domRoot.style.display = 'none'; // Save input w/h
	
	      var opts = this._opts;
	      width != null && (opts.width = width);
	      height != null && (opts.height = height);
	      width = this._getSize(0);
	      height = this._getSize(1);
	      domRoot.style.display = ''; // 优化没有实际改变的resize
	
	      if (this._width != width || height != this._height) {
	        domRoot.style.width = width + 'px';
	        domRoot.style.height = height + 'px';
	
	        for (var id in this._layers) {
	          if (this._layers.hasOwnProperty(id)) {
	            this._layers[id].resize(width, height);
	          }
	        }
	
	        util.each(this._progressiveLayers, function (layer) {
	          layer.resize(width, height);
	        });
	        this.refresh(true);
	      }
	
	      this._width = width;
	      this._height = height;
	    }
	
	    return this;
	  },
	
	  /**
	   * 清除单独的一个层
	   * @param {number} zlevel
	   */
	  clearLayer: function (zlevel) {
	    var layer = this._layers[zlevel];
	
	    if (layer) {
	      layer.clear();
	    }
	  },
	
	  /**
	   * 释放
	   */
	  dispose: function () {
	    this.root.innerHTML = '';
	    this.root = this.storage = this._domRoot = this._layers = null;
	  },
	
	  /**
	   * Get canvas which has all thing rendered
	   * @param {Object} opts
	   * @param {string} [opts.backgroundColor]
	   * @param {number} [opts.pixelRatio]
	   */
	  getRenderedCanvas: function (opts) {
	    opts = opts || {};
	
	    if (this._singleCanvas && !this._compositeManually) {
	      return this._layers[CANVAS_ZLEVEL].dom;
	    }
	
	    var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);
	    imageLayer.initContext();
	    imageLayer.clear(false, opts.backgroundColor || this._backgroundColor);
	
	    if (opts.pixelRatio <= this.dpr) {
	      this.refresh();
	      var width = imageLayer.dom.width;
	      var height = imageLayer.dom.height;
	      var ctx = imageLayer.ctx;
	      this.eachLayer(function (layer) {
	        if (layer.__builtin__) {
	          ctx.drawImage(layer.dom, 0, 0, width, height);
	        } else if (layer.renderToCanvas) {
	          imageLayer.ctx.save();
	          layer.renderToCanvas(imageLayer.ctx);
	          imageLayer.ctx.restore();
	        }
	      });
	    } else {
	      // PENDING, echarts-gl and incremental rendering.
	      var scope = {};
	      var displayList = this.storage.getDisplayList(true);
	
	      for (var i = 0; i < displayList.length; i++) {
	        var el = displayList[i];
	
	        this._doPaintEl(el, imageLayer, true, scope);
	      }
	    }
	
	    return imageLayer.dom;
	  },
	
	  /**
	   * 获取绘图区域宽度
	   */
	  getWidth: function () {
	    return this._width;
	  },
	
	  /**
	   * 获取绘图区域高度
	   */
	  getHeight: function () {
	    return this._height;
	  },
	  _getSize: function (whIdx) {
	    var opts = this._opts;
	    var wh = ['width', 'height'][whIdx];
	    var cwh = ['clientWidth', 'clientHeight'][whIdx];
	    var plt = ['paddingLeft', 'paddingTop'][whIdx];
	    var prb = ['paddingRight', 'paddingBottom'][whIdx];
	
	    if (opts[wh] != null && opts[wh] !== 'auto') {
	      return parseFloat(opts[wh]);
	    }
	
	    var root = this.root; // IE8 does not support getComputedStyle, but it use VML.
	
	    var stl = document.defaultView.getComputedStyle(root);
	    return (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh])) - (parseInt10(stl[plt]) || 0) - (parseInt10(stl[prb]) || 0) | 0;
	  },
	  pathToImage: function (path, dpr) {
	    dpr = dpr || this.dpr;
	    var canvas = document.createElement('canvas');
	    var ctx = canvas.getContext('2d');
	    var rect = path.getBoundingRect();
	    var style = path.style;
	    var shadowBlurSize = style.shadowBlur * dpr;
	    var shadowOffsetX = style.shadowOffsetX * dpr;
	    var shadowOffsetY = style.shadowOffsetY * dpr;
	    var lineWidth = style.hasStroke() ? style.lineWidth : 0;
	    var leftMargin = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize);
	    var rightMargin = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize);
	    var topMargin = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize);
	    var bottomMargin = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize);
	    var width = rect.width + leftMargin + rightMargin;
	    var height = rect.height + topMargin + bottomMargin;
	    canvas.width = width * dpr;
	    canvas.height = height * dpr;
	    ctx.scale(dpr, dpr);
	    ctx.clearRect(0, 0, width, height);
	    ctx.dpr = dpr;
	    var pathTransform = {
	      position: path.position,
	      rotation: path.rotation,
	      scale: path.scale
	    };
	    path.position = [leftMargin - rect.x, topMargin - rect.y];
	    path.rotation = 0;
	    path.scale = [1, 1];
	    path.updateTransform();
	
	    if (path) {
	      path.brush(ctx);
	    }
	
	    var ImageShape = Image;
	    var imgShape = new ImageShape({
	      style: {
	        x: 0,
	        y: 0,
	        image: canvas
	      }
	    });
	
	    if (pathTransform.position != null) {
	      imgShape.position = path.position = pathTransform.position;
	    }
	
	    if (pathTransform.rotation != null) {
	      imgShape.rotation = path.rotation = pathTransform.rotation;
	    }
	
	    if (pathTransform.scale != null) {
	      imgShape.scale = path.scale = pathTransform.scale;
	    }
	
	    return imgShape;
	  }
	};
	var _default = Painter;
	module.exports = _default;

/***/ }),
/* 952 */
/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(931);
	
	var _config = __webpack_require__(948);
	
	var devicePixelRatio = _config.devicePixelRatio;
	
	var Style = __webpack_require__(953);
	
	var Pattern = __webpack_require__(955);
	
	/**
	 * @module zrender/Layer
	 * @author pissang(https://www.github.com/pissang)
	 */
	function returnFalse() {
	  return false;
	}
	/**
	 * 创建dom
	 *
	 * @inner
	 * @param {string} id dom id 待用
	 * @param {Painter} painter painter instance
	 * @param {number} number
	 */
	
	
	function createDom(id, painter, dpr) {
	  var newDom = util.createCanvas();
	  var width = painter.getWidth();
	  var height = painter.getHeight();
	  var newDomStyle = newDom.style;
	
	  if (newDomStyle) {
	    // In node or some other non-browser environment
	    newDomStyle.position = 'absolute';
	    newDomStyle.left = 0;
	    newDomStyle.top = 0;
	    newDomStyle.width = width + 'px';
	    newDomStyle.height = height + 'px';
	    newDom.setAttribute('data-zr-dom-id', id);
	  }
	
	  newDom.width = width * dpr;
	  newDom.height = height * dpr;
	  return newDom;
	}
	/**
	 * @alias module:zrender/Layer
	 * @constructor
	 * @extends module:zrender/mixin/Transformable
	 * @param {string} id
	 * @param {module:zrender/Painter} painter
	 * @param {number} [dpr]
	 */
	
	
	var Layer = function (id, painter, dpr) {
	  var dom;
	  dpr = dpr || devicePixelRatio;
	
	  if (typeof id === 'string') {
	    dom = createDom(id, painter, dpr);
	  } // Not using isDom because in node it will return false
	  else if (util.isObject(id)) {
	      dom = id;
	      id = dom.id;
	    }
	
	  this.id = id;
	  this.dom = dom;
	  var domStyle = dom.style;
	
	  if (domStyle) {
	    // Not in node
	    dom.onselectstart = returnFalse; // 避免页面选中的尴尬
	
	    domStyle['-webkit-user-select'] = 'none';
	    domStyle['user-select'] = 'none';
	    domStyle['-webkit-touch-callout'] = 'none';
	    domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';
	    domStyle['padding'] = 0;
	    domStyle['margin'] = 0;
	    domStyle['border-width'] = 0;
	  }
	
	  this.domBack = null;
	  this.ctxBack = null;
	  this.painter = painter;
	  this.config = null; // Configs
	
	  /**
	   * 每次清空画布的颜色
	   * @type {string}
	   * @default 0
	   */
	
	  this.clearColor = 0;
	  /**
	   * 是否开启动态模糊
	   * @type {boolean}
	   * @default false
	   */
	
	  this.motionBlur = false;
	  /**
	   * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	   * @type {number}
	   * @default 0.7
	   */
	
	  this.lastFrameAlpha = 0.7;
	  /**
	   * Layer dpr
	   * @type {number}
	   */
	
	  this.dpr = dpr;
	};
	
	Layer.prototype = {
	  constructor: Layer,
	  __dirty: true,
	  __used: false,
	  __drawIndex: 0,
	  __startIndex: 0,
	  __endIndex: 0,
	  incremental: false,
	  getElementCount: function () {
	    return this.__endIndex - this.__startIndex;
	  },
	  initContext: function () {
	    this.ctx = this.dom.getContext('2d');
	    this.ctx.dpr = this.dpr;
	  },
	  createBackBuffer: function () {
	    var dpr = this.dpr;
	    this.domBack = createDom('back-' + this.id, this.painter, dpr);
	    this.ctxBack = this.domBack.getContext('2d');
	
	    if (dpr != 1) {
	      this.ctxBack.scale(dpr, dpr);
	    }
	  },
	
	  /**
	   * @param  {number} width
	   * @param  {number} height
	   */
	  resize: function (width, height) {
	    var dpr = this.dpr;
	    var dom = this.dom;
	    var domStyle = dom.style;
	    var domBack = this.domBack;
	
	    if (domStyle) {
	      domStyle.width = width + 'px';
	      domStyle.height = height + 'px';
	    }
	
	    dom.width = width * dpr;
	    dom.height = height * dpr;
	
	    if (domBack) {
	      domBack.width = width * dpr;
	      domBack.height = height * dpr;
	
	      if (dpr != 1) {
	        this.ctxBack.scale(dpr, dpr);
	      }
	    }
	  },
	
	  /**
	   * 清空该层画布
	   * @param {boolean} [clearAll]=false Clear all with out motion blur
	   * @param {Color} [clearColor]
	   */
	  clear: function (clearAll, clearColor) {
	    var dom = this.dom;
	    var ctx = this.ctx;
	    var width = dom.width;
	    var height = dom.height;
	    var clearColor = clearColor || this.clearColor;
	    var haveMotionBLur = this.motionBlur && !clearAll;
	    var lastFrameAlpha = this.lastFrameAlpha;
	    var dpr = this.dpr;
	
	    if (haveMotionBLur) {
	      if (!this.domBack) {
	        this.createBackBuffer();
	      }
	
	      this.ctxBack.globalCompositeOperation = 'copy';
	      this.ctxBack.drawImage(dom, 0, 0, width / dpr, height / dpr);
	    }
	
	    ctx.clearRect(0, 0, width, height);
	
	    if (clearColor && clearColor !== 'transparent') {
	      var clearColorGradientOrPattern; // Gradient
	
	      if (clearColor.colorStops) {
	        // Cache canvas gradient
	        clearColorGradientOrPattern = clearColor.__canvasGradient || Style.getGradient(ctx, clearColor, {
	          x: 0,
	          y: 0,
	          width: width,
	          height: height
	        });
	        clearColor.__canvasGradient = clearColorGradientOrPattern;
	      } // Pattern
	      else if (clearColor.image) {
	          clearColorGradientOrPattern = Pattern.prototype.getCanvasPattern.call(clearColor, ctx);
	        }
	
	      ctx.save();
	      ctx.fillStyle = clearColorGradientOrPattern || clearColor;
	      ctx.fillRect(0, 0, width, height);
	      ctx.restore();
	    }
	
	    if (haveMotionBLur) {
	      var domBack = this.domBack;
	      ctx.save();
	      ctx.globalAlpha = lastFrameAlpha;
	      ctx.drawImage(domBack, 0, 0, width, height);
	      ctx.restore();
	    }
	  }
	};
	var _default = Layer;
	module.exports = _default;

/***/ }),
/* 953 */
/***/ (function(module, exports, __webpack_require__) {

	var fixShadow = __webpack_require__(954);
	
	var STYLE_COMMON_PROPS = [['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'], ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]]; // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);
	// var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);
	
	var Style = function (opts, host) {
	  this.extendFrom(opts, false);
	  this.host = host;
	};
	
	function createLinearGradient(ctx, obj, rect) {
	  var x = obj.x == null ? 0 : obj.x;
	  var x2 = obj.x2 == null ? 1 : obj.x2;
	  var y = obj.y == null ? 0 : obj.y;
	  var y2 = obj.y2 == null ? 0 : obj.y2;
	
	  if (!obj.global) {
	    x = x * rect.width + rect.x;
	    x2 = x2 * rect.width + rect.x;
	    y = y * rect.height + rect.y;
	    y2 = y2 * rect.height + rect.y;
	  } // Fix NaN when rect is Infinity
	
	
	  x = isNaN(x) ? 0 : x;
	  x2 = isNaN(x2) ? 1 : x2;
	  y = isNaN(y) ? 0 : y;
	  y2 = isNaN(y2) ? 0 : y2;
	  var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);
	  return canvasGradient;
	}
	
	function createRadialGradient(ctx, obj, rect) {
	  var width = rect.width;
	  var height = rect.height;
	  var min = Math.min(width, height);
	  var x = obj.x == null ? 0.5 : obj.x;
	  var y = obj.y == null ? 0.5 : obj.y;
	  var r = obj.r == null ? 0.5 : obj.r;
	
	  if (!obj.global) {
	    x = x * width + rect.x;
	    y = y * height + rect.y;
	    r = r * min;
	  }
	
	  var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);
	  return canvasGradient;
	}
	
	Style.prototype = {
	  constructor: Style,
	
	  /**
	   * @type {module:zrender/graphic/Displayable}
	   */
	  host: null,
	
	  /**
	   * @type {string}
	   */
	  fill: '#000',
	
	  /**
	   * @type {string}
	   */
	  stroke: null,
	
	  /**
	   * @type {number}
	   */
	  opacity: 1,
	
	  /**
	   * @type {Array.<number>}
	   */
	  lineDash: null,
	
	  /**
	   * @type {number}
	   */
	  lineDashOffset: 0,
	
	  /**
	   * @type {number}
	   */
	  shadowBlur: 0,
	
	  /**
	   * @type {number}
	   */
	  shadowOffsetX: 0,
	
	  /**
	   * @type {number}
	   */
	  shadowOffsetY: 0,
	
	  /**
	   * @type {number}
	   */
	  lineWidth: 1,
	
	  /**
	   * If stroke ignore scale
	   * @type {Boolean}
	   */
	  strokeNoScale: false,
	  // Bounding rect text configuration
	  // Not affected by element transform
	
	  /**
	   * @type {string}
	   */
	  text: null,
	
	  /**
	   * If `fontSize` or `fontFamily` exists, `font` will be reset by
	   * `fontSize`, `fontStyle`, `fontWeight`, `fontFamily`.
	   * So do not visit it directly in upper application (like echarts),
	   * but use `contain/text#makeFont` instead.
	   * @type {string}
	   */
	  font: null,
	
	  /**
	   * The same as font. Use font please.
	   * @deprecated
	   * @type {string}
	   */
	  textFont: null,
	
	  /**
	   * It helps merging respectively, rather than parsing an entire font string.
	   * @type {string}
	   */
	  fontStyle: null,
	
	  /**
	   * It helps merging respectively, rather than parsing an entire font string.
	   * @type {string}
	   */
	  fontWeight: null,
	
	  /**
	   * It helps merging respectively, rather than parsing an entire font string.
	   * Should be 12 but not '12px'.
	   * @type {number}
	   */
	  fontSize: null,
	
	  /**
	   * It helps merging respectively, rather than parsing an entire font string.
	   * @type {string}
	   */
	  fontFamily: null,
	
	  /**
	   * Reserved for special functinality, like 'hr'.
	   * @type {string}
	   */
	  textTag: null,
	
	  /**
	   * @type {string}
	   */
	  textFill: '#000',
	
	  /**
	   * @type {string}
	   */
	  textStroke: null,
	
	  /**
	   * @type {number}
	   */
	  textWidth: null,
	
	  /**
	   * Only for textBackground.
	   * @type {number}
	   */
	  textHeight: null,
	
	  /**
	   * textStroke may be set as some color as a default
	   * value in upper applicaion, where the default value
	   * of textStrokeWidth should be 0 to make sure that
	   * user can choose to do not use text stroke.
	   * @type {number}
	   */
	  textStrokeWidth: 0,
	
	  /**
	   * @type {number}
	   */
	  textLineHeight: null,
	
	  /**
	   * 'inside', 'left', 'right', 'top', 'bottom'
	   * [x, y]
	   * Based on x, y of rect.
	   * @type {string|Array.<number>}
	   * @default 'inside'
	   */
	  textPosition: 'inside',
	
	  /**
	   * If not specified, use the boundingRect of a `displayable`.
	   * @type {Object}
	   */
	  textRect: null,
	
	  /**
	   * [x, y]
	   * @type {Array.<number>}
	   */
	  textOffset: null,
	
	  /**
	   * @type {string}
	   */
	  textAlign: null,
	
	  /**
	   * @type {string}
	   */
	  textVerticalAlign: null,
	
	  /**
	   * @type {number}
	   */
	  textDistance: 5,
	
	  /**
	   * @type {string}
	   */
	  textShadowColor: 'transparent',
	
	  /**
	   * @type {number}
	   */
	  textShadowBlur: 0,
	
	  /**
	   * @type {number}
	   */
	  textShadowOffsetX: 0,
	
	  /**
	   * @type {number}
	   */
	  textShadowOffsetY: 0,
	
	  /**
	   * @type {string}
	   */
	  textBoxShadowColor: 'transparent',
	
	  /**
	   * @type {number}
	   */
	  textBoxShadowBlur: 0,
	
	  /**
	   * @type {number}
	   */
	  textBoxShadowOffsetX: 0,
	
	  /**
	   * @type {number}
	   */
	  textBoxShadowOffsetY: 0,
	
	  /**
	   * Whether transform text.
	   * Only useful in Path and Image element
	   * @type {boolean}
	   */
	  transformText: false,
	
	  /**
	   * Text rotate around position of Path or Image
	   * Only useful in Path and Image element and transformText is false.
	   */
	  textRotation: 0,
	
	  /**
	   * Text origin of text rotation, like [10, 40].
	   * Based on x, y of rect.
	   * Useful in label rotation of circular symbol.
	   * By default, this origin is textPosition.
	   * Can be 'center'.
	   * @type {string|Array.<number>}
	   */
	  textOrigin: null,
	
	  /**
	   * @type {string}
	   */
	  textBackgroundColor: null,
	
	  /**
	   * @type {string}
	   */
	  textBorderColor: null,
	
	  /**
	   * @type {number}
	   */
	  textBorderWidth: 0,
	
	  /**
	   * @type {number}
	   */
	  textBorderRadius: 0,
	
	  /**
	   * Can be `2` or `[2, 4]` or `[2, 3, 4, 5]`
	   * @type {number|Array.<number>}
	   */
	  textPadding: null,
	
	  /**
	   * Text styles for rich text.
	   * @type {Object}
	   */
	  rich: null,
	
	  /**
	   * {outerWidth, outerHeight, ellipsis, placeholder}
	   * @type {Object}
	   */
	  truncate: null,
	
	  /**
	   * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
	   * @type {string}
	   */
	  blend: null,
	
	  /**
	   * @param {CanvasRenderingContext2D} ctx
	   */
	  bind: function (ctx, el, prevEl) {
	    var style = this;
	    var prevStyle = prevEl && prevEl.style;
	    var firstDraw = !prevStyle;
	
	    for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
	      var prop = STYLE_COMMON_PROPS[i];
	      var styleName = prop[0];
	
	      if (firstDraw || style[styleName] !== prevStyle[styleName]) {
	        // FIXME Invalid property value will cause style leak from previous element.
	        ctx[styleName] = fixShadow(ctx, styleName, style[styleName] || prop[1]);
	      }
	    }
	
	    if (firstDraw || style.fill !== prevStyle.fill) {
	      ctx.fillStyle = style.fill;
	    }
	
	    if (firstDraw || style.stroke !== prevStyle.stroke) {
	      ctx.strokeStyle = style.stroke;
	    }
	
	    if (firstDraw || style.opacity !== prevStyle.opacity) {
	      ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;
	    }
	
	    if (firstDraw || style.blend !== prevStyle.blend) {
	      ctx.globalCompositeOperation = style.blend || 'source-over';
	    }
	
	    if (this.hasStroke()) {
	      var lineWidth = style.lineWidth;
	      ctx.lineWidth = lineWidth / (this.strokeNoScale && el && el.getLineScale ? el.getLineScale() : 1);
	    }
	  },
	  hasFill: function () {
	    var fill = this.fill;
	    return fill != null && fill !== 'none';
	  },
	  hasStroke: function () {
	    var stroke = this.stroke;
	    return stroke != null && stroke !== 'none' && this.lineWidth > 0;
	  },
	
	  /**
	   * Extend from other style
	   * @param {zrender/graphic/Style} otherStyle
	   * @param {boolean} overwrite true: overwrirte any way.
	   *                            false: overwrite only when !target.hasOwnProperty
	   *                            others: overwrite when property is not null/undefined.
	   */
	  extendFrom: function (otherStyle, overwrite) {
	    if (otherStyle) {
	      for (var name in otherStyle) {
	        if (otherStyle.hasOwnProperty(name) && (overwrite === true || (overwrite === false ? !this.hasOwnProperty(name) : otherStyle[name] != null))) {
	          this[name] = otherStyle[name];
	        }
	      }
	    }
	  },
	
	  /**
	   * Batch setting style with a given object
	   * @param {Object|string} obj
	   * @param {*} [obj]
	   */
	  set: function (obj, value) {
	    if (typeof obj === 'string') {
	      this[obj] = value;
	    } else {
	      this.extendFrom(obj, true);
	    }
	  },
	
	  /**
	   * Clone
	   * @return {zrender/graphic/Style} [description]
	   */
	  clone: function () {
	    var newStyle = new this.constructor();
	    newStyle.extendFrom(this, true);
	    return newStyle;
	  },
	  getGradient: function (ctx, obj, rect) {
	    var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;
	    var canvasGradient = method(ctx, obj, rect);
	    var colorStops = obj.colorStops;
	
	    for (var i = 0; i < colorStops.length; i++) {
	      canvasGradient.addColorStop(colorStops[i].offset, colorStops[i].color);
	    }
	
	    return canvasGradient;
	  }
	};
	var styleProto = Style.prototype;
	
	for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
	  var prop = STYLE_COMMON_PROPS[i];
	
	  if (!(prop[0] in styleProto)) {
	    styleProto[prop[0]] = prop[1];
	  }
	} // Provide for others
	
	
	Style.getGradient = styleProto.getGradient;
	var _default = Style;
	module.exports = _default;

/***/ }),
/* 954 */
/***/ (function(module, exports) {

	var SHADOW_PROPS = {
	  'shadowBlur': 1,
	  'shadowOffsetX': 1,
	  'shadowOffsetY': 1,
	  'textShadowBlur': 1,
	  'textShadowOffsetX': 1,
	  'textShadowOffsetY': 1,
	  'textBoxShadowBlur': 1,
	  'textBoxShadowOffsetX': 1,
	  'textBoxShadowOffsetY': 1
	};
	
	function _default(ctx, propName, value) {
	  if (SHADOW_PROPS.hasOwnProperty(propName)) {
	    return value *= ctx.dpr;
	  }
	
	  return value;
	}
	
	module.exports = _default;

/***/ }),
/* 955 */
/***/ (function(module, exports) {

	var Pattern = function (image, repeat) {
	  // Should do nothing more in this constructor. Because gradient can be
	  // declard by `color: {image: ...}`, where this constructor will not be called.
	  this.image = image;
	  this.repeat = repeat; // Can be cloned
	
	  this.type = 'pattern';
	};
	
	Pattern.prototype.getCanvasPattern = function (ctx) {
	  return ctx.createPattern(this.image, this.repeat || 'repeat');
	};
	
	var _default = Pattern;
	module.exports = _default;

/***/ }),
/* 956 */
/***/ (function(module, exports) {

	var _default = typeof window !== 'undefined' && (window.requestAnimationFrame && window.requestAnimationFrame.bind(window) || // https://github.com/ecomfe/zrender/issues/189#issuecomment-224919809
	window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window) || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame) || function (func) {
	  setTimeout(func, 16);
	};
	
	module.exports = _default;

/***/ }),
/* 957 */
/***/ (function(module, exports, __webpack_require__) {

	var Displayable = __webpack_require__(958);
	
	var BoundingRect = __webpack_require__(949);
	
	var zrUtil = __webpack_require__(931);
	
	var imageHelper = __webpack_require__(962);
	
	/**
	 * @alias zrender/graphic/Image
	 * @extends module:zrender/graphic/Displayable
	 * @constructor
	 * @param {Object} opts
	 */
	function ZImage(opts) {
	  Displayable.call(this, opts);
	}
	
	ZImage.prototype = {
	  constructor: ZImage,
	  type: 'image',
	  brush: function (ctx, prevEl) {
	    var style = this.style;
	    var src = style.image; // Must bind each time
	
	    style.bind(ctx, this, prevEl);
	    var image = this._image = imageHelper.createOrUpdateImage(src, this._image, this, this.onload);
	
	    if (!image || !imageHelper.isImageReady(image)) {
	      return;
	    } // 图片已经加载完成
	    // if (image.nodeName.toUpperCase() == 'IMG') {
	    //     if (!image.complete) {
	    //         return;
	    //     }
	    // }
	    // Else is canvas
	
	
	    var x = style.x || 0;
	    var y = style.y || 0;
	    var width = style.width;
	    var height = style.height;
	    var aspect = image.width / image.height;
	
	    if (width == null && height != null) {
	      // Keep image/height ratio
	      width = height * aspect;
	    } else if (height == null && width != null) {
	      height = width / aspect;
	    } else if (width == null && height == null) {
	      width = image.width;
	      height = image.height;
	    } // 设置transform
	
	
	    this.setTransform(ctx);
	
	    if (style.sWidth && style.sHeight) {
	      var sx = style.sx || 0;
	      var sy = style.sy || 0;
	      ctx.drawImage(image, sx, sy, style.sWidth, style.sHeight, x, y, width, height);
	    } else if (style.sx && style.sy) {
	      var sx = style.sx;
	      var sy = style.sy;
	      var sWidth = width - sx;
	      var sHeight = height - sy;
	      ctx.drawImage(image, sx, sy, sWidth, sHeight, x, y, width, height);
	    } else {
	      ctx.drawImage(image, x, y, width, height);
	    } // Draw rect text
	
	
	    if (style.text != null) {
	      // Only restore transform when needs draw text.
	      this.restoreTransform(ctx);
	      this.drawRectText(ctx, this.getBoundingRect());
	    }
	  },
	  getBoundingRect: function () {
	    var style = this.style;
	
	    if (!this._rect) {
	      this._rect = new BoundingRect(style.x || 0, style.y || 0, style.width || 0, style.height || 0);
	    }
	
	    return this._rect;
	  }
	};
	zrUtil.inherits(ZImage, Displayable);
	var _default = ZImage;
	module.exports = _default;

/***/ }),
/* 958 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var Style = __webpack_require__(953);
	
	var Element = __webpack_require__(938);
	
	var RectText = __webpack_require__(959);
	
	/**
	 * 可绘制的图形基类
	 * Base class of all displayable graphic objects
	 * @module zrender/graphic/Displayable
	 */
	
	/**
	 * @alias module:zrender/graphic/Displayable
	 * @extends module:zrender/Element
	 * @extends module:zrender/graphic/mixin/RectText
	 */
	function Displayable(opts) {
	  opts = opts || {};
	  Element.call(this, opts); // Extend properties
	
	  for (var name in opts) {
	    if (opts.hasOwnProperty(name) && name !== 'style') {
	      this[name] = opts[name];
	    }
	  }
	  /**
	   * @type {module:zrender/graphic/Style}
	   */
	
	
	  this.style = new Style(opts.style, this);
	  this._rect = null; // Shapes for cascade clipping.
	
	  this.__clipPaths = []; // FIXME Stateful must be mixined after style is setted
	  // Stateful.call(this, opts);
	}
	
	Displayable.prototype = {
	  constructor: Displayable,
	  type: 'displayable',
	
	  /**
	   * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制
	   * Dirty flag. From which painter will determine if this displayable object needs brush
	   * @name module:zrender/graphic/Displayable#__dirty
	   * @type {boolean}
	   */
	  __dirty: true,
	
	  /**
	   * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件
	   * If ignore drawing of the displayable object. Mouse event will still be triggered
	   * @name module:/zrender/graphic/Displayable#invisible
	   * @type {boolean}
	   * @default false
	   */
	  invisible: false,
	
	  /**
	   * @name module:/zrender/graphic/Displayable#z
	   * @type {number}
	   * @default 0
	   */
	  z: 0,
	
	  /**
	   * @name module:/zrender/graphic/Displayable#z
	   * @type {number}
	   * @default 0
	   */
	  z2: 0,
	
	  /**
	   * z层level，决定绘画在哪层canvas中
	   * @name module:/zrender/graphic/Displayable#zlevel
	   * @type {number}
	   * @default 0
	   */
	  zlevel: 0,
	
	  /**
	   * 是否可拖拽
	   * @name module:/zrender/graphic/Displayable#draggable
	   * @type {boolean}
	   * @default false
	   */
	  draggable: false,
	
	  /**
	   * 是否正在拖拽
	   * @name module:/zrender/graphic/Displayable#draggable
	   * @type {boolean}
	   * @default false
	   */
	  dragging: false,
	
	  /**
	   * 是否相应鼠标事件
	   * @name module:/zrender/graphic/Displayable#silent
	   * @type {boolean}
	   * @default false
	   */
	  silent: false,
	
	  /**
	   * If enable culling
	   * @type {boolean}
	   * @default false
	   */
	  culling: false,
	
	  /**
	   * Mouse cursor when hovered
	   * @name module:/zrender/graphic/Displayable#cursor
	   * @type {string}
	   */
	  cursor: 'pointer',
	
	  /**
	   * If hover area is bounding rect
	   * @name module:/zrender/graphic/Displayable#rectHover
	   * @type {string}
	   */
	  rectHover: false,
	
	  /**
	   * Render the element progressively when the value >= 0,
	   * usefull for large data.
	   * @type {boolean}
	   */
	  progressive: false,
	
	  /**
	   * @type {boolean}
	   */
	  incremental: false,
	  // inplace is used with incremental
	  inplace: false,
	  beforeBrush: function (ctx) {},
	  afterBrush: function (ctx) {},
	
	  /**
	   * 图形绘制方法
	   * @param {CanvasRenderingContext2D} ctx
	   */
	  // Interface
	  brush: function (ctx, prevEl) {},
	
	  /**
	   * 获取最小包围盒
	   * @return {module:zrender/core/BoundingRect}
	   */
	  // Interface
	  getBoundingRect: function () {},
	
	  /**
	   * 判断坐标 x, y 是否在图形上
	   * If displayable element contain coord x, y
	   * @param  {number} x
	   * @param  {number} y
	   * @return {boolean}
	   */
	  contain: function (x, y) {
	    return this.rectContain(x, y);
	  },
	
	  /**
	   * @param  {Function} cb
	   * @param  {}   context
	   */
	  traverse: function (cb, context) {
	    cb.call(context, this);
	  },
	
	  /**
	   * 判断坐标 x, y 是否在图形的包围盒上
	   * If bounding rect of element contain coord x, y
	   * @param  {number} x
	   * @param  {number} y
	   * @return {boolean}
	   */
	  rectContain: function (x, y) {
	    var coord = this.transformCoordToLocal(x, y);
	    var rect = this.getBoundingRect();
	    return rect.contain(coord[0], coord[1]);
	  },
	
	  /**
	   * 标记图形元素为脏，并且在下一帧重绘
	   * Mark displayable element dirty and refresh next frame
	   */
	  dirty: function () {
	    this.__dirty = true;
	    this._rect = null;
	    this.__zr && this.__zr.refresh();
	  },
	
	  /**
	   * 图形是否会触发事件
	   * If displayable object binded any event
	   * @return {boolean}
	   */
	  // TODO, 通过 bind 绑定的事件
	  // isSilent: function () {
	  //     return !(
	  //         this.hoverable || this.draggable
	  //         || this.onmousemove || this.onmouseover || this.onmouseout
	  //         || this.onmousedown || this.onmouseup || this.onclick
	  //         || this.ondragenter || this.ondragover || this.ondragleave
	  //         || this.ondrop
	  //     );
	  // },
	
	  /**
	   * Alias for animate('style')
	   * @param {boolean} loop
	   */
	  animateStyle: function (loop) {
	    return this.animate('style', loop);
	  },
	  attrKV: function (key, value) {
	    if (key !== 'style') {
	      Element.prototype.attrKV.call(this, key, value);
	    } else {
	      this.style.set(value);
	    }
	  },
	
	  /**
	   * @param {Object|string} key
	   * @param {*} value
	   */
	  setStyle: function (key, value) {
	    this.style.set(key, value);
	    this.dirty(false);
	    return this;
	  },
	
	  /**
	   * Use given style object
	   * @param  {Object} obj
	   */
	  useStyle: function (obj) {
	    this.style = new Style(obj, this);
	    this.dirty(false);
	    return this;
	  }
	};
	zrUtil.inherits(Displayable, Element);
	zrUtil.mixin(Displayable, RectText); // zrUtil.mixin(Displayable, Stateful);
	
	var _default = Displayable;
	module.exports = _default;

/***/ }),
/* 959 */
/***/ (function(module, exports, __webpack_require__) {

	var textHelper = __webpack_require__(960);
	
	var BoundingRect = __webpack_require__(949);
	
	/**
	 * Mixin for drawing text in a element bounding rect
	 * @module zrender/mixin/RectText
	 */
	var tmpRect = new BoundingRect();
	
	var RectText = function () {};
	
	RectText.prototype = {
	  constructor: RectText,
	
	  /**
	   * Draw text in a rect with specified position.
	   * @param  {CanvasRenderingContext2D} ctx
	   * @param  {Object} rect Displayable rect
	   */
	  drawRectText: function (ctx, rect) {
	    var style = this.style;
	    rect = style.textRect || rect; // Optimize, avoid normalize every time.
	
	    this.__dirty && textHelper.normalizeTextStyle(style, true);
	    var text = style.text; // Convert to string
	
	    text != null && (text += '');
	
	    if (!textHelper.needDrawText(text, style)) {
	      return;
	    } // FIXME
	
	
	    ctx.save(); // Transform rect to view space
	
	    var transform = this.transform;
	
	    if (!style.transformText) {
	      if (transform) {
	        tmpRect.copy(rect);
	        tmpRect.applyTransform(transform);
	        rect = tmpRect;
	      }
	    } else {
	      this.setTransform(ctx);
	    } // transformText and textRotation can not be used at the same time.
	
	
	    textHelper.renderText(this, ctx, text, style, rect);
	    ctx.restore();
	  }
	};
	var _default = RectText;
	module.exports = _default;

/***/ }),
/* 960 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(931);
	
	var retrieve2 = _util.retrieve2;
	var retrieve3 = _util.retrieve3;
	var each = _util.each;
	var normalizeCssArray = _util.normalizeCssArray;
	var isString = _util.isString;
	var isObject = _util.isObject;
	
	var textContain = __webpack_require__(961);
	
	var roundRectHelper = __webpack_require__(963);
	
	var imageHelper = __webpack_require__(962);
	
	var fixShadow = __webpack_require__(954);
	
	// TODO: Have not support 'start', 'end' yet.
	var VALID_TEXT_ALIGN = {
	  left: 1,
	  right: 1,
	  center: 1
	};
	var VALID_TEXT_VERTICAL_ALIGN = {
	  top: 1,
	  bottom: 1,
	  middle: 1
	};
	/**
	 * @param {module:zrender/graphic/Style} style
	 * @return {module:zrender/graphic/Style} The input style.
	 */
	
	function normalizeTextStyle(style) {
	  normalizeStyle(style);
	  each(style.rich, normalizeStyle);
	  return style;
	}
	
	function normalizeStyle(style) {
	  if (style) {
	    style.font = textContain.makeFont(style);
	    var textAlign = style.textAlign;
	    textAlign === 'middle' && (textAlign = 'center');
	    style.textAlign = textAlign == null || VALID_TEXT_ALIGN[textAlign] ? textAlign : 'left'; // Compatible with textBaseline.
	
	    var textVerticalAlign = style.textVerticalAlign || style.textBaseline;
	    textVerticalAlign === 'center' && (textVerticalAlign = 'middle');
	    style.textVerticalAlign = textVerticalAlign == null || VALID_TEXT_VERTICAL_ALIGN[textVerticalAlign] ? textVerticalAlign : 'top';
	    var textPadding = style.textPadding;
	
	    if (textPadding) {
	      style.textPadding = normalizeCssArray(style.textPadding);
	    }
	  }
	}
	/**
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {string} text
	 * @param {module:zrender/graphic/Style} style
	 * @param {Object|boolean} [rect] {x, y, width, height}
	 *                  If set false, rect text is not used.
	 */
	
	
	function renderText(hostEl, ctx, text, style, rect) {
	  style.rich ? renderRichText(hostEl, ctx, text, style, rect) : renderPlainText(hostEl, ctx, text, style, rect);
	}
	
	function renderPlainText(hostEl, ctx, text, style, rect) {
	  var font = setCtx(ctx, 'font', style.font || textContain.DEFAULT_FONT);
	  var textPadding = style.textPadding;
	  var contentBlock = hostEl.__textCotentBlock;
	
	  if (!contentBlock || hostEl.__dirty) {
	    contentBlock = hostEl.__textCotentBlock = textContain.parsePlainText(text, font, textPadding, style.truncate);
	  }
	
	  var outerHeight = contentBlock.outerHeight;
	  var textLines = contentBlock.lines;
	  var lineHeight = contentBlock.lineHeight;
	  var boxPos = getBoxPosition(outerHeight, style, rect);
	  var baseX = boxPos.baseX;
	  var baseY = boxPos.baseY;
	  var textAlign = boxPos.textAlign;
	  var textVerticalAlign = boxPos.textVerticalAlign; // Origin of textRotation should be the base point of text drawing.
	
	  applyTextRotation(ctx, style, rect, baseX, baseY);
	  var boxY = textContain.adjustTextY(baseY, outerHeight, textVerticalAlign);
	  var textX = baseX;
	  var textY = boxY;
	  var needDrawBg = needDrawBackground(style);
	
	  if (needDrawBg || textPadding) {
	    // Consider performance, do not call getTextWidth util necessary.
	    var textWidth = textContain.getWidth(text, font);
	    var outerWidth = textWidth;
	    textPadding && (outerWidth += textPadding[1] + textPadding[3]);
	    var boxX = textContain.adjustTextX(baseX, outerWidth, textAlign);
	    needDrawBg && drawBackground(hostEl, ctx, style, boxX, boxY, outerWidth, outerHeight);
	
	    if (textPadding) {
	      textX = getTextXForPadding(baseX, textAlign, textPadding);
	      textY += textPadding[0];
	    }
	  }
	
	  setCtx(ctx, 'textAlign', textAlign || 'left'); // Force baseline to be "middle". Otherwise, if using "top", the
	  // text will offset downward a little bit in font "Microsoft YaHei".
	
	  setCtx(ctx, 'textBaseline', 'middle'); // Always set shadowBlur and shadowOffset to avoid leak from displayable.
	
	  setCtx(ctx, 'shadowBlur', style.textShadowBlur || 0);
	  setCtx(ctx, 'shadowColor', style.textShadowColor || 'transparent');
	  setCtx(ctx, 'shadowOffsetX', style.textShadowOffsetX || 0);
	  setCtx(ctx, 'shadowOffsetY', style.textShadowOffsetY || 0); // `textBaseline` is set as 'middle'.
	
	  textY += lineHeight / 2;
	  var textStrokeWidth = style.textStrokeWidth;
	  var textStroke = getStroke(style.textStroke, textStrokeWidth);
	  var textFill = getFill(style.textFill);
	
	  if (textStroke) {
	    setCtx(ctx, 'lineWidth', textStrokeWidth);
	    setCtx(ctx, 'strokeStyle', textStroke);
	  }
	
	  if (textFill) {
	    setCtx(ctx, 'fillStyle', textFill);
	  }
	
	  for (var i = 0; i < textLines.length; i++) {
	    // Fill after stroke so the outline will not cover the main part.
	    textStroke && ctx.strokeText(textLines[i], textX, textY);
	    textFill && ctx.fillText(textLines[i], textX, textY);
	    textY += lineHeight;
	  }
	}
	
	function renderRichText(hostEl, ctx, text, style, rect) {
	  var contentBlock = hostEl.__textCotentBlock;
	
	  if (!contentBlock || hostEl.__dirty) {
	    contentBlock = hostEl.__textCotentBlock = textContain.parseRichText(text, style);
	  }
	
	  drawRichText(hostEl, ctx, contentBlock, style, rect);
	}
	
	function drawRichText(hostEl, ctx, contentBlock, style, rect) {
	  var contentWidth = contentBlock.width;
	  var outerWidth = contentBlock.outerWidth;
	  var outerHeight = contentBlock.outerHeight;
	  var textPadding = style.textPadding;
	  var boxPos = getBoxPosition(outerHeight, style, rect);
	  var baseX = boxPos.baseX;
	  var baseY = boxPos.baseY;
	  var textAlign = boxPos.textAlign;
	  var textVerticalAlign = boxPos.textVerticalAlign; // Origin of textRotation should be the base point of text drawing.
	
	  applyTextRotation(ctx, style, rect, baseX, baseY);
	  var boxX = textContain.adjustTextX(baseX, outerWidth, textAlign);
	  var boxY = textContain.adjustTextY(baseY, outerHeight, textVerticalAlign);
	  var xLeft = boxX;
	  var lineTop = boxY;
	
	  if (textPadding) {
	    xLeft += textPadding[3];
	    lineTop += textPadding[0];
	  }
	
	  var xRight = xLeft + contentWidth;
	  needDrawBackground(style) && drawBackground(hostEl, ctx, style, boxX, boxY, outerWidth, outerHeight);
	
	  for (var i = 0; i < contentBlock.lines.length; i++) {
	    var line = contentBlock.lines[i];
	    var tokens = line.tokens;
	    var tokenCount = tokens.length;
	    var lineHeight = line.lineHeight;
	    var usedWidth = line.width;
	    var leftIndex = 0;
	    var lineXLeft = xLeft;
	    var lineXRight = xRight;
	    var rightIndex = tokenCount - 1;
	    var token;
	
	    while (leftIndex < tokenCount && (token = tokens[leftIndex], !token.textAlign || token.textAlign === 'left')) {
	      placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXLeft, 'left');
	      usedWidth -= token.width;
	      lineXLeft += token.width;
	      leftIndex++;
	    }
	
	    while (rightIndex >= 0 && (token = tokens[rightIndex], token.textAlign === 'right')) {
	      placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXRight, 'right');
	      usedWidth -= token.width;
	      lineXRight -= token.width;
	      rightIndex--;
	    } // The other tokens are placed as textAlign 'center' if there is enough space.
	
	
	    lineXLeft += (contentWidth - (lineXLeft - xLeft) - (xRight - lineXRight) - usedWidth) / 2;
	
	    while (leftIndex <= rightIndex) {
	      token = tokens[leftIndex]; // Consider width specified by user, use 'center' rather than 'left'.
	
	      placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXLeft + token.width / 2, 'center');
	      lineXLeft += token.width;
	      leftIndex++;
	    }
	
	    lineTop += lineHeight;
	  }
	}
	
	function applyTextRotation(ctx, style, rect, x, y) {
	  // textRotation only apply in RectText.
	  if (rect && style.textRotation) {
	    var origin = style.textOrigin;
	
	    if (origin === 'center') {
	      x = rect.width / 2 + rect.x;
	      y = rect.height / 2 + rect.y;
	    } else if (origin) {
	      x = origin[0] + rect.x;
	      y = origin[1] + rect.y;
	    }
	
	    ctx.translate(x, y); // Positive: anticlockwise
	
	    ctx.rotate(-style.textRotation);
	    ctx.translate(-x, -y);
	  }
	}
	
	function placeToken(hostEl, ctx, token, style, lineHeight, lineTop, x, textAlign) {
	  var tokenStyle = style.rich[token.styleName] || {}; // 'ctx.textBaseline' is always set as 'middle', for sake of
	  // the bias of "Microsoft YaHei".
	
	  var textVerticalAlign = token.textVerticalAlign;
	  var y = lineTop + lineHeight / 2;
	
	  if (textVerticalAlign === 'top') {
	    y = lineTop + token.height / 2;
	  } else if (textVerticalAlign === 'bottom') {
	    y = lineTop + lineHeight - token.height / 2;
	  }
	
	  !token.isLineHolder && needDrawBackground(tokenStyle) && drawBackground(hostEl, ctx, tokenStyle, textAlign === 'right' ? x - token.width : textAlign === 'center' ? x - token.width / 2 : x, y - token.height / 2, token.width, token.height);
	  var textPadding = token.textPadding;
	
	  if (textPadding) {
	    x = getTextXForPadding(x, textAlign, textPadding);
	    y -= token.height / 2 - textPadding[2] - token.textHeight / 2;
	  }
	
	  setCtx(ctx, 'shadowBlur', retrieve3(tokenStyle.textShadowBlur, style.textShadowBlur, 0));
	  setCtx(ctx, 'shadowColor', tokenStyle.textShadowColor || style.textShadowColor || 'transparent');
	  setCtx(ctx, 'shadowOffsetX', retrieve3(tokenStyle.textShadowOffsetX, style.textShadowOffsetX, 0));
	  setCtx(ctx, 'shadowOffsetY', retrieve3(tokenStyle.textShadowOffsetY, style.textShadowOffsetY, 0));
	  setCtx(ctx, 'textAlign', textAlign); // Force baseline to be "middle". Otherwise, if using "top", the
	  // text will offset downward a little bit in font "Microsoft YaHei".
	
	  setCtx(ctx, 'textBaseline', 'middle');
	  setCtx(ctx, 'font', token.font || textContain.DEFAULT_FONT);
	  var textStroke = getStroke(tokenStyle.textStroke || style.textStroke, textStrokeWidth);
	  var textFill = getFill(tokenStyle.textFill || style.textFill);
	  var textStrokeWidth = retrieve2(tokenStyle.textStrokeWidth, style.textStrokeWidth); // Fill after stroke so the outline will not cover the main part.
	
	  if (textStroke) {
	    setCtx(ctx, 'lineWidth', textStrokeWidth);
	    setCtx(ctx, 'strokeStyle', textStroke);
	    ctx.strokeText(token.text, x, y);
	  }
	
	  if (textFill) {
	    setCtx(ctx, 'fillStyle', textFill);
	    ctx.fillText(token.text, x, y);
	  }
	}
	
	function needDrawBackground(style) {
	  return style.textBackgroundColor || style.textBorderWidth && style.textBorderColor;
	} // style: {textBackgroundColor, textBorderWidth, textBorderColor, textBorderRadius}
	// shape: {x, y, width, height}
	
	
	function drawBackground(hostEl, ctx, style, x, y, width, height) {
	  var textBackgroundColor = style.textBackgroundColor;
	  var textBorderWidth = style.textBorderWidth;
	  var textBorderColor = style.textBorderColor;
	  var isPlainBg = isString(textBackgroundColor);
	  setCtx(ctx, 'shadowBlur', style.textBoxShadowBlur || 0);
	  setCtx(ctx, 'shadowColor', style.textBoxShadowColor || 'transparent');
	  setCtx(ctx, 'shadowOffsetX', style.textBoxShadowOffsetX || 0);
	  setCtx(ctx, 'shadowOffsetY', style.textBoxShadowOffsetY || 0);
	
	  if (isPlainBg || textBorderWidth && textBorderColor) {
	    ctx.beginPath();
	    var textBorderRadius = style.textBorderRadius;
	
	    if (!textBorderRadius) {
	      ctx.rect(x, y, width, height);
	    } else {
	      roundRectHelper.buildPath(ctx, {
	        x: x,
	        y: y,
	        width: width,
	        height: height,
	        r: textBorderRadius
	      });
	    }
	
	    ctx.closePath();
	  }
	
	  if (isPlainBg) {
	    setCtx(ctx, 'fillStyle', textBackgroundColor);
	    ctx.fill();
	  } else if (isObject(textBackgroundColor)) {
	    var image = textBackgroundColor.image;
	    image = imageHelper.createOrUpdateImage(image, null, hostEl, onBgImageLoaded, textBackgroundColor);
	
	    if (image && imageHelper.isImageReady(image)) {
	      ctx.drawImage(image, x, y, width, height);
	    }
	  }
	
	  if (textBorderWidth && textBorderColor) {
	    setCtx(ctx, 'lineWidth', textBorderWidth);
	    setCtx(ctx, 'strokeStyle', textBorderColor);
	    ctx.stroke();
	  }
	}
	
	function onBgImageLoaded(image, textBackgroundColor) {
	  // Replace image, so that `contain/text.js#parseRichText`
	  // will get correct result in next tick.
	  textBackgroundColor.image = image;
	}
	
	function getBoxPosition(blockHeiht, style, rect) {
	  var baseX = style.x || 0;
	  var baseY = style.y || 0;
	  var textAlign = style.textAlign;
	  var textVerticalAlign = style.textVerticalAlign; // Text position represented by coord
	
	  if (rect) {
	    var textPosition = style.textPosition;
	
	    if (textPosition instanceof Array) {
	      // Percent
	      baseX = rect.x + parsePercent(textPosition[0], rect.width);
	      baseY = rect.y + parsePercent(textPosition[1], rect.height);
	    } else {
	      var res = textContain.adjustTextPositionOnRect(textPosition, rect, style.textDistance);
	      baseX = res.x;
	      baseY = res.y; // Default align and baseline when has textPosition
	
	      textAlign = textAlign || res.textAlign;
	      textVerticalAlign = textVerticalAlign || res.textVerticalAlign;
	    } // textOffset is only support in RectText, otherwise
	    // we have to adjust boundingRect for textOffset.
	
	
	    var textOffset = style.textOffset;
	
	    if (textOffset) {
	      baseX += textOffset[0];
	      baseY += textOffset[1];
	    }
	  }
	
	  return {
	    baseX: baseX,
	    baseY: baseY,
	    textAlign: textAlign,
	    textVerticalAlign: textVerticalAlign
	  };
	}
	
	function setCtx(ctx, prop, value) {
	  ctx[prop] = fixShadow(ctx, prop, value);
	  return ctx[prop];
	}
	/**
	 * @param {string} [stroke] If specified, do not check style.textStroke.
	 * @param {string} [lineWidth] If specified, do not check style.textStroke.
	 * @param {number} style
	 */
	
	
	function getStroke(stroke, lineWidth) {
	  return stroke == null || lineWidth <= 0 || stroke === 'transparent' || stroke === 'none' ? null // TODO pattern and gradient?
	  : stroke.image || stroke.colorStops ? '#000' : stroke;
	}
	
	function getFill(fill) {
	  return fill == null || fill === 'none' ? null // TODO pattern and gradient?
	  : fill.image || fill.colorStops ? '#000' : fill;
	}
	
	function parsePercent(value, maxValue) {
	  if (typeof value === 'string') {
	    if (value.lastIndexOf('%') >= 0) {
	      return parseFloat(value) / 100 * maxValue;
	    }
	
	    return parseFloat(value);
	  }
	
	  return value;
	}
	
	function getTextXForPadding(x, textAlign, textPadding) {
	  return textAlign === 'right' ? x - textPadding[1] : textAlign === 'center' ? x + textPadding[3] / 2 - textPadding[1] / 2 : x + textPadding[3];
	}
	/**
	 * @param {string} text
	 * @param {module:zrender/Style} style
	 * @return {boolean}
	 */
	
	
	function needDrawText(text, style) {
	  return text != null && (text || style.textBackgroundColor || style.textBorderWidth && style.textBorderColor || style.textPadding);
	}
	
	exports.normalizeTextStyle = normalizeTextStyle;
	exports.renderText = renderText;
	exports.getStroke = getStroke;
	exports.getFill = getFill;
	exports.needDrawText = needDrawText;

/***/ }),
/* 961 */
/***/ (function(module, exports, __webpack_require__) {

	var BoundingRect = __webpack_require__(949);
	
	var imageHelper = __webpack_require__(962);
	
	var _util = __webpack_require__(931);
	
	var getContext = _util.getContext;
	var extend = _util.extend;
	var retrieve2 = _util.retrieve2;
	var retrieve3 = _util.retrieve3;
	var trim = _util.trim;
	var textWidthCache = {};
	var textWidthCacheCounter = 0;
	var TEXT_CACHE_MAX = 5000;
	var STYLE_REG = /\{([a-zA-Z0-9_]+)\|([^}]*)\}/g;
	var DEFAULT_FONT = '12px sans-serif'; // Avoid assign to an exported variable, for transforming to cjs.
	
	var methods = {};
	
	function $override(name, fn) {
	  methods[name] = fn;
	}
	/**
	 * @public
	 * @param {string} text
	 * @param {string} font
	 * @return {number} width
	 */
	
	
	function getWidth(text, font) {
	  font = font || DEFAULT_FONT;
	  var key = text + ':' + font;
	
	  if (textWidthCache[key]) {
	    return textWidthCache[key];
	  }
	
	  var textLines = (text + '').split('\n');
	  var width = 0;
	
	  for (var i = 0, l = textLines.length; i < l; i++) {
	    // textContain.measureText may be overrided in SVG or VML
	    width = Math.max(measureText(textLines[i], font).width, width);
	  }
	
	  if (textWidthCacheCounter > TEXT_CACHE_MAX) {
	    textWidthCacheCounter = 0;
	    textWidthCache = {};
	  }
	
	  textWidthCacheCounter++;
	  textWidthCache[key] = width;
	  return width;
	}
	/**
	 * @public
	 * @param {string} text
	 * @param {string} font
	 * @param {string} [textAlign='left']
	 * @param {string} [textVerticalAlign='top']
	 * @param {Array.<number>} [textPadding]
	 * @param {Object} [rich]
	 * @param {Object} [truncate]
	 * @return {Object} {x, y, width, height, lineHeight}
	 */
	
	
	function getBoundingRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate) {
	  return rich ? getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate) : getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, truncate);
	}
	
	function getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, truncate) {
	  var contentBlock = parsePlainText(text, font, textPadding, truncate);
	  var outerWidth = getWidth(text, font);
	
	  if (textPadding) {
	    outerWidth += textPadding[1] + textPadding[3];
	  }
	
	  var outerHeight = contentBlock.outerHeight;
	  var x = adjustTextX(0, outerWidth, textAlign);
	  var y = adjustTextY(0, outerHeight, textVerticalAlign);
	  var rect = new BoundingRect(x, y, outerWidth, outerHeight);
	  rect.lineHeight = contentBlock.lineHeight;
	  return rect;
	}
	
	function getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate) {
	  var contentBlock = parseRichText(text, {
	    rich: rich,
	    truncate: truncate,
	    font: font,
	    textAlign: textAlign,
	    textPadding: textPadding
	  });
	  var outerWidth = contentBlock.outerWidth;
	  var outerHeight = contentBlock.outerHeight;
	  var x = adjustTextX(0, outerWidth, textAlign);
	  var y = adjustTextY(0, outerHeight, textVerticalAlign);
	  return new BoundingRect(x, y, outerWidth, outerHeight);
	}
	/**
	 * @public
	 * @param {number} x
	 * @param {number} width
	 * @param {string} [textAlign='left']
	 * @return {number} Adjusted x.
	 */
	
	
	function adjustTextX(x, width, textAlign) {
	  // FIXME Right to left language
	  if (textAlign === 'right') {
	    x -= width;
	  } else if (textAlign === 'center') {
	    x -= width / 2;
	  }
	
	  return x;
	}
	/**
	 * @public
	 * @param {number} y
	 * @param {number} height
	 * @param {string} [textVerticalAlign='top']
	 * @return {number} Adjusted y.
	 */
	
	
	function adjustTextY(y, height, textVerticalAlign) {
	  if (textVerticalAlign === 'middle') {
	    y -= height / 2;
	  } else if (textVerticalAlign === 'bottom') {
	    y -= height;
	  }
	
	  return y;
	}
	/**
	 * @public
	 * @param {stirng} textPosition
	 * @param {Object} rect {x, y, width, height}
	 * @param {number} distance
	 * @return {Object} {x, y, textAlign, textVerticalAlign}
	 */
	
	
	function adjustTextPositionOnRect(textPosition, rect, distance) {
	  var x = rect.x;
	  var y = rect.y;
	  var height = rect.height;
	  var width = rect.width;
	  var halfHeight = height / 2;
	  var textAlign = 'left';
	  var textVerticalAlign = 'top';
	
	  switch (textPosition) {
	    case 'left':
	      x -= distance;
	      y += halfHeight;
	      textAlign = 'right';
	      textVerticalAlign = 'middle';
	      break;
	
	    case 'right':
	      x += distance + width;
	      y += halfHeight;
	      textVerticalAlign = 'middle';
	      break;
	
	    case 'top':
	      x += width / 2;
	      y -= distance;
	      textAlign = 'center';
	      textVerticalAlign = 'bottom';
	      break;
	
	    case 'bottom':
	      x += width / 2;
	      y += height + distance;
	      textAlign = 'center';
	      break;
	
	    case 'inside':
	      x += width / 2;
	      y += halfHeight;
	      textAlign = 'center';
	      textVerticalAlign = 'middle';
	      break;
	
	    case 'insideLeft':
	      x += distance;
	      y += halfHeight;
	      textVerticalAlign = 'middle';
	      break;
	
	    case 'insideRight':
	      x += width - distance;
	      y += halfHeight;
	      textAlign = 'right';
	      textVerticalAlign = 'middle';
	      break;
	
	    case 'insideTop':
	      x += width / 2;
	      y += distance;
	      textAlign = 'center';
	      break;
	
	    case 'insideBottom':
	      x += width / 2;
	      y += height - distance;
	      textAlign = 'center';
	      textVerticalAlign = 'bottom';
	      break;
	
	    case 'insideTopLeft':
	      x += distance;
	      y += distance;
	      break;
	
	    case 'insideTopRight':
	      x += width - distance;
	      y += distance;
	      textAlign = 'right';
	      break;
	
	    case 'insideBottomLeft':
	      x += distance;
	      y += height - distance;
	      textVerticalAlign = 'bottom';
	      break;
	
	    case 'insideBottomRight':
	      x += width - distance;
	      y += height - distance;
	      textAlign = 'right';
	      textVerticalAlign = 'bottom';
	      break;
	  }
	
	  return {
	    x: x,
	    y: y,
	    textAlign: textAlign,
	    textVerticalAlign: textVerticalAlign
	  };
	}
	/**
	 * Show ellipsis if overflow.
	 *
	 * @public
	 * @param  {string} text
	 * @param  {string} containerWidth
	 * @param  {string} font
	 * @param  {number} [ellipsis='...']
	 * @param  {Object} [options]
	 * @param  {number} [options.maxIterations=3]
	 * @param  {number} [options.minChar=0] If truncate result are less
	 *                  then minChar, ellipsis will not show, which is
	 *                  better for user hint in some cases.
	 * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.
	 * @return {string}
	 */
	
	
	function truncateText(text, containerWidth, font, ellipsis, options) {
	  if (!containerWidth) {
	    return '';
	  }
	
	  var textLines = (text + '').split('\n');
	  options = prepareTruncateOptions(containerWidth, font, ellipsis, options); // FIXME
	  // It is not appropriate that every line has '...' when truncate multiple lines.
	
	  for (var i = 0, len = textLines.length; i < len; i++) {
	    textLines[i] = truncateSingleLine(textLines[i], options);
	  }
	
	  return textLines.join('\n');
	}
	
	function prepareTruncateOptions(containerWidth, font, ellipsis, options) {
	  options = extend({}, options);
	  options.font = font;
	  var ellipsis = retrieve2(ellipsis, '...');
	  options.maxIterations = retrieve2(options.maxIterations, 2);
	  var minChar = options.minChar = retrieve2(options.minChar, 0); // FIXME
	  // Other languages?
	
	  options.cnCharWidth = getWidth('国', font); // FIXME
	  // Consider proportional font?
	
	  var ascCharWidth = options.ascCharWidth = getWidth('a', font);
	  options.placeholder = retrieve2(options.placeholder, ''); // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.
	  // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.
	
	  var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.
	
	  for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {
	    contentWidth -= ascCharWidth;
	  }
	
	  var ellipsisWidth = getWidth(ellipsis);
	
	  if (ellipsisWidth > contentWidth) {
	    ellipsis = '';
	    ellipsisWidth = 0;
	  }
	
	  contentWidth = containerWidth - ellipsisWidth;
	  options.ellipsis = ellipsis;
	  options.ellipsisWidth = ellipsisWidth;
	  options.contentWidth = contentWidth;
	  options.containerWidth = containerWidth;
	  return options;
	}
	
	function truncateSingleLine(textLine, options) {
	  var containerWidth = options.containerWidth;
	  var font = options.font;
	  var contentWidth = options.contentWidth;
	
	  if (!containerWidth) {
	    return '';
	  }
	
	  var lineWidth = getWidth(textLine, font);
	
	  if (lineWidth <= containerWidth) {
	    return textLine;
	  }
	
	  for (var j = 0;; j++) {
	    if (lineWidth <= contentWidth || j >= options.maxIterations) {
	      textLine += options.ellipsis;
	      break;
	    }
	
	    var subLength = j === 0 ? estimateLength(textLine, contentWidth, options.ascCharWidth, options.cnCharWidth) : lineWidth > 0 ? Math.floor(textLine.length * contentWidth / lineWidth) : 0;
	    textLine = textLine.substr(0, subLength);
	    lineWidth = getWidth(textLine, font);
	  }
	
	  if (textLine === '') {
	    textLine = options.placeholder;
	  }
	
	  return textLine;
	}
	
	function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {
	  var width = 0;
	  var i = 0;
	
	  for (var len = text.length; i < len && width < contentWidth; i++) {
	    var charCode = text.charCodeAt(i);
	    width += 0 <= charCode && charCode <= 127 ? ascCharWidth : cnCharWidth;
	  }
	
	  return i;
	}
	/**
	 * @public
	 * @param {string} font
	 * @return {number} line height
	 */
	
	
	function getLineHeight(font) {
	  // FIXME A rough approach.
	  return getWidth('国', font);
	}
	/**
	 * @public
	 * @param {string} text
	 * @param {string} font
	 * @return {Object} width
	 */
	
	
	function measureText(text, font) {
	  return methods.measureText(text, font);
	} // Avoid assign to an exported variable, for transforming to cjs.
	
	
	methods.measureText = function (text, font) {
	  var ctx = getContext();
	  ctx.font = font || DEFAULT_FONT;
	  return ctx.measureText(text);
	};
	/**
	 * @public
	 * @param {string} text
	 * @param {string} font
	 * @param {Object} [truncate]
	 * @return {Object} block: {lineHeight, lines, height, outerHeight}
	 *  Notice: for performance, do not calculate outerWidth util needed.
	 */
	
	
	function parsePlainText(text, font, padding, truncate) {
	  text != null && (text += '');
	  var lineHeight = getLineHeight(font);
	  var lines = text ? text.split('\n') : [];
	  var height = lines.length * lineHeight;
	  var outerHeight = height;
	
	  if (padding) {
	    outerHeight += padding[0] + padding[2];
	  }
	
	  if (text && truncate) {
	    var truncOuterHeight = truncate.outerHeight;
	    var truncOuterWidth = truncate.outerWidth;
	
	    if (truncOuterHeight != null && outerHeight > truncOuterHeight) {
	      text = '';
	      lines = [];
	    } else if (truncOuterWidth != null) {
	      var options = prepareTruncateOptions(truncOuterWidth - (padding ? padding[1] + padding[3] : 0), font, truncate.ellipsis, {
	        minChar: truncate.minChar,
	        placeholder: truncate.placeholder
	      }); // FIXME
	      // It is not appropriate that every line has '...' when truncate multiple lines.
	
	      for (var i = 0, len = lines.length; i < len; i++) {
	        lines[i] = truncateSingleLine(lines[i], options);
	      }
	    }
	  }
	
	  return {
	    lines: lines,
	    height: height,
	    outerHeight: outerHeight,
	    lineHeight: lineHeight
	  };
	}
	/**
	 * For example: 'some text {a|some text}other text{b|some text}xxx{c|}xxx'
	 * Also consider 'bbbb{a|xxx\nzzz}xxxx\naaaa'.
	 *
	 * @public
	 * @param {string} text
	 * @param {Object} style
	 * @return {Object} block
	 * {
	 *      width,
	 *      height,
	 *      lines: [{
	 *          lineHeight,
	 *          width,
	 *          tokens: [[{
	 *              styleName,
	 *              text,
	 *              width,      // include textPadding
	 *              height,     // include textPadding
	 *              textWidth, // pure text width
	 *              textHeight, // pure text height
	 *              lineHeihgt,
	 *              font,
	 *              textAlign,
	 *              textVerticalAlign
	 *          }], [...], ...]
	 *      }, ...]
	 * }
	 * If styleName is undefined, it is plain text.
	 */
	
	
	function parseRichText(text, style) {
	  var contentBlock = {
	    lines: [],
	    width: 0,
	    height: 0
	  };
	  text != null && (text += '');
	
	  if (!text) {
	    return contentBlock;
	  }
	
	  var lastIndex = STYLE_REG.lastIndex = 0;
	  var result;
	
	  while ((result = STYLE_REG.exec(text)) != null) {
	    var matchedIndex = result.index;
	
	    if (matchedIndex > lastIndex) {
	      pushTokens(contentBlock, text.substring(lastIndex, matchedIndex));
	    }
	
	    pushTokens(contentBlock, result[2], result[1]);
	    lastIndex = STYLE_REG.lastIndex;
	  }
	
	  if (lastIndex < text.length) {
	    pushTokens(contentBlock, text.substring(lastIndex, text.length));
	  }
	
	  var lines = contentBlock.lines;
	  var contentHeight = 0;
	  var contentWidth = 0; // For `textWidth: 100%`
	
	  var pendingList = [];
	  var stlPadding = style.textPadding;
	  var truncate = style.truncate;
	  var truncateWidth = truncate && truncate.outerWidth;
	  var truncateHeight = truncate && truncate.outerHeight;
	
	  if (stlPadding) {
	    truncateWidth != null && (truncateWidth -= stlPadding[1] + stlPadding[3]);
	    truncateHeight != null && (truncateHeight -= stlPadding[0] + stlPadding[2]);
	  } // Calculate layout info of tokens.
	
	
	  for (var i = 0; i < lines.length; i++) {
	    var line = lines[i];
	    var lineHeight = 0;
	    var lineWidth = 0;
	
	    for (var j = 0; j < line.tokens.length; j++) {
	      var token = line.tokens[j];
	      var tokenStyle = token.styleName && style.rich[token.styleName] || {}; // textPadding should not inherit from style.
	
	      var textPadding = token.textPadding = tokenStyle.textPadding; // textFont has been asigned to font by `normalizeStyle`.
	
	      var font = token.font = tokenStyle.font || style.font; // textHeight can be used when textVerticalAlign is specified in token.
	
	      var tokenHeight = token.textHeight = retrieve2( // textHeight should not be inherited, consider it can be specified
	      // as box height of the block.
	      tokenStyle.textHeight, getLineHeight(font));
	      textPadding && (tokenHeight += textPadding[0] + textPadding[2]);
	      token.height = tokenHeight;
	      token.lineHeight = retrieve3(tokenStyle.textLineHeight, style.textLineHeight, tokenHeight);
	      token.textAlign = tokenStyle && tokenStyle.textAlign || style.textAlign;
	      token.textVerticalAlign = tokenStyle && tokenStyle.textVerticalAlign || 'middle';
	
	      if (truncateHeight != null && contentHeight + token.lineHeight > truncateHeight) {
	        return {
	          lines: [],
	          width: 0,
	          height: 0
	        };
	      }
	
	      token.textWidth = getWidth(token.text, font);
	      var tokenWidth = tokenStyle.textWidth;
	      var tokenWidthNotSpecified = tokenWidth == null || tokenWidth === 'auto'; // Percent width, can be `100%`, can be used in drawing separate
	      // line when box width is needed to be auto.
	
	      if (typeof tokenWidth === 'string' && tokenWidth.charAt(tokenWidth.length - 1) === '%') {
	        token.percentWidth = tokenWidth;
	        pendingList.push(token);
	        tokenWidth = 0; // Do not truncate in this case, because there is no user case
	        // and it is too complicated.
	      } else {
	        if (tokenWidthNotSpecified) {
	          tokenWidth = token.textWidth; // FIXME: If image is not loaded and textWidth is not specified, calling
	          // `getBoundingRect()` will not get correct result.
	
	          var textBackgroundColor = tokenStyle.textBackgroundColor;
	          var bgImg = textBackgroundColor && textBackgroundColor.image; // Use cases:
	          // (1) If image is not loaded, it will be loaded at render phase and call
	          // `dirty()` and `textBackgroundColor.image` will be replaced with the loaded
	          // image, and then the right size will be calculated here at the next tick.
	          // See `graphic/helper/text.js`.
	          // (2) If image loaded, and `textBackgroundColor.image` is image src string,
	          // use `imageHelper.findExistImage` to find cached image.
	          // `imageHelper.findExistImage` will always be called here before
	          // `imageHelper.createOrUpdateImage` in `graphic/helper/text.js#renderRichText`
	          // which ensures that image will not be rendered before correct size calcualted.
	
	          if (bgImg) {
	            bgImg = imageHelper.findExistImage(bgImg);
	
	            if (imageHelper.isImageReady(bgImg)) {
	              tokenWidth = Math.max(tokenWidth, bgImg.width * tokenHeight / bgImg.height);
	            }
	          }
	        }
	
	        var paddingW = textPadding ? textPadding[1] + textPadding[3] : 0;
	        tokenWidth += paddingW;
	        var remianTruncWidth = truncateWidth != null ? truncateWidth - lineWidth : null;
	
	        if (remianTruncWidth != null && remianTruncWidth < tokenWidth) {
	          if (!tokenWidthNotSpecified || remianTruncWidth < paddingW) {
	            token.text = '';
	            token.textWidth = tokenWidth = 0;
	          } else {
	            token.text = truncateText(token.text, remianTruncWidth - paddingW, font, truncate.ellipsis, {
	              minChar: truncate.minChar
	            });
	            token.textWidth = getWidth(token.text, font);
	            tokenWidth = token.textWidth + paddingW;
	          }
	        }
	      }
	
	      lineWidth += token.width = tokenWidth;
	      tokenStyle && (lineHeight = Math.max(lineHeight, token.lineHeight));
	    }
	
	    line.width = lineWidth;
	    line.lineHeight = lineHeight;
	    contentHeight += lineHeight;
	    contentWidth = Math.max(contentWidth, lineWidth);
	  }
	
	  contentBlock.outerWidth = contentBlock.width = retrieve2(style.textWidth, contentWidth);
	  contentBlock.outerHeight = contentBlock.height = retrieve2(style.textHeight, contentHeight);
	
	  if (stlPadding) {
	    contentBlock.outerWidth += stlPadding[1] + stlPadding[3];
	    contentBlock.outerHeight += stlPadding[0] + stlPadding[2];
	  }
	
	  for (var i = 0; i < pendingList.length; i++) {
	    var token = pendingList[i];
	    var percentWidth = token.percentWidth; // Should not base on outerWidth, because token can not be placed out of padding.
	
	    token.width = parseInt(percentWidth, 10) / 100 * contentWidth;
	  }
	
	  return contentBlock;
	}
	
	function pushTokens(block, str, styleName) {
	  var isEmptyStr = str === '';
	  var strs = str.split('\n');
	  var lines = block.lines;
	
	  for (var i = 0; i < strs.length; i++) {
	    var text = strs[i];
	    var token = {
	      styleName: styleName,
	      text: text,
	      isLineHolder: !text && !isEmptyStr
	    }; // The first token should be appended to the last line.
	
	    if (!i) {
	      var tokens = (lines[lines.length - 1] || (lines[0] = {
	        tokens: []
	      })).tokens; // Consider cases:
	      // (1) ''.split('\n') => ['', '\n', ''], the '' at the first item
	      // (which is a placeholder) should be replaced by new token.
	      // (2) A image backage, where token likes {a|}.
	      // (3) A redundant '' will affect textAlign in line.
	      // (4) tokens with the same tplName should not be merged, because
	      // they should be displayed in different box (with border and padding).
	
	      var tokensLen = tokens.length;
	      tokensLen === 1 && tokens[0].isLineHolder ? tokens[0] = token : // Consider text is '', only insert when it is the "lineHolder" or
	      // "emptyStr". Otherwise a redundant '' will affect textAlign in line.
	      (text || !tokensLen || isEmptyStr) && tokens.push(token);
	    } // Other tokens always start a new line.
	    else {
	        // If there is '', insert it as a placeholder.
	        lines.push({
	          tokens: [token]
	        });
	      }
	  }
	}
	
	function makeFont(style) {
	  // FIXME in node-canvas fontWeight is before fontStyle
	  // Use `fontSize` `fontFamily` to check whether font properties are defined.
	  var font = (style.fontSize || style.fontFamily) && [style.fontStyle, style.fontWeight, (style.fontSize || 12) + 'px', // If font properties are defined, `fontFamily` should not be ignored.
	  style.fontFamily || 'sans-serif'].join(' ');
	  return font && trim(font) || style.textFont || style.font;
	}
	
	exports.DEFAULT_FONT = DEFAULT_FONT;
	exports.$override = $override;
	exports.getWidth = getWidth;
	exports.getBoundingRect = getBoundingRect;
	exports.adjustTextX = adjustTextX;
	exports.adjustTextY = adjustTextY;
	exports.adjustTextPositionOnRect = adjustTextPositionOnRect;
	exports.truncateText = truncateText;
	exports.getLineHeight = getLineHeight;
	exports.measureText = measureText;
	exports.parsePlainText = parsePlainText;
	exports.parseRichText = parseRichText;
	exports.makeFont = makeFont;

/***/ }),
/* 962 */
/***/ (function(module, exports, __webpack_require__) {

	var LRU = __webpack_require__(946);
	
	var globalImageCache = new LRU(50);
	/**
	 * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc
	 * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image
	 */
	
	function findExistImage(newImageOrSrc) {
	  if (typeof newImageOrSrc === 'string') {
	    var cachedImgObj = globalImageCache.get(newImageOrSrc);
	    return cachedImgObj && cachedImgObj.image;
	  } else {
	    return newImageOrSrc;
	  }
	}
	/**
	 * Caution: User should cache loaded images, but not just count on LRU.
	 * Consider if required images more than LRU size, will dead loop occur?
	 *
	 * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc
	 * @param {HTMLImageElement|HTMLCanvasElement|Canvas} image Existent image.
	 * @param {module:zrender/Element} [hostEl] For calling `dirty`.
	 * @param {Function} [cb] params: (image, cbPayload)
	 * @param {Object} [cbPayload] Payload on cb calling.
	 * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image
	 */
	
	
	function createOrUpdateImage(newImageOrSrc, image, hostEl, cb, cbPayload) {
	  if (!newImageOrSrc) {
	    return image;
	  } else if (typeof newImageOrSrc === 'string') {
	    // Image should not be loaded repeatly.
	    if (image && image.__zrImageSrc === newImageOrSrc || !hostEl) {
	      return image;
	    } // Only when there is no existent image or existent image src
	    // is different, this method is responsible for load.
	
	
	    var cachedImgObj = globalImageCache.get(newImageOrSrc);
	    var pendingWrap = {
	      hostEl: hostEl,
	      cb: cb,
	      cbPayload: cbPayload
	    };
	
	    if (cachedImgObj) {
	      image = cachedImgObj.image;
	      !isImageReady(image) && cachedImgObj.pending.push(pendingWrap);
	    } else {
	      !image && (image = new Image());
	      image.onload = imageOnLoad;
	      globalImageCache.put(newImageOrSrc, image.__cachedImgObj = {
	        image: image,
	        pending: [pendingWrap]
	      });
	      image.src = image.__zrImageSrc = newImageOrSrc;
	    }
	
	    return image;
	  } // newImageOrSrc is an HTMLImageElement or HTMLCanvasElement or Canvas
	  else {
	      return newImageOrSrc;
	    }
	}
	
	function imageOnLoad() {
	  var cachedImgObj = this.__cachedImgObj;
	  this.onload = this.__cachedImgObj = null;
	
	  for (var i = 0; i < cachedImgObj.pending.length; i++) {
	    var pendingWrap = cachedImgObj.pending[i];
	    var cb = pendingWrap.cb;
	    cb && cb(this, pendingWrap.cbPayload);
	    pendingWrap.hostEl.dirty();
	  }
	
	  cachedImgObj.pending.length = 0;
	}
	
	function isImageReady(image) {
	  return image && image.width && image.height;
	}
	
	exports.findExistImage = findExistImage;
	exports.createOrUpdateImage = createOrUpdateImage;
	exports.isImageReady = isImageReady;

/***/ }),
/* 963 */
/***/ (function(module, exports) {

	function buildPath(ctx, shape) {
	  var x = shape.x;
	  var y = shape.y;
	  var width = shape.width;
	  var height = shape.height;
	  var r = shape.r;
	  var r1;
	  var r2;
	  var r3;
	  var r4; // Convert width and height to positive for better borderRadius
	
	  if (width < 0) {
	    x = x + width;
	    width = -width;
	  }
	
	  if (height < 0) {
	    y = y + height;
	    height = -height;
	  }
	
	  if (typeof r === 'number') {
	    r1 = r2 = r3 = r4 = r;
	  } else if (r instanceof Array) {
	    if (r.length === 1) {
	      r1 = r2 = r3 = r4 = r[0];
	    } else if (r.length === 2) {
	      r1 = r3 = r[0];
	      r2 = r4 = r[1];
	    } else if (r.length === 3) {
	      r1 = r[0];
	      r2 = r4 = r[1];
	      r3 = r[2];
	    } else {
	      r1 = r[0];
	      r2 = r[1];
	      r3 = r[2];
	      r4 = r[3];
	    }
	  } else {
	    r1 = r2 = r3 = r4 = 0;
	  }
	
	  var total;
	
	  if (r1 + r2 > width) {
	    total = r1 + r2;
	    r1 *= width / total;
	    r2 *= width / total;
	  }
	
	  if (r3 + r4 > width) {
	    total = r3 + r4;
	    r3 *= width / total;
	    r4 *= width / total;
	  }
	
	  if (r2 + r3 > height) {
	    total = r2 + r3;
	    r2 *= height / total;
	    r3 *= height / total;
	  }
	
	  if (r1 + r4 > height) {
	    total = r1 + r4;
	    r1 *= height / total;
	    r4 *= height / total;
	  }
	
	  ctx.moveTo(x + r1, y);
	  ctx.lineTo(x + width - r2, y);
	  r2 !== 0 && ctx.arc(x + width - r2, y + r2, r2, -Math.PI / 2, 0);
	  ctx.lineTo(x + width, y + height - r3);
	  r3 !== 0 && ctx.arc(x + width - r3, y + height - r3, r3, 0, Math.PI / 2);
	  ctx.lineTo(x + r4, y + height);
	  r4 !== 0 && ctx.arc(x + r4, y + height - r4, r4, Math.PI / 2, Math.PI);
	  ctx.lineTo(x, y + r1);
	  r1 !== 0 && ctx.arc(x + r1, y + r1, r1, Math.PI, Math.PI * 1.5);
	}
	
	exports.buildPath = buildPath;

/***/ }),
/* 964 */
/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(931);
	
	var _event = __webpack_require__(965);
	
	var Dispatcher = _event.Dispatcher;
	
	var requestAnimationFrame = __webpack_require__(956);
	
	var Animator = __webpack_require__(942);
	
	/**
	 * 动画主类, 调度和管理所有动画控制器
	 *
	 * @module zrender/animation/Animation
	 * @author pissang(https://github.com/pissang)
	 */
	// TODO Additive animation
	// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/
	// https://developer.apple.com/videos/wwdc2014/#236
	
	/**
	 * @typedef {Object} IZRenderStage
	 * @property {Function} update
	 */
	
	/**
	 * @alias module:zrender/animation/Animation
	 * @constructor
	 * @param {Object} [options]
	 * @param {Function} [options.onframe]
	 * @param {IZRenderStage} [options.stage]
	 * @example
	 *     var animation = new Animation();
	 *     var obj = {
	 *         x: 100,
	 *         y: 100
	 *     };
	 *     animation.animate(node.position)
	 *         .when(1000, {
	 *             x: 500,
	 *             y: 500
	 *         })
	 *         .when(2000, {
	 *             x: 100,
	 *             y: 100
	 *         })
	 *         .start('spline');
	 */
	var Animation = function (options) {
	  options = options || {};
	  this.stage = options.stage || {};
	
	  this.onframe = options.onframe || function () {}; // private properties
	
	
	  this._clips = [];
	  this._running = false;
	  this._time;
	  this._pausedTime;
	  this._pauseStart;
	  this._paused = false;
	  Dispatcher.call(this);
	};
	
	Animation.prototype = {
	  constructor: Animation,
	
	  /**
	   * 添加 clip
	   * @param {module:zrender/animation/Clip} clip
	   */
	  addClip: function (clip) {
	    this._clips.push(clip);
	  },
	
	  /**
	   * 添加 animator
	   * @param {module:zrender/animation/Animator} animator
	   */
	  addAnimator: function (animator) {
	    animator.animation = this;
	    var clips = animator.getClips();
	
	    for (var i = 0; i < clips.length; i++) {
	      this.addClip(clips[i]);
	    }
	  },
	
	  /**
	   * 删除动画片段
	   * @param {module:zrender/animation/Clip} clip
	   */
	  removeClip: function (clip) {
	    var idx = util.indexOf(this._clips, clip);
	
	    if (idx >= 0) {
	      this._clips.splice(idx, 1);
	    }
	  },
	
	  /**
	   * 删除动画片段
	   * @param {module:zrender/animation/Animator} animator
	   */
	  removeAnimator: function (animator) {
	    var clips = animator.getClips();
	
	    for (var i = 0; i < clips.length; i++) {
	      this.removeClip(clips[i]);
	    }
	
	    animator.animation = null;
	  },
	  _update: function () {
	    var time = new Date().getTime() - this._pausedTime;
	
	    var delta = time - this._time;
	    var clips = this._clips;
	    var len = clips.length;
	    var deferredEvents = [];
	    var deferredClips = [];
	
	    for (var i = 0; i < len; i++) {
	      var clip = clips[i];
	      var e = clip.step(time, delta); // Throw out the events need to be called after
	      // stage.update, like destroy
	
	      if (e) {
	        deferredEvents.push(e);
	        deferredClips.push(clip);
	      }
	    } // Remove the finished clip
	
	
	    for (var i = 0; i < len;) {
	      if (clips[i]._needsRemove) {
	        clips[i] = clips[len - 1];
	        clips.pop();
	        len--;
	      } else {
	        i++;
	      }
	    }
	
	    len = deferredEvents.length;
	
	    for (var i = 0; i < len; i++) {
	      deferredClips[i].fire(deferredEvents[i]);
	    }
	
	    this._time = time;
	    this.onframe(delta); // 'frame' should be triggered before stage, because upper application
	    // depends on the sequence (e.g., echarts-stream and finish
	    // event judge)
	
	    this.trigger('frame', delta);
	
	    if (this.stage.update) {
	      this.stage.update();
	    }
	  },
	  _startLoop: function () {
	    var self = this;
	    this._running = true;
	
	    function step() {
	      if (self._running) {
	        requestAnimationFrame(step);
	        !self._paused && self._update();
	      }
	    }
	
	    requestAnimationFrame(step);
	  },
	
	  /**
	   * Start animation.
	   */
	  start: function () {
	    this._time = new Date().getTime();
	    this._pausedTime = 0;
	
	    this._startLoop();
	  },
	
	  /**
	   * Stop animation.
	   */
	  stop: function () {
	    this._running = false;
	  },
	
	  /**
	   * Pause animation.
	   */
	  pause: function () {
	    if (!this._paused) {
	      this._pauseStart = new Date().getTime();
	      this._paused = true;
	    }
	  },
	
	  /**
	   * Resume animation.
	   */
	  resume: function () {
	    if (this._paused) {
	      this._pausedTime += new Date().getTime() - this._pauseStart;
	      this._paused = false;
	    }
	  },
	
	  /**
	   * Clear animation.
	   */
	  clear: function () {
	    this._clips = [];
	  },
	
	  /**
	   * Whether animation finished.
	   */
	  isFinished: function () {
	    return !this._clips.length;
	  },
	
	  /**
	   * Creat animator for a target, whose props can be animated.
	   *
	   * @param  {Object} target
	   * @param  {Object} options
	   * @param  {boolean} [options.loop=false] Whether loop animation.
	   * @param  {Function} [options.getter=null] Get value from target.
	   * @param  {Function} [options.setter=null] Set value to target.
	   * @return {module:zrender/animation/Animation~Animator}
	   */
	  // TODO Gap
	  animate: function (target, options) {
	    options = options || {};
	    var animator = new Animator(target, options.loop, options.getter, options.setter);
	    this.addAnimator(animator);
	    return animator;
	  }
	};
	util.mixin(Animation, Dispatcher);
	var _default = Animation;
	module.exports = _default;

/***/ }),
/* 965 */
/***/ (function(module, exports, __webpack_require__) {

	var Eventful = __webpack_require__(935);
	
	exports.Dispatcher = Eventful;
	
	var env = __webpack_require__(930);
	
	/**
	 * 事件辅助类
	 * @module zrender/core/event
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */
	var isDomLevel2 = typeof window !== 'undefined' && !!window.addEventListener;
	var MOUSE_EVENT_REG = /^(?:mouse|pointer|contextmenu|drag|drop)|click/;
	
	function getBoundingClientRect(el) {
	  // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect
	  return el.getBoundingClientRect ? el.getBoundingClientRect() : {
	    left: 0,
	    top: 0
	  };
	} // `calculate` is optional, default false
	
	
	function clientToLocal(el, e, out, calculate) {
	  out = out || {}; // According to the W3C Working Draft, offsetX and offsetY should be relative
	  // to the padding edge of the target element. The only browser using this convention
	  // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does
	  // not support the properties.
	  // (see http://www.jacklmoore.com/notes/mouse-position/)
	  // In zr painter.dom, padding edge equals to border edge.
	  // FIXME
	  // When mousemove event triggered on ec tooltip, target is not zr painter.dom, and
	  // offsetX/Y is relative to e.target, where the calculation of zrX/Y via offsetX/Y
	  // is too complex. So css-transfrom dont support in this case temporarily.
	
	  if (calculate || !env.canvasSupported) {
	    defaultGetZrXY(el, e, out);
	  } // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned
	  // ancestor element, so we should make sure el is positioned (e.g., not position:static).
	  // BTW1, Webkit don't return the same results as FF in non-simple cases (like add
	  // zoom-factor, overflow / opacity layers, transforms ...)
	  // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.
	  // <https://bugs.jquery.com/ticket/8523#comment:14>
	  // BTW3, In ff, offsetX/offsetY is always 0.
	  else if (env.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {
	      out.zrX = e.layerX;
	      out.zrY = e.layerY;
	    } // For IE6+, chrome, safari, opera. (When will ff support offsetX?)
	    else if (e.offsetX != null) {
	        out.zrX = e.offsetX;
	        out.zrY = e.offsetY;
	      } // For some other device, e.g., IOS safari.
	      else {
	          defaultGetZrXY(el, e, out);
	        }
	
	  return out;
	}
	
	function defaultGetZrXY(el, e, out) {
	  // This well-known method below does not support css transform.
	  var box = getBoundingClientRect(el);
	  out.zrX = e.clientX - box.left;
	  out.zrY = e.clientY - box.top;
	}
	/**
	 * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标.
	 * `calculate` is optional, default false.
	 */
	
	
	function normalizeEvent(el, e, calculate) {
	  e = e || window.event;
	
	  if (e.zrX != null) {
	    return e;
	  }
	
	  var eventType = e.type;
	  var isTouch = eventType && eventType.indexOf('touch') >= 0;
	
	  if (!isTouch) {
	    clientToLocal(el, e, e, calculate);
	    e.zrDelta = e.wheelDelta ? e.wheelDelta / 120 : -(e.detail || 0) / 3;
	  } else {
	    var touch = eventType != 'touchend' ? e.targetTouches[0] : e.changedTouches[0];
	    touch && clientToLocal(el, touch, e, calculate);
	  } // Add which for click: 1 === left; 2 === middle; 3 === right; otherwise: 0;
	  // See jQuery: https://github.com/jquery/jquery/blob/master/src/event.js
	  // If e.which has been defined, if may be readonly,
	  // see: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which
	
	
	  var button = e.button;
	
	  if (e.which == null && button !== undefined && MOUSE_EVENT_REG.test(e.type)) {
	    e.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
	  }
	
	  return e;
	}
	/**
	 * @param {HTMLElement} el
	 * @param {string} name
	 * @param {Function} handler
	 */
	
	
	function addEventListener(el, name, handler) {
	  if (isDomLevel2) {
	    // Reproduct the console warning:
	    // [Violation] Added non-passive event listener to a scroll-blocking <some> event.
	    // Consider marking event handler as 'passive' to make the page more responsive.
	    // Just set console log level: verbose in chrome dev tool.
	    // then the warning log will be printed when addEventListener called.
	    // See https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
	    // We have not yet found a neat way to using passive. Because in zrender the dom event
	    // listener delegate all of the upper events of element. Some of those events need
	    // to prevent default. For example, the feature `preventDefaultMouseMove` of echarts.
	    // Before passive can be adopted, these issues should be considered:
	    // (1) Whether and how a zrender user specifies an event listener passive. And by default,
	    // passive or not.
	    // (2) How to tread that some zrender event listener is passive, and some is not. If
	    // we use other way but not preventDefault of mousewheel and touchmove, browser
	    // compatibility should be handled.
	    // var opts = (env.passiveSupported && name === 'mousewheel')
	    //     ? {passive: true}
	    //     // By default, the third param of el.addEventListener is `capture: false`.
	    //     : void 0;
	    // el.addEventListener(name, handler /* , opts */);
	    el.addEventListener(name, handler);
	  } else {
	    el.attachEvent('on' + name, handler);
	  }
	}
	
	function removeEventListener(el, name, handler) {
	  if (isDomLevel2) {
	    el.removeEventListener(name, handler);
	  } else {
	    el.detachEvent('on' + name, handler);
	  }
	}
	/**
	 * preventDefault and stopPropagation.
	 * Notice: do not do that in zrender. Upper application
	 * do that if necessary.
	 *
	 * @memberOf module:zrender/core/event
	 * @method
	 * @param {Event} e : event对象
	 */
	
	
	var stop = isDomLevel2 ? function (e) {
	  e.preventDefault();
	  e.stopPropagation();
	  e.cancelBubble = true;
	} : function (e) {
	  e.returnValue = false;
	  e.cancelBubble = true;
	};
	
	function notLeftMouse(e) {
	  // If e.which is undefined, considered as left mouse event.
	  return e.which > 1;
	} // 做向上兼容
	
	
	exports.clientToLocal = clientToLocal;
	exports.normalizeEvent = normalizeEvent;
	exports.addEventListener = addEventListener;
	exports.removeEventListener = removeEventListener;
	exports.stop = stop;
	exports.notLeftMouse = notLeftMouse;

/***/ }),
/* 966 */
/***/ (function(module, exports, __webpack_require__) {

	var _event = __webpack_require__(965);
	
	var addEventListener = _event.addEventListener;
	var removeEventListener = _event.removeEventListener;
	var normalizeEvent = _event.normalizeEvent;
	
	var zrUtil = __webpack_require__(931);
	
	var Eventful = __webpack_require__(935);
	
	var env = __webpack_require__(930);
	
	var GestureMgr = __webpack_require__(967);
	
	var TOUCH_CLICK_DELAY = 300;
	var mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];
	var touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];
	var pointerEventNames = {
	  pointerdown: 1,
	  pointerup: 1,
	  pointermove: 1,
	  pointerout: 1
	};
	var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {
	  var nm = name.replace('mouse', 'pointer');
	  return pointerEventNames[nm] ? nm : name;
	});
	
	function eventNameFix(name) {
	  return name === 'mousewheel' && env.browser.firefox ? 'DOMMouseScroll' : name;
	}
	
	function processGesture(proxy, event, stage) {
	  var gestureMgr = proxy._gestureMgr;
	  stage === 'start' && gestureMgr.clear();
	  var gestureInfo = gestureMgr.recognize(event, proxy.handler.findHover(event.zrX, event.zrY, null).target, proxy.dom);
	  stage === 'end' && gestureMgr.clear(); // Do not do any preventDefault here. Upper application do that if necessary.
	
	  if (gestureInfo) {
	    var type = gestureInfo.type;
	    event.gestureEvent = type;
	    proxy.handler.dispatchToElement({
	      target: gestureInfo.target
	    }, type, gestureInfo.event);
	  }
	} // function onMSGestureChange(proxy, event) {
	//     if (event.translationX || event.translationY) {
	//         // mousemove is carried by MSGesture to reduce the sensitivity.
	//         proxy.handler.dispatchToElement(event.target, 'mousemove', event);
	//     }
	//     if (event.scale !== 1) {
	//         event.pinchX = event.offsetX;
	//         event.pinchY = event.offsetY;
	//         event.pinchScale = event.scale;
	//         proxy.handler.dispatchToElement(event.target, 'pinch', event);
	//     }
	// }
	
	/**
	 * Prevent mouse event from being dispatched after Touch Events action
	 * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>
	 * 1. Mobile browsers dispatch mouse events 300ms after touchend.
	 * 2. Chrome for Android dispatch mousedown for long-touch about 650ms
	 * Result: Blocking Mouse Events for 700ms.
	 */
	
	
	function setTouchTimer(instance) {
	  instance._touching = true;
	  clearTimeout(instance._touchTimer);
	  instance._touchTimer = setTimeout(function () {
	    instance._touching = false;
	  }, 700);
	}
	
	var domHandlers = {
	  /**
	   * Mouse move handler
	   * @inner
	   * @param {Event} event
	   */
	  mousemove: function (event) {
	    event = normalizeEvent(this.dom, event);
	    this.trigger('mousemove', event);
	  },
	
	  /**
	   * Mouse out handler
	   * @inner
	   * @param {Event} event
	   */
	  mouseout: function (event) {
	    event = normalizeEvent(this.dom, event);
	    var element = event.toElement || event.relatedTarget;
	
	    if (element != this.dom) {
	      while (element && element.nodeType != 9) {
	        // 忽略包含在root中的dom引起的mouseOut
	        if (element === this.dom) {
	          return;
	        }
	
	        element = element.parentNode;
	      }
	    }
	
	    this.trigger('mouseout', event);
	  },
	
	  /**
	   * Touch开始响应函数
	   * @inner
	   * @param {Event} event
	   */
	  touchstart: function (event) {
	    // Default mouse behaviour should not be disabled here.
	    // For example, page may needs to be slided.
	    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and
	    // mouse event in upper applicatoin.
	
	    event.zrByTouch = true;
	    this._lastTouchMoment = new Date();
	    processGesture(this, event, 'start'); // In touch device, trigger `mousemove`(`mouseover`) should
	    // be triggered, and must before `mousedown` triggered.
	
	    domHandlers.mousemove.call(this, event);
	    domHandlers.mousedown.call(this, event);
	    setTouchTimer(this);
	  },
	
	  /**
	   * Touch移动响应函数
	   * @inner
	   * @param {Event} event
	   */
	  touchmove: function (event) {
	    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and
	    // mouse event in upper applicatoin.
	
	    event.zrByTouch = true;
	    processGesture(this, event, 'change'); // Mouse move should always be triggered no matter whether
	    // there is gestrue event, because mouse move and pinch may
	    // be used at the same time.
	
	    domHandlers.mousemove.call(this, event);
	    setTouchTimer(this);
	  },
	
	  /**
	   * Touch结束响应函数
	   * @inner
	   * @param {Event} event
	   */
	  touchend: function (event) {
	    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and
	    // mouse event in upper applicatoin.
	
	    event.zrByTouch = true;
	    processGesture(this, event, 'end');
	    domHandlers.mouseup.call(this, event); // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is
	    // triggered in `touchstart`. This seems to be illogical, but by this mechanism,
	    // we can conveniently implement "hover style" in both PC and touch device just
	    // by listening to `mouseover` to add "hover style" and listening to `mouseout`
	    // to remove "hover style" on an element, without any additional code for
	    // compatibility. (`mouseout` will not be triggered in `touchend`, so "hover
	    // style" will remain for user view)
	    // click event should always be triggered no matter whether
	    // there is gestrue event. System click can not be prevented.
	
	    if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {
	      domHandlers.click.call(this, event);
	    }
	
	    setTouchTimer(this);
	  },
	  pointerdown: function (event) {
	    domHandlers.mousedown.call(this, event); // if (useMSGuesture(this, event)) {
	    //     this._msGesture.addPointer(event.pointerId);
	    // }
	  },
	  pointermove: function (event) {
	    // FIXME
	    // pointermove is so sensitive that it always triggered when
	    // tap(click) on touch screen, which affect some judgement in
	    // upper application. So, we dont support mousemove on MS touch
	    // device yet.
	    if (!isPointerFromTouch(event)) {
	      domHandlers.mousemove.call(this, event);
	    }
	  },
	  pointerup: function (event) {
	    domHandlers.mouseup.call(this, event);
	  },
	  pointerout: function (event) {
	    // pointerout will be triggered when tap on touch screen
	    // (IE11+/Edge on MS Surface) after click event triggered,
	    // which is inconsistent with the mousout behavior we defined
	    // in touchend. So we unify them.
	    // (check domHandlers.touchend for detailed explanation)
	    if (!isPointerFromTouch(event)) {
	      domHandlers.mouseout.call(this, event);
	    }
	  }
	};
	
	function isPointerFromTouch(event) {
	  var pointerType = event.pointerType;
	  return pointerType === 'pen' || pointerType === 'touch';
	} // function useMSGuesture(handlerProxy, event) {
	//     return isPointerFromTouch(event) && !!handlerProxy._msGesture;
	// }
	// Common handlers
	
	
	zrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
	  domHandlers[name] = function (event) {
	    event = normalizeEvent(this.dom, event);
	    this.trigger(name, event);
	  };
	});
	/**
	 * 为控制类实例初始化dom 事件处理函数
	 *
	 * @inner
	 * @param {module:zrender/Handler} instance 控制类实例
	 */
	
	function initDomHandler(instance) {
	  zrUtil.each(touchHandlerNames, function (name) {
	    instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);
	  });
	  zrUtil.each(pointerHandlerNames, function (name) {
	    instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);
	  });
	  zrUtil.each(mouseHandlerNames, function (name) {
	    instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);
	  });
	
	  function makeMouseHandler(fn, instance) {
	    return function () {
	      if (instance._touching) {
	        return;
	      }
	
	      return fn.apply(instance, arguments);
	    };
	  }
	}
	
	function HandlerDomProxy(dom) {
	  Eventful.call(this);
	  this.dom = dom;
	  /**
	   * @private
	   * @type {boolean}
	   */
	
	  this._touching = false;
	  /**
	   * @private
	   * @type {number}
	   */
	
	  this._touchTimer;
	  /**
	   * @private
	   * @type {module:zrender/core/GestureMgr}
	   */
	
	  this._gestureMgr = new GestureMgr();
	  this._handlers = {};
	  initDomHandler(this);
	
	  if (env.pointerEventsSupported) {
	    // Only IE11+/Edge
	    // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),
	    // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event
	    // at the same time.
	    // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on
	    // screen, which do not occurs in pointer event.
	    // So we use pointer event to both detect touch gesture and mouse behavior.
	    mountHandlers(pointerHandlerNames, this); // FIXME
	    // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,
	    // which does not prevent defuault behavior occasionally (which may cause view port
	    // zoomed in but use can not zoom it back). And event.preventDefault() does not work.
	    // So we have to not to use MSGesture and not to support touchmove and pinch on MS
	    // touch screen. And we only support click behavior on MS touch screen now.
	    // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.
	    // We dont support touch on IE on win7.
	    // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>
	    // if (typeof MSGesture === 'function') {
	    //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line
	    //     dom.addEventListener('MSGestureChange', onMSGestureChange);
	    // }
	  } else {
	    if (env.touchEventsSupported) {
	      mountHandlers(touchHandlerNames, this); // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.
	      // addEventListener(root, 'mouseout', this._mouseoutHandler);
	    } // 1. Considering some devices that both enable touch and mouse event (like on MS Surface
	    // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise
	    // mouse event can not be handle in those devices.
	    // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent
	    // mouseevent after touch event triggered, see `setTouchTimer`.
	
	
	    mountHandlers(mouseHandlerNames, this);
	  }
	
	  function mountHandlers(handlerNames, instance) {
	    zrUtil.each(handlerNames, function (name) {
	      addEventListener(dom, eventNameFix(name), instance._handlers[name]);
	    }, instance);
	  }
	}
	
	var handlerDomProxyProto = HandlerDomProxy.prototype;
	
	handlerDomProxyProto.dispose = function () {
	  var handlerNames = mouseHandlerNames.concat(touchHandlerNames);
	
	  for (var i = 0; i < handlerNames.length; i++) {
	    var name = handlerNames[i];
	    removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);
	  }
	};
	
	handlerDomProxyProto.setCursor = function (cursorStyle) {
	  this.dom.style && (this.dom.style.cursor = cursorStyle || 'default');
	};
	
	zrUtil.mixin(HandlerDomProxy, Eventful);
	var _default = HandlerDomProxy;
	module.exports = _default;

/***/ }),
/* 967 */
/***/ (function(module, exports, __webpack_require__) {

	var eventUtil = __webpack_require__(965);
	
	/**
	 * Only implements needed gestures for mobile.
	 */
	var GestureMgr = function () {
	  /**
	   * @private
	   * @type {Array.<Object>}
	   */
	  this._track = [];
	};
	
	GestureMgr.prototype = {
	  constructor: GestureMgr,
	  recognize: function (event, target, root) {
	    this._doTrack(event, target, root);
	
	    return this._recognize(event);
	  },
	  clear: function () {
	    this._track.length = 0;
	    return this;
	  },
	  _doTrack: function (event, target, root) {
	    var touches = event.touches;
	
	    if (!touches) {
	      return;
	    }
	
	    var trackItem = {
	      points: [],
	      touches: [],
	      target: target,
	      event: event
	    };
	
	    for (var i = 0, len = touches.length; i < len; i++) {
	      var touch = touches[i];
	      var pos = eventUtil.clientToLocal(root, touch, {});
	      trackItem.points.push([pos.zrX, pos.zrY]);
	      trackItem.touches.push(touch);
	    }
	
	    this._track.push(trackItem);
	  },
	  _recognize: function (event) {
	    for (var eventName in recognizers) {
	      if (recognizers.hasOwnProperty(eventName)) {
	        var gestureInfo = recognizers[eventName](this._track, event);
	
	        if (gestureInfo) {
	          return gestureInfo;
	        }
	      }
	    }
	  }
	};
	
	function dist(pointPair) {
	  var dx = pointPair[1][0] - pointPair[0][0];
	  var dy = pointPair[1][1] - pointPair[0][1];
	  return Math.sqrt(dx * dx + dy * dy);
	}
	
	function center(pointPair) {
	  return [(pointPair[0][0] + pointPair[1][0]) / 2, (pointPair[0][1] + pointPair[1][1]) / 2];
	}
	
	var recognizers = {
	  pinch: function (track, event) {
	    var trackLen = track.length;
	
	    if (!trackLen) {
	      return;
	    }
	
	    var pinchEnd = (track[trackLen - 1] || {}).points;
	    var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;
	
	    if (pinchPre && pinchPre.length > 1 && pinchEnd && pinchEnd.length > 1) {
	      var pinchScale = dist(pinchEnd) / dist(pinchPre);
	      !isFinite(pinchScale) && (pinchScale = 1);
	      event.pinchScale = pinchScale;
	      var pinchCenter = center(pinchEnd);
	      event.pinchX = pinchCenter[0];
	      event.pinchY = pinchCenter[1];
	      return {
	        type: 'pinch',
	        target: track[0].target,
	        event: event
	      };
	    }
	  } // Only pinch currently.
	
	};
	var _default = GestureMgr;
	module.exports = _default;

/***/ }),
/* 968 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	var _util = __webpack_require__(931);
	
	var each = _util.each;
	var filter = _util.filter;
	var map = _util.map;
	var isArray = _util.isArray;
	var indexOf = _util.indexOf;
	var isObject = _util.isObject;
	var isString = _util.isString;
	var createHashMap = _util.createHashMap;
	var assert = _util.assert;
	var clone = _util.clone;
	var merge = _util.merge;
	var extend = _util.extend;
	var mixin = _util.mixin;
	
	var modelUtil = __webpack_require__(969);
	
	var Model = __webpack_require__(970);
	
	var ComponentModel = __webpack_require__(1010);
	
	var globalDefault = __webpack_require__(1016);
	
	var colorPaletteMixin = __webpack_require__(1017);
	
	var _sourceHelper = __webpack_require__(1018);
	
	var resetSourceDefaulter = _sourceHelper.resetSourceDefaulter;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * ECharts global model
	 *
	 * @module {echarts/model/Global}
	 */
	
	/**
	 * Caution: If the mechanism should be changed some day, these cases
	 * should be considered:
	 *
	 * (1) In `merge option` mode, if using the same option to call `setOption`
	 * many times, the result should be the same (try our best to ensure that).
	 * (2) In `merge option` mode, if a component has no id/name specified, it
	 * will be merged by index, and the result sequence of the components is
	 * consistent to the original sequence.
	 * (3) `reset` feature (in toolbox). Find detailed info in comments about
	 * `mergeOption` in module:echarts/model/OptionManager.
	 */
	var OPTION_INNER_KEY = '\0_ec_inner';
	/**
	 * @alias module:echarts/model/Global
	 *
	 * @param {Object} option
	 * @param {module:echarts/model/Model} parentModel
	 * @param {Object} theme
	 */
	
	var GlobalModel = Model.extend({
	  init: function (option, parentModel, theme, optionManager) {
	    theme = theme || {};
	    this.option = null; // Mark as not initialized.
	
	    /**
	     * @type {module:echarts/model/Model}
	     * @private
	     */
	
	    this._theme = new Model(theme);
	    /**
	     * @type {module:echarts/model/OptionManager}
	     */
	
	    this._optionManager = optionManager;
	  },
	  setOption: function (option, optionPreprocessorFuncs) {
	    assert(!(OPTION_INNER_KEY in option), 'please use chart.getOption()');
	
	    this._optionManager.setOption(option, optionPreprocessorFuncs);
	
	    this.resetOption(null);
	  },
	
	  /**
	   * @param {string} type null/undefined: reset all.
	   *                      'recreate': force recreate all.
	   *                      'timeline': only reset timeline option
	   *                      'media': only reset media query option
	   * @return {boolean} Whether option changed.
	   */
	  resetOption: function (type) {
	    var optionChanged = false;
	    var optionManager = this._optionManager;
	
	    if (!type || type === 'recreate') {
	      var baseOption = optionManager.mountOption(type === 'recreate');
	
	      if (!this.option || type === 'recreate') {
	        initBase.call(this, baseOption);
	      } else {
	        this.restoreData();
	        this.mergeOption(baseOption);
	      }
	
	      optionChanged = true;
	    }
	
	    if (type === 'timeline' || type === 'media') {
	      this.restoreData();
	    }
	
	    if (!type || type === 'recreate' || type === 'timeline') {
	      var timelineOption = optionManager.getTimelineOption(this);
	      timelineOption && (this.mergeOption(timelineOption), optionChanged = true);
	    }
	
	    if (!type || type === 'recreate' || type === 'media') {
	      var mediaOptions = optionManager.getMediaOption(this, this._api);
	
	      if (mediaOptions.length) {
	        each(mediaOptions, function (mediaOption) {
	          this.mergeOption(mediaOption, optionChanged = true);
	        }, this);
	      }
	    }
	
	    return optionChanged;
	  },
	
	  /**
	   * @protected
	   */
	  mergeOption: function (newOption) {
	    var option = this.option;
	    var componentsMap = this._componentsMap;
	    var newCptTypes = [];
	    resetSourceDefaulter(this); // If no component class, merge directly.
	    // For example: color, animaiton options, etc.
	
	    each(newOption, function (componentOption, mainType) {
	      if (componentOption == null) {
	        return;
	      }
	
	      if (!ComponentModel.hasClass(mainType)) {
	        // globalSettingTask.dirty();
	        option[mainType] = option[mainType] == null ? clone(componentOption) : merge(option[mainType], componentOption, true);
	      } else if (mainType) {
	        newCptTypes.push(mainType);
	      }
	    });
	    ComponentModel.topologicalTravel(newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this);
	
	    function visitComponent(mainType, dependencies) {
	      var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);
	      var mapResult = modelUtil.mappingToExists(componentsMap.get(mainType), newCptOptionList);
	      modelUtil.makeIdAndName(mapResult); // Set mainType and complete subType.
	
	      each(mapResult, function (item, index) {
	        var opt = item.option;
	
	        if (isObject(opt)) {
	          item.keyInfo.mainType = mainType;
	          item.keyInfo.subType = determineSubType(mainType, opt, item.exist);
	        }
	      });
	      var dependentModels = getComponentsByTypes(componentsMap, dependencies);
	      option[mainType] = [];
	      componentsMap.set(mainType, []);
	      each(mapResult, function (resultItem, index) {
	        var componentModel = resultItem.exist;
	        var newCptOption = resultItem.option;
	        assert(isObject(newCptOption) || componentModel, 'Empty component definition'); // Consider where is no new option and should be merged using {},
	        // see removeEdgeAndAdd in topologicalTravel and
	        // ComponentModel.getAllClassMainTypes.
	
	        if (!newCptOption) {
	          componentModel.mergeOption({}, this);
	          componentModel.optionUpdated({}, false);
	        } else {
	          var ComponentModelClass = ComponentModel.getClass(mainType, resultItem.keyInfo.subType, true);
	
	          if (componentModel && componentModel instanceof ComponentModelClass) {
	            componentModel.name = resultItem.keyInfo.name; // componentModel.settingTask && componentModel.settingTask.dirty();
	
	            componentModel.mergeOption(newCptOption, this);
	            componentModel.optionUpdated(newCptOption, false);
	          } else {
	            // PENDING Global as parent ?
	            var extraOpt = extend({
	              dependentModels: dependentModels,
	              componentIndex: index
	            }, resultItem.keyInfo);
	            componentModel = new ComponentModelClass(newCptOption, this, this, extraOpt);
	            extend(componentModel, extraOpt);
	            componentModel.init(newCptOption, this, this, extraOpt); // Call optionUpdated after init.
	            // newCptOption has been used as componentModel.option
	            // and may be merged with theme and default, so pass null
	            // to avoid confusion.
	
	            componentModel.optionUpdated(null, true);
	          }
	        }
	
	        componentsMap.get(mainType)[index] = componentModel;
	        option[mainType][index] = componentModel.option;
	      }, this); // Backup series for filtering.
	
	      if (mainType === 'series') {
	        createSeriesIndices(this, componentsMap.get('series'));
	      }
	    }
	
	    this._seriesIndicesMap = createHashMap(this._seriesIndices = this._seriesIndices || []);
	  },
	
	  /**
	   * Get option for output (cloned option and inner info removed)
	   * @public
	   * @return {Object}
	   */
	  getOption: function () {
	    var option = clone(this.option);
	    each(option, function (opts, mainType) {
	      if (ComponentModel.hasClass(mainType)) {
	        var opts = modelUtil.normalizeToArray(opts);
	
	        for (var i = opts.length - 1; i >= 0; i--) {
	          // Remove options with inner id.
	          if (modelUtil.isIdInner(opts[i])) {
	            opts.splice(i, 1);
	          }
	        }
	
	        option[mainType] = opts;
	      }
	    });
	    delete option[OPTION_INNER_KEY];
	    return option;
	  },
	
	  /**
	   * @return {module:echarts/model/Model}
	   */
	  getTheme: function () {
	    return this._theme;
	  },
	
	  /**
	   * @param {string} mainType
	   * @param {number} [idx=0]
	   * @return {module:echarts/model/Component}
	   */
	  getComponent: function (mainType, idx) {
	    var list = this._componentsMap.get(mainType);
	
	    if (list) {
	      return list[idx || 0];
	    }
	  },
	
	  /**
	   * If none of index and id and name used, return all components with mainType.
	   * @param {Object} condition
	   * @param {string} condition.mainType
	   * @param {string} [condition.subType] If ignore, only query by mainType
	   * @param {number|Array.<number>} [condition.index] Either input index or id or name.
	   * @param {string|Array.<string>} [condition.id] Either input index or id or name.
	   * @param {string|Array.<string>} [condition.name] Either input index or id or name.
	   * @return {Array.<module:echarts/model/Component>}
	   */
	  queryComponents: function (condition) {
	    var mainType = condition.mainType;
	
	    if (!mainType) {
	      return [];
	    }
	
	    var index = condition.index;
	    var id = condition.id;
	    var name = condition.name;
	
	    var cpts = this._componentsMap.get(mainType);
	
	    if (!cpts || !cpts.length) {
	      return [];
	    }
	
	    var result;
	
	    if (index != null) {
	      if (!isArray(index)) {
	        index = [index];
	      }
	
	      result = filter(map(index, function (idx) {
	        return cpts[idx];
	      }), function (val) {
	        return !!val;
	      });
	    } else if (id != null) {
	      var isIdArray = isArray(id);
	      result = filter(cpts, function (cpt) {
	        return isIdArray && indexOf(id, cpt.id) >= 0 || !isIdArray && cpt.id === id;
	      });
	    } else if (name != null) {
	      var isNameArray = isArray(name);
	      result = filter(cpts, function (cpt) {
	        return isNameArray && indexOf(name, cpt.name) >= 0 || !isNameArray && cpt.name === name;
	      });
	    } else {
	      // Return all components with mainType
	      result = cpts.slice();
	    }
	
	    return filterBySubType(result, condition);
	  },
	
	  /**
	   * The interface is different from queryComponents,
	   * which is convenient for inner usage.
	   *
	   * @usage
	   * var result = findComponents(
	   *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}
	   * );
	   * var result = findComponents(
	   *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}
	   * );
	   * var result = findComponents(
	   *     {mainType: 'series'},
	   *     function (model, index) {...}
	   * );
	   * // result like [component0, componnet1, ...]
	   *
	   * @param {Object} condition
	   * @param {string} condition.mainType Mandatory.
	   * @param {string} [condition.subType] Optional.
	   * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},
	   *        where xxx is mainType.
	   *        If query attribute is null/undefined or has no index/id/name,
	   *        do not filtering by query conditions, which is convenient for
	   *        no-payload situations or when target of action is global.
	   * @param {Function} [condition.filter] parameter: component, return boolean.
	   * @return {Array.<module:echarts/model/Component>}
	   */
	  findComponents: function (condition) {
	    var query = condition.query;
	    var mainType = condition.mainType;
	    var queryCond = getQueryCond(query);
	    var result = queryCond ? this.queryComponents(queryCond) : this._componentsMap.get(mainType);
	    return doFilter(filterBySubType(result, condition));
	
	    function getQueryCond(q) {
	      var indexAttr = mainType + 'Index';
	      var idAttr = mainType + 'Id';
	      var nameAttr = mainType + 'Name';
	      return q && (q[indexAttr] != null || q[idAttr] != null || q[nameAttr] != null) ? {
	        mainType: mainType,
	        // subType will be filtered finally.
	        index: q[indexAttr],
	        id: q[idAttr],
	        name: q[nameAttr]
	      } : null;
	    }
	
	    function doFilter(res) {
	      return condition.filter ? filter(res, condition.filter) : res;
	    }
	  },
	
	  /**
	   * @usage
	   * eachComponent('legend', function (legendModel, index) {
	   *     ...
	   * });
	   * eachComponent(function (componentType, model, index) {
	   *     // componentType does not include subType
	   *     // (componentType is 'xxx' but not 'xxx.aa')
	   * });
	   * eachComponent(
	   *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},
	   *     function (model, index) {...}
	   * );
	   * eachComponent(
	   *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},
	   *     function (model, index) {...}
	   * );
	   *
	   * @param {string|Object=} mainType When mainType is object, the definition
	   *                                  is the same as the method 'findComponents'.
	   * @param {Function} cb
	   * @param {*} context
	   */
	  eachComponent: function (mainType, cb, context) {
	    var componentsMap = this._componentsMap;
	
	    if (typeof mainType === 'function') {
	      context = cb;
	      cb = mainType;
	      componentsMap.each(function (components, componentType) {
	        each(components, function (component, index) {
	          cb.call(context, componentType, component, index);
	        });
	      });
	    } else if (isString(mainType)) {
	      each(componentsMap.get(mainType), cb, context);
	    } else if (isObject(mainType)) {
	      var queryResult = this.findComponents(mainType);
	      each(queryResult, cb, context);
	    }
	  },
	
	  /**
	   * @param {string} name
	   * @return {Array.<module:echarts/model/Series>}
	   */
	  getSeriesByName: function (name) {
	    var series = this._componentsMap.get('series');
	
	    return filter(series, function (oneSeries) {
	      return oneSeries.name === name;
	    });
	  },
	
	  /**
	   * @param {number} seriesIndex
	   * @return {module:echarts/model/Series}
	   */
	  getSeriesByIndex: function (seriesIndex) {
	    return this._componentsMap.get('series')[seriesIndex];
	  },
	
	  /**
	   * Get series list before filtered by type.
	   * FIXME: rename to getRawSeriesByType?
	   *
	   * @param {string} subType
	   * @return {Array.<module:echarts/model/Series>}
	   */
	  getSeriesByType: function (subType) {
	    var series = this._componentsMap.get('series');
	
	    return filter(series, function (oneSeries) {
	      return oneSeries.subType === subType;
	    });
	  },
	
	  /**
	   * @return {Array.<module:echarts/model/Series>}
	   */
	  getSeries: function () {
	    return this._componentsMap.get('series').slice();
	  },
	
	  /**
	   * @return {number}
	   */
	  getSeriesCount: function () {
	    return this._componentsMap.get('series').length;
	  },
	
	  /**
	   * After filtering, series may be different
	   * frome raw series.
	   *
	   * @param {Function} cb
	   * @param {*} context
	   */
	  eachSeries: function (cb, context) {
	    assertSeriesInitialized(this);
	    each(this._seriesIndices, function (rawSeriesIndex) {
	      var series = this._componentsMap.get('series')[rawSeriesIndex];
	
	      cb.call(context, series, rawSeriesIndex);
	    }, this);
	  },
	
	  /**
	   * Iterate raw series before filtered.
	   *
	   * @param {Function} cb
	   * @param {*} context
	   */
	  eachRawSeries: function (cb, context) {
	    each(this._componentsMap.get('series'), cb, context);
	  },
	
	  /**
	   * After filtering, series may be different.
	   * frome raw series.
	   *
	   * @parma {string} subType
	   * @param {Function} cb
	   * @param {*} context
	   */
	  eachSeriesByType: function (subType, cb, context) {
	    assertSeriesInitialized(this);
	    each(this._seriesIndices, function (rawSeriesIndex) {
	      var series = this._componentsMap.get('series')[rawSeriesIndex];
	
	      if (series.subType === subType) {
	        cb.call(context, series, rawSeriesIndex);
	      }
	    }, this);
	  },
	
	  /**
	   * Iterate raw series before filtered of given type.
	   *
	   * @parma {string} subType
	   * @param {Function} cb
	   * @param {*} context
	   */
	  eachRawSeriesByType: function (subType, cb, context) {
	    return each(this.getSeriesByType(subType), cb, context);
	  },
	
	  /**
	   * @param {module:echarts/model/Series} seriesModel
	   */
	  isSeriesFiltered: function (seriesModel) {
	    assertSeriesInitialized(this);
	    return this._seriesIndicesMap.get(seriesModel.componentIndex) == null;
	  },
	
	  /**
	   * @return {Array.<number>}
	   */
	  getCurrentSeriesIndices: function () {
	    return (this._seriesIndices || []).slice();
	  },
	
	  /**
	   * @param {Function} cb
	   * @param {*} context
	   */
	  filterSeries: function (cb, context) {
	    assertSeriesInitialized(this);
	    var filteredSeries = filter(this._componentsMap.get('series'), cb, context);
	    createSeriesIndices(this, filteredSeries);
	  },
	  restoreData: function (payload) {
	    var componentsMap = this._componentsMap;
	    createSeriesIndices(this, componentsMap.get('series'));
	    var componentTypes = [];
	    componentsMap.each(function (components, componentType) {
	      componentTypes.push(componentType);
	    });
	    ComponentModel.topologicalTravel(componentTypes, ComponentModel.getAllClassMainTypes(), function (componentType, dependencies) {
	      each(componentsMap.get(componentType), function (component) {
	        (componentType !== 'series' || !isNotTargetSeries(component, payload)) && component.restoreData();
	      });
	    });
	  }
	});
	
	function isNotTargetSeries(seriesModel, payload) {
	  if (payload) {
	    var index = payload.seiresIndex;
	    var id = payload.seriesId;
	    var name = payload.seriesName;
	    return index != null && seriesModel.componentIndex !== index || id != null && seriesModel.id !== id || name != null && seriesModel.name !== name;
	  }
	}
	/**
	 * @inner
	 */
	
	
	function mergeTheme(option, theme) {
	  // PENDING
	  // NOT use `colorLayer` in theme if option has `color`
	  var notMergeColorLayer = option.color && !option.colorLayer;
	  each(theme, function (themeItem, name) {
	    if (name === 'colorLayer' && notMergeColorLayer) {
	      return;
	    } // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理
	
	
	    if (!ComponentModel.hasClass(name)) {
	      if (typeof themeItem === 'object') {
	        option[name] = !option[name] ? clone(themeItem) : merge(option[name], themeItem, false);
	      } else {
	        if (option[name] == null) {
	          option[name] = themeItem;
	        }
	      }
	    }
	  });
	}
	
	function initBase(baseOption) {
	  baseOption = baseOption; // Using OPTION_INNER_KEY to mark that this option can not be used outside,
	  // i.e. `chart.setOption(chart.getModel().option);` is forbiden.
	
	  this.option = {};
	  this.option[OPTION_INNER_KEY] = 1;
	  /**
	   * Init with series: [], in case of calling findSeries method
	   * before series initialized.
	   * @type {Object.<string, Array.<module:echarts/model/Model>>}
	   * @private
	   */
	
	  this._componentsMap = createHashMap({
	    series: []
	  });
	  /**
	   * Mapping between filtered series list and raw series list.
	   * key: filtered series indices, value: raw series indices.
	   * @type {Array.<nubmer>}
	   * @private
	   */
	
	  this._seriesIndices;
	  this._seriesIndicesMap;
	  mergeTheme(baseOption, this._theme.option); // TODO Needs clone when merging to the unexisted property
	
	  merge(baseOption, globalDefault, false);
	  this.mergeOption(baseOption);
	}
	/**
	 * @inner
	 * @param {Array.<string>|string} types model types
	 * @return {Object} key: {string} type, value: {Array.<Object>} models
	 */
	
	
	function getComponentsByTypes(componentsMap, types) {
	  if (!isArray(types)) {
	    types = types ? [types] : [];
	  }
	
	  var ret = {};
	  each(types, function (type) {
	    ret[type] = (componentsMap.get(type) || []).slice();
	  });
	  return ret;
	}
	/**
	 * @inner
	 */
	
	
	function determineSubType(mainType, newCptOption, existComponent) {
	  var subType = newCptOption.type ? newCptOption.type : existComponent ? existComponent.subType // Use determineSubType only when there is no existComponent.
	  : ComponentModel.determineSubType(mainType, newCptOption); // tooltip, markline, markpoint may always has no subType
	
	  return subType;
	}
	/**
	 * @inner
	 */
	
	
	function createSeriesIndices(ecModel, seriesModels) {
	  ecModel._seriesIndicesMap = createHashMap(ecModel._seriesIndices = map(seriesModels, function (series) {
	    return series.componentIndex;
	  }) || []);
	}
	/**
	 * @inner
	 */
	
	
	function filterBySubType(components, condition) {
	  // Using hasOwnProperty for restrict. Consider
	  // subType is undefined in user payload.
	  return condition.hasOwnProperty('subType') ? filter(components, function (cpt) {
	    return cpt.subType === condition.subType;
	  }) : components;
	}
	/**
	 * @inner
	 */
	
	
	function assertSeriesInitialized(ecModel) {}
	
	mixin(GlobalModel, colorPaletteMixin);
	var _default = GlobalModel;
	module.exports = _default;

/***/ }),
/* 969 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;
	var isObject = zrUtil.isObject;
	var isArray = zrUtil.isArray;
	/**
	 * Make the name displayable. But we should
	 * make sure it is not duplicated with user
	 * specified name, so use '\0';
	 */
	
	var DUMMY_COMPONENT_NAME_PREFIX = 'series\0';
	/**
	 * If value is not array, then translate it to array.
	 * @param  {*} value
	 * @return {Array} [value] or value
	 */
	
	function normalizeToArray(value) {
	  return value instanceof Array ? value : value == null ? [] : [value];
	}
	/**
	 * Sync default option between normal and emphasis like `position` and `show`
	 * In case some one will write code like
	 *     label: {
	 *          show: false,
	 *          position: 'outside',
	 *          fontSize: 18
	 *     },
	 *     emphasis: {
	 *          label: { show: true }
	 *     }
	 * @param {Object} opt
	 * @param {string} key
	 * @param {Array.<string>} subOpts
	 */
	
	
	function defaultEmphasis(opt, key, subOpts) {
	  // Caution: performance sensitive.
	  if (opt) {
	    opt[key] = opt[key] || {};
	    opt.emphasis = opt.emphasis || {};
	    opt.emphasis[key] = opt.emphasis[key] || {}; // Default emphasis option from normal
	
	    for (var i = 0, len = subOpts.length; i < len; i++) {
	      var subOptName = subOpts[i];
	
	      if (!opt.emphasis[key].hasOwnProperty(subOptName) && opt[key].hasOwnProperty(subOptName)) {
	        opt.emphasis[key][subOptName] = opt[key][subOptName];
	      }
	    }
	  }
	}
	
	var TEXT_STYLE_OPTIONS = ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'rich', 'tag', 'color', 'textBorderColor', 'textBorderWidth', 'width', 'height', 'lineHeight', 'align', 'verticalAlign', 'baseline', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'textShadowColor', 'textShadowBlur', 'textShadowOffsetX', 'textShadowOffsetY', 'backgroundColor', 'borderColor', 'borderWidth', 'borderRadius', 'padding']; // modelUtil.LABEL_OPTIONS = modelUtil.TEXT_STYLE_OPTIONS.concat([
	//     'position', 'offset', 'rotate', 'origin', 'show', 'distance', 'formatter',
	//     'fontStyle', 'fontWeight', 'fontSize', 'fontFamily',
	//     // FIXME: deprecated, check and remove it.
	//     'textStyle'
	// ]);
	
	/**
	 * The method do not ensure performance.
	 * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	 * This helper method retieves value from data.
	 * @param {string|number|Date|Array|Object} dataItem
	 * @return {number|string|Date|Array.<number|string|Date>}
	 */
	
	function getDataItemValue(dataItem) {
	  return isObject(dataItem) && !isArray(dataItem) && !(dataItem instanceof Date) ? dataItem.value : dataItem;
	}
	/**
	 * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	 * This helper method determine if dataItem has extra option besides value
	 * @param {string|number|Date|Array|Object} dataItem
	 */
	
	
	function isDataItemOption(dataItem) {
	  return isObject(dataItem) && !(dataItem instanceof Array); // // markLine data can be array
	  // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));
	}
	/**
	 * Mapping to exists for merge.
	 *
	 * @public
	 * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists
	 * @param {Object|Array.<Object>} newCptOptions
	 * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
	 *                          index of which is the same as exists.
	 */
	
	
	function mappingToExists(exists, newCptOptions) {
	  // Mapping by the order by original option (but not order of
	  // new option) in merge mode. Because we should ensure
	  // some specified index (like xAxisIndex) is consistent with
	  // original option, which is easy to understand, espatially in
	  // media query. And in most case, merge option is used to
	  // update partial option but not be expected to change order.
	  newCptOptions = (newCptOptions || []).slice();
	  var result = zrUtil.map(exists || [], function (obj, index) {
	    return {
	      exist: obj
	    };
	  }); // Mapping by id or name if specified.
	
	  each(newCptOptions, function (cptOption, index) {
	    if (!isObject(cptOption)) {
	      return;
	    } // id has highest priority.
	
	
	    for (var i = 0; i < result.length; i++) {
	      if (!result[i].option // Consider name: two map to one.
	      && cptOption.id != null && result[i].exist.id === cptOption.id + '') {
	        result[i].option = cptOption;
	        newCptOptions[index] = null;
	        return;
	      }
	    }
	
	    for (var i = 0; i < result.length; i++) {
	      var exist = result[i].exist;
	
	      if (!result[i].option // Consider name: two map to one.
	      // Can not match when both ids exist but different.
	      && (exist.id == null || cptOption.id == null) && cptOption.name != null && !isIdInner(cptOption) && !isIdInner(exist) && exist.name === cptOption.name + '') {
	        result[i].option = cptOption;
	        newCptOptions[index] = null;
	        return;
	      }
	    }
	  }); // Otherwise mapping by index.
	
	  each(newCptOptions, function (cptOption, index) {
	    if (!isObject(cptOption)) {
	      return;
	    }
	
	    var i = 0;
	
	    for (; i < result.length; i++) {
	      var exist = result[i].exist;
	
	      if (!result[i].option // Existing model that already has id should be able to
	      // mapped to (because after mapping performed model may
	      // be assigned with a id, whish should not affect next
	      // mapping), except those has inner id.
	      && !isIdInner(exist) // Caution:
	      // Do not overwrite id. But name can be overwritten,
	      // because axis use name as 'show label text'.
	      // 'exist' always has id and name and we dont
	      // need to check it.
	      && cptOption.id == null) {
	        result[i].option = cptOption;
	        break;
	      }
	    }
	
	    if (i >= result.length) {
	      result.push({
	        option: cptOption
	      });
	    }
	  });
	  return result;
	}
	/**
	 * Make id and name for mapping result (result of mappingToExists)
	 * into `keyInfo` field.
	 *
	 * @public
	 * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
	 *                          which order is the same as exists.
	 * @return {Array.<Object>} The input.
	 */
	
	
	function makeIdAndName(mapResult) {
	  // We use this id to hash component models and view instances
	  // in echarts. id can be specified by user, or auto generated.
	  // The id generation rule ensures new view instance are able
	  // to mapped to old instance when setOption are called in
	  // no-merge mode. So we generate model id by name and plus
	  // type in view id.
	  // name can be duplicated among components, which is convenient
	  // to specify multi components (like series) by one name.
	  // Ensure that each id is distinct.
	  var idMap = zrUtil.createHashMap();
	  each(mapResult, function (item, index) {
	    var existCpt = item.exist;
	    existCpt && idMap.set(existCpt.id, item);
	  });
	  each(mapResult, function (item, index) {
	    var opt = item.option;
	    zrUtil.assert(!opt || opt.id == null || !idMap.get(opt.id) || idMap.get(opt.id) === item, 'id duplicates: ' + (opt && opt.id));
	    opt && opt.id != null && idMap.set(opt.id, item);
	    !item.keyInfo && (item.keyInfo = {});
	  }); // Make name and id.
	
	  each(mapResult, function (item, index) {
	    var existCpt = item.exist;
	    var opt = item.option;
	    var keyInfo = item.keyInfo;
	
	    if (!isObject(opt)) {
	      return;
	    } // name can be overwitten. Consider case: axis.name = '20km'.
	    // But id generated by name will not be changed, which affect
	    // only in that case: setOption with 'not merge mode' and view
	    // instance will be recreated, which can be accepted.
	
	
	    keyInfo.name = opt.name != null ? opt.name + '' : existCpt ? existCpt.name // Avoid diffferent series has the same name,
	    // because name may be used like in color pallet.
	    : DUMMY_COMPONENT_NAME_PREFIX + index;
	
	    if (existCpt) {
	      keyInfo.id = existCpt.id;
	    } else if (opt.id != null) {
	      keyInfo.id = opt.id + '';
	    } else {
	      // Consider this situatoin:
	      //  optionA: [{name: 'a'}, {name: 'a'}, {..}]
	      //  optionB [{..}, {name: 'a'}, {name: 'a'}]
	      // Series with the same name between optionA and optionB
	      // should be mapped.
	      var idNum = 0;
	
	      do {
	        keyInfo.id = '\0' + keyInfo.name + '\0' + idNum++;
	      } while (idMap.get(keyInfo.id));
	    }
	
	    idMap.set(keyInfo.id, item);
	  });
	}
	
	function isNameSpecified(componentModel) {
	  var name = componentModel.name; // Is specified when `indexOf` get -1 or > 0.
	
	  return !!(name && name.indexOf(DUMMY_COMPONENT_NAME_PREFIX));
	}
	/**
	 * @public
	 * @param {Object} cptOption
	 * @return {boolean}
	 */
	
	
	function isIdInner(cptOption) {
	  return isObject(cptOption) && cptOption.id && (cptOption.id + '').indexOf('\0_ec_\0') === 0;
	}
	/**
	 * A helper for removing duplicate items between batchA and batchB,
	 * and in themselves, and categorize by series.
	 *
	 * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
	 * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
	 * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]
	 */
	
	
	function compressBatches(batchA, batchB) {
	  var mapA = {};
	  var mapB = {};
	  makeMap(batchA || [], mapA);
	  makeMap(batchB || [], mapB, mapA);
	  return [mapToArray(mapA), mapToArray(mapB)];
	
	  function makeMap(sourceBatch, map, otherMap) {
	    for (var i = 0, len = sourceBatch.length; i < len; i++) {
	      var seriesId = sourceBatch[i].seriesId;
	      var dataIndices = normalizeToArray(sourceBatch[i].dataIndex);
	      var otherDataIndices = otherMap && otherMap[seriesId];
	
	      for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {
	        var dataIndex = dataIndices[j];
	
	        if (otherDataIndices && otherDataIndices[dataIndex]) {
	          otherDataIndices[dataIndex] = null;
	        } else {
	          (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;
	        }
	      }
	    }
	  }
	
	  function mapToArray(map, isData) {
	    var result = [];
	
	    for (var i in map) {
	      if (map.hasOwnProperty(i) && map[i] != null) {
	        if (isData) {
	          result.push(+i);
	        } else {
	          var dataIndices = mapToArray(map[i], true);
	          dataIndices.length && result.push({
	            seriesId: i,
	            dataIndex: dataIndices
	          });
	        }
	      }
	    }
	
	    return result;
	  }
	}
	/**
	 * @param {module:echarts/data/List} data
	 * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name
	 *                         each of which can be Array or primary type.
	 * @return {number|Array.<number>} dataIndex If not found, return undefined/null.
	 */
	
	
	function queryDataIndex(data, payload) {
	  if (payload.dataIndexInside != null) {
	    return payload.dataIndexInside;
	  } else if (payload.dataIndex != null) {
	    return zrUtil.isArray(payload.dataIndex) ? zrUtil.map(payload.dataIndex, function (value) {
	      return data.indexOfRawIndex(value);
	    }) : data.indexOfRawIndex(payload.dataIndex);
	  } else if (payload.name != null) {
	    return zrUtil.isArray(payload.name) ? zrUtil.map(payload.name, function (value) {
	      return data.indexOfName(value);
	    }) : data.indexOfName(payload.name);
	  }
	}
	/**
	 * Enable property storage to any host object.
	 * Notice: Serialization is not supported.
	 *
	 * For example:
	 * var inner = zrUitl.makeInner();
	 *
	 * function some1(hostObj) {
	 *      inner(hostObj).someProperty = 1212;
	 *      ...
	 * }
	 * function some2() {
	 *      var fields = inner(this);
	 *      fields.someProperty1 = 1212;
	 *      fields.someProperty2 = 'xx';
	 *      ...
	 * }
	 *
	 * @return {Function}
	 */
	
	
	function makeInner() {
	  // Consider different scope by es module import.
	  var key = '__\0ec_inner_' + innerUniqueIndex++ + '_' + Math.random().toFixed(5);
	  return function (hostObj) {
	    return hostObj[key] || (hostObj[key] = {});
	  };
	}
	
	var innerUniqueIndex = 0;
	/**
	 * @param {module:echarts/model/Global} ecModel
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex, seriesId, seriesName,
	 *            geoIndex, geoId, geoName,
	 *            bmapIndex, bmapId, bmapName,
	 *            xAxisIndex, xAxisId, xAxisName,
	 *            yAxisIndex, yAxisId, yAxisName,
	 *            gridIndex, gridId, gridName,
	 *            ... (can be extended)
	 *        }
	 *        Each properties can be number|string|Array.<number>|Array.<string>
	 *        For example, a finder could be
	 *        {
	 *            seriesIndex: 3,
	 *            geoId: ['aa', 'cc'],
	 *            gridName: ['xx', 'rr']
	 *        }
	 *        xxxIndex can be set as 'all' (means all xxx) or 'none' (means not specify)
	 *        If nothing or null/undefined specified, return nothing.
	 * @param {Object} [opt]
	 * @param {string} [opt.defaultMainType]
	 * @param {Array.<string>} [opt.includeMainTypes]
	 * @return {Object} result like:
	 *        {
	 *            seriesModels: [seriesModel1, seriesModel2],
	 *            seriesModel: seriesModel1, // The first model
	 *            geoModels: [geoModel1, geoModel2],
	 *            geoModel: geoModel1, // The first model
	 *            ...
	 *        }
	 */
	
	function parseFinder(ecModel, finder, opt) {
	  if (zrUtil.isString(finder)) {
	    var obj = {};
	    obj[finder + 'Index'] = 0;
	    finder = obj;
	  }
	
	  var defaultMainType = opt && opt.defaultMainType;
	
	  if (defaultMainType && !has(finder, defaultMainType + 'Index') && !has(finder, defaultMainType + 'Id') && !has(finder, defaultMainType + 'Name')) {
	    finder[defaultMainType + 'Index'] = 0;
	  }
	
	  var result = {};
	  each(finder, function (value, key) {
	    var value = finder[key]; // Exclude 'dataIndex' and other illgal keys.
	
	    if (key === 'dataIndex' || key === 'dataIndexInside') {
	      result[key] = value;
	      return;
	    }
	
	    var parsedKey = key.match(/^(\w+)(Index|Id|Name)$/) || [];
	    var mainType = parsedKey[1];
	    var queryType = (parsedKey[2] || '').toLowerCase();
	
	    if (!mainType || !queryType || value == null || queryType === 'index' && value === 'none' || opt && opt.includeMainTypes && zrUtil.indexOf(opt.includeMainTypes, mainType) < 0) {
	      return;
	    }
	
	    var queryParam = {
	      mainType: mainType
	    };
	
	    if (queryType !== 'index' || value !== 'all') {
	      queryParam[queryType] = value;
	    }
	
	    var models = ecModel.queryComponents(queryParam);
	    result[mainType + 'Models'] = models;
	    result[mainType + 'Model'] = models[0];
	  });
	  return result;
	}
	
	function has(obj, prop) {
	  return obj && obj.hasOwnProperty(prop);
	}
	
	function setAttribute(dom, key, value) {
	  dom.setAttribute ? dom.setAttribute(key, value) : dom[key] = value;
	}
	
	function getAttribute(dom, key) {
	  return dom.getAttribute ? dom.getAttribute(key) : dom[key];
	}
	
	exports.normalizeToArray = normalizeToArray;
	exports.defaultEmphasis = defaultEmphasis;
	exports.TEXT_STYLE_OPTIONS = TEXT_STYLE_OPTIONS;
	exports.getDataItemValue = getDataItemValue;
	exports.isDataItemOption = isDataItemOption;
	exports.mappingToExists = mappingToExists;
	exports.makeIdAndName = makeIdAndName;
	exports.isNameSpecified = isNameSpecified;
	exports.isIdInner = isIdInner;
	exports.compressBatches = compressBatches;
	exports.queryDataIndex = queryDataIndex;
	exports.makeInner = makeInner;
	exports.parseFinder = parseFinder;
	exports.setAttribute = setAttribute;
	exports.getAttribute = getAttribute;

/***/ }),
/* 970 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var env = __webpack_require__(930);
	
	var _model = __webpack_require__(969);
	
	var makeInner = _model.makeInner;
	
	var _clazz = __webpack_require__(971);
	
	var enableClassExtend = _clazz.enableClassExtend;
	var enableClassCheck = _clazz.enableClassCheck;
	
	var lineStyleMixin = __webpack_require__(972);
	
	var areaStyleMixin = __webpack_require__(974);
	
	var textStyleMixin = __webpack_require__(975);
	
	var itemStyleMixin = __webpack_require__(1009);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * @module echarts/model/Model
	 */
	var mixin = zrUtil.mixin;
	var inner = makeInner();
	/**
	 * @alias module:echarts/model/Model
	 * @constructor
	 * @param {Object} option
	 * @param {module:echarts/model/Model} [parentModel]
	 * @param {module:echarts/model/Global} [ecModel]
	 */
	
	function Model(option, parentModel, ecModel) {
	  /**
	   * @type {module:echarts/model/Model}
	   * @readOnly
	   */
	  this.parentModel = parentModel;
	  /**
	   * @type {module:echarts/model/Global}
	   * @readOnly
	   */
	
	  this.ecModel = ecModel;
	  /**
	   * @type {Object}
	   * @protected
	   */
	
	  this.option = option; // Simple optimization
	  // if (this.init) {
	  //     if (arguments.length <= 4) {
	  //         this.init(option, parentModel, ecModel, extraOpt);
	  //     }
	  //     else {
	  //         this.init.apply(this, arguments);
	  //     }
	  // }
	}
	
	Model.prototype = {
	  constructor: Model,
	
	  /**
	   * Model 的初始化函数
	   * @param {Object} option
	   */
	  init: null,
	
	  /**
	   * 从新的 Option merge
	   */
	  mergeOption: function (option) {
	    zrUtil.merge(this.option, option, true);
	  },
	
	  /**
	   * @param {string|Array.<string>} path
	   * @param {boolean} [ignoreParent=false]
	   * @return {*}
	   */
	  get: function (path, ignoreParent) {
	    if (path == null) {
	      return this.option;
	    }
	
	    return doGet(this.option, this.parsePath(path), !ignoreParent && getParent(this, path));
	  },
	
	  /**
	   * @param {string} key
	   * @param {boolean} [ignoreParent=false]
	   * @return {*}
	   */
	  getShallow: function (key, ignoreParent) {
	    var option = this.option;
	    var val = option == null ? option : option[key];
	    var parentModel = !ignoreParent && getParent(this, key);
	
	    if (val == null && parentModel) {
	      val = parentModel.getShallow(key);
	    }
	
	    return val;
	  },
	
	  /**
	   * @param {string|Array.<string>} [path]
	   * @param {module:echarts/model/Model} [parentModel]
	   * @return {module:echarts/model/Model}
	   */
	  getModel: function (path, parentModel) {
	    var obj = path == null ? this.option : doGet(this.option, path = this.parsePath(path));
	    var thisParentModel;
	    parentModel = parentModel || (thisParentModel = getParent(this, path)) && thisParentModel.getModel(path);
	    return new Model(obj, parentModel, this.ecModel);
	  },
	
	  /**
	   * If model has option
	   */
	  isEmpty: function () {
	    return this.option == null;
	  },
	  restoreData: function () {},
	  // Pending
	  clone: function () {
	    var Ctor = this.constructor;
	    return new Ctor(zrUtil.clone(this.option));
	  },
	  setReadOnly: function (properties) {// clazzUtil.setReadOnly(this, properties);
	  },
	  // If path is null/undefined, return null/undefined.
	  parsePath: function (path) {
	    if (typeof path === 'string') {
	      path = path.split('.');
	    }
	
	    return path;
	  },
	
	  /**
	   * @param {Function} getParentMethod
	   *        param {Array.<string>|string} path
	   *        return {module:echarts/model/Model}
	   */
	  customizeGetParent: function (getParentMethod) {
	    inner(this).getParent = getParentMethod;
	  },
	  isAnimationEnabled: function () {
	    if (!env.node) {
	      if (this.option.animation != null) {
	        return !!this.option.animation;
	      } else if (this.parentModel) {
	        return this.parentModel.isAnimationEnabled();
	      }
	    }
	  }
	};
	
	function doGet(obj, pathArr, parentModel) {
	  for (var i = 0; i < pathArr.length; i++) {
	    // Ignore empty
	    if (!pathArr[i]) {
	      continue;
	    } // obj could be number/string/... (like 0)
	
	
	    obj = obj && typeof obj === 'object' ? obj[pathArr[i]] : null;
	
	    if (obj == null) {
	      break;
	    }
	  }
	
	  if (obj == null && parentModel) {
	    obj = parentModel.get(pathArr);
	  }
	
	  return obj;
	} // `path` can be null/undefined
	
	
	function getParent(model, path) {
	  var getParentMethod = inner(model).getParent;
	  return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;
	} // Enable Model.extend.
	
	
	enableClassExtend(Model);
	enableClassCheck(Model);
	mixin(Model, lineStyleMixin);
	mixin(Model, areaStyleMixin);
	mixin(Model, textStyleMixin);
	mixin(Model, itemStyleMixin);
	var _default = Model;
	module.exports = _default;

/***/ }),
/* 971 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	var zrUtil = __webpack_require__(931);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var TYPE_DELIMITER = '.';
	var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';
	/**
	 * Notice, parseClassType('') should returns {main: '', sub: ''}
	 * @public
	 */
	
	function parseClassType(componentType) {
	  var ret = {
	    main: '',
	    sub: ''
	  };
	
	  if (componentType) {
	    componentType = componentType.split(TYPE_DELIMITER);
	    ret.main = componentType[0] || '';
	    ret.sub = componentType[1] || '';
	  }
	
	  return ret;
	}
	/**
	 * @public
	 */
	
	
	function checkClassType(componentType) {
	  zrUtil.assert(/^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType), 'componentType "' + componentType + '" illegal');
	}
	/**
	 * @public
	 */
	
	
	function enableClassExtend(RootClass, mandatoryMethods) {
	  RootClass.$constructor = RootClass;
	
	  RootClass.extend = function (proto) {
	    var superClass = this;
	
	    var ExtendedClass = function () {
	      if (!proto.$constructor) {
	        superClass.apply(this, arguments);
	      } else {
	        proto.$constructor.apply(this, arguments);
	      }
	    };
	
	    zrUtil.extend(ExtendedClass.prototype, proto);
	    ExtendedClass.extend = this.extend;
	    ExtendedClass.superCall = superCall;
	    ExtendedClass.superApply = superApply;
	    zrUtil.inherits(ExtendedClass, this);
	    ExtendedClass.superClass = superClass;
	    return ExtendedClass;
	  };
	}
	
	var classBase = 0;
	/**
	 * Can not use instanceof, consider different scope by
	 * cross domain or es module import in ec extensions.
	 * Mount a method "isInstance()" to Clz.
	 */
	
	function enableClassCheck(Clz) {
	  var classAttr = ['__\0is_clz', classBase++, Math.random().toFixed(3)].join('_');
	  Clz.prototype[classAttr] = true;
	
	  Clz.isInstance = function (obj) {
	    return !!(obj && obj[classAttr]);
	  };
	} // superCall should have class info, which can not be fetch from 'this'.
	// Consider this case:
	// class A has method f,
	// class B inherits class A, overrides method f, f call superApply('f'),
	// class C inherits class B, do not overrides method f,
	// then when method of class C is called, dead loop occured.
	
	
	function superCall(context, methodName) {
	  var args = zrUtil.slice(arguments, 2);
	  return this.superClass.prototype[methodName].apply(context, args);
	}
	
	function superApply(context, methodName, args) {
	  return this.superClass.prototype[methodName].apply(context, args);
	}
	/**
	 * @param {Object} entity
	 * @param {Object} options
	 * @param {boolean} [options.registerWhenExtend]
	 * @public
	 */
	
	
	function enableClassManagement(entity, options) {
	  options = options || {};
	  /**
	   * Component model classes
	   * key: componentType,
	   * value:
	   *     componentClass, when componentType is 'xxx'
	   *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'
	   * @type {Object}
	   */
	
	  var storage = {};
	
	  entity.registerClass = function (Clazz, componentType) {
	    if (componentType) {
	      checkClassType(componentType);
	      componentType = parseClassType(componentType);
	
	      if (!componentType.sub) {
	        storage[componentType.main] = Clazz;
	      } else if (componentType.sub !== IS_CONTAINER) {
	        var container = makeContainer(componentType);
	        container[componentType.sub] = Clazz;
	      }
	    }
	
	    return Clazz;
	  };
	
	  entity.getClass = function (componentMainType, subType, throwWhenNotFound) {
	    var Clazz = storage[componentMainType];
	
	    if (Clazz && Clazz[IS_CONTAINER]) {
	      Clazz = subType ? Clazz[subType] : null;
	    }
	
	    if (throwWhenNotFound && !Clazz) {
	      throw new Error(!subType ? componentMainType + '.' + 'type should be specified.' : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.');
	    }
	
	    return Clazz;
	  };
	
	  entity.getClassesByMainType = function (componentType) {
	    componentType = parseClassType(componentType);
	    var result = [];
	    var obj = storage[componentType.main];
	
	    if (obj && obj[IS_CONTAINER]) {
	      zrUtil.each(obj, function (o, type) {
	        type !== IS_CONTAINER && result.push(o);
	      });
	    } else {
	      result.push(obj);
	    }
	
	    return result;
	  };
	
	  entity.hasClass = function (componentType) {
	    // Just consider componentType.main.
	    componentType = parseClassType(componentType);
	    return !!storage[componentType.main];
	  };
	  /**
	   * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']
	   */
	
	
	  entity.getAllClassMainTypes = function () {
	    var types = [];
	    zrUtil.each(storage, function (obj, type) {
	      types.push(type);
	    });
	    return types;
	  };
	  /**
	   * If a main type is container and has sub types
	   * @param  {string}  mainType
	   * @return {boolean}
	   */
	
	
	  entity.hasSubTypes = function (componentType) {
	    componentType = parseClassType(componentType);
	    var obj = storage[componentType.main];
	    return obj && obj[IS_CONTAINER];
	  };
	
	  entity.parseClassType = parseClassType;
	
	  function makeContainer(componentType) {
	    var container = storage[componentType.main];
	
	    if (!container || !container[IS_CONTAINER]) {
	      container = storage[componentType.main] = {};
	      container[IS_CONTAINER] = true;
	    }
	
	    return container;
	  }
	
	  if (options.registerWhenExtend) {
	    var originalExtend = entity.extend;
	
	    if (originalExtend) {
	      entity.extend = function (proto) {
	        var ExtendedClass = originalExtend.call(this, proto);
	        return entity.registerClass(ExtendedClass, proto.type);
	      };
	    }
	  }
	
	  return entity;
	}
	/**
	 * @param {string|Array.<string>} properties
	 */
	
	
	function setReadOnly(obj, properties) {// FIXME It seems broken in IE8 simulation of IE11
	  // if (!zrUtil.isArray(properties)) {
	  //     properties = properties != null ? [properties] : [];
	  // }
	  // zrUtil.each(properties, function (prop) {
	  //     var value = obj[prop];
	  //     Object.defineProperty
	  //         && Object.defineProperty(obj, prop, {
	  //             value: value, writable: false
	  //         });
	  //     zrUtil.isArray(obj[prop])
	  //         && Object.freeze
	  //         && Object.freeze(obj[prop]);
	  // });
	}
	
	exports.parseClassType = parseClassType;
	exports.enableClassExtend = enableClassExtend;
	exports.enableClassCheck = enableClassCheck;
	exports.enableClassManagement = enableClassManagement;
	exports.setReadOnly = setReadOnly;

/***/ }),
/* 972 */
/***/ (function(module, exports, __webpack_require__) {

	var makeStyleMapper = __webpack_require__(973);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var getLineStyle = makeStyleMapper([['lineWidth', 'width'], ['stroke', 'color'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']]);
	var _default = {
	  getLineStyle: function (excludes) {
	    var style = getLineStyle(this, excludes);
	    var lineDash = this.getLineDash(style.lineWidth);
	    lineDash && (style.lineDash = lineDash);
	    return style;
	  },
	  getLineDash: function (lineWidth) {
	    if (lineWidth == null) {
	      lineWidth = 1;
	    }
	
	    var lineType = this.get('type');
	    var dotSize = Math.max(lineWidth, 2);
	    var dashSize = lineWidth * 4;
	    return lineType === 'solid' || lineType == null ? null : lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize];
	  }
	};
	module.exports = _default;

/***/ }),
/* 973 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// TODO Parse shadow style
	// TODO Only shallow path support
	function _default(properties) {
	  // Normalize
	  for (var i = 0; i < properties.length; i++) {
	    if (!properties[i][1]) {
	      properties[i][1] = properties[i][0];
	    }
	  }
	
	  return function (model, excludes, includes) {
	    var style = {};
	
	    for (var i = 0; i < properties.length; i++) {
	      var propName = properties[i][1];
	
	      if (excludes && zrUtil.indexOf(excludes, propName) >= 0 || includes && zrUtil.indexOf(includes, propName) < 0) {
	        continue;
	      }
	
	      var val = model.getShallow(propName);
	
	      if (val != null) {
	        style[properties[i][0]] = val;
	      }
	    }
	
	    return style;
	  };
	}
	
	module.exports = _default;

/***/ }),
/* 974 */
/***/ (function(module, exports, __webpack_require__) {

	var makeStyleMapper = __webpack_require__(973);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var getAreaStyle = makeStyleMapper([['fill', 'color'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['opacity'], ['shadowColor']]);
	var _default = {
	  getAreaStyle: function (excludes, includes) {
	    return getAreaStyle(this, excludes, includes);
	  }
	};
	module.exports = _default;

/***/ }),
/* 975 */
/***/ (function(module, exports, __webpack_require__) {

	var textContain = __webpack_require__(961);
	
	var graphicUtil = __webpack_require__(976);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var PATH_COLOR = ['textStyle', 'color'];
	var _default = {
	  /**
	   * Get color property or get color from option.textStyle.color
	   * @param {boolean} [isEmphasis]
	   * @return {string}
	   */
	  getTextColor: function (isEmphasis) {
	    var ecModel = this.ecModel;
	    return this.getShallow('color') || (!isEmphasis && ecModel ? ecModel.get(PATH_COLOR) : null);
	  },
	
	  /**
	   * Create font string from fontStyle, fontWeight, fontSize, fontFamily
	   * @return {string}
	   */
	  getFont: function () {
	    return graphicUtil.getFont({
	      fontStyle: this.getShallow('fontStyle'),
	      fontWeight: this.getShallow('fontWeight'),
	      fontSize: this.getShallow('fontSize'),
	      fontFamily: this.getShallow('fontFamily')
	    }, this.ecModel);
	  },
	  getTextRect: function (text) {
	    return textContain.getBoundingRect(text, this.getFont(), this.getShallow('align'), this.getShallow('verticalAlign') || this.getShallow('baseline'), this.getShallow('padding'), this.getShallow('rich'), this.getShallow('truncateText'));
	  }
	};
	module.exports = _default;

/***/ }),
/* 976 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var pathTool = __webpack_require__(977);
	
	var colorTool = __webpack_require__(945);
	
	var matrix = __webpack_require__(940);
	
	var vector = __webpack_require__(933);
	
	var Path = __webpack_require__(978);
	
	var Transformable = __webpack_require__(939);
	
	var ZImage = __webpack_require__(957);
	
	exports.Image = ZImage;
	
	var Group = __webpack_require__(937);
	
	exports.Group = Group;
	
	var Text = __webpack_require__(990);
	
	exports.Text = Text;
	
	var Circle = __webpack_require__(991);
	
	exports.Circle = Circle;
	
	var Sector = __webpack_require__(992);
	
	exports.Sector = Sector;
	
	var Ring = __webpack_require__(994);
	
	exports.Ring = Ring;
	
	var Polygon = __webpack_require__(995);
	
	exports.Polygon = Polygon;
	
	var Polyline = __webpack_require__(999);
	
	exports.Polyline = Polyline;
	
	var Rect = __webpack_require__(1000);
	
	exports.Rect = Rect;
	
	var Line = __webpack_require__(1001);
	
	exports.Line = Line;
	
	var BezierCurve = __webpack_require__(1002);
	
	exports.BezierCurve = BezierCurve;
	
	var Arc = __webpack_require__(1003);
	
	exports.Arc = Arc;
	
	var CompoundPath = __webpack_require__(1004);
	
	exports.CompoundPath = CompoundPath;
	
	var LinearGradient = __webpack_require__(1005);
	
	exports.LinearGradient = LinearGradient;
	
	var RadialGradient = __webpack_require__(1007);
	
	exports.RadialGradient = RadialGradient;
	
	var BoundingRect = __webpack_require__(949);
	
	exports.BoundingRect = BoundingRect;
	
	var IncrementalDisplayable = __webpack_require__(1008);
	
	exports.IncrementalDisplayable = IncrementalDisplayable;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var round = Math.round;
	var mathMax = Math.max;
	var mathMin = Math.min;
	var EMPTY_OBJ = {};
	/**
	 * Extend shape with parameters
	 */
	
	function extendShape(opts) {
	  return Path.extend(opts);
	}
	/**
	 * Extend path
	 */
	
	
	function extendPath(pathData, opts) {
	  return pathTool.extendFromString(pathData, opts);
	}
	/**
	 * Create a path element from path data string
	 * @param {string} pathData
	 * @param {Object} opts
	 * @param {module:zrender/core/BoundingRect} rect
	 * @param {string} [layout=cover] 'center' or 'cover'
	 */
	
	
	function makePath(pathData, opts, rect, layout) {
	  var path = pathTool.createFromString(pathData, opts);
	  var boundingRect = path.getBoundingRect();
	
	  if (rect) {
	    if (layout === 'center') {
	      rect = centerGraphic(rect, boundingRect);
	    }
	
	    resizePath(path, rect);
	  }
	
	  return path;
	}
	/**
	 * Create a image element from image url
	 * @param {string} imageUrl image url
	 * @param {Object} opts options
	 * @param {module:zrender/core/BoundingRect} rect constrain rect
	 * @param {string} [layout=cover] 'center' or 'cover'
	 */
	
	
	function makeImage(imageUrl, rect, layout) {
	  var path = new ZImage({
	    style: {
	      image: imageUrl,
	      x: rect.x,
	      y: rect.y,
	      width: rect.width,
	      height: rect.height
	    },
	    onload: function (img) {
	      if (layout === 'center') {
	        var boundingRect = {
	          width: img.width,
	          height: img.height
	        };
	        path.setStyle(centerGraphic(rect, boundingRect));
	      }
	    }
	  });
	  return path;
	}
	/**
	 * Get position of centered element in bounding box.
	 *
	 * @param  {Object} rect         element local bounding box
	 * @param  {Object} boundingRect constraint bounding box
	 * @return {Object} element position containing x, y, width, and height
	 */
	
	
	function centerGraphic(rect, boundingRect) {
	  // Set rect to center, keep width / height ratio.
	  var aspect = boundingRect.width / boundingRect.height;
	  var width = rect.height * aspect;
	  var height;
	
	  if (width <= rect.width) {
	    height = rect.height;
	  } else {
	    width = rect.width;
	    height = width / aspect;
	  }
	
	  var cx = rect.x + rect.width / 2;
	  var cy = rect.y + rect.height / 2;
	  return {
	    x: cx - width / 2,
	    y: cy - height / 2,
	    width: width,
	    height: height
	  };
	}
	
	var mergePath = pathTool.mergePath;
	/**
	 * Resize a path to fit the rect
	 * @param {module:zrender/graphic/Path} path
	 * @param {Object} rect
	 */
	
	function resizePath(path, rect) {
	  if (!path.applyTransform) {
	    return;
	  }
	
	  var pathRect = path.getBoundingRect();
	  var m = pathRect.calculateTransform(rect);
	  path.applyTransform(m);
	}
	/**
	 * Sub pixel optimize line for canvas
	 *
	 * @param {Object} param
	 * @param {Object} [param.shape]
	 * @param {number} [param.shape.x1]
	 * @param {number} [param.shape.y1]
	 * @param {number} [param.shape.x2]
	 * @param {number} [param.shape.y2]
	 * @param {Object} [param.style]
	 * @param {number} [param.style.lineWidth]
	 * @return {Object} Modified param
	 */
	
	
	function subPixelOptimizeLine(param) {
	  var shape = param.shape;
	  var lineWidth = param.style.lineWidth;
	
	  if (round(shape.x1 * 2) === round(shape.x2 * 2)) {
	    shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);
	  }
	
	  if (round(shape.y1 * 2) === round(shape.y2 * 2)) {
	    shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);
	  }
	
	  return param;
	}
	/**
	 * Sub pixel optimize rect for canvas
	 *
	 * @param {Object} param
	 * @param {Object} [param.shape]
	 * @param {number} [param.shape.x]
	 * @param {number} [param.shape.y]
	 * @param {number} [param.shape.width]
	 * @param {number} [param.shape.height]
	 * @param {Object} [param.style]
	 * @param {number} [param.style.lineWidth]
	 * @return {Object} Modified param
	 */
	
	
	function subPixelOptimizeRect(param) {
	  var shape = param.shape;
	  var lineWidth = param.style.lineWidth;
	  var originX = shape.x;
	  var originY = shape.y;
	  var originWidth = shape.width;
	  var originHeight = shape.height;
	  shape.x = subPixelOptimize(shape.x, lineWidth, true);
	  shape.y = subPixelOptimize(shape.y, lineWidth, true);
	  shape.width = Math.max(subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x, originWidth === 0 ? 0 : 1);
	  shape.height = Math.max(subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y, originHeight === 0 ? 0 : 1);
	  return param;
	}
	/**
	 * Sub pixel optimize for canvas
	 *
	 * @param {number} position Coordinate, such as x, y
	 * @param {number} lineWidth Should be nonnegative integer.
	 * @param {boolean=} positiveOrNegative Default false (negative).
	 * @return {number} Optimized position.
	 */
	
	
	function subPixelOptimize(position, lineWidth, positiveOrNegative) {
	  // Assure that (position + lineWidth / 2) is near integer edge,
	  // otherwise line will be fuzzy in canvas.
	  var doubledPosition = round(position * 2);
	  return (doubledPosition + round(lineWidth)) % 2 === 0 ? doubledPosition / 2 : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;
	}
	
	function hasFillOrStroke(fillOrStroke) {
	  return fillOrStroke != null && fillOrStroke != 'none';
	}
	
	function liftColor(color) {
	  return typeof color === 'string' ? colorTool.lift(color, -0.1) : color;
	}
	/**
	 * @private
	 */
	
	
	function cacheElementStl(el) {
	  if (el.__hoverStlDirty) {
	    var stroke = el.style.stroke;
	    var fill = el.style.fill; // Create hoverStyle on mouseover
	
	    var hoverStyle = el.__hoverStl;
	    hoverStyle.fill = hoverStyle.fill || (hasFillOrStroke(fill) ? liftColor(fill) : null);
	    hoverStyle.stroke = hoverStyle.stroke || (hasFillOrStroke(stroke) ? liftColor(stroke) : null);
	    var normalStyle = {};
	
	    for (var name in hoverStyle) {
	      // See comment in `doSingleEnterHover`.
	      if (hoverStyle[name] != null) {
	        normalStyle[name] = el.style[name];
	      }
	    }
	
	    el.__normalStl = normalStyle;
	    el.__hoverStlDirty = false;
	  }
	}
	/**
	 * @private
	 */
	
	
	function doSingleEnterHover(el) {
	  if (el.__isHover) {
	    return;
	  }
	
	  cacheElementStl(el);
	
	  if (el.useHoverLayer) {
	    el.__zr && el.__zr.addHover(el, el.__hoverStl);
	  } else {
	    var style = el.style;
	    var insideRollbackOpt = style.insideRollbackOpt; // Consider case: only `position: 'top'` is set on emphasis, then text
	    // color should be returned to `autoColor`, rather than remain '#fff'.
	    // So we should rollback then apply again after style merging.
	
	    insideRollbackOpt && rollbackInsideStyle(style); // styles can be:
	    // {
	    //    label: {
	    //        show: false,
	    //        position: 'outside',
	    //        fontSize: 18
	    //    },
	    //    emphasis: {
	    //        label: {
	    //            show: true
	    //        }
	    //    }
	    // },
	    // where properties of `emphasis` may not appear in `normal`. We previously use
	    // module:echarts/util/model#defaultEmphasis to merge `normal` to `emphasis`.
	    // But consider rich text and setOption in merge mode, it is impossible to cover
	    // all properties in merge. So we use merge mode when setting style here, where
	    // only properties that is not `null/undefined` can be set. The disadventage:
	    // null/undefined can not be used to remove style any more in `emphasis`.
	
	    style.extendFrom(el.__hoverStl); // Do not save `insideRollback`.
	
	    if (insideRollbackOpt) {
	      applyInsideStyle(style, style.insideOriginalTextPosition, insideRollbackOpt); // textFill may be rollbacked to null.
	
	      if (style.textFill == null) {
	        style.textFill = insideRollbackOpt.autoColor;
	      }
	    }
	
	    el.dirty(false);
	    el.z2 += 1;
	  }
	
	  el.__isHover = true;
	}
	/**
	 * @inner
	 */
	
	
	function doSingleLeaveHover(el) {
	  if (!el.__isHover) {
	    return;
	  }
	
	  var normalStl = el.__normalStl;
	
	  if (el.useHoverLayer) {
	    el.__zr && el.__zr.removeHover(el);
	  } else {
	    // Consider null/undefined value, should use
	    // `setStyle` but not `extendFrom(stl, true)`.
	    normalStl && el.setStyle(normalStl);
	    el.z2 -= 1;
	  }
	
	  el.__isHover = false;
	}
	/**
	 * @inner
	 */
	
	
	function doEnterHover(el) {
	  el.type === 'group' ? el.traverse(function (child) {
	    if (child.type !== 'group') {
	      doSingleEnterHover(child);
	    }
	  }) : doSingleEnterHover(el);
	}
	
	function doLeaveHover(el) {
	  el.type === 'group' ? el.traverse(function (child) {
	    if (child.type !== 'group') {
	      doSingleLeaveHover(child);
	    }
	  }) : doSingleLeaveHover(el);
	}
	/**
	 * @inner
	 */
	
	
	function setElementHoverStl(el, hoverStl) {
	  // If element has sepcified hoverStyle, then use it instead of given hoverStyle
	  // Often used when item group has a label element and it's hoverStyle is different
	  el.__hoverStl = el.hoverStyle || hoverStl || {};
	  el.__hoverStlDirty = true;
	
	  if (el.__isHover) {
	    cacheElementStl(el);
	  }
	}
	/**
	 * @inner
	 */
	
	
	function onElementMouseOver(e) {
	  if (this.__hoverSilentOnTouch && e.zrByTouch) {
	    return;
	  } // Only if element is not in emphasis status
	
	
	  !this.__isEmphasis && doEnterHover(this);
	}
	/**
	 * @inner
	 */
	
	
	function onElementMouseOut(e) {
	  if (this.__hoverSilentOnTouch && e.zrByTouch) {
	    return;
	  } // Only if element is not in emphasis status
	
	
	  !this.__isEmphasis && doLeaveHover(this);
	}
	/**
	 * @inner
	 */
	
	
	function enterEmphasis() {
	  this.__isEmphasis = true;
	  doEnterHover(this);
	}
	/**
	 * @inner
	 */
	
	
	function leaveEmphasis() {
	  this.__isEmphasis = false;
	  doLeaveHover(this);
	}
	/**
	 * Set hover style of element.
	 * This method can be called repeatly without side-effects.
	 * @param {module:zrender/Element} el
	 * @param {Object} [hoverStyle]
	 * @param {Object} [opt]
	 * @param {boolean} [opt.hoverSilentOnTouch=false]
	 *        In touch device, mouseover event will be trigger on touchstart event
	 *        (see module:zrender/dom/HandlerProxy). By this mechanism, we can
	 *        conviniently use hoverStyle when tap on touch screen without additional
	 *        code for compatibility.
	 *        But if the chart/component has select feature, which usually also use
	 *        hoverStyle, there might be conflict between 'select-highlight' and
	 *        'hover-highlight' especially when roam is enabled (see geo for example).
	 *        In this case, hoverSilentOnTouch should be used to disable hover-highlight
	 *        on touch device.
	 */
	
	
	function setHoverStyle(el, hoverStyle, opt) {
	  el.__hoverSilentOnTouch = opt && opt.hoverSilentOnTouch;
	  el.type === 'group' ? el.traverse(function (child) {
	    if (child.type !== 'group') {
	      setElementHoverStl(child, hoverStyle);
	    }
	  }) : setElementHoverStl(el, hoverStyle); // Duplicated function will be auto-ignored, see Eventful.js.
	
	  el.on('mouseover', onElementMouseOver).on('mouseout', onElementMouseOut); // Emphasis, normal can be triggered manually
	
	  el.on('emphasis', enterEmphasis).on('normal', leaveEmphasis);
	}
	/**
	 * @param {Object|module:zrender/graphic/Style} normalStyle
	 * @param {Object} emphasisStyle
	 * @param {module:echarts/model/Model} normalModel
	 * @param {module:echarts/model/Model} emphasisModel
	 * @param {Object} opt Check `opt` of `setTextStyleCommon` to find other props.
	 * @param {string|Function} [opt.defaultText]
	 * @param {module:echarts/model/Model} [opt.labelFetcher] Fetch text by
	 *      `opt.labelFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`
	 * @param {module:echarts/model/Model} [opt.labelDataIndex] Fetch text by
	 *      `opt.textFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`
	 * @param {module:echarts/model/Model} [opt.labelDimIndex] Fetch text by
	 *      `opt.textFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`
	 * @param {Object} [normalSpecified]
	 * @param {Object} [emphasisSpecified]
	 */
	
	
	function setLabelStyle(normalStyle, emphasisStyle, normalModel, emphasisModel, opt, normalSpecified, emphasisSpecified) {
	  opt = opt || EMPTY_OBJ;
	  var labelFetcher = opt.labelFetcher;
	  var labelDataIndex = opt.labelDataIndex;
	  var labelDimIndex = opt.labelDimIndex; // This scenario, `label.normal.show = true; label.emphasis.show = false`,
	  // is not supported util someone requests.
	
	  var showNormal = normalModel.getShallow('show');
	  var showEmphasis = emphasisModel.getShallow('show'); // Consider performance, only fetch label when necessary.
	  // If `normal.show` is `false` and `emphasis.show` is `true` and `emphasis.formatter` is not set,
	  // label should be displayed, where text is fetched by `normal.formatter` or `opt.defaultText`.
	
	  var baseText;
	
	  if (showNormal || showEmphasis) {
	    if (labelFetcher) {
	      baseText = labelFetcher.getFormattedLabel(labelDataIndex, 'normal', null, labelDimIndex);
	    }
	
	    if (baseText == null) {
	      baseText = zrUtil.isFunction(opt.defaultText) ? opt.defaultText(labelDataIndex, opt) : opt.defaultText;
	    }
	  }
	
	  var normalStyleText = showNormal ? baseText : null;
	  var emphasisStyleText = showEmphasis ? zrUtil.retrieve2(labelFetcher ? labelFetcher.getFormattedLabel(labelDataIndex, 'emphasis', null, labelDimIndex) : null, baseText) : null; // Optimize: If style.text is null, text will not be drawn.
	
	  if (normalStyleText != null || emphasisStyleText != null) {
	    // Always set `textStyle` even if `normalStyle.text` is null, because default
	    // values have to be set on `normalStyle`.
	    // If we set default values on `emphasisStyle`, consider case:
	    // Firstly, `setOption(... label: {normal: {text: null}, emphasis: {show: true}} ...);`
	    // Secondly, `setOption(... label: {noraml: {show: true, text: 'abc', color: 'red'} ...);`
	    // Then the 'red' will not work on emphasis.
	    setTextStyle(normalStyle, normalModel, normalSpecified, opt);
	    setTextStyle(emphasisStyle, emphasisModel, emphasisSpecified, opt, true);
	  }
	
	  normalStyle.text = normalStyleText;
	  emphasisStyle.text = emphasisStyleText;
	}
	/**
	 * Set basic textStyle properties.
	 * @param {Object|module:zrender/graphic/Style} textStyle
	 * @param {module:echarts/model/Model} model
	 * @param {Object} [specifiedTextStyle] Can be overrided by settings in model.
	 * @param {Object} [opt] See `opt` of `setTextStyleCommon`.
	 * @param {boolean} [isEmphasis]
	 */
	
	
	function setTextStyle(textStyle, textStyleModel, specifiedTextStyle, opt, isEmphasis) {
	  setTextStyleCommon(textStyle, textStyleModel, opt, isEmphasis);
	  specifiedTextStyle && zrUtil.extend(textStyle, specifiedTextStyle);
	  textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);
	  return textStyle;
	}
	/**
	 * Set text option in the style.
	 * @deprecated
	 * @param {Object} textStyle
	 * @param {module:echarts/model/Model} labelModel
	 * @param {string|boolean} defaultColor Default text color.
	 *        If set as false, it will be processed as a emphasis style.
	 */
	
	
	function setText(textStyle, labelModel, defaultColor) {
	  var opt = {
	    isRectText: true
	  };
	  var isEmphasis;
	
	  if (defaultColor === false) {
	    isEmphasis = true;
	  } else {
	    // Support setting color as 'auto' to get visual color.
	    opt.autoColor = defaultColor;
	  }
	
	  setTextStyleCommon(textStyle, labelModel, opt, isEmphasis);
	  textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);
	}
	/**
	 * {
	 *      disableBox: boolean, Whether diable drawing box of block (outer most).
	 *      isRectText: boolean,
	 *      autoColor: string, specify a color when color is 'auto',
	 *              for textFill, textStroke, textBackgroundColor, and textBorderColor.
	 *              If autoColor specified, it is used as default textFill.
	 *      useInsideStyle:
	 *              `true`: Use inside style (textFill, textStroke, textStrokeWidth)
	 *                  if `textFill` is not specified.
	 *              `false`: Do not use inside style.
	 *              `null/undefined`: use inside style if `isRectText` is true and
	 *                  `textFill` is not specified and textPosition contains `'inside'`.
	 *      forceRich: boolean
	 * }
	 */
	
	
	function setTextStyleCommon(textStyle, textStyleModel, opt, isEmphasis) {
	  // Consider there will be abnormal when merge hover style to normal style if given default value.
	  opt = opt || EMPTY_OBJ;
	
	  if (opt.isRectText) {
	    var textPosition = textStyleModel.getShallow('position') || (isEmphasis ? null : 'inside'); // 'outside' is not a valid zr textPostion value, but used
	    // in bar series, and magric type should be considered.
	
	    textPosition === 'outside' && (textPosition = 'top');
	    textStyle.textPosition = textPosition;
	    textStyle.textOffset = textStyleModel.getShallow('offset');
	    var labelRotate = textStyleModel.getShallow('rotate');
	    labelRotate != null && (labelRotate *= Math.PI / 180);
	    textStyle.textRotation = labelRotate;
	    textStyle.textDistance = zrUtil.retrieve2(textStyleModel.getShallow('distance'), isEmphasis ? null : 5);
	  }
	
	  var ecModel = textStyleModel.ecModel;
	  var globalTextStyle = ecModel && ecModel.option.textStyle; // Consider case:
	  // {
	  //     data: [{
	  //         value: 12,
	  //         label: {
	  //             rich: {
	  //                 // no 'a' here but using parent 'a'.
	  //             }
	  //         }
	  //     }],
	  //     rich: {
	  //         a: { ... }
	  //     }
	  // }
	
	  var richItemNames = getRichItemNames(textStyleModel);
	  var richResult;
	
	  if (richItemNames) {
	    richResult = {};
	
	    for (var name in richItemNames) {
	      if (richItemNames.hasOwnProperty(name)) {
	        // Cascade is supported in rich.
	        var richTextStyle = textStyleModel.getModel(['rich', name]); // In rich, never `disableBox`.
	
	        setTokenTextStyle(richResult[name] = {}, richTextStyle, globalTextStyle, opt, isEmphasis);
	      }
	    }
	  }
	
	  textStyle.rich = richResult;
	  setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isEmphasis, true);
	
	  if (opt.forceRich && !opt.textStyle) {
	    opt.textStyle = {};
	  }
	
	  return textStyle;
	} // Consider case:
	// {
	//     data: [{
	//         value: 12,
	//         label: {
	//             rich: {
	//                 // no 'a' here but using parent 'a'.
	//             }
	//         }
	//     }],
	//     rich: {
	//         a: { ... }
	//     }
	// }
	
	
	function getRichItemNames(textStyleModel) {
	  // Use object to remove duplicated names.
	  var richItemNameMap;
	
	  while (textStyleModel && textStyleModel !== textStyleModel.ecModel) {
	    var rich = (textStyleModel.option || EMPTY_OBJ).rich;
	
	    if (rich) {
	      richItemNameMap = richItemNameMap || {};
	
	      for (var name in rich) {
	        if (rich.hasOwnProperty(name)) {
	          richItemNameMap[name] = 1;
	        }
	      }
	    }
	
	    textStyleModel = textStyleModel.parentModel;
	  }
	
	  return richItemNameMap;
	}
	
	function setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isEmphasis, isBlock) {
	  // In merge mode, default value should not be given.
	  globalTextStyle = !isEmphasis && globalTextStyle || EMPTY_OBJ;
	  textStyle.textFill = getAutoColor(textStyleModel.getShallow('color'), opt) || globalTextStyle.color;
	  textStyle.textStroke = getAutoColor(textStyleModel.getShallow('textBorderColor'), opt) || globalTextStyle.textBorderColor;
	  textStyle.textStrokeWidth = zrUtil.retrieve2(textStyleModel.getShallow('textBorderWidth'), globalTextStyle.textBorderWidth);
	
	  if (!isEmphasis) {
	    if (isBlock) {
	      // Always set `insideRollback`, for clearing previous.
	      var originalTextPosition = textStyle.textPosition;
	      textStyle.insideRollback = applyInsideStyle(textStyle, originalTextPosition, opt); // Save original textPosition, because style.textPosition will be repalced by
	      // real location (like [10, 30]) in zrender.
	
	      textStyle.insideOriginalTextPosition = originalTextPosition;
	      textStyle.insideRollbackOpt = opt;
	    } // Set default finally.
	
	
	    if (textStyle.textFill == null) {
	      textStyle.textFill = opt.autoColor;
	    }
	  } // Do not use `getFont` here, because merge should be supported, where
	  // part of these properties may be changed in emphasis style, and the
	  // others should remain their original value got from normal style.
	
	
	  textStyle.fontStyle = textStyleModel.getShallow('fontStyle') || globalTextStyle.fontStyle;
	  textStyle.fontWeight = textStyleModel.getShallow('fontWeight') || globalTextStyle.fontWeight;
	  textStyle.fontSize = textStyleModel.getShallow('fontSize') || globalTextStyle.fontSize;
	  textStyle.fontFamily = textStyleModel.getShallow('fontFamily') || globalTextStyle.fontFamily;
	  textStyle.textAlign = textStyleModel.getShallow('align');
	  textStyle.textVerticalAlign = textStyleModel.getShallow('verticalAlign') || textStyleModel.getShallow('baseline');
	  textStyle.textLineHeight = textStyleModel.getShallow('lineHeight');
	  textStyle.textWidth = textStyleModel.getShallow('width');
	  textStyle.textHeight = textStyleModel.getShallow('height');
	  textStyle.textTag = textStyleModel.getShallow('tag');
	
	  if (!isBlock || !opt.disableBox) {
	    textStyle.textBackgroundColor = getAutoColor(textStyleModel.getShallow('backgroundColor'), opt);
	    textStyle.textPadding = textStyleModel.getShallow('padding');
	    textStyle.textBorderColor = getAutoColor(textStyleModel.getShallow('borderColor'), opt);
	    textStyle.textBorderWidth = textStyleModel.getShallow('borderWidth');
	    textStyle.textBorderRadius = textStyleModel.getShallow('borderRadius');
	    textStyle.textBoxShadowColor = textStyleModel.getShallow('shadowColor');
	    textStyle.textBoxShadowBlur = textStyleModel.getShallow('shadowBlur');
	    textStyle.textBoxShadowOffsetX = textStyleModel.getShallow('shadowOffsetX');
	    textStyle.textBoxShadowOffsetY = textStyleModel.getShallow('shadowOffsetY');
	  }
	
	  textStyle.textShadowColor = textStyleModel.getShallow('textShadowColor') || globalTextStyle.textShadowColor;
	  textStyle.textShadowBlur = textStyleModel.getShallow('textShadowBlur') || globalTextStyle.textShadowBlur;
	  textStyle.textShadowOffsetX = textStyleModel.getShallow('textShadowOffsetX') || globalTextStyle.textShadowOffsetX;
	  textStyle.textShadowOffsetY = textStyleModel.getShallow('textShadowOffsetY') || globalTextStyle.textShadowOffsetY;
	}
	
	function getAutoColor(color, opt) {
	  return color !== 'auto' ? color : opt && opt.autoColor ? opt.autoColor : null;
	}
	
	function applyInsideStyle(textStyle, textPosition, opt) {
	  var useInsideStyle = opt.useInsideStyle;
	  var insideRollback;
	
	  if (textStyle.textFill == null && useInsideStyle !== false && (useInsideStyle === true || opt.isRectText && textPosition // textPosition can be [10, 30]
	  && typeof textPosition === 'string' && textPosition.indexOf('inside') >= 0)) {
	    insideRollback = {
	      textFill: null,
	      textStroke: textStyle.textStroke,
	      textStrokeWidth: textStyle.textStrokeWidth
	    };
	    textStyle.textFill = '#fff'; // Consider text with #fff overflow its container.
	
	    if (textStyle.textStroke == null) {
	      textStyle.textStroke = opt.autoColor;
	      textStyle.textStrokeWidth == null && (textStyle.textStrokeWidth = 2);
	    }
	  }
	
	  return insideRollback;
	}
	
	function rollbackInsideStyle(style) {
	  var insideRollback = style.insideRollback;
	
	  if (insideRollback) {
	    style.textFill = insideRollback.textFill;
	    style.textStroke = insideRollback.textStroke;
	    style.textStrokeWidth = insideRollback.textStrokeWidth;
	  }
	}
	
	function getFont(opt, ecModel) {
	  // ecModel or default text style model.
	  var gTextStyleModel = ecModel || ecModel.getModel('textStyle');
	  return zrUtil.trim([// FIXME in node-canvas fontWeight is before fontStyle
	  opt.fontStyle || gTextStyleModel && gTextStyleModel.getShallow('fontStyle') || '', opt.fontWeight || gTextStyleModel && gTextStyleModel.getShallow('fontWeight') || '', (opt.fontSize || gTextStyleModel && gTextStyleModel.getShallow('fontSize') || 12) + 'px', opt.fontFamily || gTextStyleModel && gTextStyleModel.getShallow('fontFamily') || 'sans-serif'].join(' '));
	}
	
	function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {
	  if (typeof dataIndex === 'function') {
	    cb = dataIndex;
	    dataIndex = null;
	  } // Do not check 'animation' property directly here. Consider this case:
	  // animation model is an `itemModel`, whose does not have `isAnimationEnabled`
	  // but its parent model (`seriesModel`) does.
	
	
	  var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();
	
	  if (animationEnabled) {
	    var postfix = isUpdate ? 'Update' : '';
	    var duration = animatableModel.getShallow('animationDuration' + postfix);
	    var animationEasing = animatableModel.getShallow('animationEasing' + postfix);
	    var animationDelay = animatableModel.getShallow('animationDelay' + postfix);
	
	    if (typeof animationDelay === 'function') {
	      animationDelay = animationDelay(dataIndex, animatableModel.getAnimationDelayParams ? animatableModel.getAnimationDelayParams(el, dataIndex) : null);
	    }
	
	    if (typeof duration === 'function') {
	      duration = duration(dataIndex);
	    }
	
	    duration > 0 ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb, !!cb) : (el.stopAnimation(), el.attr(props), cb && cb());
	  } else {
	    el.stopAnimation();
	    el.attr(props);
	    cb && cb();
	  }
	}
	/**
	 * Update graphic element properties with or without animation according to the
	 * configuration in series.
	 *
	 * Caution: this method will stop previous animation.
	 * So if do not use this method to one element twice before
	 * animation starts, unless you know what you are doing.
	 *
	 * @param {module:zrender/Element} el
	 * @param {Object} props
	 * @param {module:echarts/model/Model} [animatableModel]
	 * @param {number} [dataIndex]
	 * @param {Function} [cb]
	 * @example
	 *     graphic.updateProps(el, {
	 *         position: [100, 100]
	 *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });
	 *     // Or
	 *     graphic.updateProps(el, {
	 *         position: [100, 100]
	 *     }, seriesModel, function () { console.log('Animation done!'); });
	 */
	
	
	function updateProps(el, props, animatableModel, dataIndex, cb) {
	  animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);
	}
	/**
	 * Init graphic element properties with or without animation according to the
	 * configuration in series.
	 *
	 * Caution: this method will stop previous animation.
	 * So if do not use this method to one element twice before
	 * animation starts, unless you know what you are doing.
	 *
	 * @param {module:zrender/Element} el
	 * @param {Object} props
	 * @param {module:echarts/model/Model} [animatableModel]
	 * @param {number} [dataIndex]
	 * @param {Function} cb
	 */
	
	
	function initProps(el, props, animatableModel, dataIndex, cb) {
	  animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);
	}
	/**
	 * Get transform matrix of target (param target),
	 * in coordinate of its ancestor (param ancestor)
	 *
	 * @param {module:zrender/mixin/Transformable} target
	 * @param {module:zrender/mixin/Transformable} [ancestor]
	 */
	
	
	function getTransform(target, ancestor) {
	  var mat = matrix.identity([]);
	
	  while (target && target !== ancestor) {
	    matrix.mul(mat, target.getLocalTransform(), mat);
	    target = target.parent;
	  }
	
	  return mat;
	}
	/**
	 * Apply transform to an vertex.
	 * @param {Array.<number>} target [x, y]
	 * @param {Array.<number>|TypedArray.<number>|Object} transform Can be:
	 *      + Transform matrix: like [1, 0, 0, 1, 0, 0]
	 *      + {position, rotation, scale}, the same as `zrender/Transformable`.
	 * @param {boolean=} invert Whether use invert matrix.
	 * @return {Array.<number>} [x, y]
	 */
	
	
	function applyTransform(target, transform, invert) {
	  if (transform && !zrUtil.isArrayLike(transform)) {
	    transform = Transformable.getLocalTransform(transform);
	  }
	
	  if (invert) {
	    transform = matrix.invert([], transform);
	  }
	
	  return vector.applyTransform([], target, transform);
	}
	/**
	 * @param {string} direction 'left' 'right' 'top' 'bottom'
	 * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
	 * @param {boolean=} invert Whether use invert matrix.
	 * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'
	 */
	
	
	function transformDirection(direction, transform, invert) {
	  // Pick a base, ensure that transform result will not be (0, 0).
	  var hBase = transform[4] === 0 || transform[5] === 0 || transform[0] === 0 ? 1 : Math.abs(2 * transform[4] / transform[0]);
	  var vBase = transform[4] === 0 || transform[5] === 0 || transform[2] === 0 ? 1 : Math.abs(2 * transform[4] / transform[2]);
	  var vertex = [direction === 'left' ? -hBase : direction === 'right' ? hBase : 0, direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0];
	  vertex = applyTransform(vertex, transform, invert);
	  return Math.abs(vertex[0]) > Math.abs(vertex[1]) ? vertex[0] > 0 ? 'right' : 'left' : vertex[1] > 0 ? 'bottom' : 'top';
	}
	/**
	 * Apply group transition animation from g1 to g2.
	 * If no animatableModel, no animation.
	 */
	
	
	function groupTransition(g1, g2, animatableModel, cb) {
	  if (!g1 || !g2) {
	    return;
	  }
	
	  function getElMap(g) {
	    var elMap = {};
	    g.traverse(function (el) {
	      if (!el.isGroup && el.anid) {
	        elMap[el.anid] = el;
	      }
	    });
	    return elMap;
	  }
	
	  function getAnimatableProps(el) {
	    var obj = {
	      position: vector.clone(el.position),
	      rotation: el.rotation
	    };
	
	    if (el.shape) {
	      obj.shape = zrUtil.extend({}, el.shape);
	    }
	
	    return obj;
	  }
	
	  var elMap1 = getElMap(g1);
	  g2.traverse(function (el) {
	    if (!el.isGroup && el.anid) {
	      var oldEl = elMap1[el.anid];
	
	      if (oldEl) {
	        var newProp = getAnimatableProps(el);
	        el.attr(getAnimatableProps(oldEl));
	        updateProps(el, newProp, animatableModel, el.dataIndex);
	      } // else {
	      //     if (el.previousProps) {
	      //         graphic.updateProps
	      //     }
	      // }
	
	    }
	  });
	}
	/**
	 * @param {Array.<Array.<number>>} points Like: [[23, 44], [53, 66], ...]
	 * @param {Object} rect {x, y, width, height}
	 * @return {Array.<Array.<number>>} A new clipped points.
	 */
	
	
	function clipPointsByRect(points, rect) {
	  return zrUtil.map(points, function (point) {
	    var x = point[0];
	    x = mathMax(x, rect.x);
	    x = mathMin(x, rect.x + rect.width);
	    var y = point[1];
	    y = mathMax(y, rect.y);
	    y = mathMin(y, rect.y + rect.height);
	    return [x, y];
	  });
	}
	/**
	 * @param {Object} targetRect {x, y, width, height}
	 * @param {Object} rect {x, y, width, height}
	 * @return {Object} A new clipped rect. If rect size are negative, return undefined.
	 */
	
	
	function clipRectByRect(targetRect, rect) {
	  var x = mathMax(targetRect.x, rect.x);
	  var x2 = mathMin(targetRect.x + targetRect.width, rect.x + rect.width);
	  var y = mathMax(targetRect.y, rect.y);
	  var y2 = mathMin(targetRect.y + targetRect.height, rect.y + rect.height);
	
	  if (x2 >= x && y2 >= y) {
	    return {
	      x: x,
	      y: y,
	      width: x2 - x,
	      height: y2 - y
	    };
	  }
	}
	/**
	 * @param {string} iconStr Support 'image://' or 'path://' or direct svg path.
	 * @param {Object} [opt] Properties of `module:zrender/Element`, except `style`.
	 * @param {Object} [rect] {x, y, width, height}
	 * @return {module:zrender/Element} Icon path or image element.
	 */
	
	
	function createIcon(iconStr, opt, rect) {
	  opt = zrUtil.extend({
	    rectHover: true
	  }, opt);
	  var style = opt.style = {
	    strokeNoScale: true
	  };
	  rect = rect || {
	    x: -1,
	    y: -1,
	    width: 2,
	    height: 2
	  };
	
	  if (iconStr) {
	    return iconStr.indexOf('image://') === 0 ? (style.image = iconStr.slice(8), zrUtil.defaults(style, rect), new ZImage(opt)) : makePath(iconStr.replace('path://', ''), opt, rect, 'center');
	  }
	}
	
	exports.extendShape = extendShape;
	exports.extendPath = extendPath;
	exports.makePath = makePath;
	exports.makeImage = makeImage;
	exports.mergePath = mergePath;
	exports.resizePath = resizePath;
	exports.subPixelOptimizeLine = subPixelOptimizeLine;
	exports.subPixelOptimizeRect = subPixelOptimizeRect;
	exports.subPixelOptimize = subPixelOptimize;
	exports.setHoverStyle = setHoverStyle;
	exports.setLabelStyle = setLabelStyle;
	exports.setTextStyle = setTextStyle;
	exports.setText = setText;
	exports.getFont = getFont;
	exports.updateProps = updateProps;
	exports.initProps = initProps;
	exports.getTransform = getTransform;
	exports.applyTransform = applyTransform;
	exports.transformDirection = transformDirection;
	exports.groupTransition = groupTransition;
	exports.clipPointsByRect = clipPointsByRect;
	exports.clipRectByRect = clipRectByRect;
	exports.createIcon = createIcon;

/***/ }),
/* 977 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(978);
	
	var PathProxy = __webpack_require__(979);
	
	var transformPath = __webpack_require__(989);
	
	// command chars
	var cc = ['m', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z', 'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'];
	var mathSqrt = Math.sqrt;
	var mathSin = Math.sin;
	var mathCos = Math.cos;
	var PI = Math.PI;
	
	var vMag = function (v) {
	  return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
	};
	
	var vRatio = function (u, v) {
	  return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
	};
	
	var vAngle = function (u, v) {
	  return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
	};
	
	function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {
	  var psi = psiDeg * (PI / 180.0);
	  var xp = mathCos(psi) * (x1 - x2) / 2.0 + mathSin(psi) * (y1 - y2) / 2.0;
	  var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0 + mathCos(psi) * (y1 - y2) / 2.0;
	  var lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);
	
	  if (lambda > 1) {
	    rx *= mathSqrt(lambda);
	    ry *= mathSqrt(lambda);
	  }
	
	  var f = (fa === fs ? -1 : 1) * mathSqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) / (rx * rx * (yp * yp) + ry * ry * (xp * xp))) || 0;
	  var cxp = f * rx * yp / ry;
	  var cyp = f * -ry * xp / rx;
	  var cx = (x1 + x2) / 2.0 + mathCos(psi) * cxp - mathSin(psi) * cyp;
	  var cy = (y1 + y2) / 2.0 + mathSin(psi) * cxp + mathCos(psi) * cyp;
	  var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
	  var u = [(xp - cxp) / rx, (yp - cyp) / ry];
	  var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
	  var dTheta = vAngle(u, v);
	
	  if (vRatio(u, v) <= -1) {
	    dTheta = PI;
	  }
	
	  if (vRatio(u, v) >= 1) {
	    dTheta = 0;
	  }
	
	  if (fs === 0 && dTheta > 0) {
	    dTheta = dTheta - 2 * PI;
	  }
	
	  if (fs === 1 && dTheta < 0) {
	    dTheta = dTheta + 2 * PI;
	  }
	
	  path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);
	}
	
	function createPathProxyFromString(data) {
	  if (!data) {
	    return [];
	  } // command string
	
	
	  var cs = data.replace(/-/g, ' -').replace(/  /g, ' ').replace(/ /g, ',').replace(/,,/g, ',');
	  var n; // create pipes so that we can split the data
	
	  for (n = 0; n < cc.length; n++) {
	    cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
	  } // create array
	
	
	  var arr = cs.split('|'); // init context point
	
	  var cpx = 0;
	  var cpy = 0;
	  var path = new PathProxy();
	  var CMD = PathProxy.CMD;
	  var prevCmd;
	
	  for (n = 1; n < arr.length; n++) {
	    var str = arr[n];
	    var c = str.charAt(0);
	    var off = 0;
	    var p = str.slice(1).replace(/e,-/g, 'e-').split(',');
	    var cmd;
	
	    if (p.length > 0 && p[0] === '') {
	      p.shift();
	    }
	
	    for (var i = 0; i < p.length; i++) {
	      p[i] = parseFloat(p[i]);
	    }
	
	    while (off < p.length && !isNaN(p[off])) {
	      if (isNaN(p[0])) {
	        break;
	      }
	
	      var ctlPtx;
	      var ctlPty;
	      var rx;
	      var ry;
	      var psi;
	      var fa;
	      var fs;
	      var x1 = cpx;
	      var y1 = cpy; // convert l, H, h, V, and v to L
	
	      switch (c) {
	        case 'l':
	          cpx += p[off++];
	          cpy += p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;
	
	        case 'L':
	          cpx = p[off++];
	          cpy = p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;
	
	        case 'm':
	          cpx += p[off++];
	          cpy += p[off++];
	          cmd = CMD.M;
	          path.addData(cmd, cpx, cpy);
	          c = 'l';
	          break;
	
	        case 'M':
	          cpx = p[off++];
	          cpy = p[off++];
	          cmd = CMD.M;
	          path.addData(cmd, cpx, cpy);
	          c = 'L';
	          break;
	
	        case 'h':
	          cpx += p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;
	
	        case 'H':
	          cpx = p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;
	
	        case 'v':
	          cpy += p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;
	
	        case 'V':
	          cpy = p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;
	
	        case 'C':
	          cmd = CMD.C;
	          path.addData(cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]);
	          cpx = p[off - 2];
	          cpy = p[off - 1];
	          break;
	
	        case 'c':
	          cmd = CMD.C;
	          path.addData(cmd, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy);
	          cpx += p[off - 2];
	          cpy += p[off - 1];
	          break;
	
	        case 'S':
	          ctlPtx = cpx;
	          ctlPty = cpy;
	          var len = path.len();
	          var pathData = path.data;
	
	          if (prevCmd === CMD.C) {
	            ctlPtx += cpx - pathData[len - 4];
	            ctlPty += cpy - pathData[len - 3];
	          }
	
	          cmd = CMD.C;
	          x1 = p[off++];
	          y1 = p[off++];
	          cpx = p[off++];
	          cpy = p[off++];
	          path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	          break;
	
	        case 's':
	          ctlPtx = cpx;
	          ctlPty = cpy;
	          var len = path.len();
	          var pathData = path.data;
	
	          if (prevCmd === CMD.C) {
	            ctlPtx += cpx - pathData[len - 4];
	            ctlPty += cpy - pathData[len - 3];
	          }
	
	          cmd = CMD.C;
	          x1 = cpx + p[off++];
	          y1 = cpy + p[off++];
	          cpx += p[off++];
	          cpy += p[off++];
	          path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	          break;
	
	        case 'Q':
	          x1 = p[off++];
	          y1 = p[off++];
	          cpx = p[off++];
	          cpy = p[off++];
	          cmd = CMD.Q;
	          path.addData(cmd, x1, y1, cpx, cpy);
	          break;
	
	        case 'q':
	          x1 = p[off++] + cpx;
	          y1 = p[off++] + cpy;
	          cpx += p[off++];
	          cpy += p[off++];
	          cmd = CMD.Q;
	          path.addData(cmd, x1, y1, cpx, cpy);
	          break;
	
	        case 'T':
	          ctlPtx = cpx;
	          ctlPty = cpy;
	          var len = path.len();
	          var pathData = path.data;
	
	          if (prevCmd === CMD.Q) {
	            ctlPtx += cpx - pathData[len - 4];
	            ctlPty += cpy - pathData[len - 3];
	          }
	
	          cpx = p[off++];
	          cpy = p[off++];
	          cmd = CMD.Q;
	          path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	          break;
	
	        case 't':
	          ctlPtx = cpx;
	          ctlPty = cpy;
	          var len = path.len();
	          var pathData = path.data;
	
	          if (prevCmd === CMD.Q) {
	            ctlPtx += cpx - pathData[len - 4];
	            ctlPty += cpy - pathData[len - 3];
	          }
	
	          cpx += p[off++];
	          cpy += p[off++];
	          cmd = CMD.Q;
	          path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	          break;
	
	        case 'A':
	          rx = p[off++];
	          ry = p[off++];
	          psi = p[off++];
	          fa = p[off++];
	          fs = p[off++];
	          x1 = cpx, y1 = cpy;
	          cpx = p[off++];
	          cpy = p[off++];
	          cmd = CMD.A;
	          processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
	          break;
	
	        case 'a':
	          rx = p[off++];
	          ry = p[off++];
	          psi = p[off++];
	          fa = p[off++];
	          fs = p[off++];
	          x1 = cpx, y1 = cpy;
	          cpx += p[off++];
	          cpy += p[off++];
	          cmd = CMD.A;
	          processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
	          break;
	      }
	    }
	
	    if (c === 'z' || c === 'Z') {
	      cmd = CMD.Z;
	      path.addData(cmd);
	    }
	
	    prevCmd = cmd;
	  }
	
	  path.toStatic();
	  return path;
	} // TODO Optimize double memory cost problem
	
	
	function createPathOptions(str, opts) {
	  var pathProxy = createPathProxyFromString(str);
	  opts = opts || {};
	
	  opts.buildPath = function (path) {
	    if (path.setData) {
	      path.setData(pathProxy.data); // Svg and vml renderer don't have context
	
	      var ctx = path.getContext();
	
	      if (ctx) {
	        path.rebuildPath(ctx);
	      }
	    } else {
	      var ctx = path;
	      pathProxy.rebuildPath(ctx);
	    }
	  };
	
	  opts.applyTransform = function (m) {
	    transformPath(pathProxy, m);
	    this.dirty(true);
	  };
	
	  return opts;
	}
	/**
	 * Create a Path object from path string data
	 * http://www.w3.org/TR/SVG/paths.html#PathData
	 * @param  {Object} opts Other options
	 */
	
	
	function createFromString(str, opts) {
	  return new Path(createPathOptions(str, opts));
	}
	/**
	 * Create a Path class from path string data
	 * @param  {string} str
	 * @param  {Object} opts Other options
	 */
	
	
	function extendFromString(str, opts) {
	  return Path.extend(createPathOptions(str, opts));
	}
	/**
	 * Merge multiple paths
	 */
	// TODO Apply transform
	// TODO stroke dash
	// TODO Optimize double memory cost problem
	
	
	function mergePath(pathEls, opts) {
	  var pathList = [];
	  var len = pathEls.length;
	
	  for (var i = 0; i < len; i++) {
	    var pathEl = pathEls[i];
	
	    if (!pathEl.path) {
	      pathEl.createPathProxy();
	    }
	
	    if (pathEl.__dirtyPath) {
	      pathEl.buildPath(pathEl.path, pathEl.shape, true);
	    }
	
	    pathList.push(pathEl.path);
	  }
	
	  var pathBundle = new Path(opts); // Need path proxy.
	
	  pathBundle.createPathProxy();
	
	  pathBundle.buildPath = function (path) {
	    path.appendPath(pathList); // Svg and vml renderer don't have context
	
	    var ctx = path.getContext();
	
	    if (ctx) {
	      path.rebuildPath(ctx);
	    }
	  };
	
	  return pathBundle;
	}
	
	exports.createFromString = createFromString;
	exports.extendFromString = extendFromString;
	exports.mergePath = mergePath;

/***/ }),
/* 978 */
/***/ (function(module, exports, __webpack_require__) {

	var Displayable = __webpack_require__(958);
	
	var zrUtil = __webpack_require__(931);
	
	var PathProxy = __webpack_require__(979);
	
	var pathContain = __webpack_require__(982);
	
	var Pattern = __webpack_require__(955);
	
	var getCanvasPattern = Pattern.prototype.getCanvasPattern;
	var abs = Math.abs;
	var pathProxyForDraw = new PathProxy(true);
	/**
	 * @alias module:zrender/graphic/Path
	 * @extends module:zrender/graphic/Displayable
	 * @constructor
	 * @param {Object} opts
	 */
	
	function Path(opts) {
	  Displayable.call(this, opts);
	  /**
	   * @type {module:zrender/core/PathProxy}
	   * @readOnly
	   */
	
	  this.path = null;
	}
	
	Path.prototype = {
	  constructor: Path,
	  type: 'path',
	  __dirtyPath: true,
	  strokeContainThreshold: 5,
	  brush: function (ctx, prevEl) {
	    var style = this.style;
	    var path = this.path || pathProxyForDraw;
	    var hasStroke = style.hasStroke();
	    var hasFill = style.hasFill();
	    var fill = style.fill;
	    var stroke = style.stroke;
	    var hasFillGradient = hasFill && !!fill.colorStops;
	    var hasStrokeGradient = hasStroke && !!stroke.colorStops;
	    var hasFillPattern = hasFill && !!fill.image;
	    var hasStrokePattern = hasStroke && !!stroke.image;
	    style.bind(ctx, this, prevEl);
	    this.setTransform(ctx);
	
	    if (this.__dirty) {
	      var rect; // Update gradient because bounding rect may changed
	
	      if (hasFillGradient) {
	        rect = rect || this.getBoundingRect();
	        this._fillGradient = style.getGradient(ctx, fill, rect);
	      }
	
	      if (hasStrokeGradient) {
	        rect = rect || this.getBoundingRect();
	        this._strokeGradient = style.getGradient(ctx, stroke, rect);
	      }
	    } // Use the gradient or pattern
	
	
	    if (hasFillGradient) {
	      // PENDING If may have affect the state
	      ctx.fillStyle = this._fillGradient;
	    } else if (hasFillPattern) {
	      ctx.fillStyle = getCanvasPattern.call(fill, ctx);
	    }
	
	    if (hasStrokeGradient) {
	      ctx.strokeStyle = this._strokeGradient;
	    } else if (hasStrokePattern) {
	      ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);
	    }
	
	    var lineDash = style.lineDash;
	    var lineDashOffset = style.lineDashOffset;
	    var ctxLineDash = !!ctx.setLineDash; // Update path sx, sy
	
	    var scale = this.getGlobalScale();
	    path.setScale(scale[0], scale[1]); // Proxy context
	    // Rebuild path in following 2 cases
	    // 1. Path is dirty
	    // 2. Path needs javascript implemented lineDash stroking.
	    //    In this case, lineDash information will not be saved in PathProxy
	
	    if (this.__dirtyPath || lineDash && !ctxLineDash && hasStroke) {
	      path.beginPath(ctx); // Setting line dash before build path
	
	      if (lineDash && !ctxLineDash) {
	        path.setLineDash(lineDash);
	        path.setLineDashOffset(lineDashOffset);
	      }
	
	      this.buildPath(path, this.shape, false); // Clear path dirty flag
	
	      if (this.path) {
	        this.__dirtyPath = false;
	      }
	    } else {
	      // Replay path building
	      ctx.beginPath();
	      this.path.rebuildPath(ctx);
	    }
	
	    hasFill && path.fill(ctx);
	
	    if (lineDash && ctxLineDash) {
	      ctx.setLineDash(lineDash);
	      ctx.lineDashOffset = lineDashOffset;
	    }
	
	    hasStroke && path.stroke(ctx);
	
	    if (lineDash && ctxLineDash) {
	      // PENDING
	      // Remove lineDash
	      ctx.setLineDash([]);
	    } // Draw rect text
	
	
	    if (style.text != null) {
	      // Only restore transform when needs draw text.
	      this.restoreTransform(ctx);
	      this.drawRectText(ctx, this.getBoundingRect());
	    }
	  },
	  // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath
	  // Like in circle
	  buildPath: function (ctx, shapeCfg, inBundle) {},
	  createPathProxy: function () {
	    this.path = new PathProxy();
	  },
	  getBoundingRect: function () {
	    var rect = this._rect;
	    var style = this.style;
	    var needsUpdateRect = !rect;
	
	    if (needsUpdateRect) {
	      var path = this.path;
	
	      if (!path) {
	        // Create path on demand.
	        path = this.path = new PathProxy();
	      }
	
	      if (this.__dirtyPath) {
	        path.beginPath();
	        this.buildPath(path, this.shape, false);
	      }
	
	      rect = path.getBoundingRect();
	    }
	
	    this._rect = rect;
	
	    if (style.hasStroke()) {
	      // Needs update rect with stroke lineWidth when
	      // 1. Element changes scale or lineWidth
	      // 2. Shape is changed
	      var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());
	
	      if (this.__dirty || needsUpdateRect) {
	        rectWithStroke.copy(rect); // FIXME Must after updateTransform
	
	        var w = style.lineWidth; // PENDING, Min line width is needed when line is horizontal or vertical
	
	        var lineScale = style.strokeNoScale ? this.getLineScale() : 1; // Only add extra hover lineWidth when there are no fill
	
	        if (!style.hasFill()) {
	          w = Math.max(w, this.strokeContainThreshold || 4);
	        } // Consider line width
	        // Line scale can't be 0;
	
	
	        if (lineScale > 1e-10) {
	          rectWithStroke.width += w / lineScale;
	          rectWithStroke.height += w / lineScale;
	          rectWithStroke.x -= w / lineScale / 2;
	          rectWithStroke.y -= w / lineScale / 2;
	        }
	      } // Return rect with stroke
	
	
	      return rectWithStroke;
	    }
	
	    return rect;
	  },
	  contain: function (x, y) {
	    var localPos = this.transformCoordToLocal(x, y);
	    var rect = this.getBoundingRect();
	    var style = this.style;
	    x = localPos[0];
	    y = localPos[1];
	
	    if (rect.contain(x, y)) {
	      var pathData = this.path.data;
	
	      if (style.hasStroke()) {
	        var lineWidth = style.lineWidth;
	        var lineScale = style.strokeNoScale ? this.getLineScale() : 1; // Line scale can't be 0;
	
	        if (lineScale > 1e-10) {
	          // Only add extra hover lineWidth when there are no fill
	          if (!style.hasFill()) {
	            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);
	          }
	
	          if (pathContain.containStroke(pathData, lineWidth / lineScale, x, y)) {
	            return true;
	          }
	        }
	      }
	
	      if (style.hasFill()) {
	        return pathContain.contain(pathData, x, y);
	      }
	    }
	
	    return false;
	  },
	
	  /**
	   * @param  {boolean} dirtyPath
	   */
	  dirty: function (dirtyPath) {
	    if (dirtyPath == null) {
	      dirtyPath = true;
	    } // Only mark dirty, not mark clean
	
	
	    if (dirtyPath) {
	      this.__dirtyPath = dirtyPath;
	      this._rect = null;
	    }
	
	    this.__dirty = true;
	    this.__zr && this.__zr.refresh(); // Used as a clipping path
	
	    if (this.__clipTarget) {
	      this.__clipTarget.dirty();
	    }
	  },
	
	  /**
	   * Alias for animate('shape')
	   * @param {boolean} loop
	   */
	  animateShape: function (loop) {
	    return this.animate('shape', loop);
	  },
	  // Overwrite attrKV
	  attrKV: function (key, value) {
	    // FIXME
	    if (key === 'shape') {
	      this.setShape(value);
	      this.__dirtyPath = true;
	      this._rect = null;
	    } else {
	      Displayable.prototype.attrKV.call(this, key, value);
	    }
	  },
	
	  /**
	   * @param {Object|string} key
	   * @param {*} value
	   */
	  setShape: function (key, value) {
	    var shape = this.shape; // Path from string may not have shape
	
	    if (shape) {
	      if (zrUtil.isObject(key)) {
	        for (var name in key) {
	          if (key.hasOwnProperty(name)) {
	            shape[name] = key[name];
	          }
	        }
	      } else {
	        shape[key] = value;
	      }
	
	      this.dirty(true);
	    }
	
	    return this;
	  },
	  getLineScale: function () {
	    var m = this.transform; // Get the line scale.
	    // Determinant of `m` means how much the area is enlarged by the
	    // transformation. So its square root can be used as a scale factor
	    // for width.
	
	    return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10 ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1])) : 1;
	  }
	};
	/**
	 * 扩展一个 Path element, 比如星形，圆等。
	 * Extend a path element
	 * @param {Object} props
	 * @param {string} props.type Path type
	 * @param {Function} props.init Initialize
	 * @param {Function} props.buildPath Overwrite buildPath method
	 * @param {Object} [props.style] Extended default style config
	 * @param {Object} [props.shape] Extended default shape config
	 */
	
	Path.extend = function (defaults) {
	  var Sub = function (opts) {
	    Path.call(this, opts);
	
	    if (defaults.style) {
	      // Extend default style
	      this.style.extendFrom(defaults.style, false);
	    } // Extend default shape
	
	
	    var defaultShape = defaults.shape;
	
	    if (defaultShape) {
	      this.shape = this.shape || {};
	      var thisShape = this.shape;
	
	      for (var name in defaultShape) {
	        if (!thisShape.hasOwnProperty(name) && defaultShape.hasOwnProperty(name)) {
	          thisShape[name] = defaultShape[name];
	        }
	      }
	    }
	
	    defaults.init && defaults.init.call(this, opts);
	  };
	
	  zrUtil.inherits(Sub, Path); // FIXME 不能 extend position, rotation 等引用对象
	
	  for (var name in defaults) {
	    // Extending prototype values and methods
	    if (name !== 'style' && name !== 'shape') {
	      Sub.prototype[name] = defaults[name];
	    }
	  }
	
	  return Sub;
	};
	
	zrUtil.inherits(Path, Displayable);
	var _default = Path;
	module.exports = _default;

/***/ }),
/* 979 */
/***/ (function(module, exports, __webpack_require__) {

	var curve = __webpack_require__(980);
	
	var vec2 = __webpack_require__(933);
	
	var bbox = __webpack_require__(981);
	
	var BoundingRect = __webpack_require__(949);
	
	var _config = __webpack_require__(948);
	
	var dpr = _config.devicePixelRatio;
	
	/**
	 * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中
	 * 可以用于 isInsidePath 判断以及获取boundingRect
	 *
	 * @module zrender/core/PathProxy
	 * @author Yi Shen (http://www.github.com/pissang)
	 */
	// TODO getTotalLength, getPointAtLength
	var CMD = {
	  M: 1,
	  L: 2,
	  C: 3,
	  Q: 4,
	  A: 5,
	  Z: 6,
	  // Rect
	  R: 7
	}; // var CMD_MEM_SIZE = {
	//     M: 3,
	//     L: 3,
	//     C: 7,
	//     Q: 5,
	//     A: 9,
	//     R: 5,
	//     Z: 1
	// };
	
	var min = [];
	var max = [];
	var min2 = [];
	var max2 = [];
	var mathMin = Math.min;
	var mathMax = Math.max;
	var mathCos = Math.cos;
	var mathSin = Math.sin;
	var mathSqrt = Math.sqrt;
	var mathAbs = Math.abs;
	var hasTypedArray = typeof Float32Array != 'undefined';
	/**
	 * @alias module:zrender/core/PathProxy
	 * @constructor
	 */
	
	var PathProxy = function (notSaveData) {
	  this._saveData = !(notSaveData || false);
	
	  if (this._saveData) {
	    /**
	     * Path data. Stored as flat array
	     * @type {Array.<Object>}
	     */
	    this.data = [];
	  }
	
	  this._ctx = null;
	};
	/**
	 * 快速计算Path包围盒（并不是最小包围盒）
	 * @return {Object}
	 */
	
	
	PathProxy.prototype = {
	  constructor: PathProxy,
	  _xi: 0,
	  _yi: 0,
	  _x0: 0,
	  _y0: 0,
	  // Unit x, Unit y. Provide for avoiding drawing that too short line segment
	  _ux: 0,
	  _uy: 0,
	  _len: 0,
	  _lineDash: null,
	  _dashOffset: 0,
	  _dashIdx: 0,
	  _dashSum: 0,
	
	  /**
	   * @readOnly
	   */
	  setScale: function (sx, sy) {
	    this._ux = mathAbs(1 / dpr / sx) || 0;
	    this._uy = mathAbs(1 / dpr / sy) || 0;
	  },
	  getContext: function () {
	    return this._ctx;
	  },
	
	  /**
	   * @param  {CanvasRenderingContext2D} ctx
	   * @return {module:zrender/core/PathProxy}
	   */
	  beginPath: function (ctx) {
	    this._ctx = ctx;
	    ctx && ctx.beginPath();
	    ctx && (this.dpr = ctx.dpr); // Reset
	
	    if (this._saveData) {
	      this._len = 0;
	    }
	
	    if (this._lineDash) {
	      this._lineDash = null;
	      this._dashOffset = 0;
	    }
	
	    return this;
	  },
	
	  /**
	   * @param  {number} x
	   * @param  {number} y
	   * @return {module:zrender/core/PathProxy}
	   */
	  moveTo: function (x, y) {
	    this.addData(CMD.M, x, y);
	    this._ctx && this._ctx.moveTo(x, y); // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用
	    // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。
	    // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要
	    // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持
	
	    this._x0 = x;
	    this._y0 = y;
	    this._xi = x;
	    this._yi = y;
	    return this;
	  },
	
	  /**
	   * @param  {number} x
	   * @param  {number} y
	   * @return {module:zrender/core/PathProxy}
	   */
	  lineTo: function (x, y) {
	    var exceedUnit = mathAbs(x - this._xi) > this._ux || mathAbs(y - this._yi) > this._uy // Force draw the first segment
	    || this._len < 5;
	    this.addData(CMD.L, x, y);
	
	    if (this._ctx && exceedUnit) {
	      this._needsDash() ? this._dashedLineTo(x, y) : this._ctx.lineTo(x, y);
	    }
	
	    if (exceedUnit) {
	      this._xi = x;
	      this._yi = y;
	    }
	
	    return this;
	  },
	
	  /**
	   * @param  {number} x1
	   * @param  {number} y1
	   * @param  {number} x2
	   * @param  {number} y2
	   * @param  {number} x3
	   * @param  {number} y3
	   * @return {module:zrender/core/PathProxy}
	   */
	  bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {
	    this.addData(CMD.C, x1, y1, x2, y2, x3, y3);
	
	    if (this._ctx) {
	      this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3) : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
	    }
	
	    this._xi = x3;
	    this._yi = y3;
	    return this;
	  },
	
	  /**
	   * @param  {number} x1
	   * @param  {number} y1
	   * @param  {number} x2
	   * @param  {number} y2
	   * @return {module:zrender/core/PathProxy}
	   */
	  quadraticCurveTo: function (x1, y1, x2, y2) {
	    this.addData(CMD.Q, x1, y1, x2, y2);
	
	    if (this._ctx) {
	      this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2) : this._ctx.quadraticCurveTo(x1, y1, x2, y2);
	    }
	
	    this._xi = x2;
	    this._yi = y2;
	    return this;
	  },
	
	  /**
	   * @param  {number} cx
	   * @param  {number} cy
	   * @param  {number} r
	   * @param  {number} startAngle
	   * @param  {number} endAngle
	   * @param  {boolean} anticlockwise
	   * @return {module:zrender/core/PathProxy}
	   */
	  arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {
	    this.addData(CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1);
	    this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);
	    this._xi = mathCos(endAngle) * r + cx;
	    this._yi = mathSin(endAngle) * r + cx;
	    return this;
	  },
	  // TODO
	  arcTo: function (x1, y1, x2, y2, radius) {
	    if (this._ctx) {
	      this._ctx.arcTo(x1, y1, x2, y2, radius);
	    }
	
	    return this;
	  },
	  // TODO
	  rect: function (x, y, w, h) {
	    this._ctx && this._ctx.rect(x, y, w, h);
	    this.addData(CMD.R, x, y, w, h);
	    return this;
	  },
	
	  /**
	   * @return {module:zrender/core/PathProxy}
	   */
	  closePath: function () {
	    this.addData(CMD.Z);
	    var ctx = this._ctx;
	    var x0 = this._x0;
	    var y0 = this._y0;
	
	    if (ctx) {
	      this._needsDash() && this._dashedLineTo(x0, y0);
	      ctx.closePath();
	    }
	
	    this._xi = x0;
	    this._yi = y0;
	    return this;
	  },
	
	  /**
	   * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。
	   * stroke 同样
	   * @param {CanvasRenderingContext2D} ctx
	   * @return {module:zrender/core/PathProxy}
	   */
	  fill: function (ctx) {
	    ctx && ctx.fill();
	    this.toStatic();
	  },
	
	  /**
	   * @param {CanvasRenderingContext2D} ctx
	   * @return {module:zrender/core/PathProxy}
	   */
	  stroke: function (ctx) {
	    ctx && ctx.stroke();
	    this.toStatic();
	  },
	
	  /**
	   * 必须在其它绘制命令前调用
	   * Must be invoked before all other path drawing methods
	   * @return {module:zrender/core/PathProxy}
	   */
	  setLineDash: function (lineDash) {
	    if (lineDash instanceof Array) {
	      this._lineDash = lineDash;
	      this._dashIdx = 0;
	      var lineDashSum = 0;
	
	      for (var i = 0; i < lineDash.length; i++) {
	        lineDashSum += lineDash[i];
	      }
	
	      this._dashSum = lineDashSum;
	    }
	
	    return this;
	  },
	
	  /**
	   * 必须在其它绘制命令前调用
	   * Must be invoked before all other path drawing methods
	   * @return {module:zrender/core/PathProxy}
	   */
	  setLineDashOffset: function (offset) {
	    this._dashOffset = offset;
	    return this;
	  },
	
	  /**
	   *
	   * @return {boolean}
	   */
	  len: function () {
	    return this._len;
	  },
	
	  /**
	   * 直接设置 Path 数据
	   */
	  setData: function (data) {
	    var len = data.length;
	
	    if (!(this.data && this.data.length == len) && hasTypedArray) {
	      this.data = new Float32Array(len);
	    }
	
	    for (var i = 0; i < len; i++) {
	      this.data[i] = data[i];
	    }
	
	    this._len = len;
	  },
	
	  /**
	   * 添加子路径
	   * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path
	   */
	  appendPath: function (path) {
	    if (!(path instanceof Array)) {
	      path = [path];
	    }
	
	    var len = path.length;
	    var appendSize = 0;
	    var offset = this._len;
	
	    for (var i = 0; i < len; i++) {
	      appendSize += path[i].len();
	    }
	
	    if (hasTypedArray && this.data instanceof Float32Array) {
	      this.data = new Float32Array(offset + appendSize);
	    }
	
	    for (var i = 0; i < len; i++) {
	      var appendPathData = path[i].data;
	
	      for (var k = 0; k < appendPathData.length; k++) {
	        this.data[offset++] = appendPathData[k];
	      }
	    }
	
	    this._len = offset;
	  },
	
	  /**
	   * 填充 Path 数据。
	   * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。
	   */
	  addData: function (cmd) {
	    if (!this._saveData) {
	      return;
	    }
	
	    var data = this.data;
	
	    if (this._len + arguments.length > data.length) {
	      // 因为之前的数组已经转换成静态的 Float32Array
	      // 所以不够用时需要扩展一个新的动态数组
	      this._expandData();
	
	      data = this.data;
	    }
	
	    for (var i = 0; i < arguments.length; i++) {
	      data[this._len++] = arguments[i];
	    }
	
	    this._prevCmd = cmd;
	  },
	  _expandData: function () {
	    // Only if data is Float32Array
	    if (!(this.data instanceof Array)) {
	      var newData = [];
	
	      for (var i = 0; i < this._len; i++) {
	        newData[i] = this.data[i];
	      }
	
	      this.data = newData;
	    }
	  },
	
	  /**
	   * If needs js implemented dashed line
	   * @return {boolean}
	   * @private
	   */
	  _needsDash: function () {
	    return this._lineDash;
	  },
	  _dashedLineTo: function (x1, y1) {
	    var dashSum = this._dashSum;
	    var offset = this._dashOffset;
	    var lineDash = this._lineDash;
	    var ctx = this._ctx;
	    var x0 = this._xi;
	    var y0 = this._yi;
	    var dx = x1 - x0;
	    var dy = y1 - y0;
	    var dist = mathSqrt(dx * dx + dy * dy);
	    var x = x0;
	    var y = y0;
	    var dash;
	    var nDash = lineDash.length;
	    var idx;
	    dx /= dist;
	    dy /= dist;
	
	    if (offset < 0) {
	      // Convert to positive offset
	      offset = dashSum + offset;
	    }
	
	    offset %= dashSum;
	    x -= offset * dx;
	    y -= offset * dy;
	
	    while (dx > 0 && x <= x1 || dx < 0 && x >= x1 || dx == 0 && (dy > 0 && y <= y1 || dy < 0 && y >= y1)) {
	      idx = this._dashIdx;
	      dash = lineDash[idx];
	      x += dx * dash;
	      y += dy * dash;
	      this._dashIdx = (idx + 1) % nDash; // Skip positive offset
	
	      if (dx > 0 && x < x0 || dx < 0 && x > x0 || dy > 0 && y < y0 || dy < 0 && y > y0) {
	        continue;
	      }
	
	      ctx[idx % 2 ? 'moveTo' : 'lineTo'](dx >= 0 ? mathMin(x, x1) : mathMax(x, x1), dy >= 0 ? mathMin(y, y1) : mathMax(y, y1));
	    } // Offset for next lineTo
	
	
	    dx = x - x1;
	    dy = y - y1;
	    this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	  },
	  // Not accurate dashed line to
	  _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {
	    var dashSum = this._dashSum;
	    var offset = this._dashOffset;
	    var lineDash = this._lineDash;
	    var ctx = this._ctx;
	    var x0 = this._xi;
	    var y0 = this._yi;
	    var t;
	    var dx;
	    var dy;
	    var cubicAt = curve.cubicAt;
	    var bezierLen = 0;
	    var idx = this._dashIdx;
	    var nDash = lineDash.length;
	    var x;
	    var y;
	    var tmpLen = 0;
	
	    if (offset < 0) {
	      // Convert to positive offset
	      offset = dashSum + offset;
	    }
	
	    offset %= dashSum; // Bezier approx length
	
	    for (t = 0; t < 1; t += 0.1) {
	      dx = cubicAt(x0, x1, x2, x3, t + 0.1) - cubicAt(x0, x1, x2, x3, t);
	      dy = cubicAt(y0, y1, y2, y3, t + 0.1) - cubicAt(y0, y1, y2, y3, t);
	      bezierLen += mathSqrt(dx * dx + dy * dy);
	    } // Find idx after add offset
	
	
	    for (; idx < nDash; idx++) {
	      tmpLen += lineDash[idx];
	
	      if (tmpLen > offset) {
	        break;
	      }
	    }
	
	    t = (tmpLen - offset) / bezierLen;
	
	    while (t <= 1) {
	      x = cubicAt(x0, x1, x2, x3, t);
	      y = cubicAt(y0, y1, y2, y3, t); // Use line to approximate dashed bezier
	      // Bad result if dash is long
	
	      idx % 2 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);
	      t += lineDash[idx] / bezierLen;
	      idx = (idx + 1) % nDash;
	    } // Finish the last segment and calculate the new offset
	
	
	    idx % 2 !== 0 && ctx.lineTo(x3, y3);
	    dx = x3 - x;
	    dy = y3 - y;
	    this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	  },
	  _dashedQuadraticTo: function (x1, y1, x2, y2) {
	    // Convert quadratic to cubic using degree elevation
	    var x3 = x2;
	    var y3 = y2;
	    x2 = (x2 + 2 * x1) / 3;
	    y2 = (y2 + 2 * y1) / 3;
	    x1 = (this._xi + 2 * x1) / 3;
	    y1 = (this._yi + 2 * y1) / 3;
	
	    this._dashedBezierTo(x1, y1, x2, y2, x3, y3);
	  },
	
	  /**
	   * 转成静态的 Float32Array 减少堆内存占用
	   * Convert dynamic array to static Float32Array
	   */
	  toStatic: function () {
	    var data = this.data;
	
	    if (data instanceof Array) {
	      data.length = this._len;
	
	      if (hasTypedArray) {
	        this.data = new Float32Array(data);
	      }
	    }
	  },
	
	  /**
	   * @return {module:zrender/core/BoundingRect}
	   */
	  getBoundingRect: function () {
	    min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;
	    max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;
	    var data = this.data;
	    var xi = 0;
	    var yi = 0;
	    var x0 = 0;
	    var y0 = 0;
	
	    for (var i = 0; i < data.length;) {
	      var cmd = data[i++];
	
	      if (i == 1) {
	        // 如果第一个命令是 L, C, Q
	        // 则 previous point 同绘制命令的第一个 point
	        //
	        // 第一个命令为 Arc 的情况下会在后面特殊处理
	        xi = data[i];
	        yi = data[i + 1];
	        x0 = xi;
	        y0 = yi;
	      }
	
	      switch (cmd) {
	        case CMD.M:
	          // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	          // 在 closePath 的时候使用
	          x0 = data[i++];
	          y0 = data[i++];
	          xi = x0;
	          yi = y0;
	          min2[0] = x0;
	          min2[1] = y0;
	          max2[0] = x0;
	          max2[1] = y0;
	          break;
	
	        case CMD.L:
	          bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);
	          xi = data[i++];
	          yi = data[i++];
	          break;
	
	        case CMD.C:
	          bbox.fromCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], min2, max2);
	          xi = data[i++];
	          yi = data[i++];
	          break;
	
	        case CMD.Q:
	          bbox.fromQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], min2, max2);
	          xi = data[i++];
	          yi = data[i++];
	          break;
	
	        case CMD.A:
	          // TODO Arc 判断的开销比较大
	          var cx = data[i++];
	          var cy = data[i++];
	          var rx = data[i++];
	          var ry = data[i++];
	          var startAngle = data[i++];
	          var endAngle = data[i++] + startAngle; // TODO Arc 旋转
	
	          var psi = data[i++];
	          var anticlockwise = 1 - data[i++];
	
	          if (i == 1) {
	            // 直接使用 arc 命令
	            // 第一个命令起点还未定义
	            x0 = mathCos(startAngle) * rx + cx;
	            y0 = mathSin(startAngle) * ry + cy;
	          }
	
	          bbox.fromArc(cx, cy, rx, ry, startAngle, endAngle, anticlockwise, min2, max2);
	          xi = mathCos(endAngle) * rx + cx;
	          yi = mathSin(endAngle) * ry + cy;
	          break;
	
	        case CMD.R:
	          x0 = xi = data[i++];
	          y0 = yi = data[i++];
	          var width = data[i++];
	          var height = data[i++]; // Use fromLine
	
	          bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);
	          break;
	
	        case CMD.Z:
	          xi = x0;
	          yi = y0;
	          break;
	      } // Union
	
	
	      vec2.min(min, min, min2);
	      vec2.max(max, max, max2);
	    } // No data
	
	
	    if (i === 0) {
	      min[0] = min[1] = max[0] = max[1] = 0;
	    }
	
	    return new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);
	  },
	
	  /**
	   * Rebuild path from current data
	   * Rebuild path will not consider javascript implemented line dash.
	   * @param {CanvasRenderingContext2D} ctx
	   */
	  rebuildPath: function (ctx) {
	    var d = this.data;
	    var x0, y0;
	    var xi, yi;
	    var x, y;
	    var ux = this._ux;
	    var uy = this._uy;
	    var len = this._len;
	
	    for (var i = 0; i < len;) {
	      var cmd = d[i++];
	
	      if (i == 1) {
	        // 如果第一个命令是 L, C, Q
	        // 则 previous point 同绘制命令的第一个 point
	        //
	        // 第一个命令为 Arc 的情况下会在后面特殊处理
	        xi = d[i];
	        yi = d[i + 1];
	        x0 = xi;
	        y0 = yi;
	      }
	
	      switch (cmd) {
	        case CMD.M:
	          x0 = xi = d[i++];
	          y0 = yi = d[i++];
	          ctx.moveTo(xi, yi);
	          break;
	
	        case CMD.L:
	          x = d[i++];
	          y = d[i++]; // Not draw too small seg between
	
	          if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {
	            ctx.lineTo(x, y);
	            xi = x;
	            yi = y;
	          }
	
	          break;
	
	        case CMD.C:
	          ctx.bezierCurveTo(d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]);
	          xi = d[i - 2];
	          yi = d[i - 1];
	          break;
	
	        case CMD.Q:
	          ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);
	          xi = d[i - 2];
	          yi = d[i - 1];
	          break;
	
	        case CMD.A:
	          var cx = d[i++];
	          var cy = d[i++];
	          var rx = d[i++];
	          var ry = d[i++];
	          var theta = d[i++];
	          var dTheta = d[i++];
	          var psi = d[i++];
	          var fs = d[i++];
	          var r = rx > ry ? rx : ry;
	          var scaleX = rx > ry ? 1 : rx / ry;
	          var scaleY = rx > ry ? ry / rx : 1;
	          var isEllipse = Math.abs(rx - ry) > 1e-3;
	          var endAngle = theta + dTheta;
	
	          if (isEllipse) {
	            ctx.translate(cx, cy);
	            ctx.rotate(psi);
	            ctx.scale(scaleX, scaleY);
	            ctx.arc(0, 0, r, theta, endAngle, 1 - fs);
	            ctx.scale(1 / scaleX, 1 / scaleY);
	            ctx.rotate(-psi);
	            ctx.translate(-cx, -cy);
	          } else {
	            ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);
	          }
	
	          if (i == 1) {
	            // 直接使用 arc 命令
	            // 第一个命令起点还未定义
	            x0 = mathCos(theta) * rx + cx;
	            y0 = mathSin(theta) * ry + cy;
	          }
	
	          xi = mathCos(endAngle) * rx + cx;
	          yi = mathSin(endAngle) * ry + cy;
	          break;
	
	        case CMD.R:
	          x0 = xi = d[i];
	          y0 = yi = d[i + 1];
	          ctx.rect(d[i++], d[i++], d[i++], d[i++]);
	          break;
	
	        case CMD.Z:
	          ctx.closePath();
	          xi = x0;
	          yi = y0;
	      }
	    }
	  }
	};
	PathProxy.CMD = CMD;
	var _default = PathProxy;
	module.exports = _default;

/***/ }),
/* 980 */
/***/ (function(module, exports, __webpack_require__) {

	var _vector = __webpack_require__(933);
	
	var v2Create = _vector.create;
	var v2DistSquare = _vector.distSquare;
	
	/**
	 * 曲线辅助模块
	 * @module zrender/core/curve
	 * @author pissang(https://www.github.com/pissang)
	 */
	var mathPow = Math.pow;
	var mathSqrt = Math.sqrt;
	var EPSILON = 1e-8;
	var EPSILON_NUMERIC = 1e-4;
	var THREE_SQRT = mathSqrt(3);
	var ONE_THIRD = 1 / 3; // 临时变量
	
	var _v0 = v2Create();
	
	var _v1 = v2Create();
	
	var _v2 = v2Create();
	
	function isAroundZero(val) {
	  return val > -EPSILON && val < EPSILON;
	}
	
	function isNotAroundZero(val) {
	  return val > EPSILON || val < -EPSILON;
	}
	/**
	 * 计算三次贝塞尔值
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @return {number}
	 */
	
	
	function cubicAt(p0, p1, p2, p3, t) {
	  var onet = 1 - t;
	  return onet * onet * (onet * p0 + 3 * t * p1) + t * t * (t * p3 + 3 * onet * p2);
	}
	/**
	 * 计算三次贝塞尔导数值
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @return {number}
	 */
	
	
	function cubicDerivativeAt(p0, p1, p2, p3, t) {
	  var onet = 1 - t;
	  return 3 * (((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet + (p3 - p2) * t * t);
	}
	/**
	 * 计算三次贝塞尔方程根，使用盛金公式
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} val
	 * @param  {Array.<number>} roots
	 * @return {number} 有效根数目
	 */
	
	
	function cubicRootAt(p0, p1, p2, p3, val, roots) {
	  // Evaluate roots of cubic functions
	  var a = p3 + 3 * (p1 - p2) - p0;
	  var b = 3 * (p2 - p1 * 2 + p0);
	  var c = 3 * (p1 - p0);
	  var d = p0 - val;
	  var A = b * b - 3 * a * c;
	  var B = b * c - 9 * a * d;
	  var C = c * c - 3 * b * d;
	  var n = 0;
	
	  if (isAroundZero(A) && isAroundZero(B)) {
	    if (isAroundZero(b)) {
	      roots[0] = 0;
	    } else {
	      var t1 = -c / b; //t1, t2, t3, b is not zero
	
	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }
	    }
	  } else {
	    var disc = B * B - 4 * A * C;
	
	    if (isAroundZero(disc)) {
	      var K = B / A;
	      var t1 = -b / a + K; // t1, a is not zero
	
	      var t2 = -K / 2; // t2, t3
	
	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }
	
	      if (t2 >= 0 && t2 <= 1) {
	        roots[n++] = t2;
	      }
	    } else if (disc > 0) {
	      var discSqrt = mathSqrt(disc);
	      var Y1 = A * b + 1.5 * a * (-B + discSqrt);
	      var Y2 = A * b + 1.5 * a * (-B - discSqrt);
	
	      if (Y1 < 0) {
	        Y1 = -mathPow(-Y1, ONE_THIRD);
	      } else {
	        Y1 = mathPow(Y1, ONE_THIRD);
	      }
	
	      if (Y2 < 0) {
	        Y2 = -mathPow(-Y2, ONE_THIRD);
	      } else {
	        Y2 = mathPow(Y2, ONE_THIRD);
	      }
	
	      var t1 = (-b - (Y1 + Y2)) / (3 * a);
	
	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }
	    } else {
	      var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));
	      var theta = Math.acos(T) / 3;
	      var ASqrt = mathSqrt(A);
	      var tmp = Math.cos(theta);
	      var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
	      var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);
	      var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);
	
	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }
	
	      if (t2 >= 0 && t2 <= 1) {
	        roots[n++] = t2;
	      }
	
	      if (t3 >= 0 && t3 <= 1) {
	        roots[n++] = t3;
	      }
	    }
	  }
	
	  return n;
	}
	/**
	 * 计算三次贝塞尔方程极限值的位置
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {Array.<number>} extrema
	 * @return {number} 有效数目
	 */
	
	
	function cubicExtrema(p0, p1, p2, p3, extrema) {
	  var b = 6 * p2 - 12 * p1 + 6 * p0;
	  var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
	  var c = 3 * p1 - 3 * p0;
	  var n = 0;
	
	  if (isAroundZero(a)) {
	    if (isNotAroundZero(b)) {
	      var t1 = -c / b;
	
	      if (t1 >= 0 && t1 <= 1) {
	        extrema[n++] = t1;
	      }
	    }
	  } else {
	    var disc = b * b - 4 * a * c;
	
	    if (isAroundZero(disc)) {
	      extrema[0] = -b / (2 * a);
	    } else if (disc > 0) {
	      var discSqrt = mathSqrt(disc);
	      var t1 = (-b + discSqrt) / (2 * a);
	      var t2 = (-b - discSqrt) / (2 * a);
	
	      if (t1 >= 0 && t1 <= 1) {
	        extrema[n++] = t1;
	      }
	
	      if (t2 >= 0 && t2 <= 1) {
	        extrema[n++] = t2;
	      }
	    }
	  }
	
	  return n;
	}
	/**
	 * 细分三次贝塞尔曲线
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @param  {Array.<number>} out
	 */
	
	
	function cubicSubdivide(p0, p1, p2, p3, t, out) {
	  var p01 = (p1 - p0) * t + p0;
	  var p12 = (p2 - p1) * t + p1;
	  var p23 = (p3 - p2) * t + p2;
	  var p012 = (p12 - p01) * t + p01;
	  var p123 = (p23 - p12) * t + p12;
	  var p0123 = (p123 - p012) * t + p012; // Seg0
	
	  out[0] = p0;
	  out[1] = p01;
	  out[2] = p012;
	  out[3] = p0123; // Seg1
	
	  out[4] = p0123;
	  out[5] = p123;
	  out[6] = p23;
	  out[7] = p3;
	}
	/**
	 * 投射点到三次贝塞尔曲线上，返回投射距离。
	 * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {number} x3
	 * @param {number} y3
	 * @param {number} x
	 * @param {number} y
	 * @param {Array.<number>} [out] 投射点
	 * @return {number}
	 */
	
	
	function cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, out) {
	  // http://pomax.github.io/bezierinfo/#projections
	  var t;
	  var interval = 0.005;
	  var d = Infinity;
	  var prev;
	  var next;
	  var d1;
	  var d2;
	  _v0[0] = x;
	  _v0[1] = y; // 先粗略估计一下可能的最小距离的 t 值
	  // PENDING
	
	  for (var _t = 0; _t < 1; _t += 0.05) {
	    _v1[0] = cubicAt(x0, x1, x2, x3, _t);
	    _v1[1] = cubicAt(y0, y1, y2, y3, _t);
	    d1 = v2DistSquare(_v0, _v1);
	
	    if (d1 < d) {
	      t = _t;
	      d = d1;
	    }
	  }
	
	  d = Infinity; // At most 32 iteration
	
	  for (var i = 0; i < 32; i++) {
	    if (interval < EPSILON_NUMERIC) {
	      break;
	    }
	
	    prev = t - interval;
	    next = t + interval; // t - interval
	
	    _v1[0] = cubicAt(x0, x1, x2, x3, prev);
	    _v1[1] = cubicAt(y0, y1, y2, y3, prev);
	    d1 = v2DistSquare(_v1, _v0);
	
	    if (prev >= 0 && d1 < d) {
	      t = prev;
	      d = d1;
	    } else {
	      // t + interval
	      _v2[0] = cubicAt(x0, x1, x2, x3, next);
	      _v2[1] = cubicAt(y0, y1, y2, y3, next);
	      d2 = v2DistSquare(_v2, _v0);
	
	      if (next <= 1 && d2 < d) {
	        t = next;
	        d = d2;
	      } else {
	        interval *= 0.5;
	      }
	    }
	  } // t
	
	
	  if (out) {
	    out[0] = cubicAt(x0, x1, x2, x3, t);
	    out[1] = cubicAt(y0, y1, y2, y3, t);
	  } // console.log(interval, i);
	
	
	  return mathSqrt(d);
	}
	/**
	 * 计算二次方贝塞尔值
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @return {number}
	 */
	
	
	function quadraticAt(p0, p1, p2, t) {
	  var onet = 1 - t;
	  return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
	}
	/**
	 * 计算二次方贝塞尔导数值
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @return {number}
	 */
	
	
	function quadraticDerivativeAt(p0, p1, p2, t) {
	  return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
	}
	/**
	 * 计算二次方贝塞尔方程根
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @param  {Array.<number>} roots
	 * @return {number} 有效根数目
	 */
	
	
	function quadraticRootAt(p0, p1, p2, val, roots) {
	  var a = p0 - 2 * p1 + p2;
	  var b = 2 * (p1 - p0);
	  var c = p0 - val;
	  var n = 0;
	
	  if (isAroundZero(a)) {
	    if (isNotAroundZero(b)) {
	      var t1 = -c / b;
	
	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }
	    }
	  } else {
	    var disc = b * b - 4 * a * c;
	
	    if (isAroundZero(disc)) {
	      var t1 = -b / (2 * a);
	
	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }
	    } else if (disc > 0) {
	      var discSqrt = mathSqrt(disc);
	      var t1 = (-b + discSqrt) / (2 * a);
	      var t2 = (-b - discSqrt) / (2 * a);
	
	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }
	
	      if (t2 >= 0 && t2 <= 1) {
	        roots[n++] = t2;
	      }
	    }
	  }
	
	  return n;
	}
	/**
	 * 计算二次贝塞尔方程极限值
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @return {number}
	 */
	
	
	function quadraticExtremum(p0, p1, p2) {
	  var divider = p0 + p2 - 2 * p1;
	
	  if (divider === 0) {
	    // p1 is center of p0 and p2
	    return 0.5;
	  } else {
	    return (p0 - p1) / divider;
	  }
	}
	/**
	 * 细分二次贝塞尔曲线
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @param  {Array.<number>} out
	 */
	
	
	function quadraticSubdivide(p0, p1, p2, t, out) {
	  var p01 = (p1 - p0) * t + p0;
	  var p12 = (p2 - p1) * t + p1;
	  var p012 = (p12 - p01) * t + p01; // Seg0
	
	  out[0] = p0;
	  out[1] = p01;
	  out[2] = p012; // Seg1
	
	  out[3] = p012;
	  out[4] = p12;
	  out[5] = p2;
	}
	/**
	 * 投射点到二次贝塞尔曲线上，返回投射距离。
	 * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {number} x
	 * @param {number} y
	 * @param {Array.<number>} out 投射点
	 * @return {number}
	 */
	
	
	function quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, out) {
	  // http://pomax.github.io/bezierinfo/#projections
	  var t;
	  var interval = 0.005;
	  var d = Infinity;
	  _v0[0] = x;
	  _v0[1] = y; // 先粗略估计一下可能的最小距离的 t 值
	  // PENDING
	
	  for (var _t = 0; _t < 1; _t += 0.05) {
	    _v1[0] = quadraticAt(x0, x1, x2, _t);
	    _v1[1] = quadraticAt(y0, y1, y2, _t);
	    var d1 = v2DistSquare(_v0, _v1);
	
	    if (d1 < d) {
	      t = _t;
	      d = d1;
	    }
	  }
	
	  d = Infinity; // At most 32 iteration
	
	  for (var i = 0; i < 32; i++) {
	    if (interval < EPSILON_NUMERIC) {
	      break;
	    }
	
	    var prev = t - interval;
	    var next = t + interval; // t - interval
	
	    _v1[0] = quadraticAt(x0, x1, x2, prev);
	    _v1[1] = quadraticAt(y0, y1, y2, prev);
	    var d1 = v2DistSquare(_v1, _v0);
	
	    if (prev >= 0 && d1 < d) {
	      t = prev;
	      d = d1;
	    } else {
	      // t + interval
	      _v2[0] = quadraticAt(x0, x1, x2, next);
	      _v2[1] = quadraticAt(y0, y1, y2, next);
	      var d2 = v2DistSquare(_v2, _v0);
	
	      if (next <= 1 && d2 < d) {
	        t = next;
	        d = d2;
	      } else {
	        interval *= 0.5;
	      }
	    }
	  } // t
	
	
	  if (out) {
	    out[0] = quadraticAt(x0, x1, x2, t);
	    out[1] = quadraticAt(y0, y1, y2, t);
	  } // console.log(interval, i);
	
	
	  return mathSqrt(d);
	}
	
	exports.cubicAt = cubicAt;
	exports.cubicDerivativeAt = cubicDerivativeAt;
	exports.cubicRootAt = cubicRootAt;
	exports.cubicExtrema = cubicExtrema;
	exports.cubicSubdivide = cubicSubdivide;
	exports.cubicProjectPoint = cubicProjectPoint;
	exports.quadraticAt = quadraticAt;
	exports.quadraticDerivativeAt = quadraticDerivativeAt;
	exports.quadraticRootAt = quadraticRootAt;
	exports.quadraticExtremum = quadraticExtremum;
	exports.quadraticSubdivide = quadraticSubdivide;
	exports.quadraticProjectPoint = quadraticProjectPoint;

/***/ }),
/* 981 */
/***/ (function(module, exports, __webpack_require__) {

	var vec2 = __webpack_require__(933);
	
	var curve = __webpack_require__(980);
	
	/**
	 * @author Yi Shen(https://github.com/pissang)
	 */
	var mathMin = Math.min;
	var mathMax = Math.max;
	var mathSin = Math.sin;
	var mathCos = Math.cos;
	var PI2 = Math.PI * 2;
	var start = vec2.create();
	var end = vec2.create();
	var extremity = vec2.create();
	/**
	 * 从顶点数组中计算出最小包围盒，写入`min`和`max`中
	 * @module zrender/core/bbox
	 * @param {Array<Object>} points 顶点数组
	 * @param {number} min
	 * @param {number} max
	 */
	
	function fromPoints(points, min, max) {
	  if (points.length === 0) {
	    return;
	  }
	
	  var p = points[0];
	  var left = p[0];
	  var right = p[0];
	  var top = p[1];
	  var bottom = p[1];
	  var i;
	
	  for (i = 1; i < points.length; i++) {
	    p = points[i];
	    left = mathMin(left, p[0]);
	    right = mathMax(right, p[0]);
	    top = mathMin(top, p[1]);
	    bottom = mathMax(bottom, p[1]);
	  }
	
	  min[0] = left;
	  min[1] = top;
	  max[0] = right;
	  max[1] = bottom;
	}
	/**
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */
	
	
	function fromLine(x0, y0, x1, y1, min, max) {
	  min[0] = mathMin(x0, x1);
	  min[1] = mathMin(y0, y1);
	  max[0] = mathMax(x0, x1);
	  max[1] = mathMax(y0, y1);
	}
	
	var xDim = [];
	var yDim = [];
	/**
	 * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {number} x3
	 * @param {number} y3
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */
	
	function fromCubic(x0, y0, x1, y1, x2, y2, x3, y3, min, max) {
	  var cubicExtrema = curve.cubicExtrema;
	  var cubicAt = curve.cubicAt;
	  var i;
	  var n = cubicExtrema(x0, x1, x2, x3, xDim);
	  min[0] = Infinity;
	  min[1] = Infinity;
	  max[0] = -Infinity;
	  max[1] = -Infinity;
	
	  for (i = 0; i < n; i++) {
	    var x = cubicAt(x0, x1, x2, x3, xDim[i]);
	    min[0] = mathMin(x, min[0]);
	    max[0] = mathMax(x, max[0]);
	  }
	
	  n = cubicExtrema(y0, y1, y2, y3, yDim);
	
	  for (i = 0; i < n; i++) {
	    var y = cubicAt(y0, y1, y2, y3, yDim[i]);
	    min[1] = mathMin(y, min[1]);
	    max[1] = mathMax(y, max[1]);
	  }
	
	  min[0] = mathMin(x0, min[0]);
	  max[0] = mathMax(x0, max[0]);
	  min[0] = mathMin(x3, min[0]);
	  max[0] = mathMax(x3, max[0]);
	  min[1] = mathMin(y0, min[1]);
	  max[1] = mathMax(y0, max[1]);
	  min[1] = mathMin(y3, min[1]);
	  max[1] = mathMax(y3, max[1]);
	}
	/**
	 * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */
	
	
	function fromQuadratic(x0, y0, x1, y1, x2, y2, min, max) {
	  var quadraticExtremum = curve.quadraticExtremum;
	  var quadraticAt = curve.quadraticAt; // Find extremities, where derivative in x dim or y dim is zero
	
	  var tx = mathMax(mathMin(quadraticExtremum(x0, x1, x2), 1), 0);
	  var ty = mathMax(mathMin(quadraticExtremum(y0, y1, y2), 1), 0);
	  var x = quadraticAt(x0, x1, x2, tx);
	  var y = quadraticAt(y0, y1, y2, ty);
	  min[0] = mathMin(x0, x2, x);
	  min[1] = mathMin(y0, y2, y);
	  max[0] = mathMax(x0, x2, x);
	  max[1] = mathMax(y0, y2, y);
	}
	/**
	 * 从圆弧中计算出最小包围盒，写入`min`和`max`中
	 * @method
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x
	 * @param {number} y
	 * @param {number} rx
	 * @param {number} ry
	 * @param {number} startAngle
	 * @param {number} endAngle
	 * @param {number} anticlockwise
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */
	
	
	function fromArc(x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max) {
	  var vec2Min = vec2.min;
	  var vec2Max = vec2.max;
	  var diff = Math.abs(startAngle - endAngle);
	
	  if (diff % PI2 < 1e-4 && diff > 1e-4) {
	    // Is a circle
	    min[0] = x - rx;
	    min[1] = y - ry;
	    max[0] = x + rx;
	    max[1] = y + ry;
	    return;
	  }
	
	  start[0] = mathCos(startAngle) * rx + x;
	  start[1] = mathSin(startAngle) * ry + y;
	  end[0] = mathCos(endAngle) * rx + x;
	  end[1] = mathSin(endAngle) * ry + y;
	  vec2Min(min, start, end);
	  vec2Max(max, start, end); // Thresh to [0, Math.PI * 2]
	
	  startAngle = startAngle % PI2;
	
	  if (startAngle < 0) {
	    startAngle = startAngle + PI2;
	  }
	
	  endAngle = endAngle % PI2;
	
	  if (endAngle < 0) {
	    endAngle = endAngle + PI2;
	  }
	
	  if (startAngle > endAngle && !anticlockwise) {
	    endAngle += PI2;
	  } else if (startAngle < endAngle && anticlockwise) {
	    startAngle += PI2;
	  }
	
	  if (anticlockwise) {
	    var tmp = endAngle;
	    endAngle = startAngle;
	    startAngle = tmp;
	  } // var number = 0;
	  // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;
	
	
	  for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {
	    if (angle > startAngle) {
	      extremity[0] = mathCos(angle) * rx + x;
	      extremity[1] = mathSin(angle) * ry + y;
	      vec2Min(min, extremity, min);
	      vec2Max(max, extremity, max);
	    }
	  }
	}
	
	exports.fromPoints = fromPoints;
	exports.fromLine = fromLine;
	exports.fromCubic = fromCubic;
	exports.fromQuadratic = fromQuadratic;
	exports.fromArc = fromArc;

/***/ }),
/* 982 */
/***/ (function(module, exports, __webpack_require__) {

	var PathProxy = __webpack_require__(979);
	
	var line = __webpack_require__(983);
	
	var cubic = __webpack_require__(984);
	
	var quadratic = __webpack_require__(985);
	
	var arc = __webpack_require__(986);
	
	var _util = __webpack_require__(987);
	
	var normalizeRadian = _util.normalizeRadian;
	
	var curve = __webpack_require__(980);
	
	var windingLine = __webpack_require__(988);
	
	var CMD = PathProxy.CMD;
	var PI2 = Math.PI * 2;
	var EPSILON = 1e-4;
	
	function isAroundEqual(a, b) {
	  return Math.abs(a - b) < EPSILON;
	} // 临时数组
	
	
	var roots = [-1, -1, -1];
	var extrema = [-1, -1];
	
	function swapExtrema() {
	  var tmp = extrema[0];
	  extrema[0] = extrema[1];
	  extrema[1] = tmp;
	}
	
	function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
	  // Quick reject
	  if (y > y0 && y > y1 && y > y2 && y > y3 || y < y0 && y < y1 && y < y2 && y < y3) {
	    return 0;
	  }
	
	  var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);
	
	  if (nRoots === 0) {
	    return 0;
	  } else {
	    var w = 0;
	    var nExtrema = -1;
	    var y0_, y1_;
	
	    for (var i = 0; i < nRoots; i++) {
	      var t = roots[i]; // Avoid winding error when intersection point is the connect point of two line of polygon
	
	      var unit = t === 0 || t === 1 ? 0.5 : 1;
	      var x_ = curve.cubicAt(x0, x1, x2, x3, t);
	
	      if (x_ < x) {
	        // Quick reject
	        continue;
	      }
	
	      if (nExtrema < 0) {
	        nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);
	
	        if (extrema[1] < extrema[0] && nExtrema > 1) {
	          swapExtrema();
	        }
	
	        y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);
	
	        if (nExtrema > 1) {
	          y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);
	        }
	      }
	
	      if (nExtrema == 2) {
	        // 分成三段单调函数
	        if (t < extrema[0]) {
	          w += y0_ < y0 ? unit : -unit;
	        } else if (t < extrema[1]) {
	          w += y1_ < y0_ ? unit : -unit;
	        } else {
	          w += y3 < y1_ ? unit : -unit;
	        }
	      } else {
	        // 分成两段单调函数
	        if (t < extrema[0]) {
	          w += y0_ < y0 ? unit : -unit;
	        } else {
	          w += y3 < y0_ ? unit : -unit;
	        }
	      }
	    }
	
	    return w;
	  }
	}
	
	function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
	  // Quick reject
	  if (y > y0 && y > y1 && y > y2 || y < y0 && y < y1 && y < y2) {
	    return 0;
	  }
	
	  var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);
	
	  if (nRoots === 0) {
	    return 0;
	  } else {
	    var t = curve.quadraticExtremum(y0, y1, y2);
	
	    if (t >= 0 && t <= 1) {
	      var w = 0;
	      var y_ = curve.quadraticAt(y0, y1, y2, t);
	
	      for (var i = 0; i < nRoots; i++) {
	        // Remove one endpoint.
	        var unit = roots[i] === 0 || roots[i] === 1 ? 0.5 : 1;
	        var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);
	
	        if (x_ < x) {
	          // Quick reject
	          continue;
	        }
	
	        if (roots[i] < t) {
	          w += y_ < y0 ? unit : -unit;
	        } else {
	          w += y2 < y_ ? unit : -unit;
	        }
	      }
	
	      return w;
	    } else {
	      // Remove one endpoint.
	      var unit = roots[0] === 0 || roots[0] === 1 ? 0.5 : 1;
	      var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);
	
	      if (x_ < x) {
	        // Quick reject
	        return 0;
	      }
	
	      return y2 < y0 ? unit : -unit;
	    }
	  }
	} // TODO
	// Arc 旋转
	
	
	function windingArc(cx, cy, r, startAngle, endAngle, anticlockwise, x, y) {
	  y -= cy;
	
	  if (y > r || y < -r) {
	    return 0;
	  }
	
	  var tmp = Math.sqrt(r * r - y * y);
	  roots[0] = -tmp;
	  roots[1] = tmp;
	  var diff = Math.abs(startAngle - endAngle);
	
	  if (diff < 1e-4) {
	    return 0;
	  }
	
	  if (diff % PI2 < 1e-4) {
	    // Is a circle
	    startAngle = 0;
	    endAngle = PI2;
	    var dir = anticlockwise ? 1 : -1;
	
	    if (x >= roots[0] + cx && x <= roots[1] + cx) {
	      return dir;
	    } else {
	      return 0;
	    }
	  }
	
	  if (anticlockwise) {
	    var tmp = startAngle;
	    startAngle = normalizeRadian(endAngle);
	    endAngle = normalizeRadian(tmp);
	  } else {
	    startAngle = normalizeRadian(startAngle);
	    endAngle = normalizeRadian(endAngle);
	  }
	
	  if (startAngle > endAngle) {
	    endAngle += PI2;
	  }
	
	  var w = 0;
	
	  for (var i = 0; i < 2; i++) {
	    var x_ = roots[i];
	
	    if (x_ + cx > x) {
	      var angle = Math.atan2(y, x_);
	      var dir = anticlockwise ? 1 : -1;
	
	      if (angle < 0) {
	        angle = PI2 + angle;
	      }
	
	      if (angle >= startAngle && angle <= endAngle || angle + PI2 >= startAngle && angle + PI2 <= endAngle) {
	        if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {
	          dir = -dir;
	        }
	
	        w += dir;
	      }
	    }
	  }
	
	  return w;
	}
	
	function containPath(data, lineWidth, isStroke, x, y) {
	  var w = 0;
	  var xi = 0;
	  var yi = 0;
	  var x0 = 0;
	  var y0 = 0;
	
	  for (var i = 0; i < data.length;) {
	    var cmd = data[i++]; // Begin a new subpath
	
	    if (cmd === CMD.M && i > 1) {
	      // Close previous subpath
	      if (!isStroke) {
	        w += windingLine(xi, yi, x0, y0, x, y);
	      } // 如果被任何一个 subpath 包含
	      // if (w !== 0) {
	      //     return true;
	      // }
	
	    }
	
	    if (i == 1) {
	      // 如果第一个命令是 L, C, Q
	      // 则 previous point 同绘制命令的第一个 point
	      //
	      // 第一个命令为 Arc 的情况下会在后面特殊处理
	      xi = data[i];
	      yi = data[i + 1];
	      x0 = xi;
	      y0 = yi;
	    }
	
	    switch (cmd) {
	      case CMD.M:
	        // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	        // 在 closePath 的时候使用
	        x0 = data[i++];
	        y0 = data[i++];
	        xi = x0;
	        yi = y0;
	        break;
	
	      case CMD.L:
	        if (isStroke) {
	          if (line.containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {
	            return true;
	          }
	        } else {
	          // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN
	          w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;
	        }
	
	        xi = data[i++];
	        yi = data[i++];
	        break;
	
	      case CMD.C:
	        if (isStroke) {
	          if (cubic.containStroke(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
	            return true;
	          }
	        } else {
	          w += windingCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
	        }
	
	        xi = data[i++];
	        yi = data[i++];
	        break;
	
	      case CMD.Q:
	        if (isStroke) {
	          if (quadratic.containStroke(xi, yi, data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
	            return true;
	          }
	        } else {
	          w += windingQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
	        }
	
	        xi = data[i++];
	        yi = data[i++];
	        break;
	
	      case CMD.A:
	        // TODO Arc 判断的开销比较大
	        var cx = data[i++];
	        var cy = data[i++];
	        var rx = data[i++];
	        var ry = data[i++];
	        var theta = data[i++];
	        var dTheta = data[i++]; // TODO Arc 旋转
	
	        var psi = data[i++];
	        var anticlockwise = 1 - data[i++];
	        var x1 = Math.cos(theta) * rx + cx;
	        var y1 = Math.sin(theta) * ry + cy; // 不是直接使用 arc 命令
	
	        if (i > 1) {
	          w += windingLine(xi, yi, x1, y1, x, y);
	        } else {
	          // 第一个命令起点还未定义
	          x0 = x1;
	          y0 = y1;
	        } // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放
	
	
	        var _x = (x - cx) * ry / rx + cx;
	
	        if (isStroke) {
	          if (arc.containStroke(cx, cy, ry, theta, theta + dTheta, anticlockwise, lineWidth, _x, y)) {
	            return true;
	          }
	        } else {
	          w += windingArc(cx, cy, ry, theta, theta + dTheta, anticlockwise, _x, y);
	        }
	
	        xi = Math.cos(theta + dTheta) * rx + cx;
	        yi = Math.sin(theta + dTheta) * ry + cy;
	        break;
	
	      case CMD.R:
	        x0 = xi = data[i++];
	        y0 = yi = data[i++];
	        var width = data[i++];
	        var height = data[i++];
	        var x1 = x0 + width;
	        var y1 = y0 + height;
	
	        if (isStroke) {
	          if (line.containStroke(x0, y0, x1, y0, lineWidth, x, y) || line.containStroke(x1, y0, x1, y1, lineWidth, x, y) || line.containStroke(x1, y1, x0, y1, lineWidth, x, y) || line.containStroke(x0, y1, x0, y0, lineWidth, x, y)) {
	            return true;
	          }
	        } else {
	          // FIXME Clockwise ?
	          w += windingLine(x1, y0, x1, y1, x, y);
	          w += windingLine(x0, y1, x0, y0, x, y);
	        }
	
	        break;
	
	      case CMD.Z:
	        if (isStroke) {
	          if (line.containStroke(xi, yi, x0, y0, lineWidth, x, y)) {
	            return true;
	          }
	        } else {
	          // Close a subpath
	          w += windingLine(xi, yi, x0, y0, x, y); // 如果被任何一个 subpath 包含
	          // FIXME subpaths may overlap
	          // if (w !== 0) {
	          //     return true;
	          // }
	        }
	
	        xi = x0;
	        yi = y0;
	        break;
	    }
	  }
	
	  if (!isStroke && !isAroundEqual(yi, y0)) {
	    w += windingLine(xi, yi, x0, y0, x, y) || 0;
	  }
	
	  return w !== 0;
	}
	
	function contain(pathData, x, y) {
	  return containPath(pathData, 0, false, x, y);
	}
	
	function containStroke(pathData, lineWidth, x, y) {
	  return containPath(pathData, lineWidth, true, x, y);
	}
	
	exports.contain = contain;
	exports.containStroke = containStroke;

/***/ }),
/* 983 */
/***/ (function(module, exports) {

	/**
	 * 线段包含判断
	 * @param  {number}  x0
	 * @param  {number}  y0
	 * @param  {number}  x1
	 * @param  {number}  y1
	 * @param  {number}  lineWidth
	 * @param  {number}  x
	 * @param  {number}  y
	 * @return {boolean}
	 */
	function containStroke(x0, y0, x1, y1, lineWidth, x, y) {
	  if (lineWidth === 0) {
	    return false;
	  }
	
	  var _l = lineWidth;
	  var _a = 0;
	  var _b = x0; // Quick reject
	
	  if (y > y0 + _l && y > y1 + _l || y < y0 - _l && y < y1 - _l || x > x0 + _l && x > x1 + _l || x < x0 - _l && x < x1 - _l) {
	    return false;
	  }
	
	  if (x0 !== x1) {
	    _a = (y0 - y1) / (x0 - x1);
	    _b = (x0 * y1 - x1 * y0) / (x0 - x1);
	  } else {
	    return Math.abs(x - x0) <= _l / 2;
	  }
	
	  var tmp = _a * x - y + _b;
	
	  var _s = tmp * tmp / (_a * _a + 1);
	
	  return _s <= _l / 2 * _l / 2;
	}
	
	exports.containStroke = containStroke;

/***/ }),
/* 984 */
/***/ (function(module, exports, __webpack_require__) {

	var curve = __webpack_require__(980);
	
	/**
	 * 三次贝塞尔曲线描边包含判断
	 * @param  {number}  x0
	 * @param  {number}  y0
	 * @param  {number}  x1
	 * @param  {number}  y1
	 * @param  {number}  x2
	 * @param  {number}  y2
	 * @param  {number}  x3
	 * @param  {number}  y3
	 * @param  {number}  lineWidth
	 * @param  {number}  x
	 * @param  {number}  y
	 * @return {boolean}
	 */
	function containStroke(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
	  if (lineWidth === 0) {
	    return false;
	  }
	
	  var _l = lineWidth; // Quick reject
	
	  if (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l) {
	    return false;
	  }
	
	  var d = curve.cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, null);
	  return d <= _l / 2;
	}
	
	exports.containStroke = containStroke;

/***/ }),
/* 985 */
/***/ (function(module, exports, __webpack_require__) {

	var _curve = __webpack_require__(980);
	
	var quadraticProjectPoint = _curve.quadraticProjectPoint;
	
	/**
	 * 二次贝塞尔曲线描边包含判断
	 * @param  {number}  x0
	 * @param  {number}  y0
	 * @param  {number}  x1
	 * @param  {number}  y1
	 * @param  {number}  x2
	 * @param  {number}  y2
	 * @param  {number}  lineWidth
	 * @param  {number}  x
	 * @param  {number}  y
	 * @return {boolean}
	 */
	function containStroke(x0, y0, x1, y1, x2, y2, lineWidth, x, y) {
	  if (lineWidth === 0) {
	    return false;
	  }
	
	  var _l = lineWidth; // Quick reject
	
	  if (y > y0 + _l && y > y1 + _l && y > y2 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l) {
	    return false;
	  }
	
	  var d = quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, null);
	  return d <= _l / 2;
	}
	
	exports.containStroke = containStroke;

/***/ }),
/* 986 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(987);
	
	var normalizeRadian = _util.normalizeRadian;
	var PI2 = Math.PI * 2;
	/**
	 * 圆弧描边包含判断
	 * @param  {number}  cx
	 * @param  {number}  cy
	 * @param  {number}  r
	 * @param  {number}  startAngle
	 * @param  {number}  endAngle
	 * @param  {boolean}  anticlockwise
	 * @param  {number} lineWidth
	 * @param  {number}  x
	 * @param  {number}  y
	 * @return {Boolean}
	 */
	
	function containStroke(cx, cy, r, startAngle, endAngle, anticlockwise, lineWidth, x, y) {
	  if (lineWidth === 0) {
	    return false;
	  }
	
	  var _l = lineWidth;
	  x -= cx;
	  y -= cy;
	  var d = Math.sqrt(x * x + y * y);
	
	  if (d - _l > r || d + _l < r) {
	    return false;
	  }
	
	  if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {
	    // Is a circle
	    return true;
	  }
	
	  if (anticlockwise) {
	    var tmp = startAngle;
	    startAngle = normalizeRadian(endAngle);
	    endAngle = normalizeRadian(tmp);
	  } else {
	    startAngle = normalizeRadian(startAngle);
	    endAngle = normalizeRadian(endAngle);
	  }
	
	  if (startAngle > endAngle) {
	    endAngle += PI2;
	  }
	
	  var angle = Math.atan2(y, x);
	
	  if (angle < 0) {
	    angle += PI2;
	  }
	
	  return angle >= startAngle && angle <= endAngle || angle + PI2 >= startAngle && angle + PI2 <= endAngle;
	}
	
	exports.containStroke = containStroke;

/***/ }),
/* 987 */
/***/ (function(module, exports) {

	var PI2 = Math.PI * 2;
	
	function normalizeRadian(angle) {
	  angle %= PI2;
	
	  if (angle < 0) {
	    angle += PI2;
	  }
	
	  return angle;
	}
	
	exports.normalizeRadian = normalizeRadian;

/***/ }),
/* 988 */
/***/ (function(module, exports) {

	function windingLine(x0, y0, x1, y1, x, y) {
	  if (y > y0 && y > y1 || y < y0 && y < y1) {
	    return 0;
	  } // Ignore horizontal line
	
	
	  if (y1 === y0) {
	    return 0;
	  }
	
	  var dir = y1 < y0 ? 1 : -1;
	  var t = (y - y0) / (y1 - y0); // Avoid winding error when intersection point is the connect point of two line of polygon
	
	  if (t === 1 || t === 0) {
	    dir = y1 < y0 ? 0.5 : -0.5;
	  }
	
	  var x_ = t * (x1 - x0) + x0; // If (x, y) on the line, considered as "contain".
	
	  return x_ === x ? Infinity : x_ > x ? dir : 0;
	}
	
	module.exports = windingLine;

/***/ }),
/* 989 */
/***/ (function(module, exports, __webpack_require__) {

	var PathProxy = __webpack_require__(979);
	
	var _vector = __webpack_require__(933);
	
	var v2ApplyTransform = _vector.applyTransform;
	var CMD = PathProxy.CMD;
	var points = [[], [], []];
	var mathSqrt = Math.sqrt;
	var mathAtan2 = Math.atan2;
	
	function _default(path, m) {
	  var data = path.data;
	  var cmd;
	  var nPoint;
	  var i;
	  var j;
	  var k;
	  var p;
	  var M = CMD.M;
	  var C = CMD.C;
	  var L = CMD.L;
	  var R = CMD.R;
	  var A = CMD.A;
	  var Q = CMD.Q;
	
	  for (i = 0, j = 0; i < data.length;) {
	    cmd = data[i++];
	    j = i;
	    nPoint = 0;
	
	    switch (cmd) {
	      case M:
	        nPoint = 1;
	        break;
	
	      case L:
	        nPoint = 1;
	        break;
	
	      case C:
	        nPoint = 3;
	        break;
	
	      case Q:
	        nPoint = 2;
	        break;
	
	      case A:
	        var x = m[4];
	        var y = m[5];
	        var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);
	        var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);
	        var angle = mathAtan2(-m[1] / sy, m[0] / sx); // cx
	
	        data[i] *= sx;
	        data[i++] += x; // cy
	
	        data[i] *= sy;
	        data[i++] += y; // Scale rx and ry
	        // FIXME Assume psi is 0 here
	
	        data[i++] *= sx;
	        data[i++] *= sy; // Start angle
	
	        data[i++] += angle; // end angle
	
	        data[i++] += angle; // FIXME psi
	
	        i += 2;
	        j = i;
	        break;
	
	      case R:
	        // x0, y0
	        p[0] = data[i++];
	        p[1] = data[i++];
	        v2ApplyTransform(p, p, m);
	        data[j++] = p[0];
	        data[j++] = p[1]; // x1, y1
	
	        p[0] += data[i++];
	        p[1] += data[i++];
	        v2ApplyTransform(p, p, m);
	        data[j++] = p[0];
	        data[j++] = p[1];
	    }
	
	    for (k = 0; k < nPoint; k++) {
	      var p = points[k];
	      p[0] = data[i++];
	      p[1] = data[i++];
	      v2ApplyTransform(p, p, m); // Write back
	
	      data[j++] = p[0];
	      data[j++] = p[1];
	    }
	  }
	}
	
	module.exports = _default;

/***/ }),
/* 990 */
/***/ (function(module, exports, __webpack_require__) {

	var Displayable = __webpack_require__(958);
	
	var zrUtil = __webpack_require__(931);
	
	var textContain = __webpack_require__(961);
	
	var textHelper = __webpack_require__(960);
	
	/**
	 * @alias zrender/graphic/Text
	 * @extends module:zrender/graphic/Displayable
	 * @constructor
	 * @param {Object} opts
	 */
	var Text = function (opts) {
	  // jshint ignore:line
	  Displayable.call(this, opts);
	};
	
	Text.prototype = {
	  constructor: Text,
	  type: 'text',
	  brush: function (ctx, prevEl) {
	    var style = this.style; // Optimize, avoid normalize every time.
	
	    this.__dirty && textHelper.normalizeTextStyle(style, true); // Use props with prefix 'text'.
	
	    style.fill = style.stroke = style.shadowBlur = style.shadowColor = style.shadowOffsetX = style.shadowOffsetY = null;
	    var text = style.text; // Convert to string
	
	    text != null && (text += ''); // Always bind style
	
	    style.bind(ctx, this, prevEl);
	
	    if (!textHelper.needDrawText(text, style)) {
	      return;
	    }
	
	    this.setTransform(ctx);
	    textHelper.renderText(this, ctx, text, style);
	    this.restoreTransform(ctx);
	  },
	  getBoundingRect: function () {
	    var style = this.style; // Optimize, avoid normalize every time.
	
	    this.__dirty && textHelper.normalizeTextStyle(style, true);
	
	    if (!this._rect) {
	      var text = style.text;
	      text != null ? text += '' : text = '';
	      var rect = textContain.getBoundingRect(style.text + '', style.font, style.textAlign, style.textVerticalAlign, style.textPadding, style.rich);
	      rect.x += style.x || 0;
	      rect.y += style.y || 0;
	
	      if (textHelper.getStroke(style.textStroke, style.textStrokeWidth)) {
	        var w = style.textStrokeWidth;
	        rect.x -= w / 2;
	        rect.y -= w / 2;
	        rect.width += w;
	        rect.height += w;
	      }
	
	      this._rect = rect;
	    }
	
	    return this._rect;
	  }
	};
	zrUtil.inherits(Text, Displayable);
	var _default = Text;
	module.exports = _default;

/***/ }),
/* 991 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(978);
	
	/**
	 * 圆形
	 * @module zrender/shape/Circle
	 */
	var _default = Path.extend({
	  type: 'circle',
	  shape: {
	    cx: 0,
	    cy: 0,
	    r: 0
	  },
	  buildPath: function (ctx, shape, inBundle) {
	    // Better stroking in ShapeBundle
	    // Always do it may have performence issue ( fill may be 2x more cost)
	    if (inBundle) {
	      ctx.moveTo(shape.cx + shape.r, shape.cy);
	    } // else {
	    //     if (ctx.allocate && !ctx.data.length) {
	    //         ctx.allocate(ctx.CMD_MEM_SIZE.A);
	    //     }
	    // }
	    // Better stroking in ShapeBundle
	    // ctx.moveTo(shape.cx + shape.r, shape.cy);
	
	
	    ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 992 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(978);
	
	var fixClipWithShadow = __webpack_require__(993);
	
	/**
	 * 扇形
	 * @module zrender/graphic/shape/Sector
	 */
	var _default = Path.extend({
	  type: 'sector',
	  shape: {
	    cx: 0,
	    cy: 0,
	    r0: 0,
	    r: 0,
	    startAngle: 0,
	    endAngle: Math.PI * 2,
	    clockwise: true
	  },
	  brush: fixClipWithShadow(Path.prototype.brush),
	  buildPath: function (ctx, shape) {
	    var x = shape.cx;
	    var y = shape.cy;
	    var r0 = Math.max(shape.r0 || 0, 0);
	    var r = Math.max(shape.r, 0);
	    var startAngle = shape.startAngle;
	    var endAngle = shape.endAngle;
	    var clockwise = shape.clockwise;
	    var unitX = Math.cos(startAngle);
	    var unitY = Math.sin(startAngle);
	    ctx.moveTo(unitX * r0 + x, unitY * r0 + y);
	    ctx.lineTo(unitX * r + x, unitY * r + y);
	    ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
	    ctx.lineTo(Math.cos(endAngle) * r0 + x, Math.sin(endAngle) * r0 + y);
	
	    if (r0 !== 0) {
	      ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
	    }
	
	    ctx.closePath();
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 993 */
/***/ (function(module, exports, __webpack_require__) {

	var env = __webpack_require__(930);
	
	// Fix weird bug in some version of IE11 (like 11.0.9600.178**),
	// where exception "unexpected call to method or property access"
	// might be thrown when calling ctx.fill or ctx.stroke after a path
	// whose area size is zero is drawn and ctx.clip() is called and
	// shadowBlur is set. See #4572, #3112, #5777.
	// (e.g.,
	//  ctx.moveTo(10, 10);
	//  ctx.lineTo(20, 10);
	//  ctx.closePath();
	//  ctx.clip();
	//  ctx.shadowBlur = 10;
	//  ...
	//  ctx.fill();
	// )
	var shadowTemp = [['shadowBlur', 0], ['shadowColor', '#000'], ['shadowOffsetX', 0], ['shadowOffsetY', 0]];
	
	function _default(orignalBrush) {
	  // version string can be: '11.0'
	  return env.browser.ie && env.browser.version >= 11 ? function () {
	    var clipPaths = this.__clipPaths;
	    var style = this.style;
	    var modified;
	
	    if (clipPaths) {
	      for (var i = 0; i < clipPaths.length; i++) {
	        var clipPath = clipPaths[i];
	        var shape = clipPath && clipPath.shape;
	        var type = clipPath && clipPath.type;
	
	        if (shape && (type === 'sector' && shape.startAngle === shape.endAngle || type === 'rect' && (!shape.width || !shape.height))) {
	          for (var j = 0; j < shadowTemp.length; j++) {
	            // It is save to put shadowTemp static, because shadowTemp
	            // will be all modified each item brush called.
	            shadowTemp[j][2] = style[shadowTemp[j][0]];
	            style[shadowTemp[j][0]] = shadowTemp[j][1];
	          }
	
	          modified = true;
	          break;
	        }
	      }
	    }
	
	    orignalBrush.apply(this, arguments);
	
	    if (modified) {
	      for (var j = 0; j < shadowTemp.length; j++) {
	        style[shadowTemp[j][0]] = shadowTemp[j][2];
	      }
	    }
	  } : orignalBrush;
	}
	
	module.exports = _default;

/***/ }),
/* 994 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(978);
	
	/**
	 * 圆环
	 * @module zrender/graphic/shape/Ring
	 */
	var _default = Path.extend({
	  type: 'ring',
	  shape: {
	    cx: 0,
	    cy: 0,
	    r: 0,
	    r0: 0
	  },
	  buildPath: function (ctx, shape) {
	    var x = shape.cx;
	    var y = shape.cy;
	    var PI2 = Math.PI * 2;
	    ctx.moveTo(x + shape.r, y);
	    ctx.arc(x, y, shape.r, 0, PI2, false);
	    ctx.moveTo(x + shape.r0, y);
	    ctx.arc(x, y, shape.r0, 0, PI2, true);
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 995 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(978);
	
	var polyHelper = __webpack_require__(996);
	
	/**
	 * 多边形
	 * @module zrender/shape/Polygon
	 */
	var _default = Path.extend({
	  type: 'polygon',
	  shape: {
	    points: null,
	    smooth: false,
	    smoothConstraint: null
	  },
	  buildPath: function (ctx, shape) {
	    polyHelper.buildPath(ctx, shape, true);
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 996 */
/***/ (function(module, exports, __webpack_require__) {

	var smoothSpline = __webpack_require__(997);
	
	var smoothBezier = __webpack_require__(998);
	
	function buildPath(ctx, shape, closePath) {
	  var points = shape.points;
	  var smooth = shape.smooth;
	
	  if (points && points.length >= 2) {
	    if (smooth && smooth !== 'spline') {
	      var controlPoints = smoothBezier(points, smooth, closePath, shape.smoothConstraint);
	      ctx.moveTo(points[0][0], points[0][1]);
	      var len = points.length;
	
	      for (var i = 0; i < (closePath ? len : len - 1); i++) {
	        var cp1 = controlPoints[i * 2];
	        var cp2 = controlPoints[i * 2 + 1];
	        var p = points[(i + 1) % len];
	        ctx.bezierCurveTo(cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]);
	      }
	    } else {
	      if (smooth === 'spline') {
	        points = smoothSpline(points, closePath);
	      }
	
	      ctx.moveTo(points[0][0], points[0][1]);
	
	      for (var i = 1, l = points.length; i < l; i++) {
	        ctx.lineTo(points[i][0], points[i][1]);
	      }
	    }
	
	    closePath && ctx.closePath();
	  }
	}
	
	exports.buildPath = buildPath;

/***/ }),
/* 997 */
/***/ (function(module, exports, __webpack_require__) {

	var _vector = __webpack_require__(933);
	
	var v2Distance = _vector.distance;
	
	/**
	 * Catmull-Rom spline 插值折线
	 * @module zrender/shape/util/smoothSpline
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */
	
	/**
	 * @inner
	 */
	function interpolate(p0, p1, p2, p3, t, t2, t3) {
	  var v0 = (p2 - p0) * 0.5;
	  var v1 = (p3 - p1) * 0.5;
	  return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
	}
	/**
	 * @alias module:zrender/shape/util/smoothSpline
	 * @param {Array} points 线段顶点数组
	 * @param {boolean} isLoop
	 * @return {Array}
	 */
	
	
	function _default(points, isLoop) {
	  var len = points.length;
	  var ret = [];
	  var distance = 0;
	
	  for (var i = 1; i < len; i++) {
	    distance += v2Distance(points[i - 1], points[i]);
	  }
	
	  var segs = distance / 2;
	  segs = segs < len ? len : segs;
	
	  for (var i = 0; i < segs; i++) {
	    var pos = i / (segs - 1) * (isLoop ? len : len - 1);
	    var idx = Math.floor(pos);
	    var w = pos - idx;
	    var p0;
	    var p1 = points[idx % len];
	    var p2;
	    var p3;
	
	    if (!isLoop) {
	      p0 = points[idx === 0 ? idx : idx - 1];
	      p2 = points[idx > len - 2 ? len - 1 : idx + 1];
	      p3 = points[idx > len - 3 ? len - 1 : idx + 2];
	    } else {
	      p0 = points[(idx - 1 + len) % len];
	      p2 = points[(idx + 1) % len];
	      p3 = points[(idx + 2) % len];
	    }
	
	    var w2 = w * w;
	    var w3 = w * w2;
	    ret.push([interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3), interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)]);
	  }
	
	  return ret;
	}
	
	module.exports = _default;

/***/ }),
/* 998 */
/***/ (function(module, exports, __webpack_require__) {

	var _vector = __webpack_require__(933);
	
	var v2Min = _vector.min;
	var v2Max = _vector.max;
	var v2Scale = _vector.scale;
	var v2Distance = _vector.distance;
	var v2Add = _vector.add;
	var v2Clone = _vector.clone;
	var v2Sub = _vector.sub;
	
	/**
	 * 贝塞尔平滑曲线
	 * @module zrender/shape/util/smoothBezier
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */
	
	/**
	 * 贝塞尔平滑曲线
	 * @alias module:zrender/shape/util/smoothBezier
	 * @param {Array} points 线段顶点数组
	 * @param {number} smooth 平滑等级, 0-1
	 * @param {boolean} isLoop
	 * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内
	 *                           比如 [[0, 0], [100, 100]], 这个包围盒会与
	 *                           整个折线的包围盒做一个并集用来约束控制点。
	 * @param {Array} 计算出来的控制点数组
	 */
	function _default(points, smooth, isLoop, constraint) {
	  var cps = [];
	  var v = [];
	  var v1 = [];
	  var v2 = [];
	  var prevPoint;
	  var nextPoint;
	  var min, max;
	
	  if (constraint) {
	    min = [Infinity, Infinity];
	    max = [-Infinity, -Infinity];
	
	    for (var i = 0, len = points.length; i < len; i++) {
	      v2Min(min, min, points[i]);
	      v2Max(max, max, points[i]);
	    } // 与指定的包围盒做并集
	
	
	    v2Min(min, min, constraint[0]);
	    v2Max(max, max, constraint[1]);
	  }
	
	  for (var i = 0, len = points.length; i < len; i++) {
	    var point = points[i];
	
	    if (isLoop) {
	      prevPoint = points[i ? i - 1 : len - 1];
	      nextPoint = points[(i + 1) % len];
	    } else {
	      if (i === 0 || i === len - 1) {
	        cps.push(v2Clone(points[i]));
	        continue;
	      } else {
	        prevPoint = points[i - 1];
	        nextPoint = points[i + 1];
	      }
	    }
	
	    v2Sub(v, nextPoint, prevPoint); // use degree to scale the handle length
	
	    v2Scale(v, v, smooth);
	    var d0 = v2Distance(point, prevPoint);
	    var d1 = v2Distance(point, nextPoint);
	    var sum = d0 + d1;
	
	    if (sum !== 0) {
	      d0 /= sum;
	      d1 /= sum;
	    }
	
	    v2Scale(v1, v, -d0);
	    v2Scale(v2, v, d1);
	    var cp0 = v2Add([], point, v1);
	    var cp1 = v2Add([], point, v2);
	
	    if (constraint) {
	      v2Max(cp0, cp0, min);
	      v2Min(cp0, cp0, max);
	      v2Max(cp1, cp1, min);
	      v2Min(cp1, cp1, max);
	    }
	
	    cps.push(cp0);
	    cps.push(cp1);
	  }
	
	  if (isLoop) {
	    cps.push(cps.shift());
	  }
	
	  return cps;
	}
	
	module.exports = _default;

/***/ }),
/* 999 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(978);
	
	var polyHelper = __webpack_require__(996);
	
	/**
	 * @module zrender/graphic/shape/Polyline
	 */
	var _default = Path.extend({
	  type: 'polyline',
	  shape: {
	    points: null,
	    smooth: false,
	    smoothConstraint: null
	  },
	  style: {
	    stroke: '#000',
	    fill: null
	  },
	  buildPath: function (ctx, shape) {
	    polyHelper.buildPath(ctx, shape, false);
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 1000 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(978);
	
	var roundRectHelper = __webpack_require__(963);
	
	/**
	 * 矩形
	 * @module zrender/graphic/shape/Rect
	 */
	var _default = Path.extend({
	  type: 'rect',
	  shape: {
	    // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4
	    // r缩写为1         相当于 [1, 1, 1, 1]
	    // r缩写为[1]       相当于 [1, 1, 1, 1]
	    // r缩写为[1, 2]    相当于 [1, 2, 1, 2]
	    // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]
	    r: 0,
	    x: 0,
	    y: 0,
	    width: 0,
	    height: 0
	  },
	  buildPath: function (ctx, shape) {
	    var x = shape.x;
	    var y = shape.y;
	    var width = shape.width;
	    var height = shape.height;
	
	    if (!shape.r) {
	      ctx.rect(x, y, width, height);
	    } else {
	      roundRectHelper.buildPath(ctx, shape);
	    }
	
	    ctx.closePath();
	    return;
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 1001 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(978);
	
	/**
	 * 直线
	 * @module zrender/graphic/shape/Line
	 */
	var _default = Path.extend({
	  type: 'line',
	  shape: {
	    // Start point
	    x1: 0,
	    y1: 0,
	    // End point
	    x2: 0,
	    y2: 0,
	    percent: 1
	  },
	  style: {
	    stroke: '#000',
	    fill: null
	  },
	  buildPath: function (ctx, shape) {
	    var x1 = shape.x1;
	    var y1 = shape.y1;
	    var x2 = shape.x2;
	    var y2 = shape.y2;
	    var percent = shape.percent;
	
	    if (percent === 0) {
	      return;
	    }
	
	    ctx.moveTo(x1, y1);
	
	    if (percent < 1) {
	      x2 = x1 * (1 - percent) + x2 * percent;
	      y2 = y1 * (1 - percent) + y2 * percent;
	    }
	
	    ctx.lineTo(x2, y2);
	  },
	
	  /**
	   * Get point at percent
	   * @param  {number} percent
	   * @return {Array.<number>}
	   */
	  pointAt: function (p) {
	    var shape = this.shape;
	    return [shape.x1 * (1 - p) + shape.x2 * p, shape.y1 * (1 - p) + shape.y2 * p];
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 1002 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(978);
	
	var vec2 = __webpack_require__(933);
	
	var _curve = __webpack_require__(980);
	
	var quadraticSubdivide = _curve.quadraticSubdivide;
	var cubicSubdivide = _curve.cubicSubdivide;
	var quadraticAt = _curve.quadraticAt;
	var cubicAt = _curve.cubicAt;
	var quadraticDerivativeAt = _curve.quadraticDerivativeAt;
	var cubicDerivativeAt = _curve.cubicDerivativeAt;
	
	/**
	 * 贝塞尔曲线
	 * @module zrender/shape/BezierCurve
	 */
	var out = [];
	
	function someVectorAt(shape, t, isTangent) {
	  var cpx2 = shape.cpx2;
	  var cpy2 = shape.cpy2;
	
	  if (cpx2 === null || cpy2 === null) {
	    return [(isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t), (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)];
	  } else {
	    return [(isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t), (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)];
	  }
	}
	
	var _default = Path.extend({
	  type: 'bezier-curve',
	  shape: {
	    x1: 0,
	    y1: 0,
	    x2: 0,
	    y2: 0,
	    cpx1: 0,
	    cpy1: 0,
	    // cpx2: 0,
	    // cpy2: 0
	    // Curve show percent, for animating
	    percent: 1
	  },
	  style: {
	    stroke: '#000',
	    fill: null
	  },
	  buildPath: function (ctx, shape) {
	    var x1 = shape.x1;
	    var y1 = shape.y1;
	    var x2 = shape.x2;
	    var y2 = shape.y2;
	    var cpx1 = shape.cpx1;
	    var cpy1 = shape.cpy1;
	    var cpx2 = shape.cpx2;
	    var cpy2 = shape.cpy2;
	    var percent = shape.percent;
	
	    if (percent === 0) {
	      return;
	    }
	
	    ctx.moveTo(x1, y1);
	
	    if (cpx2 == null || cpy2 == null) {
	      if (percent < 1) {
	        quadraticSubdivide(x1, cpx1, x2, percent, out);
	        cpx1 = out[1];
	        x2 = out[2];
	        quadraticSubdivide(y1, cpy1, y2, percent, out);
	        cpy1 = out[1];
	        y2 = out[2];
	      }
	
	      ctx.quadraticCurveTo(cpx1, cpy1, x2, y2);
	    } else {
	      if (percent < 1) {
	        cubicSubdivide(x1, cpx1, cpx2, x2, percent, out);
	        cpx1 = out[1];
	        cpx2 = out[2];
	        x2 = out[3];
	        cubicSubdivide(y1, cpy1, cpy2, y2, percent, out);
	        cpy1 = out[1];
	        cpy2 = out[2];
	        y2 = out[3];
	      }
	
	      ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);
	    }
	  },
	
	  /**
	   * Get point at percent
	   * @param  {number} t
	   * @return {Array.<number>}
	   */
	  pointAt: function (t) {
	    return someVectorAt(this.shape, t, false);
	  },
	
	  /**
	   * Get tangent at percent
	   * @param  {number} t
	   * @return {Array.<number>}
	   */
	  tangentAt: function (t) {
	    var p = someVectorAt(this.shape, t, true);
	    return vec2.normalize(p, p);
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 1003 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(978);
	
	/**
	 * 圆弧
	 * @module zrender/graphic/shape/Arc
	 */
	var _default = Path.extend({
	  type: 'arc',
	  shape: {
	    cx: 0,
	    cy: 0,
	    r: 0,
	    startAngle: 0,
	    endAngle: Math.PI * 2,
	    clockwise: true
	  },
	  style: {
	    stroke: '#000',
	    fill: null
	  },
	  buildPath: function (ctx, shape) {
	    var x = shape.cx;
	    var y = shape.cy;
	    var r = Math.max(shape.r, 0);
	    var startAngle = shape.startAngle;
	    var endAngle = shape.endAngle;
	    var clockwise = shape.clockwise;
	    var unitX = Math.cos(startAngle);
	    var unitY = Math.sin(startAngle);
	    ctx.moveTo(unitX * r + x, unitY * r + y);
	    ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 1004 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(978);
	
	// CompoundPath to improve performance
	var _default = Path.extend({
	  type: 'compound',
	  shape: {
	    paths: null
	  },
	  _updatePathDirty: function () {
	    var dirtyPath = this.__dirtyPath;
	    var paths = this.shape.paths;
	
	    for (var i = 0; i < paths.length; i++) {
	      // Mark as dirty if any subpath is dirty
	      dirtyPath = dirtyPath || paths[i].__dirtyPath;
	    }
	
	    this.__dirtyPath = dirtyPath;
	    this.__dirty = this.__dirty || dirtyPath;
	  },
	  beforeBrush: function () {
	    this._updatePathDirty();
	
	    var paths = this.shape.paths || [];
	    var scale = this.getGlobalScale(); // Update path scale
	
	    for (var i = 0; i < paths.length; i++) {
	      if (!paths[i].path) {
	        paths[i].createPathProxy();
	      }
	
	      paths[i].path.setScale(scale[0], scale[1]);
	    }
	  },
	  buildPath: function (ctx, shape) {
	    var paths = shape.paths || [];
	
	    for (var i = 0; i < paths.length; i++) {
	      paths[i].buildPath(ctx, paths[i].shape, true);
	    }
	  },
	  afterBrush: function () {
	    var paths = this.shape.paths || [];
	
	    for (var i = 0; i < paths.length; i++) {
	      paths[i].__dirtyPath = false;
	    }
	  },
	  getBoundingRect: function () {
	    this._updatePathDirty();
	
	    return Path.prototype.getBoundingRect.call(this);
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 1005 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var Gradient = __webpack_require__(1006);
	
	/**
	 * x, y, x2, y2 are all percent from 0 to 1
	 * @param {number} [x=0]
	 * @param {number} [y=0]
	 * @param {number} [x2=1]
	 * @param {number} [y2=0]
	 * @param {Array.<Object>} colorStops
	 * @param {boolean} [globalCoord=false]
	 */
	var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {
	  // Should do nothing more in this constructor. Because gradient can be
	  // declard by `color: {type: 'linear', colorStops: ...}`, where
	  // this constructor will not be called.
	  this.x = x == null ? 0 : x;
	  this.y = y == null ? 0 : y;
	  this.x2 = x2 == null ? 1 : x2;
	  this.y2 = y2 == null ? 0 : y2; // Can be cloned
	
	  this.type = 'linear'; // If use global coord
	
	  this.global = globalCoord || false;
	  Gradient.call(this, colorStops);
	};
	
	LinearGradient.prototype = {
	  constructor: LinearGradient
	};
	zrUtil.inherits(LinearGradient, Gradient);
	var _default = LinearGradient;
	module.exports = _default;

/***/ }),
/* 1006 */
/***/ (function(module, exports) {

	/**
	 * @param {Array.<Object>} colorStops
	 */
	var Gradient = function (colorStops) {
	  this.colorStops = colorStops || [];
	};
	
	Gradient.prototype = {
	  constructor: Gradient,
	  addColorStop: function (offset, color) {
	    this.colorStops.push({
	      offset: offset,
	      color: color
	    });
	  }
	};
	var _default = Gradient;
	module.exports = _default;

/***/ }),
/* 1007 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var Gradient = __webpack_require__(1006);
	
	/**
	 * x, y, r are all percent from 0 to 1
	 * @param {number} [x=0.5]
	 * @param {number} [y=0.5]
	 * @param {number} [r=0.5]
	 * @param {Array.<Object>} [colorStops]
	 * @param {boolean} [globalCoord=false]
	 */
	var RadialGradient = function (x, y, r, colorStops, globalCoord) {
	  // Should do nothing more in this constructor. Because gradient can be
	  // declard by `color: {type: 'radial', colorStops: ...}`, where
	  // this constructor will not be called.
	  this.x = x == null ? 0.5 : x;
	  this.y = y == null ? 0.5 : y;
	  this.r = r == null ? 0.5 : r; // Can be cloned
	
	  this.type = 'radial'; // If use global coord
	
	  this.global = globalCoord || false;
	  Gradient.call(this, colorStops);
	};
	
	RadialGradient.prototype = {
	  constructor: RadialGradient
	};
	zrUtil.inherits(RadialGradient, Gradient);
	var _default = RadialGradient;
	module.exports = _default;

/***/ }),
/* 1008 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(931);
	
	var inherits = _util.inherits;
	
	var Displayble = __webpack_require__(958);
	
	var BoundingRect = __webpack_require__(949);
	
	/**
	 * Displayable for incremental rendering. It will be rendered in a separate layer
	 * IncrementalDisplay have too main methods. `clearDisplayables` and `addDisplayables`
	 * addDisplayables will render the added displayables incremetally.
	 *
	 * It use a not clearFlag to tell the painter don't clear the layer if it's the first element.
	 */
	// TODO Style override ?
	function IncrementalDisplayble(opts) {
	  Displayble.call(this, opts);
	  this._displayables = [];
	  this._temporaryDisplayables = [];
	  this._cursor = 0;
	  this.notClear = true;
	}
	
	IncrementalDisplayble.prototype.incremental = true;
	
	IncrementalDisplayble.prototype.clearDisplaybles = function () {
	  this._displayables = [];
	  this._temporaryDisplayables = [];
	  this._cursor = 0;
	  this.dirty();
	  this.notClear = false;
	};
	
	IncrementalDisplayble.prototype.addDisplayable = function (displayable, notPersistent) {
	  if (notPersistent) {
	    this._temporaryDisplayables.push(displayable);
	  } else {
	    this._displayables.push(displayable);
	  }
	
	  this.dirty();
	};
	
	IncrementalDisplayble.prototype.addDisplayables = function (displayables, notPersistent) {
	  notPersistent = notPersistent || false;
	
	  for (var i = 0; i < displayables.length; i++) {
	    this.addDisplayable(displayables[i], notPersistent);
	  }
	};
	
	IncrementalDisplayble.prototype.eachPendingDisplayable = function (cb) {
	  for (var i = this._cursor; i < this._displayables.length; i++) {
	    cb && cb(this._displayables[i]);
	  }
	
	  for (var i = 0; i < this._temporaryDisplayables.length; i++) {
	    cb && cb(this._temporaryDisplayables[i]);
	  }
	};
	
	IncrementalDisplayble.prototype.update = function () {
	  this.updateTransform();
	
	  for (var i = this._cursor; i < this._displayables.length; i++) {
	    var displayable = this._displayables[i]; // PENDING
	
	    displayable.parent = this;
	    displayable.update();
	    displayable.parent = null;
	  }
	
	  for (var i = 0; i < this._temporaryDisplayables.length; i++) {
	    var displayable = this._temporaryDisplayables[i]; // PENDING
	
	    displayable.parent = this;
	    displayable.update();
	    displayable.parent = null;
	  }
	};
	
	IncrementalDisplayble.prototype.brush = function (ctx, prevEl) {
	  // Render persistant displayables.
	  for (var i = this._cursor; i < this._displayables.length; i++) {
	    var displayable = this._displayables[i];
	    displayable.beforeBrush && displayable.beforeBrush(ctx);
	    displayable.brush(ctx, i === this._cursor ? null : this._displayables[i - 1]);
	    displayable.afterBrush && displayable.afterBrush(ctx);
	  }
	
	  this._cursor = i; // Render temporary displayables.
	
	  for (var i = 0; i < this._temporaryDisplayables.length; i++) {
	    var displayable = this._temporaryDisplayables[i];
	    displayable.beforeBrush && displayable.beforeBrush(ctx);
	    displayable.brush(ctx, i === 0 ? null : this._temporaryDisplayables[i - 1]);
	    displayable.afterBrush && displayable.afterBrush(ctx);
	  }
	
	  this._temporaryDisplayables = [];
	  this.notClear = true;
	};
	
	var m = [];
	
	IncrementalDisplayble.prototype.getBoundingRect = function () {
	  if (!this._rect) {
	    var rect = new BoundingRect(Infinity, Infinity, -Infinity, -Infinity);
	
	    for (var i = 0; i < this._displayables.length; i++) {
	      var displayable = this._displayables[i];
	      var childRect = displayable.getBoundingRect().clone();
	
	      if (displayable.needLocalTransform()) {
	        childRect.applyTransform(displayable.getLocalTransform(m));
	      }
	
	      rect.union(childRect);
	    }
	
	    this._rect = rect;
	  }
	
	  return this._rect;
	};
	
	IncrementalDisplayble.prototype.contain = function (x, y) {
	  var localPos = this.transformCoordToLocal(x, y);
	  var rect = this.getBoundingRect();
	
	  if (rect.contain(localPos[0], localPos[1])) {
	    for (var i = 0; i < this._displayables.length; i++) {
	      var displayable = this._displayables[i];
	
	      if (displayable.contain(x, y)) {
	        return true;
	      }
	    }
	  }
	
	  return false;
	};
	
	inherits(IncrementalDisplayble, Displayble);
	var _default = IncrementalDisplayble;
	module.exports = _default;

/***/ }),
/* 1009 */
/***/ (function(module, exports, __webpack_require__) {

	var makeStyleMapper = __webpack_require__(973);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var getItemStyle = makeStyleMapper([['fill', 'color'], ['stroke', 'borderColor'], ['lineWidth', 'borderWidth'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor'], ['textPosition'], ['textAlign']]);
	var _default = {
	  getItemStyle: function (excludes, includes) {
	    var style = getItemStyle(this, excludes, includes);
	    var lineDash = this.getBorderLineDash();
	    lineDash && (style.lineDash = lineDash);
	    return style;
	  },
	  getBorderLineDash: function () {
	    var lineType = this.get('borderType');
	    return lineType === 'solid' || lineType == null ? null : lineType === 'dashed' ? [5, 5] : [1, 1];
	  }
	};
	module.exports = _default;

/***/ }),
/* 1010 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var Model = __webpack_require__(970);
	
	var componentUtil = __webpack_require__(1011);
	
	var _clazz = __webpack_require__(971);
	
	var enableClassManagement = _clazz.enableClassManagement;
	var parseClassType = _clazz.parseClassType;
	
	var _model = __webpack_require__(969);
	
	var makeInner = _model.makeInner;
	
	var layout = __webpack_require__(1012);
	
	var boxLayoutMixin = __webpack_require__(1015);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Component model
	 *
	 * @module echarts/model/Component
	 */
	var inner = makeInner();
	/**
	 * @alias module:echarts/model/Component
	 * @constructor
	 * @param {Object} option
	 * @param {module:echarts/model/Model} parentModel
	 * @param {module:echarts/model/Model} ecModel
	 */
	
	var ComponentModel = Model.extend({
	  type: 'component',
	
	  /**
	   * @readOnly
	   * @type {string}
	   */
	  id: '',
	
	  /**
	   * Because simplified concept is probably better, series.name (or component.name)
	   * has been having too many resposibilities:
	   * (1) Generating id (which requires name in option should not be modified).
	   * (2) As an index to mapping series when merging option or calling API (a name
	   * can refer to more then one components, which is convinient is some case).
	   * (3) Display.
	   * @readOnly
	   */
	  name: '',
	
	  /**
	   * @readOnly
	   * @type {string}
	   */
	  mainType: '',
	
	  /**
	   * @readOnly
	   * @type {string}
	   */
	  subType: '',
	
	  /**
	   * @readOnly
	   * @type {number}
	   */
	  componentIndex: 0,
	
	  /**
	   * @type {Object}
	   * @protected
	   */
	  defaultOption: null,
	
	  /**
	   * @type {module:echarts/model/Global}
	   * @readOnly
	   */
	  ecModel: null,
	
	  /**
	   * key: componentType
	   * value:  Component model list, can not be null.
	   * @type {Object.<string, Array.<module:echarts/model/Model>>}
	   * @readOnly
	   */
	  dependentModels: [],
	
	  /**
	   * @type {string}
	   * @readOnly
	   */
	  uid: null,
	
	  /**
	   * Support merge layout params.
	   * Only support 'box' now (left/right/top/bottom/width/height).
	   * @type {string|Object} Object can be {ignoreSize: true}
	   * @readOnly
	   */
	  layoutMode: null,
	  $constructor: function (option, parentModel, ecModel, extraOpt) {
	    Model.call(this, option, parentModel, ecModel, extraOpt);
	    this.uid = componentUtil.getUID('ec_cpt_model');
	  },
	  init: function (option, parentModel, ecModel, extraOpt) {
	    this.mergeDefaultAndTheme(option, ecModel);
	  },
	  mergeDefaultAndTheme: function (option, ecModel) {
	    var layoutMode = this.layoutMode;
	    var inputPositionParams = layoutMode ? layout.getLayoutParams(option) : {};
	    var themeModel = ecModel.getTheme();
	    zrUtil.merge(option, themeModel.get(this.mainType));
	    zrUtil.merge(option, this.getDefaultOption());
	
	    if (layoutMode) {
	      layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	    }
	  },
	  mergeOption: function (option, extraOpt) {
	    zrUtil.merge(this.option, option, true);
	    var layoutMode = this.layoutMode;
	
	    if (layoutMode) {
	      layout.mergeLayoutParam(this.option, option, layoutMode);
	    }
	  },
	  // Hooker after init or mergeOption
	  optionUpdated: function (newCptOption, isInit) {},
	  getDefaultOption: function () {
	    var fields = inner(this);
	
	    if (!fields.defaultOption) {
	      var optList = [];
	      var Class = this.constructor;
	
	      while (Class) {
	        var opt = Class.prototype.defaultOption;
	        opt && optList.push(opt);
	        Class = Class.superClass;
	      }
	
	      var defaultOption = {};
	
	      for (var i = optList.length - 1; i >= 0; i--) {
	        defaultOption = zrUtil.merge(defaultOption, optList[i], true);
	      }
	
	      fields.defaultOption = defaultOption;
	    }
	
	    return fields.defaultOption;
	  },
	  getReferringComponents: function (mainType) {
	    return this.ecModel.queryComponents({
	      mainType: mainType,
	      index: this.get(mainType + 'Index', true),
	      id: this.get(mainType + 'Id', true)
	    });
	  }
	}); // Reset ComponentModel.extend, add preConstruct.
	// clazzUtil.enableClassExtend(
	//     ComponentModel,
	//     function (option, parentModel, ecModel, extraOpt) {
	//         // Set dependentModels, componentIndex, name, id, mainType, subType.
	//         zrUtil.extend(this, extraOpt);
	//         this.uid = componentUtil.getUID('componentModel');
	//         // this.setReadOnly([
	//         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',
	//         //     'dependentModels', 'componentIndex'
	//         // ]);
	//     }
	// );
	// Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	
	enableClassManagement(ComponentModel, {
	  registerWhenExtend: true
	});
	componentUtil.enableSubTypeDefaulter(ComponentModel); // Add capability of ComponentModel.topologicalTravel.
	
	componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);
	
	function getDependencies(componentType) {
	  var deps = [];
	  zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {
	    deps = deps.concat(Clazz.prototype.dependencies || []);
	  }); // Ensure main type.
	
	  deps = zrUtil.map(deps, function (type) {
	    return parseClassType(type).main;
	  }); // Hack dataset for convenience.
	
	  if (componentType !== 'dataset' && zrUtil.indexOf(deps, 'dataset') <= 0) {
	    deps.unshift('dataset');
	  }
	
	  return deps;
	}
	
	zrUtil.mixin(ComponentModel, boxLayoutMixin);
	var _default = ComponentModel;
	module.exports = _default;

/***/ }),
/* 1011 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var _clazz = __webpack_require__(971);
	
	var parseClassType = _clazz.parseClassType;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var base = 0;
	/**
	 * @public
	 * @param {string} type
	 * @return {string}
	 */
	
	function getUID(type) {
	  // Considering the case of crossing js context,
	  // use Math.random to make id as unique as possible.
	  return [type || '', base++, Math.random().toFixed(5)].join('_');
	}
	/**
	 * @inner
	 */
	
	
	function enableSubTypeDefaulter(entity) {
	  var subTypeDefaulters = {};
	
	  entity.registerSubTypeDefaulter = function (componentType, defaulter) {
	    componentType = parseClassType(componentType);
	    subTypeDefaulters[componentType.main] = defaulter;
	  };
	
	  entity.determineSubType = function (componentType, option) {
	    var type = option.type;
	
	    if (!type) {
	      var componentTypeMain = parseClassType(componentType).main;
	
	      if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {
	        type = subTypeDefaulters[componentTypeMain](option);
	      }
	    }
	
	    return type;
	  };
	
	  return entity;
	}
	/**
	 * Topological travel on Activity Network (Activity On Vertices).
	 * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].
	 *
	 * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.
	 *
	 * If there is circle dependencey, Error will be thrown.
	 *
	 */
	
	
	function enableTopologicalTravel(entity, dependencyGetter) {
	  /**
	   * @public
	   * @param {Array.<string>} targetNameList Target Component type list.
	   *                                           Can be ['aa', 'bb', 'aa.xx']
	   * @param {Array.<string>} fullNameList By which we can build dependency graph.
	   * @param {Function} callback Params: componentType, dependencies.
	   * @param {Object} context Scope of callback.
	   */
	  entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {
	    if (!targetNameList.length) {
	      return;
	    }
	
	    var result = makeDepndencyGraph(fullNameList);
	    var graph = result.graph;
	    var stack = result.noEntryList;
	    var targetNameSet = {};
	    zrUtil.each(targetNameList, function (name) {
	      targetNameSet[name] = true;
	    });
	
	    while (stack.length) {
	      var currComponentType = stack.pop();
	      var currVertex = graph[currComponentType];
	      var isInTargetNameSet = !!targetNameSet[currComponentType];
	
	      if (isInTargetNameSet) {
	        callback.call(context, currComponentType, currVertex.originalDeps.slice());
	        delete targetNameSet[currComponentType];
	      }
	
	      zrUtil.each(currVertex.successor, isInTargetNameSet ? removeEdgeAndAdd : removeEdge);
	    }
	
	    zrUtil.each(targetNameSet, function () {
	      throw new Error('Circle dependency may exists');
	    });
	
	    function removeEdge(succComponentType) {
	      graph[succComponentType].entryCount--;
	
	      if (graph[succComponentType].entryCount === 0) {
	        stack.push(succComponentType);
	      }
	    } // Consider this case: legend depends on series, and we call
	    // chart.setOption({series: [...]}), where only series is in option.
	    // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will
	    // not be called, but only sereis.mergeOption is called. Thus legend
	    // have no chance to update its local record about series (like which
	    // name of series is available in legend).
	
	
	    function removeEdgeAndAdd(succComponentType) {
	      targetNameSet[succComponentType] = true;
	      removeEdge(succComponentType);
	    }
	  };
	  /**
	   * DepndencyGraph: {Object}
	   * key: conponentType,
	   * value: {
	   *     successor: [conponentTypes...],
	   *     originalDeps: [conponentTypes...],
	   *     entryCount: {number}
	   * }
	   */
	
	
	  function makeDepndencyGraph(fullNameList) {
	    var graph = {};
	    var noEntryList = [];
	    zrUtil.each(fullNameList, function (name) {
	      var thisItem = createDependencyGraphItem(graph, name);
	      var originalDeps = thisItem.originalDeps = dependencyGetter(name);
	      var availableDeps = getAvailableDependencies(originalDeps, fullNameList);
	      thisItem.entryCount = availableDeps.length;
	
	      if (thisItem.entryCount === 0) {
	        noEntryList.push(name);
	      }
	
	      zrUtil.each(availableDeps, function (dependentName) {
	        if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {
	          thisItem.predecessor.push(dependentName);
	        }
	
	        var thatItem = createDependencyGraphItem(graph, dependentName);
	
	        if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {
	          thatItem.successor.push(name);
	        }
	      });
	    });
	    return {
	      graph: graph,
	      noEntryList: noEntryList
	    };
	  }
	
	  function createDependencyGraphItem(graph, name) {
	    if (!graph[name]) {
	      graph[name] = {
	        predecessor: [],
	        successor: []
	      };
	    }
	
	    return graph[name];
	  }
	
	  function getAvailableDependencies(originalDeps, fullNameList) {
	    var availableDeps = [];
	    zrUtil.each(originalDeps, function (dep) {
	      zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);
	    });
	    return availableDeps;
	  }
	}
	
	exports.getUID = getUID;
	exports.enableSubTypeDefaulter = enableSubTypeDefaulter;
	exports.enableTopologicalTravel = enableTopologicalTravel;

/***/ }),
/* 1012 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var BoundingRect = __webpack_require__(949);
	
	var _number = __webpack_require__(1013);
	
	var parsePercent = _number.parsePercent;
	
	var formatUtil = __webpack_require__(1014);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Layout helpers for each component positioning
	var each = zrUtil.each;
	/**
	 * @public
	 */
	
	var LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];
	/**
	 * @public
	 */
	
	var HV_NAMES = [['width', 'left', 'right'], ['height', 'top', 'bottom']];
	
	function boxLayout(orient, group, gap, maxWidth, maxHeight) {
	  var x = 0;
	  var y = 0;
	
	  if (maxWidth == null) {
	    maxWidth = Infinity;
	  }
	
	  if (maxHeight == null) {
	    maxHeight = Infinity;
	  }
	
	  var currentLineMaxSize = 0;
	  group.eachChild(function (child, idx) {
	    var position = child.position;
	    var rect = child.getBoundingRect();
	    var nextChild = group.childAt(idx + 1);
	    var nextChildRect = nextChild && nextChild.getBoundingRect();
	    var nextX;
	    var nextY;
	
	    if (orient === 'horizontal') {
	      var moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);
	      nextX = x + moveX; // Wrap when width exceeds maxWidth or meet a `newline` group
	      // FIXME compare before adding gap?
	
	      if (nextX > maxWidth || child.newline) {
	        x = 0;
	        nextX = moveX;
	        y += currentLineMaxSize + gap;
	        currentLineMaxSize = rect.height;
	      } else {
	        // FIXME: consider rect.y is not `0`?
	        currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
	      }
	    } else {
	      var moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);
	      nextY = y + moveY; // Wrap when width exceeds maxHeight or meet a `newline` group
	
	      if (nextY > maxHeight || child.newline) {
	        x += currentLineMaxSize + gap;
	        y = 0;
	        nextY = moveY;
	        currentLineMaxSize = rect.width;
	      } else {
	        currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
	      }
	    }
	
	    if (child.newline) {
	      return;
	    }
	
	    position[0] = x;
	    position[1] = y;
	    orient === 'horizontal' ? x = nextX + gap : y = nextY + gap;
	  });
	}
	/**
	 * VBox or HBox layouting
	 * @param {string} orient
	 * @param {module:zrender/container/Group} group
	 * @param {number} gap
	 * @param {number} [width=Infinity]
	 * @param {number} [height=Infinity]
	 */
	
	
	var box = boxLayout;
	/**
	 * VBox layouting
	 * @param {module:zrender/container/Group} group
	 * @param {number} gap
	 * @param {number} [width=Infinity]
	 * @param {number} [height=Infinity]
	 */
	
	var vbox = zrUtil.curry(boxLayout, 'vertical');
	/**
	 * HBox layouting
	 * @param {module:zrender/container/Group} group
	 * @param {number} gap
	 * @param {number} [width=Infinity]
	 * @param {number} [height=Infinity]
	 */
	
	var hbox = zrUtil.curry(boxLayout, 'horizontal');
	/**
	 * If x or x2 is not specified or 'center' 'left' 'right',
	 * the width would be as long as possible.
	 * If y or y2 is not specified or 'middle' 'top' 'bottom',
	 * the height would be as long as possible.
	 *
	 * @param {Object} positionInfo
	 * @param {number|string} [positionInfo.x]
	 * @param {number|string} [positionInfo.y]
	 * @param {number|string} [positionInfo.x2]
	 * @param {number|string} [positionInfo.y2]
	 * @param {Object} containerRect {width, height}
	 * @param {string|number} margin
	 * @return {Object} {width, height}
	 */
	
	function getAvailableSize(positionInfo, containerRect, margin) {
	  var containerWidth = containerRect.width;
	  var containerHeight = containerRect.height;
	  var x = parsePercent(positionInfo.x, containerWidth);
	  var y = parsePercent(positionInfo.y, containerHeight);
	  var x2 = parsePercent(positionInfo.x2, containerWidth);
	  var y2 = parsePercent(positionInfo.y2, containerHeight);
	  (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);
	  (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);
	  (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);
	  (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);
	  margin = formatUtil.normalizeCssArray(margin || 0);
	  return {
	    width: Math.max(x2 - x - margin[1] - margin[3], 0),
	    height: Math.max(y2 - y - margin[0] - margin[2], 0)
	  };
	}
	/**
	 * Parse position info.
	 *
	 * @param {Object} positionInfo
	 * @param {number|string} [positionInfo.left]
	 * @param {number|string} [positionInfo.top]
	 * @param {number|string} [positionInfo.right]
	 * @param {number|string} [positionInfo.bottom]
	 * @param {number|string} [positionInfo.width]
	 * @param {number|string} [positionInfo.height]
	 * @param {number|string} [positionInfo.aspect] Aspect is width / height
	 * @param {Object} containerRect
	 * @param {string|number} [margin]
	 *
	 * @return {module:zrender/core/BoundingRect}
	 */
	
	
	function getLayoutRect(positionInfo, containerRect, margin) {
	  margin = formatUtil.normalizeCssArray(margin || 0);
	  var containerWidth = containerRect.width;
	  var containerHeight = containerRect.height;
	  var left = parsePercent(positionInfo.left, containerWidth);
	  var top = parsePercent(positionInfo.top, containerHeight);
	  var right = parsePercent(positionInfo.right, containerWidth);
	  var bottom = parsePercent(positionInfo.bottom, containerHeight);
	  var width = parsePercent(positionInfo.width, containerWidth);
	  var height = parsePercent(positionInfo.height, containerHeight);
	  var verticalMargin = margin[2] + margin[0];
	  var horizontalMargin = margin[1] + margin[3];
	  var aspect = positionInfo.aspect; // If width is not specified, calculate width from left and right
	
	  if (isNaN(width)) {
	    width = containerWidth - right - horizontalMargin - left;
	  }
	
	  if (isNaN(height)) {
	    height = containerHeight - bottom - verticalMargin - top;
	  }
	
	  if (aspect != null) {
	    // If width and height are not given
	    // 1. Graph should not exceeds the container
	    // 2. Aspect must be keeped
	    // 3. Graph should take the space as more as possible
	    // FIXME
	    // Margin is not considered, because there is no case that both
	    // using margin and aspect so far.
	    if (isNaN(width) && isNaN(height)) {
	      if (aspect > containerWidth / containerHeight) {
	        width = containerWidth * 0.8;
	      } else {
	        height = containerHeight * 0.8;
	      }
	    } // Calculate width or height with given aspect
	
	
	    if (isNaN(width)) {
	      width = aspect * height;
	    }
	
	    if (isNaN(height)) {
	      height = width / aspect;
	    }
	  } // If left is not specified, calculate left from right and width
	
	
	  if (isNaN(left)) {
	    left = containerWidth - right - width - horizontalMargin;
	  }
	
	  if (isNaN(top)) {
	    top = containerHeight - bottom - height - verticalMargin;
	  } // Align left and top
	
	
	  switch (positionInfo.left || positionInfo.right) {
	    case 'center':
	      left = containerWidth / 2 - width / 2 - margin[3];
	      break;
	
	    case 'right':
	      left = containerWidth - width - horizontalMargin;
	      break;
	  }
	
	  switch (positionInfo.top || positionInfo.bottom) {
	    case 'middle':
	    case 'center':
	      top = containerHeight / 2 - height / 2 - margin[0];
	      break;
	
	    case 'bottom':
	      top = containerHeight - height - verticalMargin;
	      break;
	  } // If something is wrong and left, top, width, height are calculated as NaN
	
	
	  left = left || 0;
	  top = top || 0;
	
	  if (isNaN(width)) {
	    // Width may be NaN if only one value is given except width
	    width = containerWidth - horizontalMargin - left - (right || 0);
	  }
	
	  if (isNaN(height)) {
	    // Height may be NaN if only one value is given except height
	    height = containerHeight - verticalMargin - top - (bottom || 0);
	  }
	
	  var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);
	  rect.margin = margin;
	  return rect;
	}
	/**
	 * Position a zr element in viewport
	 *  Group position is specified by either
	 *  {left, top}, {right, bottom}
	 *  If all properties exists, right and bottom will be igonred.
	 *
	 * Logic:
	 *     1. Scale (against origin point in parent coord)
	 *     2. Rotate (against origin point in parent coord)
	 *     3. Traslate (with el.position by this method)
	 * So this method only fixes the last step 'Traslate', which does not affect
	 * scaling and rotating.
	 *
	 * If be called repeatly with the same input el, the same result will be gotten.
	 *
	 * @param {module:zrender/Element} el Should have `getBoundingRect` method.
	 * @param {Object} positionInfo
	 * @param {number|string} [positionInfo.left]
	 * @param {number|string} [positionInfo.top]
	 * @param {number|string} [positionInfo.right]
	 * @param {number|string} [positionInfo.bottom]
	 * @param {number|string} [positionInfo.width] Only for opt.boundingModel: 'raw'
	 * @param {number|string} [positionInfo.height] Only for opt.boundingModel: 'raw'
	 * @param {Object} containerRect
	 * @param {string|number} margin
	 * @param {Object} [opt]
	 * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.
	 * @param {Array.<number>} [opt.boundingMode='all']
	 *        Specify how to calculate boundingRect when locating.
	 *        'all': Position the boundingRect that is transformed and uioned
	 *               both itself and its descendants.
	 *               This mode simplies confine the elements in the bounding
	 *               of their container (e.g., using 'right: 0').
	 *        'raw': Position the boundingRect that is not transformed and only itself.
	 *               This mode is useful when you want a element can overflow its
	 *               container. (Consider a rotated circle needs to be located in a corner.)
	 *               In this mode positionInfo.width/height can only be number.
	 */
	
	
	function positionElement(el, positionInfo, containerRect, margin, opt) {
	  var h = !opt || !opt.hv || opt.hv[0];
	  var v = !opt || !opt.hv || opt.hv[1];
	  var boundingMode = opt && opt.boundingMode || 'all';
	
	  if (!h && !v) {
	    return;
	  }
	
	  var rect;
	
	  if (boundingMode === 'raw') {
	    rect = el.type === 'group' ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0) : el.getBoundingRect();
	  } else {
	    rect = el.getBoundingRect();
	
	    if (el.needLocalTransform()) {
	      var transform = el.getLocalTransform(); // Notice: raw rect may be inner object of el,
	      // which should not be modified.
	
	      rect = rect.clone();
	      rect.applyTransform(transform);
	    }
	  } // The real width and height can not be specified but calculated by the given el.
	
	
	  positionInfo = getLayoutRect(zrUtil.defaults({
	    width: rect.width,
	    height: rect.height
	  }, positionInfo), containerRect, margin); // Because 'tranlate' is the last step in transform
	  // (see zrender/core/Transformable#getLocalTransform),
	  // we can just only modify el.position to get final result.
	
	  var elPos = el.position;
	  var dx = h ? positionInfo.x - rect.x : 0;
	  var dy = v ? positionInfo.y - rect.y : 0;
	  el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);
	}
	/**
	 * @param {Object} option Contains some of the properties in HV_NAMES.
	 * @param {number} hvIdx 0: horizontal; 1: vertical.
	 */
	
	
	function sizeCalculable(option, hvIdx) {
	  return option[HV_NAMES[hvIdx][0]] != null || option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null;
	}
	/**
	 * Consider Case:
	 * When defulat option has {left: 0, width: 100}, and we set {right: 0}
	 * through setOption or media query, using normal zrUtil.merge will cause
	 * {right: 0} does not take effect.
	 *
	 * @example
	 * ComponentModel.extend({
	 *     init: function () {
	 *         ...
	 *         var inputPositionParams = layout.getLayoutParams(option);
	 *         this.mergeOption(inputPositionParams);
	 *     },
	 *     mergeOption: function (newOption) {
	 *         newOption && zrUtil.merge(thisOption, newOption, true);
	 *         layout.mergeLayoutParam(thisOption, newOption);
	 *     }
	 * });
	 *
	 * @param {Object} targetOption
	 * @param {Object} newOption
	 * @param {Object|string} [opt]
	 * @param {boolean|Array.<boolean>} [opt.ignoreSize=false] Used for the components
	 *  that width (or height) should not be calculated by left and right (or top and bottom).
	 */
	
	
	function mergeLayoutParam(targetOption, newOption, opt) {
	  !zrUtil.isObject(opt) && (opt = {});
	  var ignoreSize = opt.ignoreSize;
	  !zrUtil.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);
	  var hResult = merge(HV_NAMES[0], 0);
	  var vResult = merge(HV_NAMES[1], 1);
	  copy(HV_NAMES[0], targetOption, hResult);
	  copy(HV_NAMES[1], targetOption, vResult);
	
	  function merge(names, hvIdx) {
	    var newParams = {};
	    var newValueCount = 0;
	    var merged = {};
	    var mergedValueCount = 0;
	    var enoughParamNumber = 2;
	    each(names, function (name) {
	      merged[name] = targetOption[name];
	    });
	    each(names, function (name) {
	      // Consider case: newOption.width is null, which is
	      // set by user for removing width setting.
	      hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
	      hasValue(newParams, name) && newValueCount++;
	      hasValue(merged, name) && mergedValueCount++;
	    });
	
	    if (ignoreSize[hvIdx]) {
	      // Only one of left/right is premitted to exist.
	      if (hasValue(newOption, names[1])) {
	        merged[names[2]] = null;
	      } else if (hasValue(newOption, names[2])) {
	        merged[names[1]] = null;
	      }
	
	      return merged;
	    } // Case: newOption: {width: ..., right: ...},
	    // or targetOption: {right: ...} and newOption: {width: ...},
	    // There is no conflict when merged only has params count
	    // little than enoughParamNumber.
	
	
	    if (mergedValueCount === enoughParamNumber || !newValueCount) {
	      return merged;
	    } // Case: newOption: {width: ..., right: ...},
	    // Than we can make sure user only want those two, and ignore
	    // all origin params in targetOption.
	    else if (newValueCount >= enoughParamNumber) {
	        return newParams;
	      } else {
	        // Chose another param from targetOption by priority.
	        for (var i = 0; i < names.length; i++) {
	          var name = names[i];
	
	          if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
	            newParams[name] = targetOption[name];
	            break;
	          }
	        }
	
	        return newParams;
	      }
	  }
	
	  function hasProp(obj, name) {
	    return obj.hasOwnProperty(name);
	  }
	
	  function hasValue(obj, name) {
	    return obj[name] != null && obj[name] !== 'auto';
	  }
	
	  function copy(names, target, source) {
	    each(names, function (name) {
	      target[name] = source[name];
	    });
	  }
	}
	/**
	 * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	 * @param {Object} source
	 * @return {Object} Result contains those props.
	 */
	
	
	function getLayoutParams(source) {
	  return copyLayoutParams({}, source);
	}
	/**
	 * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	 * @param {Object} source
	 * @return {Object} Result contains those props.
	 */
	
	
	function copyLayoutParams(target, source) {
	  source && target && each(LOCATION_PARAMS, function (name) {
	    source.hasOwnProperty(name) && (target[name] = source[name]);
	  });
	  return target;
	}
	
	exports.LOCATION_PARAMS = LOCATION_PARAMS;
	exports.HV_NAMES = HV_NAMES;
	exports.box = box;
	exports.vbox = vbox;
	exports.hbox = hbox;
	exports.getAvailableSize = getAvailableSize;
	exports.getLayoutRect = getLayoutRect;
	exports.positionElement = positionElement;
	exports.sizeCalculable = sizeCalculable;
	exports.mergeLayoutParam = mergeLayoutParam;
	exports.getLayoutParams = getLayoutParams;
	exports.copyLayoutParams = copyLayoutParams;

/***/ }),
/* 1013 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var RADIAN_EPSILON = 1e-4;
	
	function _trim(str) {
	  return str.replace(/^\s+/, '').replace(/\s+$/, '');
	}
	/**
	 * Linear mapping a value from domain to range
	 * @memberOf module:echarts/util/number
	 * @param  {(number|Array.<number>)} val
	 * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]
	 * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]
	 * @param  {boolean} clamp
	 * @return {(number|Array.<number>}
	 */
	
	
	function linearMap(val, domain, range, clamp) {
	  var subDomain = domain[1] - domain[0];
	  var subRange = range[1] - range[0];
	
	  if (subDomain === 0) {
	    return subRange === 0 ? range[0] : (range[0] + range[1]) / 2;
	  } // Avoid accuracy problem in edge, such as
	  // 146.39 - 62.83 === 83.55999999999999.
	  // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError
	  // It is a little verbose for efficiency considering this method
	  // is a hotspot.
	
	
	  if (clamp) {
	    if (subDomain > 0) {
	      if (val <= domain[0]) {
	        return range[0];
	      } else if (val >= domain[1]) {
	        return range[1];
	      }
	    } else {
	      if (val >= domain[0]) {
	        return range[0];
	      } else if (val <= domain[1]) {
	        return range[1];
	      }
	    }
	  } else {
	    if (val === domain[0]) {
	      return range[0];
	    }
	
	    if (val === domain[1]) {
	      return range[1];
	    }
	  }
	
	  return (val - domain[0]) / subDomain * subRange + range[0];
	}
	/**
	 * Convert a percent string to absolute number.
	 * Returns NaN if percent is not a valid string or number
	 * @memberOf module:echarts/util/number
	 * @param {string|number} percent
	 * @param {number} all
	 * @return {number}
	 */
	
	
	function parsePercent(percent, all) {
	  switch (percent) {
	    case 'center':
	    case 'middle':
	      percent = '50%';
	      break;
	
	    case 'left':
	    case 'top':
	      percent = '0%';
	      break;
	
	    case 'right':
	    case 'bottom':
	      percent = '100%';
	      break;
	  }
	
	  if (typeof percent === 'string') {
	    if (_trim(percent).match(/%$/)) {
	      return parseFloat(percent) / 100 * all;
	    }
	
	    return parseFloat(percent);
	  }
	
	  return percent == null ? NaN : +percent;
	}
	/**
	 * (1) Fix rounding error of float numbers.
	 * (2) Support return string to avoid scientific notation like '3.5e-7'.
	 *
	 * @param {number} x
	 * @param {number} [precision]
	 * @param {boolean} [returnStr]
	 * @return {number|string}
	 */
	
	
	function round(x, precision, returnStr) {
	  if (precision == null) {
	    precision = 10;
	  } // Avoid range error
	
	
	  precision = Math.min(Math.max(0, precision), 20);
	  x = (+x).toFixed(precision);
	  return returnStr ? x : +x;
	}
	
	function asc(arr) {
	  arr.sort(function (a, b) {
	    return a - b;
	  });
	  return arr;
	}
	/**
	 * Get precision
	 * @param {number} val
	 */
	
	
	function getPrecision(val) {
	  val = +val;
	
	  if (isNaN(val)) {
	    return 0;
	  } // It is much faster than methods converting number to string as follows
	  //      var tmp = val.toString();
	  //      return tmp.length - 1 - tmp.indexOf('.');
	  // especially when precision is low
	
	
	  var e = 1;
	  var count = 0;
	
	  while (Math.round(val * e) / e !== val) {
	    e *= 10;
	    count++;
	  }
	
	  return count;
	}
	/**
	 * @param {string|number} val
	 * @return {number}
	 */
	
	
	function getPrecisionSafe(val) {
	  var str = val.toString(); // Consider scientific notation: '3.4e-12' '3.4e+12'
	
	  var eIndex = str.indexOf('e');
	
	  if (eIndex > 0) {
	    var precision = +str.slice(eIndex + 1);
	    return precision < 0 ? -precision : 0;
	  } else {
	    var dotIndex = str.indexOf('.');
	    return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;
	  }
	}
	/**
	 * Minimal dicernible data precisioin according to a single pixel.
	 *
	 * @param {Array.<number>} dataExtent
	 * @param {Array.<number>} pixelExtent
	 * @return {number} precision
	 */
	
	
	function getPixelPrecision(dataExtent, pixelExtent) {
	  var log = Math.log;
	  var LN10 = Math.LN10;
	  var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
	  var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10); // toFixed() digits argument must be between 0 and 20.
	
	  var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);
	  return !isFinite(precision) ? 20 : precision;
	}
	/**
	 * Get a data of given precision, assuring the sum of percentages
	 * in valueList is 1.
	 * The largest remainer method is used.
	 * https://en.wikipedia.org/wiki/Largest_remainder_method
	 *
	 * @param {Array.<number>} valueList a list of all data
	 * @param {number} idx index of the data to be processed in valueList
	 * @param {number} precision integer number showing digits of precision
	 * @return {number} percent ranging from 0 to 100
	 */
	
	
	function getPercentWithPrecision(valueList, idx, precision) {
	  if (!valueList[idx]) {
	    return 0;
	  }
	
	  var sum = zrUtil.reduce(valueList, function (acc, val) {
	    return acc + (isNaN(val) ? 0 : val);
	  }, 0);
	
	  if (sum === 0) {
	    return 0;
	  }
	
	  var digits = Math.pow(10, precision);
	  var votesPerQuota = zrUtil.map(valueList, function (val) {
	    return (isNaN(val) ? 0 : val) / sum * digits * 100;
	  });
	  var targetSeats = digits * 100;
	  var seats = zrUtil.map(votesPerQuota, function (votes) {
	    // Assign automatic seats.
	    return Math.floor(votes);
	  });
	  var currentSum = zrUtil.reduce(seats, function (acc, val) {
	    return acc + val;
	  }, 0);
	  var remainder = zrUtil.map(votesPerQuota, function (votes, idx) {
	    return votes - seats[idx];
	  }); // Has remainding votes.
	
	  while (currentSum < targetSeats) {
	    // Find next largest remainder.
	    var max = Number.NEGATIVE_INFINITY;
	    var maxId = null;
	
	    for (var i = 0, len = remainder.length; i < len; ++i) {
	      if (remainder[i] > max) {
	        max = remainder[i];
	        maxId = i;
	      }
	    } // Add a vote to max remainder.
	
	
	    ++seats[maxId];
	    remainder[maxId] = 0;
	    ++currentSum;
	  }
	
	  return seats[idx] / digits;
	} // Number.MAX_SAFE_INTEGER, ie do not support.
	
	
	var MAX_SAFE_INTEGER = 9007199254740991;
	/**
	 * To 0 - 2 * PI, considering negative radian.
	 * @param {number} radian
	 * @return {number}
	 */
	
	function remRadian(radian) {
	  var pi2 = Math.PI * 2;
	  return (radian % pi2 + pi2) % pi2;
	}
	/**
	 * @param {type} radian
	 * @return {boolean}
	 */
	
	
	function isRadianAroundZero(val) {
	  return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
	}
	
	var TIME_REG = /^(?:(\d{4})(?:[-\/](\d{1,2})(?:[-\/](\d{1,2})(?:[T ](\d{1,2})(?::(\d\d)(?::(\d\d)(?:[.,](\d+))?)?)?(Z|[\+\-]\d\d:?\d\d)?)?)?)?)?$/; // jshint ignore:line
	
	/**
	 * @param {string|Date|number} value These values can be accepted:
	 *   + An instance of Date, represent a time in its own time zone.
	 *   + Or string in a subset of ISO 8601, only including:
	 *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',
	 *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',
	 *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',
	 *     all of which will be treated as local time if time zone is not specified
	 *     (see <https://momentjs.com/>).
	 *   + Or other string format, including (all of which will be treated as loacal time):
	 *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',
	 *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'
	 *   + a timestamp, which represent a time in UTC.
	 * @return {Date} date
	 */
	
	function parseDate(value) {
	  if (value instanceof Date) {
	    return value;
	  } else if (typeof value === 'string') {
	    // Different browsers parse date in different way, so we parse it manually.
	    // Some other issues:
	    // new Date('1970-01-01') is UTC,
	    // new Date('1970/01/01') and new Date('1970-1-01') is local.
	    // See issue #3623
	    var match = TIME_REG.exec(value);
	
	    if (!match) {
	      // return Invalid Date.
	      return new Date(NaN);
	    } // Use local time when no timezone offset specifed.
	
	
	    if (!match[8]) {
	      // match[n] can only be string or undefined.
	      // But take care of '12' + 1 => '121'.
	      return new Date(+match[1], +(match[2] || 1) - 1, +match[3] || 1, +match[4] || 0, +(match[5] || 0), +match[6] || 0, +match[7] || 0);
	    } // Timezoneoffset of Javascript Date has considered DST (Daylight Saving Time,
	    // https://tc39.github.io/ecma262/#sec-daylight-saving-time-adjustment).
	    // For example, system timezone is set as "Time Zone: America/Toronto",
	    // then these code will get different result:
	    // `new Date(1478411999999).getTimezoneOffset();  // get 240`
	    // `new Date(1478412000000).getTimezoneOffset();  // get 300`
	    // So we should not use `new Date`, but use `Date.UTC`.
	    else {
	        var hour = +match[4] || 0;
	
	        if (match[8].toUpperCase() !== 'Z') {
	          hour -= match[8].slice(0, 3);
	        }
	
	        return new Date(Date.UTC(+match[1], +(match[2] || 1) - 1, +match[3] || 1, hour, +(match[5] || 0), +match[6] || 0, +match[7] || 0));
	      }
	  } else if (value == null) {
	    return new Date(NaN);
	  }
	
	  return new Date(Math.round(value));
	}
	/**
	 * Quantity of a number. e.g. 0.1, 1, 10, 100
	 *
	 * @param  {number} val
	 * @return {number}
	 */
	
	
	function quantity(val) {
	  return Math.pow(10, quantityExponent(val));
	}
	
	function quantityExponent(val) {
	  return Math.floor(Math.log(val) / Math.LN10);
	}
	/**
	 * find a “nice” number approximately equal to x. Round the number if round = true,
	 * take ceiling if round = false. The primary observation is that the “nicest”
	 * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.
	 *
	 * See "Nice Numbers for Graph Labels" of Graphic Gems.
	 *
	 * @param  {number} val Non-negative value.
	 * @param  {boolean} round
	 * @return {number}
	 */
	
	
	function nice(val, round) {
	  var exponent = quantityExponent(val);
	  var exp10 = Math.pow(10, exponent);
	  var f = val / exp10; // 1 <= f < 10
	
	  var nf;
	
	  if (round) {
	    if (f < 1.5) {
	      nf = 1;
	    } else if (f < 2.5) {
	      nf = 2;
	    } else if (f < 4) {
	      nf = 3;
	    } else if (f < 7) {
	      nf = 5;
	    } else {
	      nf = 10;
	    }
	  } else {
	    if (f < 1) {
	      nf = 1;
	    } else if (f < 2) {
	      nf = 2;
	    } else if (f < 3) {
	      nf = 3;
	    } else if (f < 5) {
	      nf = 5;
	    } else {
	      nf = 10;
	    }
	  }
	
	  val = nf * exp10; // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).
	  // 20 is the uppper bound of toFixed.
	
	  return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;
	}
	/**
	 * Order intervals asc, and split them when overlap.
	 * expect(numberUtil.reformIntervals([
	 *     {interval: [18, 62], close: [1, 1]},
	 *     {interval: [-Infinity, -70], close: [0, 0]},
	 *     {interval: [-70, -26], close: [1, 1]},
	 *     {interval: [-26, 18], close: [1, 1]},
	 *     {interval: [62, 150], close: [1, 1]},
	 *     {interval: [106, 150], close: [1, 1]},
	 *     {interval: [150, Infinity], close: [0, 0]}
	 * ])).toEqual([
	 *     {interval: [-Infinity, -70], close: [0, 0]},
	 *     {interval: [-70, -26], close: [1, 1]},
	 *     {interval: [-26, 18], close: [0, 1]},
	 *     {interval: [18, 62], close: [0, 1]},
	 *     {interval: [62, 150], close: [0, 1]},
	 *     {interval: [150, Infinity], close: [0, 0]}
	 * ]);
	 * @param {Array.<Object>} list, where `close` mean open or close
	 *        of the interval, and Infinity can be used.
	 * @return {Array.<Object>} The origin list, which has been reformed.
	 */
	
	
	function reformIntervals(list) {
	  list.sort(function (a, b) {
	    return littleThan(a, b, 0) ? -1 : 1;
	  });
	  var curr = -Infinity;
	  var currClose = 1;
	
	  for (var i = 0; i < list.length;) {
	    var interval = list[i].interval;
	    var close = list[i].close;
	
	    for (var lg = 0; lg < 2; lg++) {
	      if (interval[lg] <= curr) {
	        interval[lg] = curr;
	        close[lg] = !lg ? 1 - currClose : 1;
	      }
	
	      curr = interval[lg];
	      currClose = close[lg];
	    }
	
	    if (interval[0] === interval[1] && close[0] * close[1] !== 1) {
	      list.splice(i, 1);
	    } else {
	      i++;
	    }
	  }
	
	  return list;
	
	  function littleThan(a, b, lg) {
	    return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan(a, b, 1));
	  }
	}
	/**
	 * parseFloat NaNs numeric-cast false positives (null|true|false|"")
	 * ...but misinterprets leading-number strings, particularly hex literals ("0x...")
	 * subtraction forces infinities to NaN
	 *
	 * @param {*} v
	 * @return {boolean}
	 */
	
	
	function isNumeric(v) {
	  return v - parseFloat(v) >= 0;
	}
	
	exports.linearMap = linearMap;
	exports.parsePercent = parsePercent;
	exports.round = round;
	exports.asc = asc;
	exports.getPrecision = getPrecision;
	exports.getPrecisionSafe = getPrecisionSafe;
	exports.getPixelPrecision = getPixelPrecision;
	exports.getPercentWithPrecision = getPercentWithPrecision;
	exports.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;
	exports.remRadian = remRadian;
	exports.isRadianAroundZero = isRadianAroundZero;
	exports.parseDate = parseDate;
	exports.quantity = quantity;
	exports.nice = nice;
	exports.reformIntervals = reformIntervals;
	exports.isNumeric = isNumeric;

/***/ }),
/* 1014 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var textContain = __webpack_require__(961);
	
	var numberUtil = __webpack_require__(1013);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * 每三位默认加,格式化
	 * @param {string|number} x
	 * @return {string}
	 */
	function addCommas(x) {
	  if (isNaN(x)) {
	    return '-';
	  }
	
	  x = (x + '').split('.');
	  return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, '$1,') + (x.length > 1 ? '.' + x[1] : '');
	}
	/**
	 * @param {string} str
	 * @param {boolean} [upperCaseFirst=false]
	 * @return {string} str
	 */
	
	
	function toCamelCase(str, upperCaseFirst) {
	  str = (str || '').toLowerCase().replace(/-(.)/g, function (match, group1) {
	    return group1.toUpperCase();
	  });
	
	  if (upperCaseFirst && str) {
	    str = str.charAt(0).toUpperCase() + str.slice(1);
	  }
	
	  return str;
	}
	
	var normalizeCssArray = zrUtil.normalizeCssArray;
	var replaceReg = /([&<>"'])/g;
	var replaceMap = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  '\'': '&#39;'
	};
	
	function encodeHTML(source) {
	  return source == null ? '' : (source + '').replace(replaceReg, function (str, c) {
	    return replaceMap[c];
	  });
	}
	
	var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];
	
	var wrapVar = function (varName, seriesIdx) {
	  return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';
	};
	/**
	 * Template formatter
	 * @param {string} tpl
	 * @param {Array.<Object>|Object} paramsList
	 * @param {boolean} [encode=false]
	 * @return {string}
	 */
	
	
	function formatTpl(tpl, paramsList, encode) {
	  if (!zrUtil.isArray(paramsList)) {
	    paramsList = [paramsList];
	  }
	
	  var seriesLen = paramsList.length;
	
	  if (!seriesLen) {
	    return '';
	  }
	
	  var $vars = paramsList[0].$vars || [];
	
	  for (var i = 0; i < $vars.length; i++) {
	    var alias = TPL_VAR_ALIAS[i];
	    tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));
	  }
	
	  for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {
	    for (var k = 0; k < $vars.length; k++) {
	      var val = paramsList[seriesIdx][$vars[k]];
	      tpl = tpl.replace(wrapVar(TPL_VAR_ALIAS[k], seriesIdx), encode ? encodeHTML(val) : val);
	    }
	  }
	
	  return tpl;
	}
	/**
	 * simple Template formatter
	 *
	 * @param {string} tpl
	 * @param {Object} param
	 * @param {boolean} [encode=false]
	 * @return {string}
	 */
	
	
	function formatTplSimple(tpl, param, encode) {
	  zrUtil.each(param, function (value, key) {
	    tpl = tpl.replace('{' + key + '}', encode ? encodeHTML(value) : value);
	  });
	  return tpl;
	}
	/**
	 * @param {Object|string} [opt] If string, means color.
	 * @param {string} [opt.color]
	 * @param {string} [opt.extraCssText]
	 * @param {string} [opt.type='item'] 'item' or 'subItem'
	 * @return {string}
	 */
	
	
	function getTooltipMarker(opt, extraCssText) {
	  opt = zrUtil.isString(opt) ? {
	    color: opt,
	    extraCssText: extraCssText
	  } : opt || {};
	  var color = opt.color;
	  var type = opt.type;
	  var extraCssText = opt.extraCssText;
	
	  if (!color) {
	    return '';
	  }
	
	  return type === 'subItem' ? '<span style="display:inline-block;vertical-align:middle;margin-right:8px;margin-left:3px;' + 'border-radius:4px;width:4px;height:4px;background-color:' + encodeHTML(color) + ';' + (extraCssText || '') + '"></span>' : '<span style="display:inline-block;margin-right:5px;' + 'border-radius:10px;width:10px;height:10px;background-color:' + encodeHTML(color) + ';' + (extraCssText || '') + '"></span>';
	}
	
	function pad(str, len) {
	  str += '';
	  return '0000'.substr(0, len - str.length) + str;
	}
	/**
	 * ISO Date format
	 * @param {string} tpl
	 * @param {number} value
	 * @param {boolean} [isUTC=false] Default in local time.
	 *           see `module:echarts/scale/Time`
	 *           and `module:echarts/util/number#parseDate`.
	 * @inner
	 */
	
	
	function formatTime(tpl, value, isUTC) {
	  if (tpl === 'week' || tpl === 'month' || tpl === 'quarter' || tpl === 'half-year' || tpl === 'year') {
	    tpl = 'MM-dd\nyyyy';
	  }
	
	  var date = numberUtil.parseDate(value);
	  var utc = isUTC ? 'UTC' : '';
	  var y = date['get' + utc + 'FullYear']();
	  var M = date['get' + utc + 'Month']() + 1;
	  var d = date['get' + utc + 'Date']();
	  var h = date['get' + utc + 'Hours']();
	  var m = date['get' + utc + 'Minutes']();
	  var s = date['get' + utc + 'Seconds']();
	  var S = date['get' + utc + 'Milliseconds']();
	  tpl = tpl.replace('MM', pad(M, 2)).replace('M', M).replace('yyyy', y).replace('yy', y % 100).replace('dd', pad(d, 2)).replace('d', d).replace('hh', pad(h, 2)).replace('h', h).replace('mm', pad(m, 2)).replace('m', m).replace('ss', pad(s, 2)).replace('s', s).replace('SSS', pad(S, 3));
	  return tpl;
	}
	/**
	 * Capital first
	 * @param {string} str
	 * @return {string}
	 */
	
	
	function capitalFirst(str) {
	  return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
	}
	
	var truncateText = textContain.truncateText;
	var getTextRect = textContain.getBoundingRect;
	exports.addCommas = addCommas;
	exports.toCamelCase = toCamelCase;
	exports.normalizeCssArray = normalizeCssArray;
	exports.encodeHTML = encodeHTML;
	exports.formatTpl = formatTpl;
	exports.formatTplSimple = formatTplSimple;
	exports.getTooltipMarker = getTooltipMarker;
	exports.formatTime = formatTime;
	exports.capitalFirst = capitalFirst;
	exports.truncateText = truncateText;
	exports.getTextRect = getTextRect;

/***/ }),
/* 1015 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = {
	  getBoxLayoutParams: function () {
	    return {
	      left: this.get('left'),
	      top: this.get('top'),
	      right: this.get('right'),
	      bottom: this.get('bottom'),
	      width: this.get('width'),
	      height: this.get('height')
	    };
	  }
	};
	module.exports = _default;

/***/ }),
/* 1016 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var platform = ''; // Navigator not exists in node
	
	if (typeof navigator !== 'undefined') {
	  platform = navigator.platform || '';
	}
	
	var _default = {
	  // backgroundColor: 'rgba(0,0,0,0)',
	  // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization
	  // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],
	  // Light colors:
	  // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],
	  // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],
	  // Dark colors:
	  color: ['#c23531', '#2f4554', '#61a0a8', '#d48265', '#91c7ae', '#749f83', '#ca8622', '#bda29a', '#6e7074', '#546570', '#c4ccd3'],
	  gradientColor: ['#f6efa6', '#d88273', '#bf444c'],
	  // If xAxis and yAxis declared, grid is created by default.
	  // grid: {},
	  textStyle: {
	    // color: '#000',
	    // decoration: 'none',
	    // PENDING
	    fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',
	    // fontFamily: 'Arial, Verdana, sans-serif',
	    fontSize: 12,
	    fontStyle: 'normal',
	    fontWeight: 'normal'
	  },
	  // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/
	  // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
	  // Default is source-over
	  blendMode: null,
	  animation: 'auto',
	  animationDuration: 1000,
	  animationDurationUpdate: 300,
	  animationEasing: 'exponentialOut',
	  animationEasingUpdate: 'cubicOut',
	  animationThreshold: 2000,
	  // Configuration for progressive/incremental rendering
	  progressiveThreshold: 3000,
	  progressive: 400,
	  // Threshold of if use single hover layer to optimize.
	  // It is recommended that `hoverLayerThreshold` is equivalent to or less than
	  // `progressiveThreshold`, otherwise hover will cause restart of progressive,
	  // which is unexpected.
	  // see example <echarts/test/heatmap-large.html>.
	  hoverLayerThreshold: 3000,
	  // See: module:echarts/scale/Time
	  useUTC: false
	};
	module.exports = _default;

/***/ }),
/* 1017 */
/***/ (function(module, exports, __webpack_require__) {

	var _model = __webpack_require__(969);
	
	var makeInner = _model.makeInner;
	var normalizeToArray = _model.normalizeToArray;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var inner = makeInner();
	
	function getNearestColorPalette(colors, requestColorNum) {
	  var paletteNum = colors.length; // TODO colors must be in order
	
	  for (var i = 0; i < paletteNum; i++) {
	    if (colors[i].length > requestColorNum) {
	      return colors[i];
	    }
	  }
	
	  return colors[paletteNum - 1];
	}
	
	var _default = {
	  clearColorPalette: function () {
	    inner(this).colorIdx = 0;
	    inner(this).colorNameMap = {};
	  },
	
	  /**
	   * @param {string} name MUST NOT be null/undefined. Otherwise call this function
	   *                 twise with the same parameters will get different result.
	   * @param {Object} [scope=this]
	   * @param {Object} [requestColorNum]
	   * @return {string} color string.
	   */
	  getColorFromPalette: function (name, scope, requestColorNum) {
	    scope = scope || this;
	    var scopeFields = inner(scope);
	    var colorIdx = scopeFields.colorIdx || 0;
	    var colorNameMap = scopeFields.colorNameMap = scopeFields.colorNameMap || {}; // Use `hasOwnProperty` to avoid conflict with Object.prototype.
	
	    if (colorNameMap.hasOwnProperty(name)) {
	      return colorNameMap[name];
	    }
	
	    var defaultColorPalette = normalizeToArray(this.get('color', true));
	    var layeredColorPalette = this.get('colorLayer', true);
	    var colorPalette = requestColorNum == null || !layeredColorPalette ? defaultColorPalette : getNearestColorPalette(layeredColorPalette, requestColorNum); // In case can't find in layered color palette.
	
	    colorPalette = colorPalette || defaultColorPalette;
	
	    if (!colorPalette || !colorPalette.length) {
	      return;
	    }
	
	    var color = colorPalette[colorIdx];
	
	    if (name) {
	      colorNameMap[name] = color;
	    }
	
	    scopeFields.colorIdx = (colorIdx + 1) % colorPalette.length;
	    return color;
	  }
	};
	module.exports = _default;

/***/ }),
/* 1018 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	var _model = __webpack_require__(969);
	
	var makeInner = _model.makeInner;
	var getDataItemValue = _model.getDataItemValue;
	
	var _referHelper = __webpack_require__(1019);
	
	var getCoordSysDefineBySeries = _referHelper.getCoordSysDefineBySeries;
	
	var _util = __webpack_require__(931);
	
	var createHashMap = _util.createHashMap;
	var each = _util.each;
	var map = _util.map;
	var isArray = _util.isArray;
	var isString = _util.isString;
	var isObject = _util.isObject;
	var isTypedArray = _util.isTypedArray;
	var isArrayLike = _util.isArrayLike;
	var extend = _util.extend;
	var assert = _util.assert;
	
	var Source = __webpack_require__(1020);
	
	var _sourceType = __webpack_require__(1021);
	
	var SOURCE_FORMAT_ORIGINAL = _sourceType.SOURCE_FORMAT_ORIGINAL;
	var SOURCE_FORMAT_ARRAY_ROWS = _sourceType.SOURCE_FORMAT_ARRAY_ROWS;
	var SOURCE_FORMAT_OBJECT_ROWS = _sourceType.SOURCE_FORMAT_OBJECT_ROWS;
	var SOURCE_FORMAT_KEYED_COLUMNS = _sourceType.SOURCE_FORMAT_KEYED_COLUMNS;
	var SOURCE_FORMAT_UNKNOWN = _sourceType.SOURCE_FORMAT_UNKNOWN;
	var SOURCE_FORMAT_TYPED_ARRAY = _sourceType.SOURCE_FORMAT_TYPED_ARRAY;
	var SERIES_LAYOUT_BY_ROW = _sourceType.SERIES_LAYOUT_BY_ROW;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var inner = makeInner();
	/**
	 * @see {module:echarts/data/Source}
	 * @param {module:echarts/component/dataset/DatasetModel} datasetModel
	 * @return {string} sourceFormat
	 */
	
	function detectSourceFormat(datasetModel) {
	  var data = datasetModel.option.source;
	  var sourceFormat = SOURCE_FORMAT_UNKNOWN;
	
	  if (isTypedArray(data)) {
	    sourceFormat = SOURCE_FORMAT_TYPED_ARRAY;
	  } else if (isArray(data)) {
	    // FIXME Whether tolerate null in top level array?
	    for (var i = 0, len = data.length; i < len; i++) {
	      var item = data[i];
	
	      if (item == null) {
	        continue;
	      } else if (isArray(item)) {
	        sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;
	        break;
	      } else if (isObject(item)) {
	        sourceFormat = SOURCE_FORMAT_OBJECT_ROWS;
	        break;
	      }
	    }
	  } else if (isObject(data)) {
	    for (var key in data) {
	      if (data.hasOwnProperty(key) && isArrayLike(data[key])) {
	        sourceFormat = SOURCE_FORMAT_KEYED_COLUMNS;
	        break;
	      }
	    }
	  } else if (data != null) {
	    throw new Error('Invalid data');
	  }
	
	  inner(datasetModel).sourceFormat = sourceFormat;
	}
	/**
	 * [Scenarios]:
	 * (1) Provide source data directly:
	 *     series: {
	 *         encode: {...},
	 *         dimensions: [...]
	 *         seriesLayoutBy: 'row',
	 *         data: [[...]]
	 *     }
	 * (2) Refer to datasetModel.
	 *     series: [{
	 *         encode: {...}
	 *         // Ignore datasetIndex means `datasetIndex: 0`
	 *         // and the dimensions defination in dataset is used
	 *     }, {
	 *         encode: {...},
	 *         seriesLayoutBy: 'column',
	 *         datasetIndex: 1
	 *     }]
	 *
	 * Get data from series itself or datset.
	 * @return {module:echarts/data/Source} source
	 */
	
	
	function getSource(seriesModel) {
	  return inner(seriesModel).source;
	}
	/**
	 * MUST be called before mergeOption of all series.
	 * @param {module:echarts/model/Global} ecModel
	 */
	
	
	function resetSourceDefaulter(ecModel) {
	  // `datasetMap` is used to make default encode.
	  inner(ecModel).datasetMap = createHashMap();
	}
	/**
	 * [Caution]:
	 * MUST be called after series option merged and
	 * before "series.getInitailData()" called.
	 *
	 * [The rule of making default encode]:
	 * Category axis (if exists) alway map to the first dimension.
	 * Each other axis occupies a subsequent dimension.
	 *
	 * [Why make default encode]:
	 * Simplify the typing of encode in option, avoiding the case like that:
	 * series: [{encode: {x: 0, y: 1}}, {encode: {x: 0, y: 2}}, {encode: {x: 0, y: 3}}],
	 * where the "y" have to be manually typed as "1, 2, 3, ...".
	 *
	 * @param {module:echarts/model/Series} seriesModel
	 */
	
	
	function prepareSource(seriesModel) {
	  var seriesOption = seriesModel.option;
	  var data = seriesOption.data;
	  var sourceFormat = isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL;
	  var fromDataset = false;
	  var seriesLayoutBy = seriesOption.seriesLayoutBy;
	  var sourceHeader = seriesOption.sourceHeader;
	  var dimensionsDefine = seriesOption.dimensions;
	  var datasetModel = getDatasetModel(seriesModel);
	
	  if (datasetModel) {
	    var datasetOption = datasetModel.option;
	    data = datasetOption.source;
	    sourceFormat = inner(datasetModel).sourceFormat;
	    fromDataset = true; // These settings from series has higher priority.
	
	    seriesLayoutBy = seriesLayoutBy || datasetOption.seriesLayoutBy;
	    sourceHeader == null && (sourceHeader = datasetOption.sourceHeader);
	    dimensionsDefine = dimensionsDefine || datasetOption.dimensions;
	  }
	
	  var completeResult = completeBySourceData(data, sourceFormat, seriesLayoutBy, sourceHeader, dimensionsDefine); // Note: dataset option does not have `encode`.
	
	  var encodeDefine = seriesOption.encode;
	
	  if (!encodeDefine && datasetModel) {
	    encodeDefine = makeDefaultEncode(seriesModel, datasetModel, data, sourceFormat, seriesLayoutBy, completeResult);
	  }
	
	  inner(seriesModel).source = new Source({
	    data: data,
	    fromDataset: fromDataset,
	    seriesLayoutBy: seriesLayoutBy,
	    sourceFormat: sourceFormat,
	    dimensionsDefine: completeResult.dimensionsDefine,
	    startIndex: completeResult.startIndex,
	    dimensionsDetectCount: completeResult.dimensionsDetectCount,
	    encodeDefine: encodeDefine
	  });
	} // return {startIndex, dimensionsDefine, dimensionsCount}
	
	
	function completeBySourceData(data, sourceFormat, seriesLayoutBy, sourceHeader, dimensionsDefine) {
	  if (!data) {
	    return {
	      dimensionsDefine: normalizeDimensionsDefine(dimensionsDefine)
	    };
	  }
	
	  var dimensionsDetectCount;
	  var startIndex;
	  var findPotentialName;
	
	  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {
	    // Rule: Most of the first line are string: it is header.
	    // Caution: consider a line with 5 string and 1 number,
	    // it still can not be sure it is a head, because the
	    // 5 string may be 5 values of category columns.
	    if (sourceHeader === 'auto' || sourceHeader == null) {
	      arrayRowsTravelFirst(function (val) {
	        // '-' is regarded as null/undefined.
	        if (val != null && val !== '-') {
	          if (isString(val)) {
	            startIndex == null && (startIndex = 1);
	          } else {
	            startIndex = 0;
	          }
	        } // 10 is an experience number, avoid long loop.
	
	      }, seriesLayoutBy, data, 10);
	    } else {
	      startIndex = sourceHeader ? 1 : 0;
	    }
	
	    if (!dimensionsDefine && startIndex === 1) {
	      dimensionsDefine = [];
	      arrayRowsTravelFirst(function (val, index) {
	        dimensionsDefine[index] = val != null ? val : '';
	      }, seriesLayoutBy, data);
	    }
	
	    dimensionsDetectCount = dimensionsDefine ? dimensionsDefine.length : seriesLayoutBy === SERIES_LAYOUT_BY_ROW ? data.length : data[0] ? data[0].length : null;
	  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {
	    if (!dimensionsDefine) {
	      dimensionsDefine = objectRowsCollectDimensions(data);
	      findPotentialName = true;
	    }
	  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {
	    if (!dimensionsDefine) {
	      dimensionsDefine = [];
	      findPotentialName = true;
	      each(data, function (colArr, key) {
	        dimensionsDefine.push(key);
	      });
	    }
	  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {
	    var value0 = getDataItemValue(data[0]);
	    dimensionsDetectCount = isArray(value0) && value0.length || 1;
	  } else if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {}
	
	  var potentialNameDimIndex;
	
	  if (findPotentialName) {
	    each(dimensionsDefine, function (dim, idx) {
	      if ((isObject(dim) ? dim.name : dim) === 'name') {
	        potentialNameDimIndex = idx;
	      }
	    });
	  }
	
	  return {
	    startIndex: startIndex,
	    dimensionsDefine: normalizeDimensionsDefine(dimensionsDefine),
	    dimensionsDetectCount: dimensionsDetectCount,
	    potentialNameDimIndex: potentialNameDimIndex // TODO: potentialIdDimIdx
	
	  };
	} // Consider dimensions defined like ['A', 'price', 'B', 'price', 'C', 'price'],
	// which is reasonable. But dimension name is duplicated.
	// Returns undefined or an array contains only object without null/undefiend or string.
	
	
	function normalizeDimensionsDefine(dimensionsDefine) {
	  if (!dimensionsDefine) {
	    // The meaning of null/undefined is different from empty array.
	    return;
	  }
	
	  var nameMap = createHashMap();
	  return map(dimensionsDefine, function (item, index) {
	    item = extend({}, isObject(item) ? item : {
	      name: item
	    }); // User can set null in dimensions.
	    // We dont auto specify name, othewise a given name may
	    // cause it be refered unexpectedly.
	
	    if (item.name == null) {
	      return item;
	    } // Also consider number form like 2012.
	
	
	    item.name += ''; // User may also specify displayName.
	    // displayName will always exists except user not
	    // specified or dim name is not specified or detected.
	    // (A auto generated dim name will not be used as
	    // displayName).
	
	    if (item.displayName == null) {
	      item.displayName = item.name;
	    }
	
	    var exist = nameMap.get(item.name);
	
	    if (!exist) {
	      nameMap.set(item.name, {
	        count: 1
	      });
	    } else {
	      item.name += '-' + exist.count++;
	    }
	
	    return item;
	  });
	}
	
	function arrayRowsTravelFirst(cb, seriesLayoutBy, data, maxLoop) {
	  maxLoop == null && (maxLoop = Infinity);
	
	  if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {
	    for (var i = 0; i < data.length && i < maxLoop; i++) {
	      cb(data[i] ? data[i][0] : null, i);
	    }
	  } else {
	    var value0 = data[0] || [];
	
	    for (var i = 0; i < value0.length && i < maxLoop; i++) {
	      cb(value0[i], i);
	    }
	  }
	}
	
	function objectRowsCollectDimensions(data) {
	  var firstIndex = 0;
	  var obj;
	
	  while (firstIndex < data.length && !(obj = data[firstIndex++])) {} // jshint ignore: line
	
	
	  if (obj) {
	    var dimensions = [];
	    each(obj, function (value, key) {
	      dimensions.push(key);
	    });
	    return dimensions;
	  }
	} // ??? TODO merge to completedimensions, where also has
	// default encode making logic. And the default rule
	// should depends on series? consider 'map'.
	
	
	function makeDefaultEncode(seriesModel, datasetModel, data, sourceFormat, seriesLayoutBy, completeResult) {
	  var coordSysDefine = getCoordSysDefineBySeries(seriesModel);
	  var encode = {}; // var encodeTooltip = [];
	  // var encodeLabel = [];
	
	  var encodeItemName = [];
	  var encodeSeriesName = [];
	  var seriesType = seriesModel.subType; // ??? TODO refactor: provide by series itself.
	  // Consider the case: 'map' series is based on geo coordSys,
	  // 'graph', 'heatmap' can be based on cartesian. But can not
	  // give default rule simply here.
	
	  var nSeriesMap = createHashMap(['pie', 'map', 'funnel']);
	  var cSeriesMap = createHashMap(['line', 'bar', 'pictorialBar', 'scatter', 'effectScatter', 'candlestick', 'boxplot']); // Usually in this case series will use the first data
	  // dimension as the "value" dimension, or other default
	  // processes respectively.
	
	  if (coordSysDefine && cSeriesMap.get(seriesType) != null) {
	    var ecModel = seriesModel.ecModel;
	    var datasetMap = inner(ecModel).datasetMap;
	    var key = datasetModel.uid + '_' + seriesLayoutBy;
	    var datasetRecord = datasetMap.get(key) || datasetMap.set(key, {
	      categoryWayDim: 1,
	      valueWayDim: 0
	    }); // TODO
	    // Auto detect first time axis and do arrangement.
	
	    each(coordSysDefine.coordSysDims, function (coordDim) {
	      // In value way.
	      if (coordSysDefine.firstCategoryDimIndex == null) {
	        var dataDim = datasetRecord.valueWayDim++;
	        encode[coordDim] = dataDim; // ??? TODO give a better default series name rule?
	        // especially when encode x y specified.
	        // consider: when mutiple series share one dimension
	        // category axis, series name should better use
	        // the other dimsion name. On the other hand, use
	        // both dimensions name.
	
	        encodeSeriesName.push(dataDim); // encodeTooltip.push(dataDim);
	        // encodeLabel.push(dataDim);
	      } // In category way, category axis.
	      else if (coordSysDefine.categoryAxisMap.get(coordDim)) {
	          encode[coordDim] = 0;
	          encodeItemName.push(0);
	        } // In category way, non-category axis.
	        else {
	            var dataDim = datasetRecord.categoryWayDim++;
	            encode[coordDim] = dataDim; // encodeTooltip.push(dataDim);
	            // encodeLabel.push(dataDim);
	
	            encodeSeriesName.push(dataDim);
	          }
	    });
	  } // Do not make a complex rule! Hard to code maintain and not necessary.
	  // ??? TODO refactor: provide by series itself.
	  // [{name: ..., value: ...}, ...] like:
	  else if (nSeriesMap.get(seriesType) != null) {
	      // Find the first not ordinal. (5 is an experience value)
	      var firstNotOrdinal;
	
	      for (var i = 0; i < 5 && firstNotOrdinal == null; i++) {
	        if (!doGuessOrdinal(data, sourceFormat, seriesLayoutBy, completeResult.dimensionsDefine, completeResult.startIndex, i)) {
	          firstNotOrdinal = i;
	        }
	      }
	
	      if (firstNotOrdinal != null) {
	        encode.value = firstNotOrdinal;
	        var nameDimIndex = completeResult.potentialNameDimIndex || Math.max(firstNotOrdinal - 1, 0); // By default, label use itemName in charts.
	        // So we dont set encodeLabel here.
	
	        encodeSeriesName.push(nameDimIndex);
	        encodeItemName.push(nameDimIndex); // encodeTooltip.push(firstNotOrdinal);
	      }
	    } // encodeTooltip.length && (encode.tooltip = encodeTooltip);
	  // encodeLabel.length && (encode.label = encodeLabel);
	
	
	  encodeItemName.length && (encode.itemName = encodeItemName);
	  encodeSeriesName.length && (encode.seriesName = encodeSeriesName);
	  return encode;
	}
	/**
	 * If return null/undefined, indicate that should not use datasetModel.
	 */
	
	
	function getDatasetModel(seriesModel) {
	  var option = seriesModel.option; // Caution: consider the scenario:
	  // A dataset is declared and a series is not expected to use the dataset,
	  // and at the beginning `setOption({series: { noData })` (just prepare other
	  // option but no data), then `setOption({series: {data: [...]}); In this case,
	  // the user should set an empty array to avoid that dataset is used by default.
	
	  var thisData = option.data;
	
	  if (!thisData) {
	    return seriesModel.ecModel.getComponent('dataset', option.datasetIndex || 0);
	  }
	}
	/**
	 * The rule should not be complex, otherwise user might not
	 * be able to known where the data is wrong.
	 * The code is ugly, but how to make it neat?
	 *
	 * @param {module:echars/data/Source} source
	 * @param {number} dimIndex
	 * @return {boolean} Whether ordinal.
	 */
	
	
	function guessOrdinal(source, dimIndex) {
	  return doGuessOrdinal(source.data, source.sourceFormat, source.seriesLayoutBy, source.dimensionsDefine, source.startIndex, dimIndex);
	} // dimIndex may be overflow source data.
	
	
	function doGuessOrdinal(data, sourceFormat, seriesLayoutBy, dimensionsDefine, startIndex, dimIndex) {
	  var result; // Experience value.
	
	  var maxLoop = 5;
	
	  if (isTypedArray(data)) {
	    return false;
	  } // When sourceType is 'objectRows' or 'keyedColumns', dimensionsDefine
	  // always exists in source.
	
	
	  var dimName;
	
	  if (dimensionsDefine) {
	    dimName = dimensionsDefine[dimIndex];
	    dimName = isObject(dimName) ? dimName.name : dimName;
	  }
	
	  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {
	    if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {
	      var sample = data[dimIndex];
	
	      for (var i = 0; i < (sample || []).length && i < maxLoop; i++) {
	        if ((result = detectValue(sample[startIndex + i])) != null) {
	          return result;
	        }
	      }
	    } else {
	      for (var i = 0; i < data.length && i < maxLoop; i++) {
	        var row = data[startIndex + i];
	
	        if (row && (result = detectValue(row[dimIndex])) != null) {
	          return result;
	        }
	      }
	    }
	  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {
	    if (!dimName) {
	      return;
	    }
	
	    for (var i = 0; i < data.length && i < maxLoop; i++) {
	      var item = data[i];
	
	      if (item && (result = detectValue(item[dimName])) != null) {
	        return result;
	      }
	    }
	  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {
	    if (!dimName) {
	      return;
	    }
	
	    var sample = data[dimName];
	
	    if (!sample || isTypedArray(sample)) {
	      return false;
	    }
	
	    for (var i = 0; i < sample.length && i < maxLoop; i++) {
	      if ((result = detectValue(sample[i])) != null) {
	        return result;
	      }
	    }
	  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {
	    for (var i = 0; i < data.length && i < maxLoop; i++) {
	      var item = data[i];
	      var val = getDataItemValue(item);
	
	      if (!isArray(val)) {
	        return false;
	      }
	
	      if ((result = detectValue(val[dimIndex])) != null) {
	        return result;
	      }
	    }
	  }
	
	  function detectValue(val) {
	    // Consider usage convenience, '1', '2' will be treated as "number".
	    // `isFinit('')` get `true`.
	    if (val != null && isFinite(val) && val !== '') {
	      return false;
	    } else if (isString(val) && val !== '-') {
	      return true;
	    }
	  }
	
	  return false;
	}
	
	exports.detectSourceFormat = detectSourceFormat;
	exports.getSource = getSource;
	exports.resetSourceDefaulter = resetSourceDefaulter;
	exports.prepareSource = prepareSource;
	exports.guessOrdinal = guessOrdinal;

/***/ }),
/* 1019 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	var _util = __webpack_require__(931);
	
	var createHashMap = _util.createHashMap;
	var retrieve = _util.retrieve;
	var each = _util.each;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Helper for model references.
	 * There are many manners to refer axis/coordSys.
	 */
	// TODO
	// merge relevant logic to this file?
	// check: "modelHelper" of tooltip and "BrushTargetManager".
	
	/**
	 * @return {Object} For example:
	 * {
	 *     coordSysName: 'cartesian2d',
	 *     coordSysDims: ['x', 'y', ...],
	 *     axisMap: HashMap({
	 *         x: xAxisModel,
	 *         y: yAxisModel
	 *     }),
	 *     categoryAxisMap: HashMap({
	 *         x: xAxisModel,
	 *         y: undefined
	 *     }),
	 *     // It also indicate that whether there is category axis.
	 *     firstCategoryDimIndex: 1,
	 *     // To replace user specified encode.
	 * }
	 */
	function getCoordSysDefineBySeries(seriesModel) {
	  var coordSysName = seriesModel.get('coordinateSystem');
	  var result = {
	    coordSysName: coordSysName,
	    coordSysDims: [],
	    axisMap: createHashMap(),
	    categoryAxisMap: createHashMap()
	  };
	  var fetch = fetchers[coordSysName];
	
	  if (fetch) {
	    fetch(seriesModel, result, result.axisMap, result.categoryAxisMap);
	    return result;
	  }
	}
	
	var fetchers = {
	  cartesian2d: function (seriesModel, result, axisMap, categoryAxisMap) {
	    var xAxisModel = seriesModel.getReferringComponents('xAxis')[0];
	    var yAxisModel = seriesModel.getReferringComponents('yAxis')[0];
	    result.coordSysDims = ['x', 'y'];
	    axisMap.set('x', xAxisModel);
	    axisMap.set('y', yAxisModel);
	
	    if (isCategory(xAxisModel)) {
	      categoryAxisMap.set('x', xAxisModel);
	      result.firstCategoryDimIndex = 0;
	    }
	
	    if (isCategory(yAxisModel)) {
	      categoryAxisMap.set('y', yAxisModel);
	      result.firstCategoryDimIndex = 1;
	    }
	  },
	  singleAxis: function (seriesModel, result, axisMap, categoryAxisMap) {
	    var singleAxisModel = seriesModel.getReferringComponents('singleAxis')[0];
	    result.coordSysDims = ['single'];
	    axisMap.set('single', singleAxisModel);
	
	    if (isCategory(singleAxisModel)) {
	      categoryAxisMap.set('single', singleAxisModel);
	      result.firstCategoryDimIndex = 0;
	    }
	  },
	  polar: function (seriesModel, result, axisMap, categoryAxisMap) {
	    var polarModel = seriesModel.getReferringComponents('polar')[0];
	    var radiusAxisModel = polarModel.findAxisModel('radiusAxis');
	    var angleAxisModel = polarModel.findAxisModel('angleAxis');
	    result.coordSysDims = ['radius', 'angle'];
	    axisMap.set('radius', radiusAxisModel);
	    axisMap.set('angle', angleAxisModel);
	
	    if (isCategory(radiusAxisModel)) {
	      categoryAxisMap.set('radius', radiusAxisModel);
	      result.firstCategoryDimIndex = 0;
	    }
	
	    if (isCategory(angleAxisModel)) {
	      categoryAxisMap.set('angle', angleAxisModel);
	      result.firstCategoryDimIndex = 1;
	    }
	  },
	  geo: function (seriesModel, result, axisMap, categoryAxisMap) {
	    result.coordSysDims = ['lng', 'lat'];
	  },
	  parallel: function (seriesModel, result, axisMap, categoryAxisMap) {
	    var ecModel = seriesModel.ecModel;
	    var parallelModel = ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));
	    var coordSysDims = result.coordSysDims = parallelModel.dimensions.slice();
	    each(parallelModel.parallelAxisIndex, function (axisIndex, index) {
	      var axisModel = ecModel.getComponent('parallelAxis', axisIndex);
	      var axisDim = coordSysDims[index];
	      axisMap.set(axisDim, axisModel);
	
	      if (isCategory(axisModel) && result.firstCategoryDimIndex == null) {
	        categoryAxisMap.set(axisDim, axisModel);
	        result.firstCategoryDimIndex = index;
	      }
	    });
	  }
	};
	
	function isCategory(axisModel) {
	  return axisModel.get('type') === 'category';
	}
	
	exports.getCoordSysDefineBySeries = getCoordSysDefineBySeries;

/***/ }),
/* 1020 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(931);
	
	var createHashMap = _util.createHashMap;
	var isTypedArray = _util.isTypedArray;
	
	var _clazz = __webpack_require__(971);
	
	var enableClassCheck = _clazz.enableClassCheck;
	
	var _sourceType = __webpack_require__(1021);
	
	var SOURCE_FORMAT_ORIGINAL = _sourceType.SOURCE_FORMAT_ORIGINAL;
	var SERIES_LAYOUT_BY_COLUMN = _sourceType.SERIES_LAYOUT_BY_COLUMN;
	var SOURCE_FORMAT_UNKNOWN = _sourceType.SOURCE_FORMAT_UNKNOWN;
	var SOURCE_FORMAT_TYPED_ARRAY = _sourceType.SOURCE_FORMAT_TYPED_ARRAY;
	var SOURCE_FORMAT_KEYED_COLUMNS = _sourceType.SOURCE_FORMAT_KEYED_COLUMNS;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * [sourceFormat]
	 *
	 * + "original":
	 * This format is only used in series.data, where
	 * itemStyle can be specified in data item.
	 *
	 * + "arrayRows":
	 * [
	 *     ['product', 'score', 'amount'],
	 *     ['Matcha Latte', 89.3, 95.8],
	 *     ['Milk Tea', 92.1, 89.4],
	 *     ['Cheese Cocoa', 94.4, 91.2],
	 *     ['Walnut Brownie', 85.4, 76.9]
	 * ]
	 *
	 * + "objectRows":
	 * [
	 *     {product: 'Matcha Latte', score: 89.3, amount: 95.8},
	 *     {product: 'Milk Tea', score: 92.1, amount: 89.4},
	 *     {product: 'Cheese Cocoa', score: 94.4, amount: 91.2},
	 *     {product: 'Walnut Brownie', score: 85.4, amount: 76.9}
	 * ]
	 *
	 * + "keyedColumns":
	 * {
	 *     'product': ['Matcha Latte', 'Milk Tea', 'Cheese Cocoa', 'Walnut Brownie'],
	 *     'count': [823, 235, 1042, 988],
	 *     'score': [95.8, 81.4, 91.2, 76.9]
	 * }
	 *
	 * + "typedArray"
	 *
	 * + "unknown"
	 */
	
	/**
	 * @constructor
	 * @param {Object} fields
	 * @param {string} fields.sourceFormat
	 * @param {Array|Object} fields.fromDataset
	 * @param {Array|Object} [fields.data]
	 * @param {string} [seriesLayoutBy='column']
	 * @param {Array.<Object|string>} [dimensionsDefine]
	 * @param {Objet|HashMap} [encodeDefine]
	 * @param {number} [startIndex=0]
	 * @param {number} [dimensionsDetectCount]
	 */
	function Source(fields) {
	  /**
	   * @type {boolean}
	   */
	  this.fromDataset = fields.fromDataset;
	  /**
	   * Not null/undefined.
	   * @type {Array|Object}
	   */
	
	  this.data = fields.data || (fields.sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS ? {} : []);
	  /**
	   * See also "detectSourceFormat".
	   * Not null/undefined.
	   * @type {string}
	   */
	
	  this.sourceFormat = fields.sourceFormat || SOURCE_FORMAT_UNKNOWN;
	  /**
	   * 'row' or 'column'
	   * Not null/undefined.
	   * @type {string} seriesLayoutBy
	   */
	
	  this.seriesLayoutBy = fields.seriesLayoutBy || SERIES_LAYOUT_BY_COLUMN;
	  /**
	   * dimensions definition in option.
	   * can be null/undefined.
	   * @type {Array.<Object|string>}
	   */
	
	  this.dimensionsDefine = fields.dimensionsDefine;
	  /**
	   * encode definition in option.
	   * can be null/undefined.
	   * @type {Objet|HashMap}
	   */
	
	  this.encodeDefine = fields.encodeDefine && createHashMap(fields.encodeDefine);
	  /**
	   * Not null/undefined, uint.
	   * @type {number}
	   */
	
	  this.startIndex = fields.startIndex || 0;
	  /**
	   * Can be null/undefined (when unknown), uint.
	   * @type {number}
	   */
	
	  this.dimensionsDetectCount = fields.dimensionsDetectCount;
	}
	/**
	 * Wrap original series data for some compatibility cases.
	 */
	
	
	Source.seriesDataToSource = function (data) {
	  return new Source({
	    data: data,
	    sourceFormat: isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL,
	    fromDataset: false
	  });
	};
	
	enableClassCheck(Source);
	var _default = Source;
	module.exports = _default;

/***/ }),
/* 1021 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Avoid typo.
	var SOURCE_FORMAT_ORIGINAL = 'original';
	var SOURCE_FORMAT_ARRAY_ROWS = 'arrayRows';
	var SOURCE_FORMAT_OBJECT_ROWS = 'objectRows';
	var SOURCE_FORMAT_KEYED_COLUMNS = 'keyedColumns';
	var SOURCE_FORMAT_UNKNOWN = 'unknown'; // ??? CHANGE A NAME
	
	var SOURCE_FORMAT_TYPED_ARRAY = 'typedArray';
	var SERIES_LAYOUT_BY_COLUMN = 'column';
	var SERIES_LAYOUT_BY_ROW = 'row';
	exports.SOURCE_FORMAT_ORIGINAL = SOURCE_FORMAT_ORIGINAL;
	exports.SOURCE_FORMAT_ARRAY_ROWS = SOURCE_FORMAT_ARRAY_ROWS;
	exports.SOURCE_FORMAT_OBJECT_ROWS = SOURCE_FORMAT_OBJECT_ROWS;
	exports.SOURCE_FORMAT_KEYED_COLUMNS = SOURCE_FORMAT_KEYED_COLUMNS;
	exports.SOURCE_FORMAT_UNKNOWN = SOURCE_FORMAT_UNKNOWN;
	exports.SOURCE_FORMAT_TYPED_ARRAY = SOURCE_FORMAT_TYPED_ARRAY;
	exports.SERIES_LAYOUT_BY_COLUMN = SERIES_LAYOUT_BY_COLUMN;
	exports.SERIES_LAYOUT_BY_ROW = SERIES_LAYOUT_BY_ROW;

/***/ }),
/* 1022 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var echartsAPIList = ['getDom', 'getZr', 'getWidth', 'getHeight', 'getDevicePixelRatio', 'dispatchAction', 'isDisposed', 'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption', 'getViewOfComponentModel', 'getViewOfSeriesModel']; // And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js
	
	function ExtensionAPI(chartInstance) {
	  zrUtil.each(echartsAPIList, function (name) {
	    this[name] = zrUtil.bind(chartInstance[name], chartInstance);
	  }, this);
	}
	
	var _default = ExtensionAPI;
	module.exports = _default;

/***/ }),
/* 1023 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var coordinateSystemCreators = {};
	
	function CoordinateSystemManager() {
	  this._coordinateSystems = [];
	}
	
	CoordinateSystemManager.prototype = {
	  constructor: CoordinateSystemManager,
	  create: function (ecModel, api) {
	    var coordinateSystems = [];
	    zrUtil.each(coordinateSystemCreators, function (creater, type) {
	      var list = creater.create(ecModel, api);
	      coordinateSystems = coordinateSystems.concat(list || []);
	    });
	    this._coordinateSystems = coordinateSystems;
	  },
	  update: function (ecModel, api) {
	    zrUtil.each(this._coordinateSystems, function (coordSys) {
	      coordSys.update && coordSys.update(ecModel, api);
	    });
	  },
	  getCoordinateSystems: function () {
	    return this._coordinateSystems.slice();
	  }
	};
	
	CoordinateSystemManager.register = function (type, coordinateSystemCreator) {
	  coordinateSystemCreators[type] = coordinateSystemCreator;
	};
	
	CoordinateSystemManager.get = function (type) {
	  return coordinateSystemCreators[type];
	};
	
	var _default = CoordinateSystemManager;
	module.exports = _default;

/***/ }),
/* 1024 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var modelUtil = __webpack_require__(969);
	
	var ComponentModel = __webpack_require__(1010);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * ECharts option manager
	 *
	 * @module {echarts/model/OptionManager}
	 */
	var each = zrUtil.each;
	var clone = zrUtil.clone;
	var map = zrUtil.map;
	var merge = zrUtil.merge;
	var QUERY_REG = /^(min|max)?(.+)$/;
	/**
	 * TERM EXPLANATIONS:
	 *
	 * [option]:
	 *
	 *     An object that contains definitions of components. For example:
	 *     var option = {
	 *         title: {...},
	 *         legend: {...},
	 *         visualMap: {...},
	 *         series: [
	 *             {data: [...]},
	 *             {data: [...]},
	 *             ...
	 *         ]
	 *     };
	 *
	 * [rawOption]:
	 *
	 *     An object input to echarts.setOption. 'rawOption' may be an
	 *     'option', or may be an object contains multi-options. For example:
	 *     var option = {
	 *         baseOption: {
	 *             title: {...},
	 *             legend: {...},
	 *             series: [
	 *                 {data: [...]},
	 *                 {data: [...]},
	 *                 ...
	 *             ]
	 *         },
	 *         timeline: {...},
	 *         options: [
	 *             {title: {...}, series: {data: [...]}},
	 *             {title: {...}, series: {data: [...]}},
	 *             ...
	 *         ],
	 *         media: [
	 *             {
	 *                 query: {maxWidth: 320},
	 *                 option: {series: {x: 20}, visualMap: {show: false}}
	 *             },
	 *             {
	 *                 query: {minWidth: 320, maxWidth: 720},
	 *                 option: {series: {x: 500}, visualMap: {show: true}}
	 *             },
	 *             {
	 *                 option: {series: {x: 1200}, visualMap: {show: true}}
	 *             }
	 *         ]
	 *     };
	 *
	 * @alias module:echarts/model/OptionManager
	 * @param {module:echarts/ExtensionAPI} api
	 */
	
	function OptionManager(api) {
	  /**
	   * @private
	   * @type {module:echarts/ExtensionAPI}
	   */
	  this._api = api;
	  /**
	   * @private
	   * @type {Array.<number>}
	   */
	
	  this._timelineOptions = [];
	  /**
	   * @private
	   * @type {Array.<Object>}
	   */
	
	  this._mediaList = [];
	  /**
	   * @private
	   * @type {Object}
	   */
	
	  this._mediaDefault;
	  /**
	   * -1, means default.
	   * empty means no media.
	   * @private
	   * @type {Array.<number>}
	   */
	
	  this._currentMediaIndices = [];
	  /**
	   * @private
	   * @type {Object}
	   */
	
	  this._optionBackup;
	  /**
	   * @private
	   * @type {Object}
	   */
	
	  this._newBaseOption;
	} // timeline.notMerge is not supported in ec3. Firstly there is rearly
	// case that notMerge is needed. Secondly supporting 'notMerge' requires
	// rawOption cloned and backuped when timeline changed, which does no
	// good to performance. What's more, that both timeline and setOption
	// method supply 'notMerge' brings complex and some problems.
	// Consider this case:
	// (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);
	// (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);
	
	
	OptionManager.prototype = {
	  constructor: OptionManager,
	
	  /**
	   * @public
	   * @param {Object} rawOption Raw option.
	   * @param {module:echarts/model/Global} ecModel
	   * @param {Array.<Function>} optionPreprocessorFuncs
	   * @return {Object} Init option
	   */
	  setOption: function (rawOption, optionPreprocessorFuncs) {
	    if (rawOption) {
	      // That set dat primitive is dangerous if user reuse the data when setOption again.
	      zrUtil.each(modelUtil.normalizeToArray(rawOption.series), function (series) {
	        series && series.data && zrUtil.isTypedArray(series.data) && zrUtil.setAsPrimitive(series.data);
	      });
	    } // Caution: some series modify option data, if do not clone,
	    // it should ensure that the repeat modify correctly
	    // (create a new object when modify itself).
	
	
	    rawOption = clone(rawOption, true); // FIXME
	    // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。
	
	    var oldOptionBackup = this._optionBackup;
	    var newParsedOption = parseRawOption.call(this, rawOption, optionPreprocessorFuncs, !oldOptionBackup);
	    this._newBaseOption = newParsedOption.baseOption; // For setOption at second time (using merge mode);
	
	    if (oldOptionBackup) {
	      // Only baseOption can be merged.
	      mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption); // For simplicity, timeline options and media options do not support merge,
	      // that is, if you `setOption` twice and both has timeline options, the latter
	      // timeline opitons will not be merged to the formers, but just substitude them.
	
	      if (newParsedOption.timelineOptions.length) {
	        oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;
	      }
	
	      if (newParsedOption.mediaList.length) {
	        oldOptionBackup.mediaList = newParsedOption.mediaList;
	      }
	
	      if (newParsedOption.mediaDefault) {
	        oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;
	      }
	    } else {
	      this._optionBackup = newParsedOption;
	    }
	  },
	
	  /**
	   * @param {boolean} isRecreate
	   * @return {Object}
	   */
	  mountOption: function (isRecreate) {
	    var optionBackup = this._optionBackup; // TODO
	    // 如果没有reset功能则不clone。
	
	    this._timelineOptions = map(optionBackup.timelineOptions, clone);
	    this._mediaList = map(optionBackup.mediaList, clone);
	    this._mediaDefault = clone(optionBackup.mediaDefault);
	    this._currentMediaIndices = [];
	    return clone(isRecreate // this._optionBackup.baseOption, which is created at the first `setOption`
	    // called, and is merged into every new option by inner method `mergeOption`
	    // each time `setOption` called, can be only used in `isRecreate`, because
	    // its reliability is under suspicion. In other cases option merge is
	    // performed by `model.mergeOption`.
	    ? optionBackup.baseOption : this._newBaseOption);
	  },
	
	  /**
	   * @param {module:echarts/model/Global} ecModel
	   * @return {Object}
	   */
	  getTimelineOption: function (ecModel) {
	    var option;
	    var timelineOptions = this._timelineOptions;
	
	    if (timelineOptions.length) {
	      // getTimelineOption can only be called after ecModel inited,
	      // so we can get currentIndex from timelineModel.
	      var timelineModel = ecModel.getComponent('timeline');
	
	      if (timelineModel) {
	        option = clone(timelineOptions[timelineModel.getCurrentIndex()], true);
	      }
	    }
	
	    return option;
	  },
	
	  /**
	   * @param {module:echarts/model/Global} ecModel
	   * @return {Array.<Object>}
	   */
	  getMediaOption: function (ecModel) {
	    var ecWidth = this._api.getWidth();
	
	    var ecHeight = this._api.getHeight();
	
	    var mediaList = this._mediaList;
	    var mediaDefault = this._mediaDefault;
	    var indices = [];
	    var result = []; // No media defined.
	
	    if (!mediaList.length && !mediaDefault) {
	      return result;
	    } // Multi media may be applied, the latter defined media has higher priority.
	
	
	    for (var i = 0, len = mediaList.length; i < len; i++) {
	      if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {
	        indices.push(i);
	      }
	    } // FIXME
	    // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。
	
	
	    if (!indices.length && mediaDefault) {
	      indices = [-1];
	    }
	
	    if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {
	      result = map(indices, function (index) {
	        return clone(index === -1 ? mediaDefault.option : mediaList[index].option);
	      });
	    } // Otherwise return nothing.
	
	
	    this._currentMediaIndices = indices;
	    return result;
	  }
	};
	
	function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {
	  var timelineOptions = [];
	  var mediaList = [];
	  var mediaDefault;
	  var baseOption; // Compatible with ec2.
	
	  var timelineOpt = rawOption.timeline;
	
	  if (rawOption.baseOption) {
	    baseOption = rawOption.baseOption;
	  } // For timeline
	
	
	  if (timelineOpt || rawOption.options) {
	    baseOption = baseOption || {};
	    timelineOptions = (rawOption.options || []).slice();
	  } // For media query
	
	
	  if (rawOption.media) {
	    baseOption = baseOption || {};
	    var media = rawOption.media;
	    each(media, function (singleMedia) {
	      if (singleMedia && singleMedia.option) {
	        if (singleMedia.query) {
	          mediaList.push(singleMedia);
	        } else if (!mediaDefault) {
	          // Use the first media default.
	          mediaDefault = singleMedia;
	        }
	      }
	    });
	  } // For normal option
	
	
	  if (!baseOption) {
	    baseOption = rawOption;
	  } // Set timelineOpt to baseOption in ec3,
	  // which is convenient for merge option.
	
	
	  if (!baseOption.timeline) {
	    baseOption.timeline = timelineOpt;
	  } // Preprocess.
	
	
	  each([baseOption].concat(timelineOptions).concat(zrUtil.map(mediaList, function (media) {
	    return media.option;
	  })), function (option) {
	    each(optionPreprocessorFuncs, function (preProcess) {
	      preProcess(option, isNew);
	    });
	  });
	  return {
	    baseOption: baseOption,
	    timelineOptions: timelineOptions,
	    mediaDefault: mediaDefault,
	    mediaList: mediaList
	  };
	}
	/**
	 * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>
	 * Support: width, height, aspectRatio
	 * Can use max or min as prefix.
	 */
	
	
	function applyMediaQuery(query, ecWidth, ecHeight) {
	  var realMap = {
	    width: ecWidth,
	    height: ecHeight,
	    aspectratio: ecWidth / ecHeight // lowser case for convenientce.
	
	  };
	  var applicatable = true;
	  zrUtil.each(query, function (value, attr) {
	    var matched = attr.match(QUERY_REG);
	
	    if (!matched || !matched[1] || !matched[2]) {
	      return;
	    }
	
	    var operator = matched[1];
	    var realAttr = matched[2].toLowerCase();
	
	    if (!compare(realMap[realAttr], value, operator)) {
	      applicatable = false;
	    }
	  });
	  return applicatable;
	}
	
	function compare(real, expect, operator) {
	  if (operator === 'min') {
	    return real >= expect;
	  } else if (operator === 'max') {
	    return real <= expect;
	  } else {
	    // Equals
	    return real === expect;
	  }
	}
	
	function indicesEquals(indices1, indices2) {
	  // indices is always order by asc and has only finite number.
	  return indices1.join(',') === indices2.join(',');
	}
	/**
	 * Consider case:
	 * `chart.setOption(opt1);`
	 * Then user do some interaction like dataZoom, dataView changing.
	 * `chart.setOption(opt2);`
	 * Then user press 'reset button' in toolbox.
	 *
	 * After doing that all of the interaction effects should be reset, the
	 * chart should be the same as the result of invoke
	 * `chart.setOption(opt1); chart.setOption(opt2);`.
	 *
	 * Although it is not able ensure that
	 * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to
	 * `chart.setOption(merge(opt1, opt2));` exactly,
	 * this might be the only simple way to implement that feature.
	 *
	 * MEMO: We've considered some other approaches:
	 * 1. Each model handle its self restoration but not uniform treatment.
	 *     (Too complex in logic and error-prone)
	 * 2. Use a shadow ecModel. (Performace expensive)
	 */
	
	
	function mergeOption(oldOption, newOption) {
	  newOption = newOption || {};
	  each(newOption, function (newCptOpt, mainType) {
	    if (newCptOpt == null) {
	      return;
	    }
	
	    var oldCptOpt = oldOption[mainType];
	
	    if (!ComponentModel.hasClass(mainType)) {
	      oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);
	    } else {
	      newCptOpt = modelUtil.normalizeToArray(newCptOpt);
	      oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);
	      var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);
	      oldOption[mainType] = map(mapResult, function (item) {
	        return item.option && item.exist ? merge(item.exist, item.option, true) : item.exist || item.option;
	      });
	    }
	  });
	}
	
	var _default = OptionManager;
	module.exports = _default;

/***/ }),
/* 1025 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(931);
	
	var each = _util.each;
	var isArray = _util.isArray;
	var isObject = _util.isObject;
	
	var compatStyle = __webpack_require__(1026);
	
	var _model = __webpack_require__(969);
	
	var normalizeToArray = _model.normalizeToArray;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Compatitable with 2.0
	function get(opt, path) {
	  path = path.split(',');
	  var obj = opt;
	
	  for (var i = 0; i < path.length; i++) {
	    obj = obj && obj[path[i]];
	
	    if (obj == null) {
	      break;
	    }
	  }
	
	  return obj;
	}
	
	function set(opt, path, val, overwrite) {
	  path = path.split(',');
	  var obj = opt;
	  var key;
	
	  for (var i = 0; i < path.length - 1; i++) {
	    key = path[i];
	
	    if (obj[key] == null) {
	      obj[key] = {};
	    }
	
	    obj = obj[key];
	  }
	
	  if (overwrite || obj[path[i]] == null) {
	    obj[path[i]] = val;
	  }
	}
	
	function compatLayoutProperties(option) {
	  each(LAYOUT_PROPERTIES, function (prop) {
	    if (prop[0] in option && !(prop[1] in option)) {
	      option[prop[1]] = option[prop[0]];
	    }
	  });
	}
	
	var LAYOUT_PROPERTIES = [['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']];
	var COMPATITABLE_COMPONENTS = ['grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'];
	
	function _default(option, isTheme) {
	  compatStyle(option, isTheme); // Make sure series array for model initialization.
	
	  option.series = normalizeToArray(option.series);
	  each(option.series, function (seriesOpt) {
	    if (!isObject(seriesOpt)) {
	      return;
	    }
	
	    var seriesType = seriesOpt.type;
	
	    if (seriesType === 'pie' || seriesType === 'gauge') {
	      if (seriesOpt.clockWise != null) {
	        seriesOpt.clockwise = seriesOpt.clockWise;
	      }
	    }
	
	    if (seriesType === 'gauge') {
	      var pointerColor = get(seriesOpt, 'pointer.color');
	      pointerColor != null && set(seriesOpt, 'itemStyle.normal.color', pointerColor);
	    }
	
	    compatLayoutProperties(seriesOpt);
	  }); // dataRange has changed to visualMap
	
	  if (option.dataRange) {
	    option.visualMap = option.dataRange;
	  }
	
	  each(COMPATITABLE_COMPONENTS, function (componentName) {
	    var options = option[componentName];
	
	    if (options) {
	      if (!isArray(options)) {
	        options = [options];
	      }
	
	      each(options, function (option) {
	        compatLayoutProperties(option);
	      });
	    }
	  });
	}
	
	module.exports = _default;

/***/ }),
/* 1026 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var modelUtil = __webpack_require__(969);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;
	var isObject = zrUtil.isObject;
	var POSSIBLE_STYLES = ['areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle', 'chordStyle', 'label', 'labelLine'];
	
	function compatEC2ItemStyle(opt) {
	  var itemStyleOpt = opt && opt.itemStyle;
	
	  if (!itemStyleOpt) {
	    return;
	  }
	
	  for (var i = 0, len = POSSIBLE_STYLES.length; i < len; i++) {
	    var styleName = POSSIBLE_STYLES[i];
	    var normalItemStyleOpt = itemStyleOpt.normal;
	    var emphasisItemStyleOpt = itemStyleOpt.emphasis;
	
	    if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {
	      opt[styleName] = opt[styleName] || {};
	
	      if (!opt[styleName].normal) {
	        opt[styleName].normal = normalItemStyleOpt[styleName];
	      } else {
	        zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);
	      }
	
	      normalItemStyleOpt[styleName] = null;
	    }
	
	    if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {
	      opt[styleName] = opt[styleName] || {};
	
	      if (!opt[styleName].emphasis) {
	        opt[styleName].emphasis = emphasisItemStyleOpt[styleName];
	      } else {
	        zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);
	      }
	
	      emphasisItemStyleOpt[styleName] = null;
	    }
	  }
	}
	
	function convertNormalEmphasis(opt, optType, useExtend) {
	  if (opt && opt[optType] && (opt[optType].normal || opt[optType].emphasis)) {
	    var normalOpt = opt[optType].normal;
	    var emphasisOpt = opt[optType].emphasis;
	
	    if (normalOpt) {
	      // Timeline controlStyle has other properties besides normal and emphasis
	      if (useExtend) {
	        opt[optType].normal = opt[optType].emphasis = null;
	        zrUtil.defaults(opt[optType], normalOpt);
	      } else {
	        opt[optType] = normalOpt;
	      }
	    }
	
	    if (emphasisOpt) {
	      opt.emphasis = opt.emphasis || {};
	      opt.emphasis[optType] = emphasisOpt;
	    }
	  }
	}
	
	function removeEC3NormalStatus(opt) {
	  convertNormalEmphasis(opt, 'itemStyle');
	  convertNormalEmphasis(opt, 'lineStyle');
	  convertNormalEmphasis(opt, 'areaStyle');
	  convertNormalEmphasis(opt, 'label');
	  convertNormalEmphasis(opt, 'labelLine'); // treemap
	
	  convertNormalEmphasis(opt, 'upperLabel'); // graph
	
	  convertNormalEmphasis(opt, 'edgeLabel');
	}
	
	function compatTextStyle(opt, propName) {
	  // Check whether is not object (string\null\undefined ...)
	  var labelOptSingle = isObject(opt) && opt[propName];
	  var textStyle = isObject(labelOptSingle) && labelOptSingle.textStyle;
	
	  if (textStyle) {
	    for (var i = 0, len = modelUtil.TEXT_STYLE_OPTIONS.length; i < len; i++) {
	      var propName = modelUtil.TEXT_STYLE_OPTIONS[i];
	
	      if (textStyle.hasOwnProperty(propName)) {
	        labelOptSingle[propName] = textStyle[propName];
	      }
	    }
	  }
	}
	
	function compatEC3CommonStyles(opt) {
	  if (opt) {
	    removeEC3NormalStatus(opt);
	    compatTextStyle(opt, 'label');
	    opt.emphasis && compatTextStyle(opt.emphasis, 'label');
	  }
	}
	
	function processSeries(seriesOpt) {
	  if (!isObject(seriesOpt)) {
	    return;
	  }
	
	  compatEC2ItemStyle(seriesOpt);
	  removeEC3NormalStatus(seriesOpt);
	  compatTextStyle(seriesOpt, 'label'); // treemap
	
	  compatTextStyle(seriesOpt, 'upperLabel'); // graph
	
	  compatTextStyle(seriesOpt, 'edgeLabel');
	
	  if (seriesOpt.emphasis) {
	    compatTextStyle(seriesOpt.emphasis, 'label'); // treemap
	
	    compatTextStyle(seriesOpt.emphasis, 'upperLabel'); // graph
	
	    compatTextStyle(seriesOpt.emphasis, 'edgeLabel');
	  }
	
	  var markPoint = seriesOpt.markPoint;
	
	  if (markPoint) {
	    compatEC2ItemStyle(markPoint);
	    compatEC3CommonStyles(markPoint);
	  }
	
	  var markLine = seriesOpt.markLine;
	
	  if (markLine) {
	    compatEC2ItemStyle(markLine);
	    compatEC3CommonStyles(markLine);
	  }
	
	  var markArea = seriesOpt.markArea;
	
	  if (markArea) {
	    compatEC3CommonStyles(markArea);
	  }
	
	  var data = seriesOpt.data; // Break with ec3: if `setOption` again, there may be no `type` in option,
	  // then the backward compat based on option type will not be performed.
	
	  if (seriesOpt.type === 'graph') {
	    data = data || seriesOpt.nodes;
	    var edgeData = seriesOpt.links || seriesOpt.edges;
	
	    if (edgeData && !zrUtil.isTypedArray(edgeData)) {
	      for (var i = 0; i < edgeData.length; i++) {
	        compatEC3CommonStyles(edgeData[i]);
	      }
	    }
	
	    zrUtil.each(seriesOpt.categories, function (opt) {
	      removeEC3NormalStatus(opt);
	    });
	  }
	
	  if (data && !zrUtil.isTypedArray(data)) {
	    for (var i = 0; i < data.length; i++) {
	      compatEC3CommonStyles(data[i]);
	    }
	  } // mark point data
	
	
	  var markPoint = seriesOpt.markPoint;
	
	  if (markPoint && markPoint.data) {
	    var mpData = markPoint.data;
	
	    for (var i = 0; i < mpData.length; i++) {
	      compatEC3CommonStyles(mpData[i]);
	    }
	  } // mark line data
	
	
	  var markLine = seriesOpt.markLine;
	
	  if (markLine && markLine.data) {
	    var mlData = markLine.data;
	
	    for (var i = 0; i < mlData.length; i++) {
	      if (zrUtil.isArray(mlData[i])) {
	        compatEC3CommonStyles(mlData[i][0]);
	        compatEC3CommonStyles(mlData[i][1]);
	      } else {
	        compatEC3CommonStyles(mlData[i]);
	      }
	    }
	  } // Series
	
	
	  if (seriesOpt.type === 'gauge') {
	    compatTextStyle(seriesOpt, 'axisLabel');
	    compatTextStyle(seriesOpt, 'title');
	    compatTextStyle(seriesOpt, 'detail');
	  } else if (seriesOpt.type === 'treemap') {
	    convertNormalEmphasis(seriesOpt.breadcrumb, 'itemStyle');
	    zrUtil.each(seriesOpt.levels, function (opt) {
	      removeEC3NormalStatus(opt);
	    });
	  } else if (seriesOpt.type === 'tree') {
	    removeEC3NormalStatus(seriesOpt.leaves);
	  } // sunburst starts from ec4, so it does not need to compat levels.
	
	}
	
	function toArr(o) {
	  return zrUtil.isArray(o) ? o : o ? [o] : [];
	}
	
	function toObj(o) {
	  return (zrUtil.isArray(o) ? o[0] : o) || {};
	}
	
	function _default(option, isTheme) {
	  each(toArr(option.series), function (seriesOpt) {
	    isObject(seriesOpt) && processSeries(seriesOpt);
	  });
	  var axes = ['xAxis', 'yAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'parallelAxis', 'radar'];
	  isTheme && axes.push('valueAxis', 'categoryAxis', 'logAxis', 'timeAxis');
	  each(axes, function (axisName) {
	    each(toArr(option[axisName]), function (axisOpt) {
	      if (axisOpt) {
	        compatTextStyle(axisOpt, 'axisLabel');
	        compatTextStyle(axisOpt.axisPointer, 'label');
	      }
	    });
	  });
	  each(toArr(option.parallel), function (parallelOpt) {
	    var parallelAxisDefault = parallelOpt && parallelOpt.parallelAxisDefault;
	    compatTextStyle(parallelAxisDefault, 'axisLabel');
	    compatTextStyle(parallelAxisDefault && parallelAxisDefault.axisPointer, 'label');
	  });
	  each(toArr(option.calendar), function (calendarOpt) {
	    convertNormalEmphasis(calendarOpt, 'itemStyle');
	    compatTextStyle(calendarOpt, 'dayLabel');
	    compatTextStyle(calendarOpt, 'monthLabel');
	    compatTextStyle(calendarOpt, 'yearLabel');
	  }); // radar.name.textStyle
	
	  each(toArr(option.radar), function (radarOpt) {
	    compatTextStyle(radarOpt, 'name');
	  });
	  each(toArr(option.geo), function (geoOpt) {
	    if (isObject(geoOpt)) {
	      compatEC3CommonStyles(geoOpt);
	      each(toArr(geoOpt.regions), function (regionObj) {
	        compatEC3CommonStyles(regionObj);
	      });
	    }
	  });
	  each(toArr(option.timeline), function (timelineOpt) {
	    compatEC3CommonStyles(timelineOpt);
	    convertNormalEmphasis(timelineOpt, 'label');
	    convertNormalEmphasis(timelineOpt, 'itemStyle');
	    convertNormalEmphasis(timelineOpt, 'controlStyle', true);
	    var data = timelineOpt.data;
	    zrUtil.isArray(data) && zrUtil.each(data, function (item) {
	      if (zrUtil.isObject(item)) {
	        convertNormalEmphasis(item, 'label');
	        convertNormalEmphasis(item, 'itemStyle');
	      }
	    });
	  });
	  each(toArr(option.toolbox), function (toolboxOpt) {
	    convertNormalEmphasis(toolboxOpt, 'iconStyle');
	    each(toolboxOpt.feature, function (featureOpt) {
	      convertNormalEmphasis(featureOpt, 'iconStyle');
	    });
	  });
	  compatTextStyle(toObj(option.axisPointer), 'label');
	  compatTextStyle(toObj(option.tooltip).axisPointer, 'label');
	}
	
	module.exports = _default;

/***/ }),
/* 1027 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(931);
	
	var createHashMap = _util.createHashMap;
	var each = _util.each;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// (1) [Caution]: the logic is correct based on the premises:
	//     data processing stage is blocked in stream.
	//     See <module:echarts/stream/Scheduler#performDataProcessorTasks>
	// (2) Only register once when import repeatly.
	//     Should be executed before after series filtered and before stack calculation.
	function _default(ecModel) {
	  var stackInfoMap = createHashMap();
	  ecModel.eachSeries(function (seriesModel) {
	    var stack = seriesModel.get('stack'); // Compatibal: when `stack` is set as '', do not stack.
	
	    if (stack) {
	      var stackInfoList = stackInfoMap.get(stack) || stackInfoMap.set(stack, []);
	      var data = seriesModel.getData();
	      var stackInfo = {
	        // Used for calculate axis extent automatically.
	        stackResultDimension: data.getCalculationInfo('stackResultDimension'),
	        stackedOverDimension: data.getCalculationInfo('stackedOverDimension'),
	        stackedDimension: data.getCalculationInfo('stackedDimension'),
	        stackedByDimension: data.getCalculationInfo('stackedByDimension'),
	        isStackedByIndex: data.getCalculationInfo('isStackedByIndex'),
	        data: data,
	        seriesModel: seriesModel
	      }; // If stacked on axis that do not support data stack.
	
	      if (!stackInfo.stackedDimension || !(stackInfo.isStackedByIndex || stackInfo.stackedByDimension)) {
	        return;
	      }
	
	      stackInfoList.length && data.setCalculationInfo('stackedOnSeries', stackInfoList[stackInfoList.length - 1].seriesModel);
	      stackInfoList.push(stackInfo);
	    }
	  });
	  stackInfoMap.each(calculateStack);
	}
	
	function calculateStack(stackInfoList) {
	  each(stackInfoList, function (targetStackInfo, idxInStack) {
	    var resultVal = [];
	    var resultNaN = [NaN, NaN];
	    var dims = [targetStackInfo.stackResultDimension, targetStackInfo.stackedOverDimension];
	    var targetData = targetStackInfo.data;
	    var isStackedByIndex = targetStackInfo.isStackedByIndex; // Should not write on raw data, because stack series model list changes
	    // depending on legend selection.
	
	    var newData = targetData.map(dims, function (v0, v1, dataIndex) {
	      var sum = targetData.get(targetStackInfo.stackedDimension, dataIndex); // Consider `connectNulls` of line area, if value is NaN, stackedOver
	      // should also be NaN, to draw a appropriate belt area.
	
	      if (isNaN(sum)) {
	        return resultNaN;
	      }
	
	      var byValue;
	      var stackedDataRawIndex;
	
	      if (isStackedByIndex) {
	        stackedDataRawIndex = targetData.getRawIndex(dataIndex);
	      } else {
	        byValue = targetData.get(targetStackInfo.stackedByDimension, dataIndex);
	      } // If stackOver is NaN, chart view will render point on value start.
	
	
	      var stackedOver = NaN;
	
	      for (var j = idxInStack - 1; j >= 0; j--) {
	        var stackInfo = stackInfoList[j]; // Has been optimized by inverted indices on `stackedByDimension`.
	
	        if (!isStackedByIndex) {
	          stackedDataRawIndex = stackInfo.data.rawIndexOf(stackInfo.stackedByDimension, byValue);
	        }
	
	        if (stackedDataRawIndex >= 0) {
	          var val = stackInfo.data.getByRawIndex(stackInfo.stackResultDimension, stackedDataRawIndex); // Considering positive stack, negative stack and empty data
	
	          if (sum >= 0 && val > 0 || // Positive stack
	          sum <= 0 && val < 0 // Negative stack
	          ) {
	              sum += val;
	              stackedOver = val;
	              break;
	            }
	        }
	      }
	
	      resultVal[0] = sum;
	      resultVal[1] = stackedOver;
	      return resultVal;
	    });
	    targetData.hostModel.setData(newData); // Update for consequent calculation
	
	    targetStackInfo.data = newData;
	  });
	}
	
	module.exports = _default;

/***/ }),
/* 1028 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	var zrUtil = __webpack_require__(931);
	
	var env = __webpack_require__(930);
	
	var _format = __webpack_require__(1014);
	
	var formatTime = _format.formatTime;
	var encodeHTML = _format.encodeHTML;
	var addCommas = _format.addCommas;
	var getTooltipMarker = _format.getTooltipMarker;
	
	var modelUtil = __webpack_require__(969);
	
	var ComponentModel = __webpack_require__(1010);
	
	var colorPaletteMixin = __webpack_require__(1017);
	
	var dataFormatMixin = __webpack_require__(1029);
	
	var _layout = __webpack_require__(1012);
	
	var getLayoutParams = _layout.getLayoutParams;
	var mergeLayoutParam = _layout.mergeLayoutParam;
	
	var _task = __webpack_require__(1031);
	
	var createTask = _task.createTask;
	
	var _sourceHelper = __webpack_require__(1018);
	
	var prepareSource = _sourceHelper.prepareSource;
	var getSource = _sourceHelper.getSource;
	
	var _dataProvider = __webpack_require__(1030);
	
	var retrieveRawValue = _dataProvider.retrieveRawValue;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var inner = modelUtil.makeInner();
	var SeriesModel = ComponentModel.extend({
	  type: 'series.__base__',
	
	  /**
	   * @readOnly
	   */
	  seriesIndex: 0,
	  // coodinateSystem will be injected in the echarts/CoordinateSystem
	  coordinateSystem: null,
	
	  /**
	   * @type {Object}
	   * @protected
	   */
	  defaultOption: null,
	
	  /**
	   * Data provided for legend
	   * @type {Function}
	   */
	  // PENDING
	  legendDataProvider: null,
	
	  /**
	   * Access path of color for visual
	   */
	  visualColorAccessPath: 'itemStyle.color',
	
	  /**
	   * Support merge layout params.
	   * Only support 'box' now (left/right/top/bottom/width/height).
	   * @type {string|Object} Object can be {ignoreSize: true}
	   * @readOnly
	   */
	  layoutMode: null,
	  init: function (option, parentModel, ecModel, extraOpt) {
	    /**
	     * @type {number}
	     * @readOnly
	     */
	    this.seriesIndex = this.componentIndex;
	    this.dataTask = createTask({
	      count: dataTaskCount,
	      reset: dataTaskReset
	    });
	    this.dataTask.context = {
	      model: this
	    };
	    this.mergeDefaultAndTheme(option, ecModel);
	    prepareSource(this);
	    var data = this.getInitialData(option, ecModel);
	    wrapData(data, this);
	    this.dataTask.context.data = data;
	
	    /**
	     * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}
	     * @private
	     */
	    inner(this).dataBeforeProcessed = data; // If we reverse the order (make data firstly, and then make
	    // dataBeforeProcessed by cloneShallow), cloneShallow will
	    // cause data.graph.data !== data when using
	    // module:echarts/data/Graph or module:echarts/data/Tree.
	    // See module:echarts/data/helper/linkList
	    // Theoretically, it is unreasonable to call `seriesModel.getData()` in the model
	    // init or merge stage, because the data can be restored. So we do not `restoreData`
	    // and `setData` here, which forbids calling `seriesModel.getData()` in this stage.
	    // Call `seriesModel.getRawData()` instead.
	    // this.restoreData();
	
	    autoSeriesName(this);
	  },
	
	  /**
	   * Util for merge default and theme to option
	   * @param  {Object} option
	   * @param  {module:echarts/model/Global} ecModel
	   */
	  mergeDefaultAndTheme: function (option, ecModel) {
	    var layoutMode = this.layoutMode;
	    var inputPositionParams = layoutMode ? getLayoutParams(option) : {}; // Backward compat: using subType on theme.
	    // But if name duplicate between series subType
	    // (for example: parallel) add component mainType,
	    // add suffix 'Series'.
	
	    var themeSubType = this.subType;
	
	    if (ComponentModel.hasClass(themeSubType)) {
	      themeSubType += 'Series';
	    }
	
	    zrUtil.merge(option, ecModel.getTheme().get(this.subType));
	    zrUtil.merge(option, this.getDefaultOption()); // Default label emphasis `show`
	
	    modelUtil.defaultEmphasis(option, 'label', ['show']);
	    this.fillDataTextStyle(option.data);
	
	    if (layoutMode) {
	      mergeLayoutParam(option, inputPositionParams, layoutMode);
	    }
	  },
	  mergeOption: function (newSeriesOption, ecModel) {
	    // this.settingTask.dirty();
	    newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);
	    this.fillDataTextStyle(newSeriesOption.data);
	    var layoutMode = this.layoutMode;
	
	    if (layoutMode) {
	      mergeLayoutParam(this.option, newSeriesOption, layoutMode);
	    }
	
	    prepareSource(this);
	    var data = this.getInitialData(newSeriesOption, ecModel);
	    wrapData(data, this);
	    this.dataTask.dirty();
	    this.dataTask.context.data = data;
	    inner(this).dataBeforeProcessed = data;
	    autoSeriesName(this);
	  },
	  fillDataTextStyle: function (data) {
	    // Default data label emphasis `show`
	    // FIXME Tree structure data ?
	    // FIXME Performance ?
	    if (data && !zrUtil.isTypedArray(data)) {
	      var props = ['show'];
	
	      for (var i = 0; i < data.length; i++) {
	        if (data[i] && data[i].label) {
	          modelUtil.defaultEmphasis(data[i], 'label', props);
	        }
	      }
	    }
	  },
	
	  /**
	   * Init a data structure from data related option in series
	   * Must be overwritten
	   */
	  getInitialData: function () {},
	
	  /**
	   * Append data to list
	   * @param {Object} params
	   * @param {Array|TypedArray} params.data
	   */
	  appendData: function (params) {
	    // FIXME ???
	    // (1) If data from dataset, forbidden append.
	    // (2) support append data of dataset.
	    var data = this.getRawData();
	    data.appendData(params.data);
	  },
	
	  /**
	   * Consider some method like `filter`, `map` need make new data,
	   * We should make sure that `seriesModel.getData()` get correct
	   * data in the stream procedure. So we fetch data from upstream
	   * each time `task.perform` called.
	   * @param {string} [dataType]
	   * @return {module:echarts/data/List}
	   */
	  getData: function (dataType) {
	    var task = getCurrentTask(this);
	
	    if (task) {
	      var data = task.context.data;
	      return dataType == null ? data : data.getLinkedData(dataType);
	    } else {
	      // When series is not alive (that may happen when click toolbox
	      // restore or setOption with not merge mode), series data may
	      // be still need to judge animation or something when graphic
	      // elements want to know whether fade out.
	      return inner(this).data;
	    }
	  },
	
	  /**
	   * @param {module:echarts/data/List} data
	   */
	  setData: function (data) {
	    var task = getCurrentTask(this);
	
	    if (task) {
	      var context = task.context; // Consider case: filter, data sample.
	
	      if (context.data !== data && task.modifyOutputEnd) {
	        task.setOutputEnd(data.count());
	      }
	
	      context.outputData = data; // Caution: setData should update context.data,
	      // Because getData may be called multiply in a
	      // single stage and expect to get the data just
	      // set. (For example, AxisProxy, x y both call
	      // getData and setDate sequentially).
	      // So the context.data should be fetched from
	      // upstream each time when a stage starts to be
	      // performed.
	
	      if (task !== this.dataTask) {
	        context.data = data;
	      }
	    }
	
	    inner(this).data = data;
	  },
	
	  /**
	   * @see {module:echarts/data/helper/sourceHelper#getSource}
	   * @return {module:echarts/data/Source} source
	   */
	  getSource: function () {
	    return getSource(this);
	  },
	
	  /**
	   * Get data before processed
	   * @return {module:echarts/data/List}
	   */
	  getRawData: function () {
	    return inner(this).dataBeforeProcessed;
	  },
	
	  /**
	   * Get base axis if has coordinate system and has axis.
	   * By default use coordSys.getBaseAxis();
	   * Can be overrided for some chart.
	   * @return {type} description
	   */
	  getBaseAxis: function () {
	    var coordSys = this.coordinateSystem;
	    return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();
	  },
	  // FIXME
	
	  /**
	   * Default tooltip formatter
	   *
	   * @param {number} dataIndex
	   * @param {boolean} [multipleSeries=false]
	   * @param {number} [dataType]
	   */
	  formatTooltip: function (dataIndex, multipleSeries, dataType) {
	    function formatArrayValue(value) {
	      // ??? TODO refactor these logic.
	      // check: category-no-encode-has-axis-data in dataset.html
	      var vertially = zrUtil.reduce(value, function (vertially, val, idx) {
	        var dimItem = data.getDimensionInfo(idx);
	        return vertially |= dimItem && dimItem.tooltip !== false && dimItem.displayName != null;
	      }, 0);
	      var result = [];
	      tooltipDims.length ? zrUtil.each(tooltipDims, function (dim) {
	        setEachItem(retrieveRawValue(data, dataIndex, dim), dim);
	      }) // By default, all dims is used on tooltip.
	      : zrUtil.each(value, setEachItem);
	
	      function setEachItem(val, dim) {
	        var dimInfo = data.getDimensionInfo(dim); // If `dimInfo.tooltip` is not set, show tooltip.
	
	        if (!dimInfo || dimInfo.otherDims.tooltip === false) {
	          return;
	        }
	
	        var dimType = dimInfo.type;
	        var dimHead = getTooltipMarker({
	          color: color,
	          type: 'subItem'
	        });
	        var valStr = (vertially ? dimHead + encodeHTML(dimInfo.displayName || '-') + ': ' : '') + // FIXME should not format time for raw data?
	        encodeHTML(dimType === 'ordinal' ? val + '' : dimType === 'time' ? multipleSeries ? '' : formatTime('yyyy/MM/dd hh:mm:ss', val) : addCommas(val));
	        valStr && result.push(valStr);
	      }
	
	      return (vertially ? '<br/>' : '') + result.join(vertially ? '<br/>' : ', ');
	    }
	
	    function formatSingleValue(val) {
	      return encodeHTML(addCommas(val));
	    }
	
	    var data = this.getData();
	    var tooltipDims = data.mapDimension('defaultedTooltip', true);
	    var tooltipDimLen = tooltipDims.length;
	    var value = this.getRawValue(dataIndex);
	    var isValueArr = zrUtil.isArray(value);
	    var color = data.getItemVisual(dataIndex, 'color');
	
	    if (zrUtil.isObject(color) && color.colorStops) {
	      color = (color.colorStops[0] || {}).color;
	    }
	
	    color = color || 'transparent'; // Complicated rule for pretty tooltip.
	
	    var formattedValue = tooltipDimLen > 1 || isValueArr && !tooltipDimLen ? formatArrayValue(value) : tooltipDimLen ? formatSingleValue(retrieveRawValue(data, dataIndex, tooltipDims[0])) : formatSingleValue(isValueArr ? value[0] : value);
	    var colorEl = getTooltipMarker(color);
	    var name = data.getName(dataIndex);
	    var seriesName = this.name;
	
	    if (!modelUtil.isNameSpecified(this)) {
	      seriesName = '';
	    }
	
	    seriesName = seriesName ? encodeHTML(seriesName) + (!multipleSeries ? '<br/>' : ': ') : '';
	    return !multipleSeries ? seriesName + colorEl + (name ? encodeHTML(name) + ': ' + formattedValue : formattedValue) : colorEl + seriesName + formattedValue;
	  },
	
	  /**
	   * @return {boolean}
	   */
	  isAnimationEnabled: function () {
	    if (env.node) {
	      return false;
	    }
	
	    var animationEnabled = this.getShallow('animation');
	
	    if (animationEnabled) {
	      if (this.getData().count() > this.getShallow('animationThreshold')) {
	        animationEnabled = false;
	      }
	    }
	
	    return animationEnabled;
	  },
	  restoreData: function () {
	    this.dataTask.dirty();
	  },
	  getColorFromPalette: function (name, scope, requestColorNum) {
	    var ecModel = this.ecModel; // PENDING
	
	    var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope, requestColorNum);
	
	    if (!color) {
	      color = ecModel.getColorFromPalette(name, scope, requestColorNum);
	    }
	
	    return color;
	  },
	
	  /**
	   * Use `data.mapDimension(coordDim, true)` instead.
	   * @deprecated
	   */
	  coordDimToDataDim: function (coordDim) {
	    return this.getRawData().mapDimension(coordDim, true);
	  },
	
	  /**
	   * Get progressive rendering count each step
	   * @return {number}
	   */
	  getProgressive: function () {
	    return this.get('progressive');
	  },
	
	  /**
	   * Get progressive rendering count each step
	   * @return {number}
	   */
	  getProgressiveThreshold: function () {
	    return this.get('progressiveThreshold');
	  },
	
	  /**
	   * Get data indices for show tooltip content. See tooltip.
	   * @abstract
	   * @param {Array.<string>|string} dim
	   * @param {Array.<number>} value
	   * @param {module:echarts/coord/single/SingleAxis} baseAxis
	   * @return {Object} {dataIndices, nestestValue}.
	   */
	  getAxisTooltipData: null,
	
	  /**
	   * See tooltip.
	   * @abstract
	   * @param {number} dataIndex
	   * @return {Array.<number>} Point of tooltip. null/undefined can be returned.
	   */
	  getTooltipPosition: null,
	
	  /**
	   * @see {module:echarts/stream/Scheduler}
	   */
	  pipeTask: null,
	
	  /**
	   * Convinient for override in extended class.
	   * @protected
	   * @type {Function}
	   */
	  preventIncremental: null,
	
	  /**
	   * @public
	   * @readOnly
	   * @type {Object}
	   */
	  pipelineContext: null
	});
	zrUtil.mixin(SeriesModel, dataFormatMixin);
	zrUtil.mixin(SeriesModel, colorPaletteMixin);
	/**
	 * MUST be called after `prepareSource` called
	 * Here we need to make auto series, especially for auto legend. But we
	 * do not modify series.name in option to avoid side effects.
	 */
	
	function autoSeriesName(seriesModel) {
	  // User specified name has higher priority, otherwise it may cause
	  // series can not be queried unexpectedly.
	  var name = seriesModel.name;
	
	  if (!modelUtil.isNameSpecified(seriesModel)) {
	    seriesModel.name = getSeriesAutoName(seriesModel) || name;
	  }
	}
	
	function getSeriesAutoName(seriesModel) {
	  var data = seriesModel.getRawData();
	  var dataDims = data.mapDimension('seriesName', true);
	  var nameArr = [];
	  zrUtil.each(dataDims, function (dataDim) {
	    var dimInfo = data.getDimensionInfo(dataDim);
	    dimInfo.displayName && nameArr.push(dimInfo.displayName);
	  });
	  return nameArr.join(' ');
	}
	
	function dataTaskCount(context) {
	  return context.model.getRawData().count();
	}
	
	function dataTaskReset(context) {
	  var seriesModel = context.model;
	  seriesModel.setData(seriesModel.getRawData().cloneShallow());
	  return dataTaskProgress;
	}
	
	function dataTaskProgress(param, context) {
	  // Avoid repead cloneShallow when data just created in reset.
	  if (param.end > context.outputData.count()) {
	    context.model.getRawData().cloneShallow(context.outputData);
	  }
	} // TODO refactor
	
	
	function wrapData(data, seriesModel) {
	  zrUtil.each(data.CHANGABLE_METHODS, function (methodName) {
	    data.wrapMethod(methodName, zrUtil.curry(onDataSelfChange, seriesModel));
	  });
	}
	
	function onDataSelfChange(seriesModel) {
	  var task = getCurrentTask(seriesModel);
	
	  if (task) {
	    // Consider case: filter, selectRange
	    task.setOutputEnd(this.count());
	  }
	}
	
	function getCurrentTask(seriesModel) {
	  var scheduler = (seriesModel.ecModel || {}).scheduler;
	  var pipeline = scheduler && scheduler.getPipeline(seriesModel.uid);
	
	  if (pipeline) {
	    // When pipline finished, the currrentTask keep the last
	    // task (renderTask).
	    var task = pipeline.currentTask;
	
	    if (task) {
	      var agentStubMap = task.agentStubMap;
	
	      if (agentStubMap) {
	        task = agentStubMap.get(seriesModel.uid);
	      }
	    }
	
	    return task;
	  }
	}
	
	var _default = SeriesModel;
	module.exports = _default;

/***/ }),
/* 1029 */
/***/ (function(module, exports, __webpack_require__) {

	var _dataProvider = __webpack_require__(1030);
	
	var retrieveRawValue = _dataProvider.retrieveRawValue;
	
	var _format = __webpack_require__(1014);
	
	var getTooltipMarker = _format.getTooltipMarker;
	var formatTpl = _format.formatTpl;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var DIMENSION_LABEL_REG = /\{@(.+?)\}/g; // PENDING A little ugly
	
	var _default = {
	  /**
	   * Get params for formatter
	   * @param {number} dataIndex
	   * @param {string} [dataType]
	   * @return {Object}
	   */
	  getDataParams: function (dataIndex, dataType) {
	    var data = this.getData(dataType);
	    var rawValue = this.getRawValue(dataIndex, dataType);
	    var rawDataIndex = data.getRawIndex(dataIndex);
	    var name = data.getName(dataIndex);
	    var itemOpt = data.getRawDataItem(dataIndex);
	    var color = data.getItemVisual(dataIndex, 'color');
	    return {
	      componentType: this.mainType,
	      componentSubType: this.subType,
	      seriesType: this.mainType === 'series' ? this.subType : null,
	      seriesIndex: this.seriesIndex,
	      seriesId: this.id,
	      seriesName: this.name,
	      name: name,
	      dataIndex: rawDataIndex,
	      data: itemOpt,
	      dataType: dataType,
	      value: rawValue,
	      color: color,
	      marker: getTooltipMarker(color),
	      // Param name list for mapping `a`, `b`, `c`, `d`, `e`
	      $vars: ['seriesName', 'name', 'value']
	    };
	  },
	
	  /**
	   * Format label
	   * @param {number} dataIndex
	   * @param {string} [status='normal'] 'normal' or 'emphasis'
	   * @param {string} [dataType]
	   * @param {number} [dimIndex]
	   * @param {string} [labelProp='label']
	   * @return {string} If not formatter, return null/undefined
	   */
	  getFormattedLabel: function (dataIndex, status, dataType, dimIndex, labelProp) {
	    status = status || 'normal';
	    var data = this.getData(dataType);
	    var itemModel = data.getItemModel(dataIndex);
	    var params = this.getDataParams(dataIndex, dataType);
	
	    if (dimIndex != null && params.value instanceof Array) {
	      params.value = params.value[dimIndex];
	    }
	
	    var formatter = itemModel.get(status === 'normal' ? [labelProp || 'label', 'formatter'] : [status, labelProp || 'label', 'formatter']);
	
	    if (typeof formatter === 'function') {
	      params.status = status;
	      return formatter(params);
	    } else if (typeof formatter === 'string') {
	      var str = formatTpl(formatter, params); // Support 'aaa{@[3]}bbb{@product}ccc'.
	      // Do not support '}' in dim name util have to.
	
	      return str.replace(DIMENSION_LABEL_REG, function (origin, dim) {
	        var len = dim.length;
	
	        if (dim.charAt(0) === '[' && dim.charAt(len - 1) === ']') {
	          dim = +dim.slice(1, len - 1); // Also: '[]' => 0
	        }
	
	        return retrieveRawValue(data, dataIndex, dim);
	      });
	    }
	  },
	
	  /**
	   * Get raw value in option
	   * @param {number} idx
	   * @param {string} [dataType]
	   * @return {Array|number|string}
	   */
	  getRawValue: function (idx, dataType) {
	    return retrieveRawValue(this.getData(dataType), idx);
	  },
	
	  /**
	   * Should be implemented.
	   * @param {number} dataIndex
	   * @param {boolean} [multipleSeries=false]
	   * @param {number} [dataType]
	   * @return {string} tooltip string
	   */
	  formatTooltip: function () {// Empty function
	  }
	};
	module.exports = _default;

/***/ }),
/* 1030 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	var _util = __webpack_require__(931);
	
	var isTypedArray = _util.isTypedArray;
	var extend = _util.extend;
	var assert = _util.assert;
	var each = _util.each;
	var isObject = _util.isObject;
	
	var _model = __webpack_require__(969);
	
	var getDataItemValue = _model.getDataItemValue;
	var isDataItemOption = _model.isDataItemOption;
	
	var _number = __webpack_require__(1013);
	
	var parseDate = _number.parseDate;
	
	var Source = __webpack_require__(1020);
	
	var _sourceType = __webpack_require__(1021);
	
	var SOURCE_FORMAT_TYPED_ARRAY = _sourceType.SOURCE_FORMAT_TYPED_ARRAY;
	var SOURCE_FORMAT_ARRAY_ROWS = _sourceType.SOURCE_FORMAT_ARRAY_ROWS;
	var SOURCE_FORMAT_ORIGINAL = _sourceType.SOURCE_FORMAT_ORIGINAL;
	var SOURCE_FORMAT_OBJECT_ROWS = _sourceType.SOURCE_FORMAT_OBJECT_ROWS;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// TODO
	// ??? refactor? check the outer usage of data provider.
	// merge with defaultDimValueGetter?
	
	/**
	 * If normal array used, mutable chunk size is supported.
	 * If typed array used, chunk size must be fixed.
	 */
	function DefaultDataProvider(source, dimSize) {
	  if (!Source.isInstance(source)) {
	    source = Source.seriesDataToSource(source);
	  }
	
	  this._source = source;
	  var data = this._data = source.data;
	  var sourceFormat = source.sourceFormat; // Typed array. TODO IE10+?
	
	  if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {
	    this._offset = 0;
	    this._dimSize = dimSize;
	    this._data = data;
	  }
	
	  var methods = providerMethods[sourceFormat === SOURCE_FORMAT_ARRAY_ROWS ? sourceFormat + '_' + source.seriesLayoutBy : sourceFormat];
	  extend(this, methods);
	}
	
	var providerProto = DefaultDataProvider.prototype; // If data is pure without style configuration
	
	providerProto.pure = false; // If data is persistent and will not be released after use.
	
	providerProto.persistent = true; // ???! FIXME legacy data provider do not has method getSource
	
	providerProto.getSource = function () {
	  return this._source;
	};
	
	var providerMethods = {
	  'arrayRows_column': {
	    pure: true,
	    count: function () {
	      return Math.max(0, this._data.length - this._source.startIndex);
	    },
	    getItem: function (idx) {
	      return this._data[idx + this._source.startIndex];
	    },
	    appendData: appendDataSimply
	  },
	  'arrayRows_row': {
	    pure: true,
	    count: function () {
	      var row = this._data[0];
	      return row ? Math.max(0, row.length - this._source.startIndex) : 0;
	    },
	    getItem: function (idx) {
	      idx += this._source.startIndex;
	      var item = [];
	      var data = this._data;
	
	      for (var i = 0; i < data.length; i++) {
	        var row = data[i];
	        item.push(row ? row[idx] : null);
	      }
	
	      return item;
	    },
	    appendData: function () {
	      throw new Error('Do not support appendData when set seriesLayoutBy: "row".');
	    }
	  },
	  'objectRows': {
	    pure: true,
	    count: countSimply,
	    getItem: getItemSimply,
	    appendData: appendDataSimply
	  },
	  'keyedColumns': {
	    pure: true,
	    count: function () {
	      var dimName = this._source.dimensionsDefine[0].name;
	      var col = this._data[dimName];
	      return col ? col.length : 0;
	    },
	    getItem: function (idx) {
	      var item = [];
	      var dims = this._source.dimensionsDefine;
	
	      for (var i = 0; i < dims.length; i++) {
	        var col = this._data[dims[i].name];
	        item.push(col ? col[idx] : null);
	      }
	
	      return item;
	    },
	    appendData: function (newData) {
	      var data = this._data;
	      each(newData, function (newCol, key) {
	        var oldCol = data[key] || (data[key] = []);
	
	        for (var i = 0; i < (newCol || []).length; i++) {
	          oldCol.push(newCol[i]);
	        }
	      });
	    }
	  },
	  'original': {
	    count: countSimply,
	    getItem: getItemSimply,
	    appendData: appendDataSimply
	  },
	  'typedArray': {
	    persistent: false,
	    pure: true,
	    count: function () {
	      return this._data ? this._data.length / this._dimSize : 0;
	    },
	    getItem: function (idx, out) {
	      idx = idx - this._offset;
	      out = out || [];
	      var offset = this._dimSize * idx;
	
	      for (var i = 0; i < this._dimSize; i++) {
	        out[i] = this._data[offset + i];
	      }
	
	      return out;
	    },
	    appendData: function (newData) {
	      this._data = newData;
	    },
	    // Clean self if data is already used.
	    clean: function () {
	      // PENDING
	      this._offset += this.count();
	      this._data = null;
	    }
	  }
	};
	
	function countSimply() {
	  return this._data.length;
	}
	
	function getItemSimply(idx) {
	  return this._data[idx];
	}
	
	function appendDataSimply(newData) {
	  for (var i = 0; i < newData.length; i++) {
	    this._data.push(newData[i]);
	  }
	}
	
	var rawValueGetters = {
	  arrayRows: getRawValueSimply,
	  objectRows: function (dataItem, dataIndex, dimIndex, dimName) {
	    return dimIndex != null ? dataItem[dimName] : dataItem;
	  },
	  keyedColumns: getRawValueSimply,
	  original: function (dataItem, dataIndex, dimIndex, dimName) {
	    // FIXME
	    // In some case (markpoint in geo (geo-map.html)), dataItem
	    // is {coord: [...]}
	    var value = getDataItemValue(dataItem);
	    return dimIndex == null || !(value instanceof Array) ? value : value[dimIndex];
	  },
	  typedArray: getRawValueSimply
	};
	
	function getRawValueSimply(dataItem, dataIndex, dimIndex, dimName) {
	  return dimIndex != null ? dataItem[dimIndex] : dataItem;
	}
	
	var defaultDimValueGetters = {
	  arrayRows: getDimValueSimply,
	  objectRows: function (dataItem, dimName, dataIndex, dimIndex) {
	    return converDataValue(dataItem[dimName], this._dimensionInfos[dimName]);
	  },
	  keyedColumns: getDimValueSimply,
	  original: function (dataItem, dimName, dataIndex, dimIndex) {
	    // Performance sensitive, do not use modelUtil.getDataItemValue.
	    // If dataItem is an plain object with no value field, the var `value`
	    // will be assigned with the object, but it will be tread correctly
	    // in the `convertDataValue`.
	    var value = dataItem && (dataItem.value == null ? dataItem : dataItem.value); // If any dataItem is like { value: 10 }
	
	    if (!this._rawData.pure && isDataItemOption(dataItem)) {
	      this.hasItemOption = true;
	    }
	
	    return converDataValue(value instanceof Array ? value[dimIndex] // If value is a single number or something else not array.
	    : value, this._dimensionInfos[dimName]);
	  },
	  typedArray: function (dataItem, dimName, dataIndex, dimIndex) {
	    return dataItem[dimIndex];
	  }
	};
	
	function getDimValueSimply(dataItem, dimName, dataIndex, dimIndex) {
	  return converDataValue(dataItem[dimIndex], this._dimensionInfos[dimName]);
	}
	/**
	 * This helper method convert value in data.
	 * @param {string|number|Date} value
	 * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.
	 *        If "dimInfo.ordinalParseAndSave", ordinal value can be parsed.
	 */
	
	
	function converDataValue(value, dimInfo) {
	  // Performance sensitive.
	  var dimType = dimInfo && dimInfo.type;
	
	  if (dimType === 'ordinal') {
	    // If given value is a category string
	    var ordinalMeta = dimInfo && dimInfo.ordinalMeta;
	    return ordinalMeta ? ordinalMeta.parseAndCollect(value) : value;
	  }
	
	  if (dimType === 'time' // spead up when using timestamp
	  && typeof value !== 'number' && value != null && value !== '-') {
	    value = +parseDate(value);
	  } // dimType defaults 'number'.
	  // If dimType is not ordinal and value is null or undefined or NaN or '-',
	  // parse to NaN.
	
	
	  return value == null || value === '' ? NaN // If string (like '-'), using '+' parse to NaN
	  // If object, also parse to NaN
	  : +value;
	} // ??? FIXME can these logic be more neat: getRawValue, getRawDataItem,
	// Consider persistent.
	// Caution: why use raw value to display on label or tooltip?
	// A reason is to avoid format. For example time value we do not know
	// how to format is expected. More over, if stack is used, calculated
	// value may be 0.91000000001, which have brings trouble to display.
	// TODO: consider how to treat null/undefined/NaN when display?
	
	/**
	 * @param {module:echarts/data/List} data
	 * @param {number} dataIndex
	 * @param {string|number} [dim] dimName or dimIndex
	 * @return {Array.<number>|string|number} can be null/undefined.
	 */
	
	
	function retrieveRawValue(data, dataIndex, dim) {
	  if (!data) {
	    return;
	  } // Consider data may be not persistent.
	
	
	  var dataItem = data.getRawDataItem(dataIndex);
	
	  if (dataItem == null) {
	    return;
	  }
	
	  var sourceFormat = data.getProvider().getSource().sourceFormat;
	  var dimName;
	  var dimIndex;
	  var dimInfo = data.getDimensionInfo(dim);
	
	  if (dimInfo) {
	    dimName = dimInfo.name;
	    dimIndex = dimInfo.index;
	  }
	
	  return rawValueGetters[sourceFormat](dataItem, dataIndex, dimIndex, dimName);
	}
	/**
	 * Compatible with some cases (in pie, map) like:
	 * data: [{name: 'xx', value: 5, selected: true}, ...]
	 * where only sourceFormat is 'original' and 'objectRows' supported.
	 *
	 * ??? TODO
	 * Supported detail options in data item when using 'arrayRows'.
	 *
	 * @param {module:echarts/data/List} data
	 * @param {number} dataIndex
	 * @param {string} attr like 'selected'
	 */
	
	
	function retrieveRawAttr(data, dataIndex, attr) {
	  if (!data) {
	    return;
	  }
	
	  var sourceFormat = data.getProvider().getSource().sourceFormat;
	
	  if (sourceFormat !== SOURCE_FORMAT_ORIGINAL && sourceFormat !== SOURCE_FORMAT_OBJECT_ROWS) {
	    return;
	  }
	
	  var dataItem = data.getRawDataItem(dataIndex);
	
	  if (sourceFormat === SOURCE_FORMAT_ORIGINAL && !isObject(dataItem)) {
	    dataItem = null;
	  }
	
	  if (dataItem) {
	    return dataItem[attr];
	  }
	}
	
	exports.DefaultDataProvider = DefaultDataProvider;
	exports.defaultDimValueGetters = defaultDimValueGetters;
	exports.retrieveRawValue = retrieveRawValue;
	exports.retrieveRawAttr = retrieveRawAttr;

/***/ }),
/* 1031 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(931);
	
	var assert = _util.assert;
	var isArray = _util.isArray;
	
	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * @param {Object} define
	 * @return See the return of `createTask`.
	 */
	function createTask(define) {
	  return new Task(define);
	}
	/**
	 * @constructor
	 * @param {Object} define
	 * @param {Function} define.reset Custom reset
	 * @param {Function} [define.plan] Returns 'reset' indicate reset immediately.
	 * @param {Function} [define.count] count is used to determin data task.
	 * @param {Function} [define.onDirty] count is used to determin data task.
	 */
	
	
	function Task(define) {
	  define = define || {};
	  this._reset = define.reset;
	  this._plan = define.plan;
	  this._count = define.count;
	  this._onDirty = define.onDirty;
	  this._dirty = true; // Context must be specified implicitly, to
	  // avoid miss update context when model changed.
	
	  this.context;
	}
	
	var taskProto = Task.prototype;
	/**
	 * @param {Object} performArgs
	 * @param {number} [performArgs.step] Specified step.
	 * @param {number} [performArgs.skip] Skip customer perform call.
	 * @param {number} [performArgs.modBy] Sampling window size.
	 * @param {number} [performArgs.modDataCount] Sampling count.
	 */
	
	taskProto.perform = function (performArgs) {
	  var upTask = this._upstream;
	  var skip = performArgs && performArgs.skip; // TODO some refactor.
	  // Pull data. Must pull data each time, because context.data
	  // may be updated by Series.setData.
	
	  if (this._dirty && upTask) {
	    var context = this.context;
	    context.data = context.outputData = upTask.context.outputData;
	  }
	
	  if (this.__pipeline) {
	    this.__pipeline.currentTask = this;
	  }
	
	  var planResult;
	
	  if (this._plan && !skip) {
	    planResult = this._plan(this.context);
	  } // Support sharding by mod, which changes the render sequence and makes the rendered graphic
	  // elements uniformed distributed when progress, especially when moving or zooming.
	
	
	  var lastModBy = normalizeModBy(this._modBy);
	  var lastModDataCount = this._modDataCount || 0;
	  var modBy = normalizeModBy(performArgs && performArgs.modBy);
	  var modDataCount = performArgs && performArgs.modDataCount || 0;
	
	  if (lastModBy !== modBy || lastModDataCount !== modDataCount) {
	    planResult = 'reset';
	  }
	
	  function normalizeModBy(val) {
	    !(val >= 1) && (val = 1); // jshint ignore:line
	
	    return val;
	  }
	
	  var forceFirstProgress;
	
	  if (this._dirty || planResult === 'reset') {
	    this._dirty = false;
	    forceFirstProgress = reset(this, skip);
	  }
	
	  this._modBy = modBy;
	  this._modDataCount = modDataCount;
	  var step = performArgs && performArgs.step;
	
	  if (upTask) {
	    this._dueEnd = upTask._outputDueEnd;
	  } // DataTask or overallTask
	  else {
	      this._dueEnd = this._count ? this._count(this.context) : Infinity;
	    } // Note: Stubs, that its host overall task let it has progress, has progress.
	  // If no progress, pass index from upstream to downstream each time plan called.
	
	
	  if (this._progress) {
	    var start = this._dueIndex;
	    var end = Math.min(step != null ? this._dueIndex + step : Infinity, this._dueEnd);
	
	    if (!skip && (forceFirstProgress || start < end)) {
	      var progress = this._progress;
	
	      if (isArray(progress)) {
	        for (var i = 0; i < progress.length; i++) {
	          doProgress(this, progress[i], start, end, modBy, modDataCount);
	        }
	      } else {
	        doProgress(this, progress, start, end, modBy, modDataCount);
	      }
	    }
	
	    this._dueIndex = end; // If no `outputDueEnd`, assume that output data and
	    // input data is the same, so use `dueIndex` as `outputDueEnd`.
	
	    var outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : end;
	    this._outputDueEnd = outputDueEnd;
	  } else {
	    // (1) Some overall task has no progress.
	    // (2) Stubs, that its host overall task do not let it has progress, has no progress.
	    // This should always be performed so it can be passed to downstream.
	    this._dueIndex = this._outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : this._dueEnd;
	  }
	
	  return this.unfinished();
	};
	
	var iterator = function () {
	  var end;
	  var current;
	  var modBy;
	  var modDataCount;
	  var winCount;
	  var it = {
	    reset: function (s, e, sStep, sCount) {
	      current = s;
	      end = e;
	      modBy = sStep;
	      modDataCount = sCount;
	      winCount = Math.ceil(modDataCount / modBy);
	      it.next = modBy > 1 && modDataCount > 0 ? modNext : sequentialNext;
	    }
	  };
	  return it;
	
	  function sequentialNext() {
	    return current < end ? current++ : null;
	  }
	
	  function modNext() {
	    var dataIndex = current % winCount * modBy + Math.ceil(current / winCount);
	    var result = current >= end ? null : dataIndex < modDataCount ? dataIndex // If modDataCount is smaller than data.count() (consider `appendData` case),
	    // Use normal linear rendering mode.
	    : current;
	    current++;
	    return result;
	  }
	}();
	
	taskProto.dirty = function () {
	  this._dirty = true;
	  this._onDirty && this._onDirty(this.context);
	};
	
	function doProgress(taskIns, progress, start, end, modBy, modDataCount) {
	  iterator.reset(start, end, modBy, modDataCount);
	  taskIns._callingProgress = progress;
	
	  taskIns._callingProgress({
	    start: start,
	    end: end,
	    count: end - start,
	    next: iterator.next
	  }, taskIns.context);
	}
	
	function reset(taskIns, skip) {
	  taskIns._dueIndex = taskIns._outputDueEnd = taskIns._dueEnd = 0;
	  taskIns._settedOutputEnd = null;
	  var progress;
	  var forceFirstProgress;
	
	  if (!skip && taskIns._reset) {
	    progress = taskIns._reset(taskIns.context);
	
	    if (progress && progress.progress) {
	      forceFirstProgress = progress.forceFirstProgress;
	      progress = progress.progress;
	    } // To simplify no progress checking, array must has item.
	
	
	    if (isArray(progress) && !progress.length) {
	      progress = null;
	    }
	  }
	
	  taskIns._progress = progress;
	  taskIns._modBy = taskIns._modDataCount = null;
	  var downstream = taskIns._downstream;
	  downstream && downstream.dirty();
	  return forceFirstProgress;
	}
	/**
	 * @return {boolean}
	 */
	
	
	taskProto.unfinished = function () {
	  return this._progress && this._dueIndex < this._dueEnd;
	};
	/**
	 * @param {Object} downTask The downstream task.
	 * @return {Object} The downstream task.
	 */
	
	
	taskProto.pipe = function (downTask) {
	  // If already downstream, do not dirty downTask.
	  if (this._downstream !== downTask || this._dirty) {
	    this._downstream = downTask;
	    downTask._upstream = this;
	    downTask.dirty();
	  }
	};
	
	taskProto.dispose = function () {
	  if (this._disposed) {
	    return;
	  }
	
	  this._upstream && (this._upstream._downstream = null);
	  this._downstream && (this._downstream._upstream = null);
	  this._dirty = false;
	  this._disposed = true;
	};
	
	taskProto.getUpstream = function () {
	  return this._upstream;
	};
	
	taskProto.getDownstream = function () {
	  return this._downstream;
	};
	
	taskProto.setOutputEnd = function (end) {
	  // This only happend in dataTask, dataZoom, map, currently.
	  // where dataZoom do not set end each time, but only set
	  // when reset. So we should record the setted end, in case
	  // that the stub of dataZoom perform again and earse the
	  // setted end by upstream.
	  this._outputDueEnd = this._settedOutputEnd = end;
	}; ///////////////////////////////////////////////////////////
	// For stream debug (Should be commented out after used!)
	// Usage: printTask(this, 'begin');
	// Usage: printTask(this, null, {someExtraProp});
	// function printTask(task, prefix, extra) {
	//     window.ecTaskUID == null && (window.ecTaskUID = 0);
	//     task.uidDebug == null && (task.uidDebug = `task_${window.ecTaskUID++}`);
	//     task.agent && task.agent.uidDebug == null && (task.agent.uidDebug = `task_${window.ecTaskUID++}`);
	//     var props = [];
	//     if (task.__pipeline) {
	//         var val = `${task.__idxInPipeline}/${task.__pipeline.tail.__idxInPipeline} ${task.agent ? '(stub)' : ''}`;
	//         props.push({text: 'idx', value: val});
	//     } else {
	//         var stubCount = 0;
	//         task.agentStubMap.each(() => stubCount++);
	//         props.push({text: 'idx', value: `overall (stubs: ${stubCount})`});
	//     }
	//     props.push({text: 'uid', value: task.uidDebug});
	//     if (task.__pipeline) {
	//         props.push({text: 'pid', value: task.__pipeline.id});
	//         task.agent && props.push(
	//             {text: 'stubFor', value: task.agent.uidDebug}
	//         );
	//     }
	//     props.push(
	//         {text: 'dirty', value: task._dirty},
	//         {text: 'dueIndex', value: task._dueIndex},
	//         {text: 'dueEnd', value: task._dueEnd},
	//         {text: 'outputDueEnd', value: task._outputDueEnd}
	//     );
	//     if (extra) {
	//         Object.keys(extra).forEach(key => {
	//             props.push({text: key, value: extra[key]});
	//         });
	//     }
	//     var args = ['color: blue'];
	//     var msg = `%c[${prefix || 'T'}] %c` + props.map(item => (
	//         args.push('color: black', 'color: red'),
	//         `${item.text}: %c${item.value}`
	//     )).join('%c, ');
	//     console.log.apply(console, [msg].concat(args));
	//     // console.log(this);
	// }
	
	
	exports.createTask = createTask;

/***/ }),
/* 1032 */
/***/ (function(module, exports, __webpack_require__) {

	var Group = __webpack_require__(937);
	
	var componentUtil = __webpack_require__(1011);
	
	var clazzUtil = __webpack_require__(971);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var Component = function () {
	  /**
	   * @type {module:zrender/container/Group}
	   * @readOnly
	   */
	  this.group = new Group();
	  /**
	   * @type {string}
	   * @readOnly
	   */
	
	  this.uid = componentUtil.getUID('viewComponent');
	};
	
	Component.prototype = {
	  constructor: Component,
	  init: function (ecModel, api) {},
	  render: function (componentModel, ecModel, api, payload) {},
	  dispose: function () {}
	};
	var componentProto = Component.prototype;
	
	componentProto.updateView = componentProto.updateLayout = componentProto.updateVisual = function (seriesModel, ecModel, api, payload) {// Do nothing;
	}; // Enable Component.extend.
	
	
	clazzUtil.enableClassExtend(Component); // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	
	clazzUtil.enableClassManagement(Component, {
	  registerWhenExtend: true
	});
	var _default = Component;
	module.exports = _default;

/***/ }),
/* 1033 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(931);
	
	var each = _util.each;
	
	var Group = __webpack_require__(937);
	
	var componentUtil = __webpack_require__(1011);
	
	var clazzUtil = __webpack_require__(971);
	
	var modelUtil = __webpack_require__(969);
	
	var _task = __webpack_require__(1031);
	
	var createTask = _task.createTask;
	
	var createRenderPlanner = __webpack_require__(1034);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var inner = modelUtil.makeInner();
	var renderPlanner = createRenderPlanner();
	
	function Chart() {
	  /**
	   * @type {module:zrender/container/Group}
	   * @readOnly
	   */
	  this.group = new Group();
	  /**
	   * @type {string}
	   * @readOnly
	   */
	
	  this.uid = componentUtil.getUID('viewChart');
	  this.renderTask = createTask({
	    plan: renderTaskPlan,
	    reset: renderTaskReset
	  });
	  this.renderTask.context = {
	    view: this
	  };
	}
	
	Chart.prototype = {
	  type: 'chart',
	
	  /**
	   * Init the chart.
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   */
	  init: function (ecModel, api) {},
	
	  /**
	   * Render the chart.
	   * @param  {module:echarts/model/Series} seriesModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @param  {Object} payload
	   */
	  render: function (seriesModel, ecModel, api, payload) {},
	
	  /**
	   * Highlight series or specified data item.
	   * @param  {module:echarts/model/Series} seriesModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @param  {Object} payload
	   */
	  highlight: function (seriesModel, ecModel, api, payload) {
	    toggleHighlight(seriesModel.getData(), payload, 'emphasis');
	  },
	
	  /**
	   * Downplay series or specified data item.
	   * @param  {module:echarts/model/Series} seriesModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @param  {Object} payload
	   */
	  downplay: function (seriesModel, ecModel, api, payload) {
	    toggleHighlight(seriesModel.getData(), payload, 'normal');
	  },
	
	  /**
	   * Remove self.
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   */
	  remove: function (ecModel, api) {
	    this.group.removeAll();
	  },
	
	  /**
	   * Dispose self.
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   */
	  dispose: function () {},
	
	  /**
	   * Rendering preparation in progressive mode.
	   * @param  {module:echarts/model/Series} seriesModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @param  {Object} payload
	   */
	  incrementalPrepareRender: null,
	
	  /**
	   * Render in progressive mode.
	   * @param  {module:echarts/model/Series} seriesModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @param  {Object} payload
	   */
	  incrementalRender: null,
	
	  /**
	   * Update transform directly.
	   * @param  {module:echarts/model/Series} seriesModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @param  {Object} payload
	   * @return {Object} {update: true}
	   */
	  updateTransform: null
	  /**
	   * The view contains the given point.
	   * @interface
	   * @param {Array.<number>} point
	   * @return {boolean}
	   */
	  // containPoint: function () {}
	
	};
	var chartProto = Chart.prototype;
	
	chartProto.updateView = chartProto.updateLayout = chartProto.updateVisual = function (seriesModel, ecModel, api, payload) {
	  this.render(seriesModel, ecModel, api, payload);
	};
	/**
	 * Set state of single element
	 * @param  {module:zrender/Element} el
	 * @param  {string} state
	 */
	
	
	function elSetState(el, state) {
	  if (el) {
	    el.trigger(state);
	
	    if (el.type === 'group') {
	      for (var i = 0; i < el.childCount(); i++) {
	        elSetState(el.childAt(i), state);
	      }
	    }
	  }
	}
	/**
	 * @param  {module:echarts/data/List} data
	 * @param  {Object} payload
	 * @param  {string} state 'normal'|'emphasis'
	 */
	
	
	function toggleHighlight(data, payload, state) {
	  var dataIndex = modelUtil.queryDataIndex(data, payload);
	
	  if (dataIndex != null) {
	    each(modelUtil.normalizeToArray(dataIndex), function (dataIdx) {
	      elSetState(data.getItemGraphicEl(dataIdx), state);
	    });
	  } else {
	    data.eachItemGraphicEl(function (el) {
	      elSetState(el, state);
	    });
	  }
	} // Enable Chart.extend.
	
	
	clazzUtil.enableClassExtend(Chart, ['dispose']); // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	
	clazzUtil.enableClassManagement(Chart, {
	  registerWhenExtend: true
	});
	
	Chart.markUpdateMethod = function (payload, methodName) {
	  inner(payload).updateMethod = methodName;
	};
	
	function renderTaskPlan(context) {
	  return renderPlanner(context.model);
	}
	
	function renderTaskReset(context) {
	  var seriesModel = context.model;
	  var ecModel = context.ecModel;
	  var api = context.api;
	  var payload = context.payload; // ???! remove updateView updateVisual
	
	  var progressiveRender = seriesModel.pipelineContext.progressiveRender;
	  var view = context.view;
	  var updateMethod = payload && inner(payload).updateMethod;
	  var methodName = progressiveRender ? 'incrementalPrepareRender' : updateMethod && view[updateMethod] ? updateMethod // `appendData` is also supported when data amount
	  // is less than progressive threshold.
	  : 'render';
	
	  if (methodName !== 'render') {
	    view[methodName](seriesModel, ecModel, api, payload);
	  }
	
	  return progressMethodMap[methodName];
	}
	
	var progressMethodMap = {
	  incrementalPrepareRender: {
	    progress: function (params, context) {
	      context.view.incrementalRender(params, context.model, context.ecModel, context.api, context.payload);
	    }
	  },
	  render: {
	    // Put view.render in `progress` to support appendData. But in this case
	    // view.render should not be called in reset, otherwise it will be called
	    // twise. Use `forceFirstProgress` to make sure that view.render is called
	    // in any cases.
	    forceFirstProgress: true,
	    progress: function (params, context) {
	      context.view.render(context.model, context.ecModel, context.api, context.payload);
	    }
	  }
	};
	var _default = Chart;
	module.exports = _default;

/***/ }),
/* 1034 */
/***/ (function(module, exports, __webpack_require__) {

	var _model = __webpack_require__(969);
	
	var makeInner = _model.makeInner;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * @return {string} If large mode changed, return string 'reset';
	 */
	function _default() {
	  var inner = makeInner();
	  return function (seriesModel) {
	    var fields = inner(seriesModel);
	    var pipelineContext = seriesModel.pipelineContext;
	    var originalLarge = fields.large;
	    var originalProgressive = fields.progressiveRender;
	    var large = fields.large = pipelineContext.large;
	    var progressive = fields.progressiveRender = pipelineContext.progressiveRender;
	    return !!(originalLarge ^ large || originalProgressive ^ progressive) && 'reset';
	  };
	}
	
	module.exports = _default;

/***/ }),
/* 1035 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var ORIGIN_METHOD = '\0__throttleOriginMethod';
	var RATE = '\0__throttleRate';
	var THROTTLE_TYPE = '\0__throttleType';
	/**
	 * @public
	 * @param {(Function)} fn
	 * @param {number} [delay=0] Unit: ms.
	 * @param {boolean} [debounce=false]
	 *        true: If call interval less than `delay`, only the last call works.
	 *        false: If call interval less than `delay, call works on fixed rate.
	 * @return {(Function)} throttled fn.
	 */
	
	function throttle(fn, delay, debounce) {
	  var currCall;
	  var lastCall = 0;
	  var lastExec = 0;
	  var timer = null;
	  var diff;
	  var scope;
	  var args;
	  var debounceNextCall;
	  delay = delay || 0;
	
	  function exec() {
	    lastExec = new Date().getTime();
	    timer = null;
	    fn.apply(scope, args || []);
	  }
	
	  var cb = function () {
	    currCall = new Date().getTime();
	    scope = this;
	    args = arguments;
	    var thisDelay = debounceNextCall || delay;
	    var thisDebounce = debounceNextCall || debounce;
	    debounceNextCall = null;
	    diff = currCall - (thisDebounce ? lastCall : lastExec) - thisDelay;
	    clearTimeout(timer); // Here we should make sure that: the `exec` SHOULD NOT be called later
	    // than a new call of `cb`, that is, preserving the command order. Consider
	    // calculating "scale rate" when roaming as an example. When a call of `cb`
	    // happens, either the `exec` is called dierectly, or the call is delayed.
	    // But the delayed call should never be later than next call of `cb`. Under
	    // this assurance, we can simply update view state each time `dispatchAction`
	    // triggered by user roaming, but not need to add extra code to avoid the
	    // state being "rolled-back".
	
	    if (thisDebounce) {
	      timer = setTimeout(exec, thisDelay);
	    } else {
	      if (diff >= 0) {
	        exec();
	      } else {
	        timer = setTimeout(exec, -diff);
	      }
	    }
	
	    lastCall = currCall;
	  };
	  /**
	   * Clear throttle.
	   * @public
	   */
	
	
	  cb.clear = function () {
	    if (timer) {
	      clearTimeout(timer);
	      timer = null;
	    }
	  };
	  /**
	   * Enable debounce once.
	   */
	
	
	  cb.debounceNextCall = function (debounceDelay) {
	    debounceNextCall = debounceDelay;
	  };
	
	  return cb;
	}
	/**
	 * Create throttle method or update throttle rate.
	 *
	 * @example
	 * ComponentView.prototype.render = function () {
	 *     ...
	 *     throttle.createOrUpdate(
	 *         this,
	 *         '_dispatchAction',
	 *         this.model.get('throttle'),
	 *         'fixRate'
	 *     );
	 * };
	 * ComponentView.prototype.remove = function () {
	 *     throttle.clear(this, '_dispatchAction');
	 * };
	 * ComponentView.prototype.dispose = function () {
	 *     throttle.clear(this, '_dispatchAction');
	 * };
	 *
	 * @public
	 * @param {Object} obj
	 * @param {string} fnAttr
	 * @param {number} [rate]
	 * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'
	 * @return {Function} throttled function.
	 */
	
	
	function createOrUpdate(obj, fnAttr, rate, throttleType) {
	  var fn = obj[fnAttr];
	
	  if (!fn) {
	    return;
	  }
	
	  var originFn = fn[ORIGIN_METHOD] || fn;
	  var lastThrottleType = fn[THROTTLE_TYPE];
	  var lastRate = fn[RATE];
	
	  if (lastRate !== rate || lastThrottleType !== throttleType) {
	    if (rate == null || !throttleType) {
	      return obj[fnAttr] = originFn;
	    }
	
	    fn = obj[fnAttr] = throttle(originFn, rate, throttleType === 'debounce');
	    fn[ORIGIN_METHOD] = originFn;
	    fn[THROTTLE_TYPE] = throttleType;
	    fn[RATE] = rate;
	  }
	
	  return fn;
	}
	/**
	 * Clear throttle. Example see throttle.createOrUpdate.
	 *
	 * @public
	 * @param {Object} obj
	 * @param {string} fnAttr
	 */
	
	
	function clear(obj, fnAttr) {
	  var fn = obj[fnAttr];
	
	  if (fn && fn[ORIGIN_METHOD]) {
	    obj[fnAttr] = fn[ORIGIN_METHOD];
	  }
	}
	
	exports.throttle = throttle;
	exports.createOrUpdate = createOrUpdate;
	exports.clear = clear;

/***/ }),
/* 1036 */
/***/ (function(module, exports, __webpack_require__) {

	var Gradient = __webpack_require__(1006);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = {
	  createOnAllSeries: true,
	  performRawSeries: true,
	  reset: function (seriesModel, ecModel) {
	    var data = seriesModel.getData();
	    var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.color').split('.');
	    var color = seriesModel.get(colorAccessPath) // Set in itemStyle
	    || seriesModel.getColorFromPalette( // TODO series count changed.
	    seriesModel.name, null, ecModel.getSeriesCount()); // Default color
	    // FIXME Set color function or use the platte color
	
	    data.setVisual('color', color); // Only visible series has each data be visual encoded
	
	    if (!ecModel.isSeriesFiltered(seriesModel)) {
	      if (typeof color === 'function' && !(color instanceof Gradient)) {
	        data.each(function (idx) {
	          data.setItemVisual(idx, 'color', color(seriesModel.getDataParams(idx)));
	        });
	      } // itemStyle in each data item
	
	
	      var dataEach = function (data, idx) {
	        var itemModel = data.getItemModel(idx);
	        var color = itemModel.get(colorAccessPath, true);
	
	        if (color != null) {
	          data.setItemVisual(idx, 'color', color);
	        }
	      };
	
	      return {
	        dataEach: data.hasItemOption ? dataEach : null
	      };
	    }
	  }
	};
	module.exports = _default;

/***/ }),
/* 1037 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var lang = __webpack_require__(1038);
	
	var _dataProvider = __webpack_require__(1030);
	
	var retrieveRawValue = _dataProvider.retrieveRawValue;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function _default(dom, ecModel) {
	  var ariaModel = ecModel.getModel('aria');
	
	  if (!ariaModel.get('show')) {
	    return;
	  } else if (ariaModel.get('description')) {
	    dom.setAttribute('aria-label', ariaModel.get('description'));
	    return;
	  }
	
	  var seriesCnt = 0;
	  ecModel.eachSeries(function (seriesModel, idx) {
	    ++seriesCnt;
	  }, this);
	  var maxDataCnt = ariaModel.get('data.maxCount') || 10;
	  var maxSeriesCnt = ariaModel.get('series.maxCount') || 10;
	  var displaySeriesCnt = Math.min(seriesCnt, maxSeriesCnt);
	  var ariaLabel;
	
	  if (seriesCnt < 1) {
	    // No series, no aria label
	    return;
	  } else {
	    var title = getTitle();
	
	    if (title) {
	      ariaLabel = replace(getConfig('general.withTitle'), {
	        title: title
	      });
	    } else {
	      ariaLabel = getConfig('general.withoutTitle');
	    }
	
	    var seriesLabels = [];
	    var prefix = seriesCnt > 1 ? 'series.multiple.prefix' : 'series.single.prefix';
	    ariaLabel += replace(getConfig(prefix), {
	      seriesCount: seriesCnt
	    });
	    ecModel.eachSeries(function (seriesModel, idx) {
	      if (idx < displaySeriesCnt) {
	        var seriesLabel;
	        var seriesName = seriesModel.get('name');
	        var seriesTpl = 'series.' + (seriesCnt > 1 ? 'multiple' : 'single') + '.';
	        seriesLabel = getConfig(seriesName ? seriesTpl + 'withName' : seriesTpl + 'withoutName');
	        seriesLabel = replace(seriesLabel, {
	          seriesId: seriesModel.seriesIndex,
	          seriesName: seriesModel.get('name'),
	          seriesType: getSeriesTypeName(seriesModel.subType)
	        });
	        var data = seriesModel.getData();
	        window.data = data;
	
	        if (data.count() > maxDataCnt) {
	          // Show part of data
	          seriesLabel += replace(getConfig('data.partialData'), {
	            displayCnt: maxDataCnt
	          });
	        } else {
	          seriesLabel += getConfig('data.allData');
	        }
	
	        var dataLabels = [];
	
	        for (var i = 0; i < data.count(); i++) {
	          if (i < maxDataCnt) {
	            var name = data.getName(i);
	            var value = retrieveRawValue(data, i);
	            dataLabels.push(replace(name ? getConfig('data.withName') : getConfig('data.withoutName'), {
	              name: name,
	              value: value
	            }));
	          }
	        }
	
	        seriesLabel += dataLabels.join(getConfig('data.separator.middle')) + getConfig('data.separator.end');
	        seriesLabels.push(seriesLabel);
	      }
	    });
	    ariaLabel += seriesLabels.join(getConfig('series.multiple.separator.middle')) + getConfig('series.multiple.separator.end');
	    dom.setAttribute('aria-label', ariaLabel);
	  }
	
	  function replace(str, keyValues) {
	    if (typeof str !== 'string') {
	      return str;
	    }
	
	    var result = str;
	    zrUtil.each(keyValues, function (value, key) {
	      result = result.replace(new RegExp('\\{\\s*' + key + '\\s*\\}', 'g'), value);
	    });
	    return result;
	  }
	
	  function getConfig(path) {
	    var userConfig = ariaModel.get(path);
	
	    if (userConfig == null) {
	      var pathArr = path.split('.');
	      var result = lang.aria;
	
	      for (var i = 0; i < pathArr.length; ++i) {
	        result = result[pathArr[i]];
	      }
	
	      return result;
	    } else {
	      return userConfig;
	    }
	  }
	
	  function getTitle() {
	    var title = ecModel.getModel('title').option;
	
	    if (title && title.length) {
	      title = title[0];
	    }
	
	    return title && title.text;
	  }
	
	  function getSeriesTypeName(type) {
	    return lang.series.typeNames[type] || '自定义图';
	  }
	}
	
	module.exports = _default;

/***/ }),
/* 1038 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = {
	  toolbox: {
	    brush: {
	      title: {
	        rect: '矩形选择',
	        polygon: '圈选',
	        lineX: '横向选择',
	        lineY: '纵向选择',
	        keep: '保持选择',
	        clear: '清除选择'
	      }
	    },
	    dataView: {
	      title: '数据视图',
	      lang: ['数据视图', '关闭', '刷新']
	    },
	    dataZoom: {
	      title: {
	        zoom: '区域缩放',
	        back: '区域缩放还原'
	      }
	    },
	    magicType: {
	      title: {
	        line: '切换为折线图',
	        bar: '切换为柱状图',
	        stack: '切换为堆叠',
	        tiled: '切换为平铺'
	      }
	    },
	    restore: {
	      title: '还原'
	    },
	    saveAsImage: {
	      title: '保存为图片',
	      lang: ['右键另存为图片']
	    }
	  },
	  series: {
	    typeNames: {
	      pie: '饼图',
	      bar: '柱状图',
	      line: '折线图',
	      scatter: '散点图',
	      effectScatter: '涟漪散点图',
	      radar: '雷达图',
	      tree: '树图',
	      treemap: '矩形树图',
	      boxplot: '箱型图',
	      candlestick: 'K线图',
	      k: 'K线图',
	      heatmap: '热力图',
	      map: '地图',
	      parallel: '平行坐标图',
	      lines: '线图',
	      graph: '关系图',
	      sankey: '桑基图',
	      funnel: '漏斗图',
	      gauge: '仪表盘图',
	      pictorialBar: '象形柱图',
	      themeRiver: '主题河流图',
	      sunburst: '旭日图'
	    }
	  },
	  aria: {
	    general: {
	      withTitle: '这是一个关于“{title}”的图表。',
	      withoutTitle: '这是一个图表，'
	    },
	    series: {
	      single: {
	        prefix: '',
	        withName: '图表类型是{seriesType}，表示{seriesName}。',
	        withoutName: '图表类型是{seriesType}。'
	      },
	      multiple: {
	        prefix: '它由{seriesCount}个图表系列组成。',
	        withName: '第{seriesId}个系列是一个表示{seriesName}的{seriesType}，',
	        withoutName: '第{seriesId}个系列是一个{seriesType}，',
	        separator: {
	          middle: '；',
	          end: '。'
	        }
	      }
	    },
	    data: {
	      allData: '其数据是——',
	      partialData: '其中，前{displayCnt}项是——',
	      withName: '{name}的数据是{value}',
	      withoutName: '{value}',
	      separator: {
	        middle: '，',
	        end: ''
	      }
	    }
	  }
	};
	module.exports = _default;

/***/ }),
/* 1039 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var graphic = __webpack_require__(976);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var PI = Math.PI;
	/**
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {Object} [opts]
	 * @param {string} [opts.text]
	 * @param {string} [opts.color]
	 * @param {string} [opts.textColor]
	 * @return {module:zrender/Element}
	 */
	
	function _default(api, opts) {
	  opts = opts || {};
	  zrUtil.defaults(opts, {
	    text: 'loading',
	    color: '#c23531',
	    textColor: '#000',
	    maskColor: 'rgba(255, 255, 255, 0.8)',
	    zlevel: 0
	  });
	  var mask = new graphic.Rect({
	    style: {
	      fill: opts.maskColor
	    },
	    zlevel: opts.zlevel,
	    z: 10000
	  });
	  var arc = new graphic.Arc({
	    shape: {
	      startAngle: -PI / 2,
	      endAngle: -PI / 2 + 0.1,
	      r: 10
	    },
	    style: {
	      stroke: opts.color,
	      lineCap: 'round',
	      lineWidth: 5
	    },
	    zlevel: opts.zlevel,
	    z: 10001
	  });
	  var labelRect = new graphic.Rect({
	    style: {
	      fill: 'none',
	      text: opts.text,
	      textPosition: 'right',
	      textDistance: 10,
	      textFill: opts.textColor
	    },
	    zlevel: opts.zlevel,
	    z: 10001
	  });
	  arc.animateShape(true).when(1000, {
	    endAngle: PI * 3 / 2
	  }).start('circularInOut');
	  arc.animateShape(true).when(1000, {
	    startAngle: PI * 3 / 2
	  }).delay(300).start('circularInOut');
	  var group = new graphic.Group();
	  group.add(arc);
	  group.add(labelRect);
	  group.add(mask); // Inject resize
	
	  group.resize = function () {
	    var cx = api.getWidth() / 2;
	    var cy = api.getHeight() / 2;
	    arc.setShape({
	      cx: cx,
	      cy: cy
	    });
	    var r = arc.shape.r;
	    labelRect.setShape({
	      x: cx - r,
	      y: cy - r,
	      width: r * 2,
	      height: r * 2
	    });
	    mask.setShape({
	      x: 0,
	      y: 0,
	      width: api.getWidth(),
	      height: api.getHeight()
	    });
	  };
	
	  group.resize();
	  return group;
	}
	
	module.exports = _default;

/***/ }),
/* 1040 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(931);
	
	var each = _util.each;
	var map = _util.map;
	var isArray = _util.isArray;
	var isFunction = _util.isFunction;
	var createHashMap = _util.createHashMap;
	var noop = _util.noop;
	
	var _task = __webpack_require__(1031);
	
	var createTask = _task.createTask;
	
	var _component = __webpack_require__(1011);
	
	var getUID = _component.getUID;
	
	var GlobalModel = __webpack_require__(968);
	
	var ExtensionAPI = __webpack_require__(1022);
	
	var _model = __webpack_require__(969);
	
	var normalizeToArray = _model.normalizeToArray;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * @module echarts/stream/Scheduler
	 */
	
	/**
	 * @constructor
	 */
	function Scheduler(ecInstance, api, dataProcessorHandlers, visualHandlers) {
	  this.ecInstance = ecInstance;
	  this.api = api;
	  this.unfinished; // Fix current processors in case that in some rear cases that
	  // processors might be registered after echarts instance created.
	  // Register processors incrementally for a echarts instance is
	  // not supported by this stream architecture.
	
	  var dataProcessorHandlers = this._dataProcessorHandlers = dataProcessorHandlers.slice();
	  var visualHandlers = this._visualHandlers = visualHandlers.slice();
	  this._allHandlers = dataProcessorHandlers.concat(visualHandlers);
	  /**
	   * @private
	   * @type {
	   *     [handlerUID: string]: {
	   *         seriesTaskMap?: {
	   *             [seriesUID: string]: Task
	   *         },
	   *         overallTask?: Task
	   *     }
	   * }
	   */
	
	  this._stageTaskMap = createHashMap();
	}
	
	var proto = Scheduler.prototype;
	/**
	 * @param {module:echarts/model/Global} ecModel
	 * @param {Object} payload
	 */
	
	proto.restoreData = function (ecModel, payload) {
	  // TODO: Only restroe needed series and components, but not all components.
	  // Currently `restoreData` of all of the series and component will be called.
	  // But some independent components like `title`, `legend`, `graphic`, `toolbox`,
	  // `tooltip`, `axisPointer`, etc, do not need series refresh when `setOption`,
	  // and some components like coordinate system, axes, dataZoom, visualMap only
	  // need their target series refresh.
	  // (1) If we are implementing this feature some day, we should consider these cases:
	  // if a data processor depends on a component (e.g., dataZoomProcessor depends
	  // on the settings of `dataZoom`), it should be re-performed if the component
	  // is modified by `setOption`.
	  // (2) If a processor depends on sevral series, speicified by its `getTargetSeries`,
	  // it should be re-performed when the result array of `getTargetSeries` changed.
	  // We use `dependencies` to cover these issues.
	  // (3) How to update target series when coordinate system related components modified.
	  // TODO: simply the dirty mechanism? Check whether only the case here can set tasks dirty,
	  // and this case all of the tasks will be set as dirty.
	  ecModel.restoreData(payload); // Theoretically an overall task not only depends on each of its target series, but also
	  // depends on all of the series.
	  // The overall task is not in pipeline, and `ecModel.restoreData` only set pipeline tasks
	  // dirty. If `getTargetSeries` of an overall task returns nothing, we should also ensure
	  // that the overall task is set as dirty and to be performed, otherwise it probably cause
	  // state chaos. So we have to set dirty of all of the overall tasks manually, otherwise it
	  // probably cause state chaos (consider `dataZoomProcessor`).
	
	  this._stageTaskMap.each(function (taskRecord) {
	    var overallTask = taskRecord.overallTask;
	    overallTask && overallTask.dirty();
	  });
	}; // If seriesModel provided, incremental threshold is check by series data.
	
	
	proto.getPerformArgs = function (task, isBlock) {
	  // For overall task
	  if (!task.__pipeline) {
	    return;
	  }
	
	  var pipeline = this._pipelineMap.get(task.__pipeline.id);
	
	  var pCtx = pipeline.context;
	  var incremental = !isBlock && pipeline.progressiveEnabled && (!pCtx || pCtx.progressiveRender) && task.__idxInPipeline > pipeline.blockIndex;
	  var step = incremental ? pipeline.step : null;
	  var modDataCount = pCtx && pCtx.modDataCount;
	  var modBy = modDataCount != null ? Math.ceil(modDataCount / step) : null;
	  return {
	    step: step,
	    modBy: modBy,
	    modDataCount: modDataCount
	  };
	};
	
	proto.getPipeline = function (pipelineId) {
	  return this._pipelineMap.get(pipelineId);
	};
	/**
	 * Current, progressive rendering starts from visual and layout.
	 * Always detect render mode in the same stage, avoiding that incorrect
	 * detection caused by data filtering.
	 * Caution:
	 * `updateStreamModes` use `seriesModel.getData()`.
	 */
	
	
	proto.updateStreamModes = function (seriesModel, view) {
	  var pipeline = this._pipelineMap.get(seriesModel.uid);
	
	  var data = seriesModel.getData();
	  var dataLen = data.count(); // `progressiveRender` means that can render progressively in each
	  // animation frame. Note that some types of series do not provide
	  // `view.incrementalPrepareRender` but support `chart.appendData`. We
	  // use the term `incremental` but not `progressive` to describe the
	  // case that `chart.appendData`.
	
	  var progressiveRender = pipeline.progressiveEnabled && view.incrementalPrepareRender && dataLen >= pipeline.threshold;
	  var large = seriesModel.get('large') && dataLen >= seriesModel.get('largeThreshold'); // TODO: modDataCount should not updated if `appendData`, otherwise cause whole repaint.
	  // see `test/candlestick-large3.html`
	
	  var modDataCount = seriesModel.get('progressiveChunkMode') === 'mod' ? dataLen : null;
	  seriesModel.pipelineContext = pipeline.context = {
	    progressiveRender: progressiveRender,
	    modDataCount: modDataCount,
	    large: large
	  };
	};
	
	proto.restorePipelines = function (ecModel) {
	  var scheduler = this;
	  var pipelineMap = scheduler._pipelineMap = createHashMap();
	  ecModel.eachSeries(function (seriesModel) {
	    var progressive = seriesModel.getProgressive();
	    var pipelineId = seriesModel.uid;
	    pipelineMap.set(pipelineId, {
	      id: pipelineId,
	      head: null,
	      tail: null,
	      threshold: seriesModel.getProgressiveThreshold(),
	      progressiveEnabled: progressive && !(seriesModel.preventIncremental && seriesModel.preventIncremental()),
	      blockIndex: -1,
	      step: Math.round(progressive || 700),
	      count: 0
	    });
	    pipe(scheduler, seriesModel, seriesModel.dataTask);
	  });
	};
	
	proto.prepareStageTasks = function () {
	  var stageTaskMap = this._stageTaskMap;
	  var ecModel = this.ecInstance.getModel();
	  var api = this.api;
	  each(this._allHandlers, function (handler) {
	    var record = stageTaskMap.get(handler.uid) || stageTaskMap.set(handler.uid, []);
	    handler.reset && createSeriesStageTask(this, handler, record, ecModel, api);
	    handler.overallReset && createOverallStageTask(this, handler, record, ecModel, api);
	  }, this);
	};
	
	proto.prepareView = function (view, model, ecModel, api) {
	  var renderTask = view.renderTask;
	  var context = renderTask.context;
	  context.model = model;
	  context.ecModel = ecModel;
	  context.api = api;
	  renderTask.__block = !view.incrementalPrepareRender;
	  pipe(this, model, renderTask);
	};
	
	proto.performDataProcessorTasks = function (ecModel, payload) {
	  // If we do not use `block` here, it should be considered when to update modes.
	  performStageTasks(this, this._dataProcessorHandlers, ecModel, payload, {
	    block: true
	  });
	}; // opt
	// opt.visualType: 'visual' or 'layout'
	// opt.setDirty
	
	
	proto.performVisualTasks = function (ecModel, payload, opt) {
	  performStageTasks(this, this._visualHandlers, ecModel, payload, opt);
	};
	
	function performStageTasks(scheduler, stageHandlers, ecModel, payload, opt) {
	  opt = opt || {};
	  var unfinished;
	  each(stageHandlers, function (stageHandler, idx) {
	    if (opt.visualType && opt.visualType !== stageHandler.visualType) {
	      return;
	    }
	
	    var stageHandlerRecord = scheduler._stageTaskMap.get(stageHandler.uid);
	
	    var seriesTaskMap = stageHandlerRecord.seriesTaskMap;
	    var overallTask = stageHandlerRecord.overallTask;
	
	    if (overallTask) {
	      var overallNeedDirty;
	      var agentStubMap = overallTask.agentStubMap;
	      agentStubMap.each(function (stub) {
	        if (needSetDirty(opt, stub)) {
	          stub.dirty();
	          overallNeedDirty = true;
	        }
	      });
	      overallNeedDirty && overallTask.dirty();
	      updatePayload(overallTask, payload);
	      var performArgs = scheduler.getPerformArgs(overallTask, opt.block); // Execute stubs firstly, which may set the overall task dirty,
	      // then execute the overall task. And stub will call seriesModel.setData,
	      // which ensures that in the overallTask seriesModel.getData() will not
	      // return incorrect data.
	
	      agentStubMap.each(function (stub) {
	        stub.perform(performArgs);
	      });
	      unfinished |= overallTask.perform(performArgs);
	    } else if (seriesTaskMap) {
	      seriesTaskMap.each(function (task, pipelineId) {
	        if (needSetDirty(opt, task)) {
	          task.dirty();
	        }
	
	        var performArgs = scheduler.getPerformArgs(task, opt.block);
	        performArgs.skip = !stageHandler.performRawSeries && ecModel.isSeriesFiltered(task.context.model);
	        updatePayload(task, payload);
	        unfinished |= task.perform(performArgs);
	      });
	    }
	  });
	
	  function needSetDirty(opt, task) {
	    return opt.setDirty && (!opt.dirtyMap || opt.dirtyMap.get(task.__pipeline.id));
	  }
	
	  scheduler.unfinished |= unfinished;
	}
	
	proto.performSeriesTasks = function (ecModel) {
	  var unfinished;
	  ecModel.eachSeries(function (seriesModel) {
	    // Progress to the end for dataInit and dataRestore.
	    unfinished |= seriesModel.dataTask.perform();
	  });
	  this.unfinished |= unfinished;
	};
	
	proto.plan = function () {
	  // Travel pipelines, check block.
	  this._pipelineMap.each(function (pipeline) {
	    var task = pipeline.tail;
	
	    do {
	      if (task.__block) {
	        pipeline.blockIndex = task.__idxInPipeline;
	        break;
	      }
	
	      task = task.getUpstream();
	    } while (task);
	  });
	};
	
	var updatePayload = proto.updatePayload = function (task, payload) {
	  payload !== 'remain' && (task.context.payload = payload);
	};
	
	function createSeriesStageTask(scheduler, stageHandler, stageHandlerRecord, ecModel, api) {
	  var seriesTaskMap = stageHandlerRecord.seriesTaskMap || (stageHandlerRecord.seriesTaskMap = createHashMap());
	  var seriesType = stageHandler.seriesType;
	  var getTargetSeries = stageHandler.getTargetSeries; // If a stageHandler should cover all series, `createOnAllSeries` should be declared mandatorily,
	  // to avoid some typo or abuse. Otherwise if an extension do not specify a `seriesType`,
	  // it works but it may cause other irrelevant charts blocked.
	
	  if (stageHandler.createOnAllSeries) {
	    ecModel.eachRawSeries(create);
	  } else if (seriesType) {
	    ecModel.eachRawSeriesByType(seriesType, create);
	  } else if (getTargetSeries) {
	    getTargetSeries(ecModel, api).each(create);
	  }
	
	  function create(seriesModel) {
	    var pipelineId = seriesModel.uid; // Init tasks for each seriesModel only once.
	    // Reuse original task instance.
	
	    var task = seriesTaskMap.get(pipelineId) || seriesTaskMap.set(pipelineId, createTask({
	      plan: seriesTaskPlan,
	      reset: seriesTaskReset,
	      count: seriesTaskCount
	    }));
	    task.context = {
	      model: seriesModel,
	      ecModel: ecModel,
	      api: api,
	      useClearVisual: stageHandler.isVisual && !stageHandler.isLayout,
	      plan: stageHandler.plan,
	      reset: stageHandler.reset,
	      scheduler: scheduler
	    };
	    pipe(scheduler, seriesModel, task);
	  } // Clear unused series tasks.
	
	
	  var pipelineMap = scheduler._pipelineMap;
	  seriesTaskMap.each(function (task, pipelineId) {
	    if (!pipelineMap.get(pipelineId)) {
	      task.dispose();
	      seriesTaskMap.removeKey(pipelineId);
	    }
	  });
	}
	
	function createOverallStageTask(scheduler, stageHandler, stageHandlerRecord, ecModel, api) {
	  var overallTask = stageHandlerRecord.overallTask = stageHandlerRecord.overallTask // For overall task, the function only be called on reset stage.
	  || createTask({
	    reset: overallTaskReset
	  });
	  overallTask.context = {
	    ecModel: ecModel,
	    api: api,
	    overallReset: stageHandler.overallReset,
	    scheduler: scheduler
	  }; // Reuse orignal stubs.
	
	  var agentStubMap = overallTask.agentStubMap = overallTask.agentStubMap || createHashMap();
	  var seriesType = stageHandler.seriesType;
	  var getTargetSeries = stageHandler.getTargetSeries;
	  var overallProgress = true;
	  var modifyOutputEnd = stageHandler.modifyOutputEnd; // An overall task with seriesType detected or has `getTargetSeries`, we add
	  // stub in each pipelines, it will set the overall task dirty when the pipeline
	  // progress. Moreover, to avoid call the overall task each frame (too frequent),
	  // we set the pipeline block.
	
	  if (seriesType) {
	    ecModel.eachRawSeriesByType(seriesType, createStub);
	  } else if (getTargetSeries) {
	    getTargetSeries(ecModel, api).each(createStub);
	  } // Otherwise, (usually it is legancy case), the overall task will only be
	  // executed when upstream dirty. Otherwise the progressive rendering of all
	  // pipelines will be disabled unexpectedly. But it still needs stubs to receive
	  // dirty info from upsteam.
	  else {
	      overallProgress = false;
	      each(ecModel.getSeries(), createStub);
	    }
	
	  function createStub(seriesModel) {
	    var pipelineId = seriesModel.uid;
	    var stub = agentStubMap.get(pipelineId);
	
	    if (!stub) {
	      stub = agentStubMap.set(pipelineId, createTask({
	        reset: stubReset,
	        onDirty: stubOnDirty
	      })); // When the result of `getTargetSeries` changed, the overallTask
	      // should be set as dirty and re-performed.
	
	      overallTask.dirty();
	    }
	
	    stub.context = {
	      model: seriesModel,
	      overallProgress: overallProgress,
	      modifyOutputEnd: modifyOutputEnd
	    };
	    stub.agent = overallTask;
	    stub.__block = overallProgress;
	    pipe(scheduler, seriesModel, stub);
	  } // Clear unused stubs.
	
	
	  var pipelineMap = scheduler._pipelineMap;
	  agentStubMap.each(function (stub, pipelineId) {
	    if (!pipelineMap.get(pipelineId)) {
	      stub.dispose(); // When the result of `getTargetSeries` changed, the overallTask
	      // should be set as dirty and re-performed.
	
	      overallTask.dirty();
	      agentStubMap.removeKey(pipelineId);
	    }
	  });
	}
	
	function overallTaskReset(context) {
	  context.overallReset(context.ecModel, context.api, context.payload);
	}
	
	function stubReset(context, upstreamContext) {
	  return context.overallProgress && stubProgress;
	}
	
	function stubProgress() {
	  this.agent.dirty();
	  this.getDownstream().dirty();
	}
	
	function stubOnDirty() {
	  this.agent && this.agent.dirty();
	}
	
	function seriesTaskPlan(context) {
	  return context.plan && context.plan(context.model, context.ecModel, context.api, context.payload);
	}
	
	function seriesTaskReset(context) {
	  if (context.useClearVisual) {
	    context.data.clearAllVisual();
	  }
	
	  var resetDefines = context.resetDefines = normalizeToArray(context.reset(context.model, context.ecModel, context.api, context.payload));
	  return resetDefines.length > 1 ? map(resetDefines, function (v, idx) {
	    return makeSeriesTaskProgress(idx);
	  }) : singleSeriesTaskProgress;
	}
	
	var singleSeriesTaskProgress = makeSeriesTaskProgress(0);
	
	function makeSeriesTaskProgress(resetDefineIdx) {
	  return function (params, context) {
	    var data = context.data;
	    var resetDefine = context.resetDefines[resetDefineIdx];
	
	    if (resetDefine && resetDefine.dataEach) {
	      for (var i = params.start; i < params.end; i++) {
	        resetDefine.dataEach(data, i);
	      }
	    } else if (resetDefine && resetDefine.progress) {
	      resetDefine.progress(params, data);
	    }
	  };
	}
	
	function seriesTaskCount(context) {
	  return context.data.count();
	}
	
	function pipe(scheduler, seriesModel, task) {
	  var pipelineId = seriesModel.uid;
	
	  var pipeline = scheduler._pipelineMap.get(pipelineId);
	
	  !pipeline.head && (pipeline.head = task);
	  pipeline.tail && pipeline.tail.pipe(task);
	  pipeline.tail = task;
	  task.__idxInPipeline = pipeline.count++;
	  task.__pipeline = pipeline;
	}
	
	Scheduler.wrapStageHandler = function (stageHandler, visualType) {
	  if (isFunction(stageHandler)) {
	    stageHandler = {
	      overallReset: stageHandler,
	      seriesType: detectSeriseType(stageHandler)
	    };
	  }
	
	  stageHandler.uid = getUID('stageHandler');
	  visualType && (stageHandler.visualType = visualType);
	  return stageHandler;
	};
	/**
	 * Only some legacy stage handlers (usually in echarts extensions) are pure function.
	 * To ensure that they can work normally, they should work in block mode, that is,
	 * they should not be started util the previous tasks finished. So they cause the
	 * progressive rendering disabled. We try to detect the series type, to narrow down
	 * the block range to only the series type they concern, but not all series.
	 */
	
	
	function detectSeriseType(legacyFunc) {
	  seriesType = null;
	
	  try {
	    // Assume there is no async when calling `eachSeriesByType`.
	    legacyFunc(ecModelMock, apiMock);
	  } catch (e) {}
	
	  return seriesType;
	}
	
	var ecModelMock = {};
	var apiMock = {};
	var seriesType;
	mockMethods(ecModelMock, GlobalModel);
	mockMethods(apiMock, ExtensionAPI);
	
	ecModelMock.eachSeriesByType = ecModelMock.eachRawSeriesByType = function (type) {
	  seriesType = type;
	};
	
	ecModelMock.eachComponent = function (cond) {
	  if (cond.mainType === 'series' && cond.subType) {
	    seriesType = cond.subType;
	  }
	};
	
	function mockMethods(target, Clz) {
	  for (var name in Clz.prototype) {
	    // Do not use hasOwnProperty
	    target[name] = noop;
	  }
	}
	
	var _default = Scheduler;
	module.exports = _default;

/***/ }),
/* 1041 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var colorAll = ['#37A2DA', '#32C5E9', '#67E0E3', '#9FE6B8', '#FFDB5C', '#ff9f7f', '#fb7293', '#E062AE', '#E690D1', '#e7bcf3', '#9d96f5', '#8378EA', '#96BFFF'];
	var _default = {
	  color: colorAll,
	  colorLayer: [['#37A2DA', '#ffd85c', '#fd7b5f'], ['#37A2DA', '#67E0E3', '#FFDB5C', '#ff9f7f', '#E062AE', '#9d96f5'], ['#37A2DA', '#32C5E9', '#9FE6B8', '#FFDB5C', '#ff9f7f', '#fb7293', '#e7bcf3', '#8378EA', '#96BFFF'], colorAll]
	};
	module.exports = _default;

/***/ }),
/* 1042 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var contrastColor = '#eee';
	
	var axisCommon = function () {
	  return {
	    axisLine: {
	      lineStyle: {
	        color: contrastColor
	      }
	    },
	    axisTick: {
	      lineStyle: {
	        color: contrastColor
	      }
	    },
	    axisLabel: {
	      textStyle: {
	        color: contrastColor
	      }
	    },
	    splitLine: {
	      lineStyle: {
	        type: 'dashed',
	        color: '#aaa'
	      }
	    },
	    splitArea: {
	      areaStyle: {
	        color: contrastColor
	      }
	    }
	  };
	};
	
	var colorPalette = ['#dd6b66', '#759aa0', '#e69d87', '#8dc1a9', '#ea7e53', '#eedd78', '#73a373', '#73b9bc', '#7289ab', '#91ca8c', '#f49f42'];
	var theme = {
	  color: colorPalette,
	  backgroundColor: '#333',
	  tooltip: {
	    axisPointer: {
	      lineStyle: {
	        color: contrastColor
	      },
	      crossStyle: {
	        color: contrastColor
	      }
	    }
	  },
	  legend: {
	    textStyle: {
	      color: contrastColor
	    }
	  },
	  textStyle: {
	    color: contrastColor
	  },
	  title: {
	    textStyle: {
	      color: contrastColor
	    }
	  },
	  toolbox: {
	    iconStyle: {
	      normal: {
	        borderColor: contrastColor
	      }
	    }
	  },
	  dataZoom: {
	    textStyle: {
	      color: contrastColor
	    }
	  },
	  visualMap: {
	    textStyle: {
	      color: contrastColor
	    }
	  },
	  timeline: {
	    lineStyle: {
	      color: contrastColor
	    },
	    itemStyle: {
	      normal: {
	        color: colorPalette[1]
	      }
	    },
	    label: {
	      normal: {
	        textStyle: {
	          color: contrastColor
	        }
	      }
	    },
	    controlStyle: {
	      normal: {
	        color: contrastColor,
	        borderColor: contrastColor
	      }
	    }
	  },
	  timeAxis: axisCommon(),
	  logAxis: axisCommon(),
	  valueAxis: axisCommon(),
	  categoryAxis: axisCommon(),
	  line: {
	    symbol: 'circle'
	  },
	  graph: {
	    color: colorPalette
	  },
	  gauge: {
	    title: {
	      textStyle: {
	        color: contrastColor
	      }
	    }
	  },
	  candlestick: {
	    itemStyle: {
	      normal: {
	        color: '#FD1050',
	        color0: '#0CF49B',
	        borderColor: '#FD1050',
	        borderColor0: '#0CF49B'
	      }
	    }
	  }
	};
	theme.categoryAxis.splitLine.show = false;
	var _default = theme;
	module.exports = _default;

/***/ }),
/* 1043 */
/***/ (function(module, exports, __webpack_require__) {

	var ComponentModel = __webpack_require__(1010);
	
	var ComponentView = __webpack_require__(1032);
	
	var _sourceHelper = __webpack_require__(1018);
	
	var detectSourceFormat = _sourceHelper.detectSourceFormat;
	
	var _sourceType = __webpack_require__(1021);
	
	var SERIES_LAYOUT_BY_COLUMN = _sourceType.SERIES_LAYOUT_BY_COLUMN;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * This module is imported by echarts directly.
	 *
	 * Notice:
	 * Always keep this file exists for backward compatibility.
	 * Because before 4.1.0, dataset is an optional component,
	 * some users may import this module manually.
	 */
	ComponentModel.extend({
	  type: 'dataset',
	
	  /**
	   * @protected
	   */
	  defaultOption: {
	    // 'row', 'column'
	    seriesLayoutBy: SERIES_LAYOUT_BY_COLUMN,
	    // null/'auto': auto detect header, see "module:echarts/data/helper/sourceHelper"
	    sourceHeader: null,
	    dimensions: null,
	    source: null
	  },
	  optionUpdated: function () {
	    detectSourceFormat(this);
	  }
	});
	ComponentView.extend({
	  type: 'dataset'
	});

/***/ }),
/* 1044 */
/***/ (function(module, exports, __webpack_require__) {

	var zrender = __webpack_require__(928);
	
	exports.zrender = zrender;
	
	var matrix = __webpack_require__(940);
	
	exports.matrix = matrix;
	
	var vector = __webpack_require__(933);
	
	exports.vector = vector;
	
	var zrUtil = __webpack_require__(931);
	
	var colorTool = __webpack_require__(945);
	
	exports.color = colorTool;
	
	var graphic = __webpack_require__(976);
	
	exports.graphic = graphic;
	
	var numberUtil = __webpack_require__(1013);
	
	exports.number = numberUtil;
	
	var formatUtil = __webpack_require__(1014);
	
	exports.format = formatUtil;
	
	var _throttle = __webpack_require__(1035);
	
	var throttle = _throttle.throttle;
	exports.throttle = _throttle.throttle;
	
	var ecHelper = __webpack_require__(1045);
	
	exports.helper = ecHelper;
	
	var parseGeoJSON = __webpack_require__(1064);
	
	exports.parseGeoJSON = parseGeoJSON;
	
	var _List = __webpack_require__(1047);
	
	exports.List = _List;
	
	var _Model = __webpack_require__(970);
	
	exports.Model = _Model;
	
	var _Axis = __webpack_require__(1067);
	
	exports.Axis = _Axis;
	
	var _env = __webpack_require__(930);
	
	exports.env = _env;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Do not mount those modules on 'src/echarts' for better tree shaking.
	 */
	var parseGeoJson = parseGeoJSON;
	var ecUtil = {};
	zrUtil.each(['map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter', 'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction', 'extend', 'defaults', 'clone', 'merge'], function (name) {
	  ecUtil[name] = zrUtil[name];
	});
	exports.parseGeoJson = parseGeoJson;
	exports.util = ecUtil;

/***/ }),
/* 1045 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var createListFromArray = __webpack_require__(1046);
	
	var axisHelper = __webpack_require__(1053);
	
	var axisModelCommonMixin = __webpack_require__(1062);
	
	var Model = __webpack_require__(970);
	
	var _layout = __webpack_require__(1012);
	
	var getLayoutRect = _layout.getLayoutRect;
	exports.getLayoutRect = _layout.getLayoutRect;
	
	var _dataStackHelper = __webpack_require__(1052);
	
	var enableDataStack = _dataStackHelper.enableDataStack;
	var isDimensionStacked = _dataStackHelper.isDimensionStacked;
	var getStackedDimension = _dataStackHelper.getStackedDimension;
	
	var _completeDimensions = __webpack_require__(1051);
	
	exports.completeDimensions = _completeDimensions;
	
	var _createDimensions = __webpack_require__(1050);
	
	exports.createDimensions = _createDimensions;
	
	var _symbol = __webpack_require__(1063);
	
	exports.createSymbol = _symbol.createSymbol;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// import createGraphFromNodeEdge from './chart/helper/createGraphFromNodeEdge';
	
	/**
	 * Create a muti dimension List structure from seriesModel.
	 * @param  {module:echarts/model/Model} seriesModel
	 * @return {module:echarts/data/List} list
	 */
	function createList(seriesModel) {
	  return createListFromArray(seriesModel.getSource(), seriesModel);
	} // export function createGraph(seriesModel) {
	//     var nodes = seriesModel.get('data');
	//     var links = seriesModel.get('links');
	//     return createGraphFromNodeEdge(nodes, links, seriesModel);
	// }
	
	
	var dataStack = {
	  isDimensionStacked: isDimensionStacked,
	  enableDataStack: enableDataStack,
	  getStackedDimension: getStackedDimension
	};
	/**
	 * Create a symbol element with given symbol configuration: shape, x, y, width, height, color
	 * @see http://echarts.baidu.com/option.html#series-scatter.symbol
	 * @param {string} symbolDesc
	 * @param {number} x
	 * @param {number} y
	 * @param {number} w
	 * @param {number} h
	 * @param {string} color
	 */
	
	/**
	 * Create scale
	 * @param {Array.<number>} dataExtent
	 * @param {Object|module:echarts/Model} option
	 */
	function createScale(dataExtent, option) {
	  var axisModel = option;
	
	  if (!Model.isInstance(option)) {
	    axisModel = new Model(option);
	    zrUtil.mixin(axisModel, axisModelCommonMixin);
	  }
	
	  var scale = axisHelper.createScaleByModel(axisModel);
	  scale.setExtent(dataExtent[0], dataExtent[1]);
	  axisHelper.niceScaleExtent(scale, axisModel);
	  return scale;
	}
	/**
	 * Mixin common methods to axis model,
	 *
	 * Inlcude methods
	 * `getFormattedLabels() => Array.<string>`
	 * `getCategories() => Array.<string>`
	 * `getMin(origin: boolean) => number`
	 * `getMax(origin: boolean) => number`
	 * `getNeedCrossZero() => boolean`
	 * `setRange(start: number, end: number)`
	 * `resetRange()`
	 */
	
	
	function mixinAxisModelCommonMethods(Model) {
	  zrUtil.mixin(Model, axisModelCommonMixin);
	}
	
	exports.createList = createList;
	exports.dataStack = dataStack;
	exports.createScale = createScale;
	exports.mixinAxisModelCommonMethods = mixinAxisModelCommonMethods;

/***/ }),
/* 1046 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var List = __webpack_require__(1047);
	
	var createDimensions = __webpack_require__(1050);
	
	var _sourceType = __webpack_require__(1021);
	
	var SOURCE_FORMAT_ORIGINAL = _sourceType.SOURCE_FORMAT_ORIGINAL;
	
	var _dimensionHelper = __webpack_require__(1049);
	
	var getDimensionTypeByAxis = _dimensionHelper.getDimensionTypeByAxis;
	
	var _model = __webpack_require__(969);
	
	var getDataItemValue = _model.getDataItemValue;
	
	var CoordinateSystem = __webpack_require__(1023);
	
	var _referHelper = __webpack_require__(1019);
	
	var getCoordSysDefineBySeries = _referHelper.getCoordSysDefineBySeries;
	
	var Source = __webpack_require__(1020);
	
	var _dataStackHelper = __webpack_require__(1052);
	
	var enableDataStack = _dataStackHelper.enableDataStack;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * @param {module:echarts/data/Source|Array} source Or raw data.
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {Object} [opt]
	 * @param {string} [opt.generateCoord]
	 */
	function createListFromArray(source, seriesModel, opt) {
	  opt = opt || {};
	
	  if (!Source.isInstance(source)) {
	    source = Source.seriesDataToSource(source);
	  }
	
	  var coordSysName = seriesModel.get('coordinateSystem');
	  var registeredCoordSys = CoordinateSystem.get(coordSysName);
	  var coordSysDefine = getCoordSysDefineBySeries(seriesModel);
	  var coordSysDimDefs;
	
	  if (coordSysDefine) {
	    coordSysDimDefs = zrUtil.map(coordSysDefine.coordSysDims, function (dim) {
	      var dimInfo = {
	        name: dim
	      };
	      var axisModel = coordSysDefine.axisMap.get(dim);
	
	      if (axisModel) {
	        var axisType = axisModel.get('type');
	        dimInfo.type = getDimensionTypeByAxis(axisType); // dimInfo.stackable = isStackable(axisType);
	      }
	
	      return dimInfo;
	    });
	  }
	
	  if (!coordSysDimDefs) {
	    // Get dimensions from registered coordinate system
	    coordSysDimDefs = registeredCoordSys && (registeredCoordSys.getDimensionsInfo ? registeredCoordSys.getDimensionsInfo() : registeredCoordSys.dimensions.slice()) || ['x', 'y'];
	  }
	
	  var dimInfoList = createDimensions(source, {
	    coordDimensions: coordSysDimDefs,
	    generateCoord: opt.generateCoord
	  });
	  var firstCategoryDimIndex;
	  var hasNameEncode;
	  coordSysDefine && zrUtil.each(dimInfoList, function (dimInfo, dimIndex) {
	    var coordDim = dimInfo.coordDim;
	    var categoryAxisModel = coordSysDefine.categoryAxisMap.get(coordDim);
	
	    if (categoryAxisModel) {
	      if (firstCategoryDimIndex == null) {
	        firstCategoryDimIndex = dimIndex;
	      }
	
	      dimInfo.ordinalMeta = categoryAxisModel.getOrdinalMeta();
	    }
	
	    if (dimInfo.otherDims.itemName != null) {
	      hasNameEncode = true;
	    }
	  });
	
	  if (!hasNameEncode && firstCategoryDimIndex != null) {
	    dimInfoList[firstCategoryDimIndex].otherDims.itemName = 0;
	  }
	
	  var stackCalculationInfo = enableDataStack(seriesModel, dimInfoList);
	  var list = new List(dimInfoList, seriesModel);
	  list.setCalculationInfo(stackCalculationInfo);
	  var dimValueGetter = firstCategoryDimIndex != null && isNeedCompleteOrdinalData(source) ? function (itemOpt, dimName, dataIndex, dimIndex) {
	    // Use dataIndex as ordinal value in categoryAxis
	    return dimIndex === firstCategoryDimIndex ? dataIndex : this.defaultDimValueGetter(itemOpt, dimName, dataIndex, dimIndex);
	  } : null;
	  list.hasItemOption = false;
	  list.initData(source, null, dimValueGetter);
	  return list;
	}
	
	function isNeedCompleteOrdinalData(source) {
	  if (source.sourceFormat === SOURCE_FORMAT_ORIGINAL) {
	    var sampleItem = firstDataNotNull(source.data || []);
	    return sampleItem != null && !zrUtil.isArray(getDataItemValue(sampleItem));
	  }
	}
	
	function firstDataNotNull(data) {
	  var i = 0;
	
	  while (i < data.length && data[i] == null) {
	    i++;
	  }
	
	  return data[i];
	}
	
	var _default = createListFromArray;
	module.exports = _default;

/***/ }),
/* 1047 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	var zrUtil = __webpack_require__(931);
	
	var Model = __webpack_require__(970);
	
	var DataDiffer = __webpack_require__(1048);
	
	var Source = __webpack_require__(1020);
	
	var _dataProvider = __webpack_require__(1030);
	
	var defaultDimValueGetters = _dataProvider.defaultDimValueGetters;
	var DefaultDataProvider = _dataProvider.DefaultDataProvider;
	
	var _dimensionHelper = __webpack_require__(1049);
	
	var summarizeDimensions = _dimensionHelper.summarizeDimensions;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * List for data storage
	 * @module echarts/data/List
	 */
	var isObject = zrUtil.isObject;
	var UNDEFINED = 'undefined'; // Use prefix to avoid index to be the same as otherIdList[idx],
	// which will cause weird udpate animation.
	
	var ID_PREFIX = 'e\0\0';
	var dataCtors = {
	  'float': typeof Float64Array === UNDEFINED ? Array : Float64Array,
	  'int': typeof Int32Array === UNDEFINED ? Array : Int32Array,
	  // Ordinal data type can be string or int
	  'ordinal': Array,
	  'number': Array,
	  'time': Array
	}; // Caution: MUST not use `new CtorUint32Array(arr, 0, len)`, because the Ctor of array is
	// different from the Ctor of typed array.
	
	var CtorUint32Array = typeof Uint32Array === UNDEFINED ? Array : Uint32Array;
	var CtorUint16Array = typeof Uint16Array === UNDEFINED ? Array : Uint16Array;
	
	function getIndicesCtor(list) {
	  // The possible max value in this._indicies is always this._rawCount despite of filtering.
	  return list._rawCount > 65535 ? CtorUint32Array : CtorUint16Array;
	}
	
	function cloneChunk(originalChunk) {
	  var Ctor = originalChunk.constructor; // Only shallow clone is enough when Array.
	
	  return Ctor === Array ? originalChunk.slice() : new Ctor(originalChunk);
	}
	
	var TRANSFERABLE_PROPERTIES = ['hasItemOption', '_nameList', '_idList', '_invertedIndicesMap', '_rawData', '_chunkSize', '_chunkCount', '_dimValueGetter', '_count', '_rawCount', '_nameDimIdx', '_idDimIdx'];
	var CLONE_PROPERTIES = ['_extent', '_approximateExtent', '_rawExtent'];
	
	function transferProperties(target, source) {
	  zrUtil.each(TRANSFERABLE_PROPERTIES.concat(source.__wrappedMethods || []), function (propName) {
	    if (source.hasOwnProperty(propName)) {
	      target[propName] = source[propName];
	    }
	  });
	  target.__wrappedMethods = source.__wrappedMethods;
	  zrUtil.each(CLONE_PROPERTIES, function (propName) {
	    target[propName] = zrUtil.clone(source[propName]);
	  });
	  target._calculationInfo = zrUtil.extend(source._calculationInfo);
	}
	/**
	 * @constructor
	 * @alias module:echarts/data/List
	 *
	 * @param {Array.<string|Object>} dimensions
	 *      For example, ['someDimName', {name: 'someDimName', type: 'someDimType'}, ...].
	 *      Dimensions should be concrete names like x, y, z, lng, lat, angle, radius
	 *      Spetial fields: {
	 *          ordinalMeta: <module:echarts/data/OrdinalMeta>
	 *          createInvertedIndices: <boolean>
	 *      }
	 * @param {module:echarts/model/Model} hostModel
	 */
	
	
	var List = function (dimensions, hostModel) {
	  dimensions = dimensions || ['x', 'y'];
	  var dimensionInfos = {};
	  var dimensionNames = [];
	  var invertedIndicesMap = {};
	
	  for (var i = 0; i < dimensions.length; i++) {
	    // Use the original dimensions[i], where other flag props may exists.
	    var dimensionInfo = dimensions[i];
	
	    if (zrUtil.isString(dimensionInfo)) {
	      dimensionInfo = {
	        name: dimensionInfo
	      };
	    }
	
	    var dimensionName = dimensionInfo.name;
	    dimensionInfo.type = dimensionInfo.type || 'float';
	
	    if (!dimensionInfo.coordDim) {
	      dimensionInfo.coordDim = dimensionName;
	      dimensionInfo.coordDimIndex = 0;
	    }
	
	    dimensionInfo.otherDims = dimensionInfo.otherDims || {};
	    dimensionNames.push(dimensionName);
	    dimensionInfos[dimensionName] = dimensionInfo;
	    dimensionInfo.index = i;
	
	    if (dimensionInfo.createInvertedIndices) {
	      invertedIndicesMap[dimensionName] = [];
	    }
	  }
	  /**
	   * @readOnly
	   * @type {Array.<string>}
	   */
	
	
	  this.dimensions = dimensionNames;
	  /**
	   * Infomation of each data dimension, like data type.
	   * @type {Object}
	   */
	
	  this._dimensionInfos = dimensionInfos;
	  /**
	   * @type {module:echarts/model/Model}
	   */
	
	  this.hostModel = hostModel;
	  /**
	   * @type {module:echarts/model/Model}
	   */
	
	  this.dataType;
	  /**
	   * Indices stores the indices of data subset after filtered.
	   * This data subset will be used in chart.
	   * @type {Array.<number>}
	   * @readOnly
	   */
	
	  this._indices = null;
	  this._count = 0;
	  this._rawCount = 0;
	  /**
	   * Data storage
	   * @type {Object.<key, Array.<TypedArray|Array>>}
	   * @private
	   */
	
	  this._storage = {};
	  /**
	   * @type {Array.<string>}
	   */
	
	  this._nameList = [];
	  /**
	   * @type {Array.<string>}
	   */
	
	  this._idList = [];
	  /**
	   * Models of data option is stored sparse for optimizing memory cost
	   * @type {Array.<module:echarts/model/Model>}
	   * @private
	   */
	
	  this._optionModels = [];
	  /**
	   * Global visual properties after visual coding
	   * @type {Object}
	   * @private
	   */
	
	  this._visual = {};
	  /**
	   * Globel layout properties.
	   * @type {Object}
	   * @private
	   */
	
	  this._layout = {};
	  /**
	   * Item visual properties after visual coding
	   * @type {Array.<Object>}
	   * @private
	   */
	
	  this._itemVisuals = [];
	  /**
	   * Key: visual type, Value: boolean
	   * @type {Object}
	   * @readOnly
	   */
	
	  this.hasItemVisual = {};
	  /**
	   * Item layout properties after layout
	   * @type {Array.<Object>}
	   * @private
	   */
	
	  this._itemLayouts = [];
	  /**
	   * Graphic elemnents
	   * @type {Array.<module:zrender/Element>}
	   * @private
	   */
	
	  this._graphicEls = [];
	  /**
	   * Max size of each chunk.
	   * @type {number}
	   * @private
	   */
	
	  this._chunkSize = 1e5;
	  /**
	   * @type {number}
	   * @private
	   */
	
	  this._chunkCount = 0;
	  /**
	   * @type {Array.<Array|Object>}
	   * @private
	   */
	
	  this._rawData;
	  /**
	   * Raw extent will not be cloned, but only transfered.
	   * It will not be calculated util needed.
	   * key: dim,
	   * value: {end: number, extent: Array.<number>}
	   * @type {Object}
	   * @private
	   */
	
	  this._rawExtent = {};
	  /**
	   * @type {Object}
	   * @private
	   */
	
	  this._extent = {};
	  /**
	   * key: dim
	   * value: extent
	   * @type {Object}
	   * @private
	   */
	
	  this._approximateExtent = {};
	  /**
	   * Cache summary info for fast visit. See "dimensionHelper".
	   * @type {Object}
	   * @private
	   */
	
	  this._dimensionsSummary = summarizeDimensions(this);
	  /**
	   * @type {Object.<Array|TypedArray>}
	   * @private
	   */
	
	  this._invertedIndicesMap = invertedIndicesMap;
	  /**
	   * @type {Object}
	   * @private
	   */
	
	  this._calculationInfo = {};
	};
	
	var listProto = List.prototype;
	listProto.type = 'list';
	/**
	 * If each data item has it's own option
	 * @type {boolean}
	 */
	
	listProto.hasItemOption = true;
	/**
	 * Get dimension name
	 * @param {string|number} dim
	 *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	 *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	 * @return {string} Concrete dim name.
	 */
	
	listProto.getDimension = function (dim) {
	  if (!isNaN(dim)) {
	    dim = this.dimensions[dim] || dim;
	  }
	
	  return dim;
	};
	/**
	 * Get type and calculation info of particular dimension
	 * @param {string|number} dim
	 *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	 *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	 */
	
	
	listProto.getDimensionInfo = function (dim) {
	  // Do not clone, because there may be categories in dimInfo.
	  return this._dimensionInfos[this.getDimension(dim)];
	};
	/**
	 * @return {Array.<string>} concrete dimension name list on coord.
	 */
	
	
	listProto.getDimensionsOnCoord = function () {
	  return this._dimensionsSummary.dataDimsOnCoord.slice();
	};
	/**
	 * @param {string} coordDim
	 * @param {number} [idx] A coordDim may map to more than one data dim.
	 *        If idx is `true`, return a array of all mapped dims.
	 *        If idx is not specified, return the first dim not extra.
	 * @return {string|Array.<string>} concrete data dim.
	 *        If idx is number, and not found, return null/undefined.
	 *        If idx is `true`, and not found, return empty array (always return array).
	 */
	
	
	listProto.mapDimension = function (coordDim, idx) {
	  var dimensionsSummary = this._dimensionsSummary;
	
	  if (idx == null) {
	    return dimensionsSummary.encodeFirstDimNotExtra[coordDim];
	  }
	
	  var dims = dimensionsSummary.encode[coordDim];
	  return idx === true // always return array if idx is `true`
	  ? (dims || []).slice() : dims && dims[idx];
	};
	/**
	 * Initialize from data
	 * @param {Array.<Object|number|Array>} data source or data or data provider.
	 * @param {Array.<string>} [nameLIst] The name of a datum is used on data diff and
	 *        defualt label/tooltip.
	 *        A name can be specified in encode.itemName,
	 *        or dataItem.name (only for series option data),
	 *        or provided in nameList from outside.
	 * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number
	 */
	
	
	listProto.initData = function (data, nameList, dimValueGetter) {
	  var notProvider = Source.isInstance(data) || zrUtil.isArrayLike(data);
	
	  if (notProvider) {
	    data = new DefaultDataProvider(data, this.dimensions.length);
	  }
	
	  this._rawData = data; // Clear
	
	  this._storage = {};
	  this._indices = null;
	  this._nameList = nameList || [];
	  this._idList = [];
	  this._nameRepeatCount = {};
	
	  if (!dimValueGetter) {
	    this.hasItemOption = false;
	  }
	  /**
	   * @readOnly
	   */
	
	
	  this.defaultDimValueGetter = defaultDimValueGetters[this._rawData.getSource().sourceFormat]; // Default dim value getter
	
	  this._dimValueGetter = dimValueGetter = dimValueGetter || this.defaultDimValueGetter; // Reset raw extent.
	
	  this._rawExtent = {};
	
	  this._initDataFromProvider(0, data.count()); // If data has no item option.
	
	
	  if (data.pure) {
	    this.hasItemOption = false;
	  }
	};
	
	listProto.getProvider = function () {
	  return this._rawData;
	};
	
	listProto.appendData = function (data) {
	  var rawData = this._rawData;
	  var start = this.count();
	  rawData.appendData(data);
	  var end = rawData.count();
	
	  if (!rawData.persistent) {
	    end += start;
	  }
	
	  this._initDataFromProvider(start, end);
	};
	
	listProto._initDataFromProvider = function (start, end) {
	  // Optimize.
	  if (start >= end) {
	    return;
	  }
	
	  var chunkSize = this._chunkSize;
	  var rawData = this._rawData;
	  var storage = this._storage;
	  var dimensions = this.dimensions;
	  var dimLen = dimensions.length;
	  var dimensionInfoMap = this._dimensionInfos;
	  var nameList = this._nameList;
	  var idList = this._idList;
	  var rawExtent = this._rawExtent;
	  var nameRepeatCount = this._nameRepeatCount = {};
	  var nameDimIdx;
	  var chunkCount = this._chunkCount;
	  var lastChunkIndex = chunkCount - 1;
	
	  for (var i = 0; i < dimLen; i++) {
	    var dim = dimensions[i];
	
	    if (!rawExtent[dim]) {
	      rawExtent[dim] = getInitialExtent();
	    }
	
	    var dimInfo = dimensionInfoMap[dim];
	
	    if (dimInfo.otherDims.itemName === 0) {
	      nameDimIdx = this._nameDimIdx = i;
	    }
	
	    if (dimInfo.otherDims.itemId === 0) {
	      this._idDimIdx = i;
	    }
	
	    var DataCtor = dataCtors[dimInfo.type];
	
	    if (!storage[dim]) {
	      storage[dim] = [];
	    }
	
	    var resizeChunkArray = storage[dim][lastChunkIndex];
	
	    if (resizeChunkArray && resizeChunkArray.length < chunkSize) {
	      var newStore = new DataCtor(Math.min(end - lastChunkIndex * chunkSize, chunkSize)); // The cost of the copy is probably inconsiderable
	      // within the initial chunkSize.
	
	      for (var j = 0; j < resizeChunkArray.length; j++) {
	        newStore[j] = resizeChunkArray[j];
	      }
	
	      storage[dim][lastChunkIndex] = newStore;
	    } // Create new chunks.
	
	
	    for (var k = chunkCount * chunkSize; k < end; k += chunkSize) {
	      storage[dim].push(new DataCtor(Math.min(end - k, chunkSize)));
	    }
	
	    this._chunkCount = storage[dim].length;
	  }
	
	  var dataItem = new Array(dimLen);
	
	  for (var idx = start; idx < end; idx++) {
	    // NOTICE: Try not to write things into dataItem
	    dataItem = rawData.getItem(idx, dataItem); // Each data item is value
	    // [1, 2]
	    // 2
	    // Bar chart, line chart which uses category axis
	    // only gives the 'y' value. 'x' value is the indices of category
	    // Use a tempValue to normalize the value to be a (x, y) value
	
	    var chunkIndex = Math.floor(idx / chunkSize);
	    var chunkOffset = idx % chunkSize; // Store the data by dimensions
	
	    for (var k = 0; k < dimLen; k++) {
	      var dim = dimensions[k];
	      var dimStorage = storage[dim][chunkIndex]; // PENDING NULL is empty or zero
	
	      var val = this._dimValueGetter(dataItem, dim, idx, k);
	
	      dimStorage[chunkOffset] = val;
	      var dimRawExtent = rawExtent[dim];
	
	      if (val < dimRawExtent[0]) {
	        dimRawExtent[0] = val;
	      }
	
	      if (val > dimRawExtent[1]) {
	        dimRawExtent[1] = val;
	      }
	    } // ??? FIXME not check by pure but sourceFormat?
	    // TODO refactor these logic.
	
	
	    if (!rawData.pure) {
	      var name = nameList[idx];
	
	      if (dataItem && name == null) {
	        // If dataItem is {name: ...}, it has highest priority.
	        // That is appropriate for many common cases.
	        if (dataItem.name != null) {
	          // There is no other place to persistent dataItem.name,
	          // so save it to nameList.
	          nameList[idx] = name = dataItem.name;
	        } else if (nameDimIdx != null) {
	          var nameDim = dimensions[nameDimIdx];
	          var nameDimChunk = storage[nameDim][chunkIndex];
	
	          if (nameDimChunk) {
	            name = nameDimChunk[chunkOffset];
	            var ordinalMeta = dimensionInfoMap[nameDim].ordinalMeta;
	
	            if (ordinalMeta && ordinalMeta.categories.length) {
	              name = ordinalMeta.categories[name];
	            }
	          }
	        }
	      } // Try using the id in option
	      // id or name is used on dynamical data, mapping old and new items.
	
	
	      var id = dataItem == null ? null : dataItem.id;
	
	      if (id == null && name != null) {
	        // Use name as id and add counter to avoid same name
	        nameRepeatCount[name] = nameRepeatCount[name] || 0;
	        id = name;
	
	        if (nameRepeatCount[name] > 0) {
	          id += '__ec__' + nameRepeatCount[name];
	        }
	
	        nameRepeatCount[name]++;
	      }
	
	      id != null && (idList[idx] = id);
	    }
	  }
	
	  if (!rawData.persistent && rawData.clean) {
	    // Clean unused data if data source is typed array.
	    rawData.clean();
	  }
	
	  this._rawCount = this._count = end; // Reset data extent
	
	  this._extent = {};
	  prepareInvertedIndex(this);
	};
	
	function prepareInvertedIndex(list) {
	  var invertedIndicesMap = list._invertedIndicesMap;
	  zrUtil.each(invertedIndicesMap, function (invertedIndices, dim) {
	    var dimInfo = list._dimensionInfos[dim]; // Currently, only dimensions that has ordinalMeta can create inverted indices.
	
	    var ordinalMeta = dimInfo.ordinalMeta;
	
	    if (ordinalMeta) {
	      invertedIndices = invertedIndicesMap[dim] = new CtorUint32Array(ordinalMeta.categories.length); // The default value of TypedArray is 0. To avoid miss
	      // mapping to 0, we should set it as NaN.
	
	      for (var i = 0; i < invertedIndices.length; i++) {
	        invertedIndices[i] = NaN;
	      }
	
	      for (var i = 0; i < list._count; i++) {
	        // Only support the case that all values are distinct.
	        invertedIndices[list.get(dim, i)] = i;
	      }
	    }
	  });
	}
	
	function getRawValueFromStore(list, dimIndex, rawIndex) {
	  var val;
	
	  if (dimIndex != null) {
	    var chunkSize = list._chunkSize;
	    var chunkIndex = Math.floor(rawIndex / chunkSize);
	    var chunkOffset = rawIndex % chunkSize;
	    var dim = list.dimensions[dimIndex];
	    var chunk = list._storage[dim][chunkIndex];
	
	    if (chunk) {
	      val = chunk[chunkOffset];
	      var ordinalMeta = list._dimensionInfos[dim].ordinalMeta;
	
	      if (ordinalMeta && ordinalMeta.categories.length) {
	        val = ordinalMeta.categories[val];
	      }
	    }
	  }
	
	  return val;
	}
	/**
	 * @return {number}
	 */
	
	
	listProto.count = function () {
	  return this._count;
	};
	
	listProto.getIndices = function () {
	  var newIndices;
	  var indices = this._indices;
	
	  if (indices) {
	    var Ctor = indices.constructor;
	    var thisCount = this._count; // `new Array(a, b, c)` is different from `new Uint32Array(a, b, c)`.
	
	    if (Ctor === Array) {
	      newIndices = new Ctor(thisCount);
	
	      for (var i = 0; i < thisCount; i++) {
	        newIndices[i] = indices[i];
	      }
	    } else {
	      newIndices = new Ctor(indices.buffer, 0, thisCount);
	    }
	  } else {
	    var Ctor = getIndicesCtor(this);
	    var newIndices = new Ctor(this.count());
	
	    for (var i = 0; i < newIndices.length; i++) {
	      newIndices[i] = i;
	    }
	  }
	
	  return newIndices;
	};
	/**
	 * Get value. Return NaN if idx is out of range.
	 * @param {string} dim Dim must be concrete name.
	 * @param {number} idx
	 * @param {boolean} stack
	 * @return {number}
	 */
	
	
	listProto.get = function (dim, idx
	/*, stack */
	) {
	  if (!(idx >= 0 && idx < this._count)) {
	    return NaN;
	  }
	
	  var storage = this._storage;
	
	  if (!storage[dim]) {
	    // TODO Warn ?
	    return NaN;
	  }
	
	  idx = this.getRawIndex(idx);
	  var chunkIndex = Math.floor(idx / this._chunkSize);
	  var chunkOffset = idx % this._chunkSize;
	  var chunkStore = storage[dim][chunkIndex];
	  var value = chunkStore[chunkOffset]; // FIXME ordinal data type is not stackable
	  // if (stack) {
	  //     var dimensionInfo = this._dimensionInfos[dim];
	  //     if (dimensionInfo && dimensionInfo.stackable) {
	  //         var stackedOn = this.stackedOn;
	  //         while (stackedOn) {
	  //             // Get no stacked data of stacked on
	  //             var stackedValue = stackedOn.get(dim, idx);
	  //             // Considering positive stack, negative stack and empty data
	  //             if ((value >= 0 && stackedValue > 0)  // Positive stack
	  //                 || (value <= 0 && stackedValue < 0) // Negative stack
	  //             ) {
	  //                 value += stackedValue;
	  //             }
	  //             stackedOn = stackedOn.stackedOn;
	  //         }
	  //     }
	  // }
	
	  return value;
	};
	/**
	 * @param {string} dim concrete dim
	 * @param {number} rawIndex
	 * @return {number|string}
	 */
	
	
	listProto.getByRawIndex = function (dim, rawIdx) {
	  if (!(rawIdx >= 0 && rawIdx < this._rawCount)) {
	    return NaN;
	  }
	
	  var dimStore = this._storage[dim];
	
	  if (!dimStore) {
	    // TODO Warn ?
	    return NaN;
	  }
	
	  var chunkIndex = Math.floor(rawIdx / this._chunkSize);
	  var chunkOffset = rawIdx % this._chunkSize;
	  var chunkStore = dimStore[chunkIndex];
	  return chunkStore[chunkOffset];
	};
	/**
	 * FIXME Use `get` on chrome maybe slow(in filterSelf and selectRange).
	 * Hack a much simpler _getFast
	 * @private
	 */
	
	
	listProto._getFast = function (dim, rawIdx) {
	  var chunkIndex = Math.floor(rawIdx / this._chunkSize);
	  var chunkOffset = rawIdx % this._chunkSize;
	  var chunkStore = this._storage[dim][chunkIndex];
	  return chunkStore[chunkOffset];
	};
	/**
	 * Get value for multi dimensions.
	 * @param {Array.<string>} [dimensions] If ignored, using all dimensions.
	 * @param {number} idx
	 * @return {number}
	 */
	
	
	listProto.getValues = function (dimensions, idx
	/*, stack */
	) {
	  var values = [];
	
	  if (!zrUtil.isArray(dimensions)) {
	    // stack = idx;
	    idx = dimensions;
	    dimensions = this.dimensions;
	  }
	
	  for (var i = 0, len = dimensions.length; i < len; i++) {
	    values.push(this.get(dimensions[i], idx
	    /*, stack */
	    ));
	  }
	
	  return values;
	};
	/**
	 * If value is NaN. Inlcuding '-'
	 * Only check the coord dimensions.
	 * @param {string} dim
	 * @param {number} idx
	 * @return {number}
	 */
	
	
	listProto.hasValue = function (idx) {
	  var dataDimsOnCoord = this._dimensionsSummary.dataDimsOnCoord;
	  var dimensionInfos = this._dimensionInfos;
	
	  for (var i = 0, len = dataDimsOnCoord.length; i < len; i++) {
	    if ( // Ordinal type can be string or number
	    dimensionInfos[dataDimsOnCoord[i]].type !== 'ordinal' // FIXME check ordinal when using index?
	    && isNaN(this.get(dataDimsOnCoord[i], idx))) {
	      return false;
	    }
	  }
	
	  return true;
	};
	/**
	 * Get extent of data in one dimension
	 * @param {string} dim
	 * @param {boolean} stack
	 */
	
	
	listProto.getDataExtent = function (dim
	/*, stack */
	) {
	  // Make sure use concrete dim as cache name.
	  dim = this.getDimension(dim);
	  var dimData = this._storage[dim];
	  var initialExtent = getInitialExtent(); // stack = !!((stack || false) && this.getCalculationInfo(dim));
	
	  if (!dimData) {
	    return initialExtent;
	  } // Make more strict checkings to ensure hitting cache.
	
	
	  var currEnd = this.count(); // var cacheName = [dim, !!stack].join('_');
	  // var cacheName = dim;
	  // Consider the most cases when using data zoom, `getDataExtent`
	  // happened before filtering. We cache raw extent, which is not
	  // necessary to be cleared and recalculated when restore data.
	
	  var useRaw = !this._indices; // && !stack;
	
	  var dimExtent;
	
	  if (useRaw) {
	    return this._rawExtent[dim].slice();
	  }
	
	  dimExtent = this._extent[dim];
	
	  if (dimExtent) {
	    return dimExtent.slice();
	  }
	
	  dimExtent = initialExtent;
	  var min = dimExtent[0];
	  var max = dimExtent[1];
	
	  for (var i = 0; i < currEnd; i++) {
	    // var value = stack ? this.get(dim, i, true) : this._getFast(dim, this.getRawIndex(i));
	    var value = this._getFast(dim, this.getRawIndex(i));
	
	    value < min && (min = value);
	    value > max && (max = value);
	  }
	
	  dimExtent = [min, max];
	  this._extent[dim] = dimExtent;
	  return dimExtent;
	};
	/**
	 * Optimize for the scenario that data is filtered by a given extent.
	 * Consider that if data amount is more than hundreds of thousand,
	 * extent calculation will cost more than 10ms and the cache will
	 * be erased because of the filtering.
	 */
	
	
	listProto.getApproximateExtent = function (dim
	/*, stack */
	) {
	  dim = this.getDimension(dim);
	  return this._approximateExtent[dim] || this.getDataExtent(dim
	  /*, stack */
	  );
	};
	
	listProto.setApproximateExtent = function (extent, dim
	/*, stack */
	) {
	  dim = this.getDimension(dim);
	  this._approximateExtent[dim] = extent.slice();
	};
	/**
	 * @param {string} key
	 * @return {*}
	 */
	
	
	listProto.getCalculationInfo = function (key) {
	  return this._calculationInfo[key];
	};
	/**
	 * @param {string|Object} key or k-v object
	 * @param {*} [value]
	 */
	
	
	listProto.setCalculationInfo = function (key, value) {
	  isObject(key) ? zrUtil.extend(this._calculationInfo, key) : this._calculationInfo[key] = value;
	};
	/**
	 * Get sum of data in one dimension
	 * @param {string} dim
	 */
	
	
	listProto.getSum = function (dim
	/*, stack */
	) {
	  var dimData = this._storage[dim];
	  var sum = 0;
	
	  if (dimData) {
	    for (var i = 0, len = this.count(); i < len; i++) {
	      var value = this.get(dim, i
	      /*, stack */
	      );
	
	      if (!isNaN(value)) {
	        sum += value;
	      }
	    }
	  }
	
	  return sum;
	};
	/**
	 * Get median of data in one dimension
	 * @param {string} dim
	 */
	
	
	listProto.getMedian = function (dim
	/*, stack */
	) {
	  var dimDataArray = []; // map all data of one dimension
	
	  this.each(dim, function (val, idx) {
	    if (!isNaN(val)) {
	      dimDataArray.push(val);
	    }
	  }); // TODO
	  // Use quick select?
	  // immutability & sort
	
	  var sortedDimDataArray = [].concat(dimDataArray).sort(function (a, b) {
	    return a - b;
	  });
	  var len = this.count(); // calculate median
	
	  return len === 0 ? 0 : len % 2 === 1 ? sortedDimDataArray[(len - 1) / 2] : (sortedDimDataArray[len / 2] + sortedDimDataArray[len / 2 - 1]) / 2;
	}; // /**
	//  * Retreive the index with given value
	//  * @param {string} dim Concrete dimension.
	//  * @param {number} value
	//  * @return {number}
	//  */
	// Currently incorrect: should return dataIndex but not rawIndex.
	// Do not fix it until this method is to be used somewhere.
	// FIXME Precision of float value
	// listProto.indexOf = function (dim, value) {
	//     var storage = this._storage;
	//     var dimData = storage[dim];
	//     var chunkSize = this._chunkSize;
	//     if (dimData) {
	//         for (var i = 0, len = this.count(); i < len; i++) {
	//             var chunkIndex = Math.floor(i / chunkSize);
	//             var chunkOffset = i % chunkSize;
	//             if (dimData[chunkIndex][chunkOffset] === value) {
	//                 return i;
	//             }
	//         }
	//     }
	//     return -1;
	// };
	
	/**
	 * Only support the dimension which inverted index created.
	 * Do not support other cases until required.
	 * @param {string} concrete dim
	 * @param {number|string} value
	 * @return {number} rawIndex
	 */
	
	
	listProto.rawIndexOf = function (dim, value) {
	  var invertedIndices = dim && this._invertedIndicesMap[dim];
	  var rawIndex = invertedIndices[value];
	
	  if (rawIndex == null || isNaN(rawIndex)) {
	    return -1;
	  }
	
	  return rawIndex;
	};
	/**
	 * Retreive the index with given name
	 * @param {number} idx
	 * @param {number} name
	 * @return {number}
	 */
	
	
	listProto.indexOfName = function (name) {
	  for (var i = 0, len = this.count(); i < len; i++) {
	    if (this.getName(i) === name) {
	      return i;
	    }
	  }
	
	  return -1;
	};
	/**
	 * Retreive the index with given raw data index
	 * @param {number} idx
	 * @param {number} name
	 * @return {number}
	 */
	
	
	listProto.indexOfRawIndex = function (rawIndex) {
	  if (!this._indices) {
	    return rawIndex;
	  }
	
	  if (rawIndex >= this._rawCount || rawIndex < 0) {
	    return -1;
	  } // Indices are ascending
	
	
	  var indices = this._indices; // If rawIndex === dataIndex
	
	  var rawDataIndex = indices[rawIndex];
	
	  if (rawDataIndex != null && rawDataIndex < this._count && rawDataIndex === rawIndex) {
	    return rawIndex;
	  }
	
	  var left = 0;
	  var right = this._count - 1;
	
	  while (left <= right) {
	    var mid = (left + right) / 2 | 0;
	
	    if (indices[mid] < rawIndex) {
	      left = mid + 1;
	    } else if (indices[mid] > rawIndex) {
	      right = mid - 1;
	    } else {
	      return mid;
	    }
	  }
	
	  return -1;
	};
	/**
	 * Retreive the index of nearest value
	 * @param {string} dim
	 * @param {number} value
	 * @param {number} [maxDistance=Infinity]
	 * @return {Array.<number>} Considere multiple points has the same value.
	 */
	
	
	listProto.indicesOfNearest = function (dim, value, maxDistance) {
	  var storage = this._storage;
	  var dimData = storage[dim];
	  var nearestIndices = [];
	
	  if (!dimData) {
	    return nearestIndices;
	  }
	
	  if (maxDistance == null) {
	    maxDistance = Infinity;
	  }
	
	  var minDist = Number.MAX_VALUE;
	  var minDiff = -1;
	
	  for (var i = 0, len = this.count(); i < len; i++) {
	    var diff = value - this.get(dim, i
	    /*, stack */
	    );
	    var dist = Math.abs(diff);
	
	    if (diff <= maxDistance && dist <= minDist) {
	      // For the case of two data are same on xAxis, which has sequence data.
	      // Show the nearest index
	      // https://github.com/ecomfe/echarts/issues/2869
	      if (dist < minDist || diff >= 0 && minDiff < 0) {
	        minDist = dist;
	        minDiff = diff;
	        nearestIndices.length = 0;
	      }
	
	      nearestIndices.push(i);
	    }
	  }
	
	  return nearestIndices;
	};
	/**
	 * Get raw data index
	 * @param {number} idx
	 * @return {number}
	 */
	
	
	listProto.getRawIndex = getRawIndexWithoutIndices;
	
	function getRawIndexWithoutIndices(idx) {
	  return idx;
	}
	
	function getRawIndexWithIndices(idx) {
	  if (idx < this._count && idx >= 0) {
	    return this._indices[idx];
	  }
	
	  return -1;
	}
	/**
	 * Get raw data item
	 * @param {number} idx
	 * @return {number}
	 */
	
	
	listProto.getRawDataItem = function (idx) {
	  if (!this._rawData.persistent) {
	    var val = [];
	
	    for (var i = 0; i < this.dimensions.length; i++) {
	      var dim = this.dimensions[i];
	      val.push(this.get(dim, idx));
	    }
	
	    return val;
	  } else {
	    return this._rawData.getItem(this.getRawIndex(idx));
	  }
	};
	/**
	 * @param {number} idx
	 * @param {boolean} [notDefaultIdx=false]
	 * @return {string}
	 */
	
	
	listProto.getName = function (idx) {
	  var rawIndex = this.getRawIndex(idx);
	  return this._nameList[rawIndex] || getRawValueFromStore(this, this._nameDimIdx, rawIndex) || '';
	};
	/**
	 * @param {number} idx
	 * @param {boolean} [notDefaultIdx=false]
	 * @return {string}
	 */
	
	
	listProto.getId = function (idx) {
	  return getId(this, this.getRawIndex(idx));
	};
	
	function getId(list, rawIndex) {
	  var id = list._idList[rawIndex];
	
	  if (id == null) {
	    id = getRawValueFromStore(list, list._idDimIdx, rawIndex);
	  }
	
	  if (id == null) {
	    // FIXME Check the usage in graph, should not use prefix.
	    id = ID_PREFIX + rawIndex;
	  }
	
	  return id;
	}
	
	function normalizeDimensions(dimensions) {
	  if (!zrUtil.isArray(dimensions)) {
	    dimensions = [dimensions];
	  }
	
	  return dimensions;
	}
	
	function validateDimensions(list, dims) {
	  for (var i = 0; i < dims.length; i++) {
	    // stroage may be empty when no data, so use
	    // dimensionInfos to check.
	    if (!list._dimensionInfos[dims[i]]) {
	      console.error('Unkown dimension ' + dims[i]);
	    }
	  }
	}
	/**
	 * Data iteration
	 * @param {string|Array.<string>}
	 * @param {Function} cb
	 * @param {*} [context=this]
	 *
	 * @example
	 *  list.each('x', function (x, idx) {});
	 *  list.each(['x', 'y'], function (x, y, idx) {});
	 *  list.each(function (idx) {})
	 */
	
	
	listProto.each = function (dims, cb, context, contextCompat) {
	  'use strict';
	
	  if (!this._count) {
	    return;
	  }
	
	  if (typeof dims === 'function') {
	    contextCompat = context;
	    context = cb;
	    cb = dims;
	    dims = [];
	  } // contextCompat just for compat echarts3
	
	
	  context = context || contextCompat || this;
	  dims = zrUtil.map(normalizeDimensions(dims), this.getDimension, this);
	  var dimSize = dims.length;
	
	  for (var i = 0; i < this.count(); i++) {
	    // Simple optimization
	    switch (dimSize) {
	      case 0:
	        cb.call(context, i);
	        break;
	
	      case 1:
	        cb.call(context, this.get(dims[0], i), i);
	        break;
	
	      case 2:
	        cb.call(context, this.get(dims[0], i), this.get(dims[1], i), i);
	        break;
	
	      default:
	        var k = 0;
	        var value = [];
	
	        for (; k < dimSize; k++) {
	          value[k] = this.get(dims[k], i);
	        } // Index
	
	
	        value[k] = i;
	        cb.apply(context, value);
	    }
	  }
	};
	/**
	 * Data filter
	 * @param {string|Array.<string>}
	 * @param {Function} cb
	 * @param {*} [context=this]
	 */
	
	
	listProto.filterSelf = function (dimensions, cb, context, contextCompat) {
	  'use strict';
	
	  if (!this._count) {
	    return;
	  }
	
	  if (typeof dimensions === 'function') {
	    contextCompat = context;
	    context = cb;
	    cb = dimensions;
	    dimensions = [];
	  } // contextCompat just for compat echarts3
	
	
	  context = context || contextCompat || this;
	  dimensions = zrUtil.map(normalizeDimensions(dimensions), this.getDimension, this);
	  var count = this.count();
	  var Ctor = getIndicesCtor(this);
	  var newIndices = new Ctor(count);
	  var value = [];
	  var dimSize = dimensions.length;
	  var offset = 0;
	  var dim0 = dimensions[0];
	
	  for (var i = 0; i < count; i++) {
	    var keep;
	    var rawIdx = this.getRawIndex(i); // Simple optimization
	
	    if (dimSize === 0) {
	      keep = cb.call(context, i);
	    } else if (dimSize === 1) {
	      var val = this._getFast(dim0, rawIdx);
	
	      keep = cb.call(context, val, i);
	    } else {
	      for (var k = 0; k < dimSize; k++) {
	        value[k] = this._getFast(dim0, rawIdx);
	      }
	
	      value[k] = i;
	      keep = cb.apply(context, value);
	    }
	
	    if (keep) {
	      newIndices[offset++] = rawIdx;
	    }
	  } // Set indices after filtered.
	
	
	  if (offset < count) {
	    this._indices = newIndices;
	  }
	
	  this._count = offset; // Reset data extent
	
	  this._extent = {};
	  this.getRawIndex = this._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
	  return this;
	};
	/**
	 * Select data in range. (For optimization of filter)
	 * (Manually inline code, support 5 million data filtering in data zoom.)
	 */
	
	
	listProto.selectRange = function (range) {
	  'use strict';
	
	  if (!this._count) {
	    return;
	  }
	
	  var dimensions = [];
	
	  for (var dim in range) {
	    if (range.hasOwnProperty(dim)) {
	      dimensions.push(dim);
	    }
	  }
	
	  var dimSize = dimensions.length;
	
	  if (!dimSize) {
	    return;
	  }
	
	  var originalCount = this.count();
	  var Ctor = getIndicesCtor(this);
	  var newIndices = new Ctor(originalCount);
	  var offset = 0;
	  var dim0 = dimensions[0];
	  var min = range[dim0][0];
	  var max = range[dim0][1];
	  var quickFinished = false;
	
	  if (!this._indices) {
	    // Extreme optimization for common case. About 2x faster in chrome.
	    var idx = 0;
	
	    if (dimSize === 1) {
	      var dimStorage = this._storage[dimensions[0]];
	
	      for (var k = 0; k < this._chunkCount; k++) {
	        var chunkStorage = dimStorage[k];
	        var len = Math.min(this._count - k * this._chunkSize, this._chunkSize);
	
	        for (var i = 0; i < len; i++) {
	          var val = chunkStorage[i]; // NaN will not be filtered. Consider the case, in line chart, empty
	          // value indicates the line should be broken. But for the case like
	          // scatter plot, a data item with empty value will not be rendered,
	          // but the axis extent may be effected if some other dim of the data
	          // item has value. Fortunately it is not a significant negative effect.
	
	          if (val >= min && val <= max || isNaN(val)) {
	            newIndices[offset++] = idx;
	          }
	
	          idx++;
	        }
	      }
	
	      quickFinished = true;
	    } else if (dimSize === 2) {
	      var dimStorage = this._storage[dim0];
	      var dimStorage2 = this._storage[dimensions[1]];
	      var min2 = range[dimensions[1]][0];
	      var max2 = range[dimensions[1]][1];
	
	      for (var k = 0; k < this._chunkCount; k++) {
	        var chunkStorage = dimStorage[k];
	        var chunkStorage2 = dimStorage2[k];
	        var len = Math.min(this._count - k * this._chunkSize, this._chunkSize);
	
	        for (var i = 0; i < len; i++) {
	          var val = chunkStorage[i];
	          var val2 = chunkStorage2[i]; // Do not filter NaN, see comment above.
	
	          if ((val >= min && val <= max || isNaN(val)) && (val2 >= min2 && val2 <= max2 || isNaN(val2))) {
	            newIndices[offset++] = idx;
	          }
	
	          idx++;
	        }
	      }
	
	      quickFinished = true;
	    }
	  }
	
	  if (!quickFinished) {
	    if (dimSize === 1) {
	      for (var i = 0; i < originalCount; i++) {
	        var rawIndex = this.getRawIndex(i);
	
	        var val = this._getFast(dim0, rawIndex); // Do not filter NaN, see comment above.
	
	
	        if (val >= min && val <= max || isNaN(val)) {
	          newIndices[offset++] = rawIndex;
	        }
	      }
	    } else {
	      for (var i = 0; i < originalCount; i++) {
	        var keep = true;
	        var rawIndex = this.getRawIndex(i);
	
	        for (var k = 0; k < dimSize; k++) {
	          var dimk = dimensions[k];
	
	          var val = this._getFast(dim, rawIndex); // Do not filter NaN, see comment above.
	
	
	          if (val < range[dimk][0] || val > range[dimk][1]) {
	            keep = false;
	          }
	        }
	
	        if (keep) {
	          newIndices[offset++] = this.getRawIndex(i);
	        }
	      }
	    }
	  } // Set indices after filtered.
	
	
	  if (offset < originalCount) {
	    this._indices = newIndices;
	  }
	
	  this._count = offset; // Reset data extent
	
	  this._extent = {};
	  this.getRawIndex = this._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
	  return this;
	};
	/**
	 * Data mapping to a plain array
	 * @param {string|Array.<string>} [dimensions]
	 * @param {Function} cb
	 * @param {*} [context=this]
	 * @return {Array}
	 */
	
	
	listProto.mapArray = function (dimensions, cb, context, contextCompat) {
	  'use strict';
	
	  if (typeof dimensions === 'function') {
	    contextCompat = context;
	    context = cb;
	    cb = dimensions;
	    dimensions = [];
	  } // contextCompat just for compat echarts3
	
	
	  context = context || contextCompat || this;
	  var result = [];
	  this.each(dimensions, function () {
	    result.push(cb && cb.apply(this, arguments));
	  }, context);
	  return result;
	}; // Data in excludeDimensions is copied, otherwise transfered.
	
	
	function cloneListForMapAndSample(original, excludeDimensions) {
	  var allDimensions = original.dimensions;
	  var list = new List(zrUtil.map(allDimensions, original.getDimensionInfo, original), original.hostModel); // FIXME If needs stackedOn, value may already been stacked
	
	  transferProperties(list, original);
	  var storage = list._storage = {};
	  var originalStorage = original._storage; // Init storage
	
	  for (var i = 0; i < allDimensions.length; i++) {
	    var dim = allDimensions[i];
	
	    if (originalStorage[dim]) {
	      // Notice that we do not reset invertedIndicesMap here, becuase
	      // there is no scenario of mapping or sampling ordinal dimension.
	      if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {
	        storage[dim] = cloneDimStore(originalStorage[dim]);
	        list._rawExtent[dim] = getInitialExtent();
	        list._extent[dim] = null;
	      } else {
	        // Direct reference for other dimensions
	        storage[dim] = originalStorage[dim];
	      }
	    }
	  }
	
	  return list;
	}
	
	function cloneDimStore(originalDimStore) {
	  var newDimStore = new Array(originalDimStore.length);
	
	  for (var j = 0; j < originalDimStore.length; j++) {
	    newDimStore[j] = cloneChunk(originalDimStore[j]);
	  }
	
	  return newDimStore;
	}
	
	function getInitialExtent() {
	  return [Infinity, -Infinity];
	}
	/**
	 * Data mapping to a new List with given dimensions
	 * @param {string|Array.<string>} dimensions
	 * @param {Function} cb
	 * @param {*} [context=this]
	 * @return {Array}
	 */
	
	
	listProto.map = function (dimensions, cb, context, contextCompat) {
	  'use strict'; // contextCompat just for compat echarts3
	
	  context = context || contextCompat || this;
	  dimensions = zrUtil.map(normalizeDimensions(dimensions), this.getDimension, this);
	  var list = cloneListForMapAndSample(this, dimensions); // Following properties are all immutable.
	  // So we can reference to the same value
	
	  list._indices = this._indices;
	  list.getRawIndex = list._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
	  var storage = list._storage;
	  var tmpRetValue = [];
	  var chunkSize = this._chunkSize;
	  var dimSize = dimensions.length;
	  var dataCount = this.count();
	  var values = [];
	  var rawExtent = list._rawExtent;
	
	  for (var dataIndex = 0; dataIndex < dataCount; dataIndex++) {
	    for (var dimIndex = 0; dimIndex < dimSize; dimIndex++) {
	      values[dimIndex] = this.get(dimensions[dimIndex], dataIndex
	      /*, stack */
	      );
	    }
	
	    values[dimSize] = dataIndex;
	    var retValue = cb && cb.apply(context, values);
	
	    if (retValue != null) {
	      // a number or string (in oridinal dimension)?
	      if (typeof retValue !== 'object') {
	        tmpRetValue[0] = retValue;
	        retValue = tmpRetValue;
	      }
	
	      var rawIndex = this.getRawIndex(dataIndex);
	      var chunkIndex = Math.floor(rawIndex / chunkSize);
	      var chunkOffset = rawIndex % chunkSize;
	
	      for (var i = 0; i < retValue.length; i++) {
	        var dim = dimensions[i];
	        var val = retValue[i];
	        var rawExtentOnDim = rawExtent[dim];
	        var dimStore = storage[dim];
	
	        if (dimStore) {
	          dimStore[chunkIndex][chunkOffset] = val;
	        }
	
	        if (val < rawExtentOnDim[0]) {
	          rawExtentOnDim[0] = val;
	        }
	
	        if (val > rawExtentOnDim[1]) {
	          rawExtentOnDim[1] = val;
	        }
	      }
	    }
	  }
	
	  return list;
	};
	/**
	 * Large data down sampling on given dimension
	 * @param {string} dimension
	 * @param {number} rate
	 * @param {Function} sampleValue
	 * @param {Function} sampleIndex Sample index for name and id
	 */
	
	
	listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {
	  var list = cloneListForMapAndSample(this, [dimension]);
	  var targetStorage = list._storage;
	  var frameValues = [];
	  var frameSize = Math.floor(1 / rate);
	  var dimStore = targetStorage[dimension];
	  var len = this.count();
	  var chunkSize = this._chunkSize;
	  var rawExtentOnDim = list._rawExtent[dimension];
	  var newIndices = new (getIndicesCtor(this))(len);
	  var offset = 0;
	
	  for (var i = 0; i < len; i += frameSize) {
	    // Last frame
	    if (frameSize > len - i) {
	      frameSize = len - i;
	      frameValues.length = frameSize;
	    }
	
	    for (var k = 0; k < frameSize; k++) {
	      var dataIdx = this.getRawIndex(i + k);
	      var originalChunkIndex = Math.floor(dataIdx / chunkSize);
	      var originalChunkOffset = dataIdx % chunkSize;
	      frameValues[k] = dimStore[originalChunkIndex][originalChunkOffset];
	    }
	
	    var value = sampleValue(frameValues);
	    var sampleFrameIdx = this.getRawIndex(Math.min(i + sampleIndex(frameValues, value) || 0, len - 1));
	    var sampleChunkIndex = Math.floor(sampleFrameIdx / chunkSize);
	    var sampleChunkOffset = sampleFrameIdx % chunkSize; // Only write value on the filtered data
	
	    dimStore[sampleChunkIndex][sampleChunkOffset] = value;
	
	    if (value < rawExtentOnDim[0]) {
	      rawExtentOnDim[0] = value;
	    }
	
	    if (value > rawExtentOnDim[1]) {
	      rawExtentOnDim[1] = value;
	    }
	
	    newIndices[offset++] = sampleFrameIdx;
	  }
	
	  list._count = offset;
	  list._indices = newIndices;
	  list.getRawIndex = getRawIndexWithIndices;
	  return list;
	};
	/**
	 * Get model of one data item.
	 *
	 * @param {number} idx
	 */
	// FIXME Model proxy ?
	
	
	listProto.getItemModel = function (idx) {
	  var hostModel = this.hostModel;
	  return new Model(this.getRawDataItem(idx), hostModel, hostModel && hostModel.ecModel);
	};
	/**
	 * Create a data differ
	 * @param {module:echarts/data/List} otherList
	 * @return {module:echarts/data/DataDiffer}
	 */
	
	
	listProto.diff = function (otherList) {
	  var thisList = this;
	  return new DataDiffer(otherList ? otherList.getIndices() : [], this.getIndices(), function (idx) {
	    return getId(otherList, idx);
	  }, function (idx) {
	    return getId(thisList, idx);
	  });
	};
	/**
	 * Get visual property.
	 * @param {string} key
	 */
	
	
	listProto.getVisual = function (key) {
	  var visual = this._visual;
	  return visual && visual[key];
	};
	/**
	 * Set visual property
	 * @param {string|Object} key
	 * @param {*} [value]
	 *
	 * @example
	 *  setVisual('color', color);
	 *  setVisual({
	 *      'color': color
	 *  });
	 */
	
	
	listProto.setVisual = function (key, val) {
	  if (isObject(key)) {
	    for (var name in key) {
	      if (key.hasOwnProperty(name)) {
	        this.setVisual(name, key[name]);
	      }
	    }
	
	    return;
	  }
	
	  this._visual = this._visual || {};
	  this._visual[key] = val;
	};
	/**
	 * Set layout property.
	 * @param {string|Object} key
	 * @param {*} [val]
	 */
	
	
	listProto.setLayout = function (key, val) {
	  if (isObject(key)) {
	    for (var name in key) {
	      if (key.hasOwnProperty(name)) {
	        this.setLayout(name, key[name]);
	      }
	    }
	
	    return;
	  }
	
	  this._layout[key] = val;
	};
	/**
	 * Get layout property.
	 * @param  {string} key.
	 * @return {*}
	 */
	
	
	listProto.getLayout = function (key) {
	  return this._layout[key];
	};
	/**
	 * Get layout of single data item
	 * @param {number} idx
	 */
	
	
	listProto.getItemLayout = function (idx) {
	  return this._itemLayouts[idx];
	};
	/**
	 * Set layout of single data item
	 * @param {number} idx
	 * @param {Object} layout
	 * @param {boolean=} [merge=false]
	 */
	
	
	listProto.setItemLayout = function (idx, layout, merge) {
	  this._itemLayouts[idx] = merge ? zrUtil.extend(this._itemLayouts[idx] || {}, layout) : layout;
	};
	/**
	 * Clear all layout of single data item
	 */
	
	
	listProto.clearItemLayouts = function () {
	  this._itemLayouts.length = 0;
	};
	/**
	 * Get visual property of single data item
	 * @param {number} idx
	 * @param {string} key
	 * @param {boolean} [ignoreParent=false]
	 */
	
	
	listProto.getItemVisual = function (idx, key, ignoreParent) {
	  var itemVisual = this._itemVisuals[idx];
	  var val = itemVisual && itemVisual[key];
	
	  if (val == null && !ignoreParent) {
	    // Use global visual property
	    return this.getVisual(key);
	  }
	
	  return val;
	};
	/**
	 * Set visual property of single data item
	 *
	 * @param {number} idx
	 * @param {string|Object} key
	 * @param {*} [value]
	 *
	 * @example
	 *  setItemVisual(0, 'color', color);
	 *  setItemVisual(0, {
	 *      'color': color
	 *  });
	 */
	
	
	listProto.setItemVisual = function (idx, key, value) {
	  var itemVisual = this._itemVisuals[idx] || {};
	  var hasItemVisual = this.hasItemVisual;
	  this._itemVisuals[idx] = itemVisual;
	
	  if (isObject(key)) {
	    for (var name in key) {
	      if (key.hasOwnProperty(name)) {
	        itemVisual[name] = key[name];
	        hasItemVisual[name] = true;
	      }
	    }
	
	    return;
	  }
	
	  itemVisual[key] = value;
	  hasItemVisual[key] = true;
	};
	/**
	 * Clear itemVisuals and list visual.
	 */
	
	
	listProto.clearAllVisual = function () {
	  this._visual = {};
	  this._itemVisuals = [];
	  this.hasItemVisual = {};
	};
	
	var setItemDataAndSeriesIndex = function (child) {
	  child.seriesIndex = this.seriesIndex;
	  child.dataIndex = this.dataIndex;
	  child.dataType = this.dataType;
	};
	/**
	 * Set graphic element relative to data. It can be set as null
	 * @param {number} idx
	 * @param {module:zrender/Element} [el]
	 */
	
	
	listProto.setItemGraphicEl = function (idx, el) {
	  var hostModel = this.hostModel;
	
	  if (el) {
	    // Add data index and series index for indexing the data by element
	    // Useful in tooltip
	    el.dataIndex = idx;
	    el.dataType = this.dataType;
	    el.seriesIndex = hostModel && hostModel.seriesIndex;
	
	    if (el.type === 'group') {
	      el.traverse(setItemDataAndSeriesIndex, el);
	    }
	  }
	
	  this._graphicEls[idx] = el;
	};
	/**
	 * @param {number} idx
	 * @return {module:zrender/Element}
	 */
	
	
	listProto.getItemGraphicEl = function (idx) {
	  return this._graphicEls[idx];
	};
	/**
	 * @param {Function} cb
	 * @param {*} context
	 */
	
	
	listProto.eachItemGraphicEl = function (cb, context) {
	  zrUtil.each(this._graphicEls, function (el, idx) {
	    if (el) {
	      cb && cb.call(context, el, idx);
	    }
	  });
	};
	/**
	 * Shallow clone a new list except visual and layout properties, and graph elements.
	 * New list only change the indices.
	 */
	
	
	listProto.cloneShallow = function (list) {
	  if (!list) {
	    var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);
	    list = new List(dimensionInfoList, this.hostModel);
	  } // FIXME
	
	
	  list._storage = this._storage;
	  transferProperties(list, this); // Clone will not change the data extent and indices
	
	  if (this._indices) {
	    var Ctor = this._indices.constructor;
	    list._indices = new Ctor(this._indices);
	  } else {
	    list._indices = null;
	  }
	
	  list.getRawIndex = list._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
	  return list;
	};
	/**
	 * Wrap some method to add more feature
	 * @param {string} methodName
	 * @param {Function} injectFunction
	 */
	
	
	listProto.wrapMethod = function (methodName, injectFunction) {
	  var originalMethod = this[methodName];
	
	  if (typeof originalMethod !== 'function') {
	    return;
	  }
	
	  this.__wrappedMethods = this.__wrappedMethods || [];
	
	  this.__wrappedMethods.push(methodName);
	
	  this[methodName] = function () {
	    var res = originalMethod.apply(this, arguments);
	    return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));
	  };
	}; // Methods that create a new list based on this list should be listed here.
	// Notice that those method should `RETURN` the new list.
	
	
	listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map']; // Methods that change indices of this list should be listed here.
	
	listProto.CHANGABLE_METHODS = ['filterSelf', 'selectRange'];
	var _default = List;
	module.exports = _default;

/***/ }),
/* 1048 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function defaultKeyGetter(item) {
	  return item;
	}
	/**
	 * @param {Array} oldArr
	 * @param {Array} newArr
	 * @param {Function} oldKeyGetter
	 * @param {Function} newKeyGetter
	 * @param {Object} [context] Can be visited by this.context in callback.
	 */
	
	
	function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter, context) {
	  this._old = oldArr;
	  this._new = newArr;
	  this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;
	  this._newKeyGetter = newKeyGetter || defaultKeyGetter;
	  this.context = context;
	}
	
	DataDiffer.prototype = {
	  constructor: DataDiffer,
	
	  /**
	   * Callback function when add a data
	   */
	  add: function (func) {
	    this._add = func;
	    return this;
	  },
	
	  /**
	   * Callback function when update a data
	   */
	  update: function (func) {
	    this._update = func;
	    return this;
	  },
	
	  /**
	   * Callback function when remove a data
	   */
	  remove: function (func) {
	    this._remove = func;
	    return this;
	  },
	  execute: function () {
	    var oldArr = this._old;
	    var newArr = this._new;
	    var oldDataIndexMap = {};
	    var newDataIndexMap = {};
	    var oldDataKeyArr = [];
	    var newDataKeyArr = [];
	    var i;
	    initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, '_oldKeyGetter', this);
	    initIndexMap(newArr, newDataIndexMap, newDataKeyArr, '_newKeyGetter', this); // Travel by inverted order to make sure order consistency
	    // when duplicate keys exists (consider newDataIndex.pop() below).
	    // For performance consideration, these code below do not look neat.
	
	    for (i = 0; i < oldArr.length; i++) {
	      var key = oldDataKeyArr[i];
	      var idx = newDataIndexMap[key]; // idx can never be empty array here. see 'set null' logic below.
	
	      if (idx != null) {
	        // Consider there is duplicate key (for example, use dataItem.name as key).
	        // We should make sure every item in newArr and oldArr can be visited.
	        var len = idx.length;
	
	        if (len) {
	          len === 1 && (newDataIndexMap[key] = null);
	          idx = idx.unshift();
	        } else {
	          newDataIndexMap[key] = null;
	        }
	
	        this._update && this._update(idx, i);
	      } else {
	        this._remove && this._remove(i);
	      }
	    }
	
	    for (var i = 0; i < newDataKeyArr.length; i++) {
	      var key = newDataKeyArr[i];
	
	      if (newDataIndexMap.hasOwnProperty(key)) {
	        var idx = newDataIndexMap[key];
	
	        if (idx == null) {
	          continue;
	        } // idx can never be empty array here. see 'set null' logic above.
	
	
	        if (!idx.length) {
	          this._add && this._add(idx);
	        } else {
	          for (var j = 0, len = idx.length; j < len; j++) {
	            this._add && this._add(idx[j]);
	          }
	        }
	      }
	    }
	  }
	};
	
	function initIndexMap(arr, map, keyArr, keyGetterName, dataDiffer) {
	  for (var i = 0; i < arr.length; i++) {
	    // Add prefix to avoid conflict with Object.prototype.
	    var key = '_ec_' + dataDiffer[keyGetterName](arr[i], i);
	    var existence = map[key];
	
	    if (existence == null) {
	      keyArr.push(key);
	      map[key] = i;
	    } else {
	      if (!existence.length) {
	        map[key] = existence = [existence];
	      }
	
	      existence.push(i);
	    }
	  }
	}
	
	var _default = DataDiffer;
	module.exports = _default;

/***/ }),
/* 1049 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(931);
	
	var each = _util.each;
	var createHashMap = _util.createHashMap;
	var assert = _util.assert;
	
	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var OTHER_DIMENSIONS = createHashMap(['tooltip', 'label', 'itemName', 'itemId', 'seriesName']);
	
	function summarizeDimensions(data) {
	  var summary = {};
	  var encode = summary.encode = {};
	  var notExtraCoordDimMap = createHashMap();
	  var defaultedLabel = [];
	  var defaultedTooltip = [];
	  each(data.dimensions, function (dimName) {
	    var dimItem = data.getDimensionInfo(dimName);
	    var coordDim = dimItem.coordDim;
	
	    if (coordDim) {
	      var coordDimArr = encode[coordDim];
	
	      if (!encode.hasOwnProperty(coordDim)) {
	        coordDimArr = encode[coordDim] = [];
	      }
	
	      coordDimArr[dimItem.coordDimIndex] = dimName;
	
	      if (!dimItem.isExtraCoord) {
	        notExtraCoordDimMap.set(coordDim, 1); // Use the last coord dim (and label friendly) as default label,
	        // because when dataset is used, it is hard to guess which dimension
	        // can be value dimension. If both show x, y on label is not look good,
	        // and conventionally y axis is focused more.
	
	        if (mayLabelDimType(dimItem.type)) {
	          defaultedLabel[0] = dimName;
	        }
	      }
	
	      if (dimItem.defaultTooltip) {
	        defaultedTooltip.push(dimName);
	      }
	    }
	
	    OTHER_DIMENSIONS.each(function (v, otherDim) {
	      var otherDimArr = encode[otherDim];
	
	      if (!encode.hasOwnProperty(otherDim)) {
	        otherDimArr = encode[otherDim] = [];
	      }
	
	      var dimIndex = dimItem.otherDims[otherDim];
	
	      if (dimIndex != null && dimIndex !== false) {
	        otherDimArr[dimIndex] = dimItem.name;
	      }
	    });
	  });
	  var dataDimsOnCoord = [];
	  var encodeFirstDimNotExtra = {};
	  notExtraCoordDimMap.each(function (v, coordDim) {
	    var dimArr = encode[coordDim]; // ??? FIXME extra coord should not be set in dataDimsOnCoord.
	    // But should fix the case that radar axes: simplify the logic
	    // of `completeDimension`, remove `extraPrefix`.
	
	    encodeFirstDimNotExtra[coordDim] = dimArr[0]; // Not necessary to remove duplicate, because a data
	    // dim canot on more than one coordDim.
	
	    dataDimsOnCoord = dataDimsOnCoord.concat(dimArr);
	  });
	  summary.dataDimsOnCoord = dataDimsOnCoord;
	  summary.encodeFirstDimNotExtra = encodeFirstDimNotExtra;
	  var encodeLabel = encode.label; // FIXME `encode.label` is not recommanded, because formatter can not be set
	  // in this way. Use label.formatter instead. May be remove this approach someday.
	
	  if (encodeLabel && encodeLabel.length) {
	    defaultedLabel = encodeLabel.slice();
	  }
	
	  var encodeTooltip = encode.tooltip;
	
	  if (encodeTooltip && encodeTooltip.length) {
	    defaultedTooltip = encodeTooltip.slice();
	  } else if (!defaultedTooltip.length) {
	    defaultedTooltip = defaultedLabel.slice();
	  }
	
	  encode.defaultedLabel = defaultedLabel;
	  encode.defaultedTooltip = defaultedTooltip;
	  return summary;
	}
	
	function getDimensionTypeByAxis(axisType) {
	  return axisType === 'category' ? 'ordinal' : axisType === 'time' ? 'time' : 'float';
	}
	
	function mayLabelDimType(dimType) {
	  // In most cases, ordinal and time do not suitable for label.
	  // Ordinal info can be displayed on axis. Time is too long.
	  return !(dimType === 'ordinal' || dimType === 'time');
	} // function findTheLastDimMayLabel(data) {
	//     // Get last value dim
	//     var dimensions = data.dimensions.slice();
	//     var valueType;
	//     var valueDim;
	//     while (dimensions.length && (
	//         valueDim = dimensions.pop(),
	//         valueType = data.getDimensionInfo(valueDim).type,
	//         valueType === 'ordinal' || valueType === 'time'
	//     )) {} // jshint ignore:line
	//     return valueDim;
	// }
	
	
	exports.OTHER_DIMENSIONS = OTHER_DIMENSIONS;
	exports.summarizeDimensions = summarizeDimensions;
	exports.getDimensionTypeByAxis = getDimensionTypeByAxis;

/***/ }),
/* 1050 */
/***/ (function(module, exports, __webpack_require__) {

	var completeDimensions = __webpack_require__(1051);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Substitute `completeDimensions`.
	 * `completeDimensions` is to be deprecated.
	 */
	
	/**
	 * @param {module:echarts/data/Source|module:echarts/data/List} source or data.
	 * @param {Object|Array} [opt]
	 * @param {Array.<string|Object>} [opt.coordDimensions=[]]
	 * @param {number} [opt.dimensionsCount]
	 * @param {string} [opt.generateCoord]
	 * @param {string} [opt.generateCoordCount]
	 * @param {Array.<string|Object>} [opt.dimensionsDefine=source.dimensionsDefine] Overwrite source define.
	 * @param {Object|HashMap} [opt.encodeDefine=source.encodeDefine] Overwrite source define.
	 * @return {Array.<Object>} dimensionsInfo
	 */
	function _default(source, opt) {
	  opt = opt || {};
	  return completeDimensions(opt.coordDimensions || [], source, {
	    dimsDef: opt.dimensionsDefine || source.dimensionsDefine,
	    encodeDef: opt.encodeDefine || source.encodeDefine,
	    dimCount: opt.dimensionsCount,
	    generateCoord: opt.generateCoord,
	    generateCoordCount: opt.generateCoordCount
	  });
	}
	
	module.exports = _default;

/***/ }),
/* 1051 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(931);
	
	var createHashMap = _util.createHashMap;
	var each = _util.each;
	var isString = _util.isString;
	var defaults = _util.defaults;
	var extend = _util.extend;
	var isObject = _util.isObject;
	var clone = _util.clone;
	
	var _model = __webpack_require__(969);
	
	var normalizeToArray = _model.normalizeToArray;
	
	var _sourceHelper = __webpack_require__(1018);
	
	var guessOrdinal = _sourceHelper.guessOrdinal;
	
	var Source = __webpack_require__(1020);
	
	var _dimensionHelper = __webpack_require__(1049);
	
	var OTHER_DIMENSIONS = _dimensionHelper.OTHER_DIMENSIONS;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * @deprecated
	 * Use `echarts/data/helper/createDimensions` instead.
	 */
	
	/**
	 * @see {module:echarts/test/ut/spec/data/completeDimensions}
	 *
	 * Complete the dimensions array, by user defined `dimension` and `encode`,
	 * and guessing from the data structure.
	 * If no 'value' dimension specified, the first no-named dimension will be
	 * named as 'value'.
	 *
	 * @param {Array.<string>} sysDims Necessary dimensions, like ['x', 'y'], which
	 *      provides not only dim template, but also default order.
	 *      properties: 'name', 'type', 'displayName'.
	 *      `name` of each item provides default coord name.
	 *      [{dimsDef: [string|Object, ...]}, ...] dimsDef of sysDim item provides default dim name, and
	 *                                    provide dims count that the sysDim required.
	 *      [{ordinalMeta}] can be specified.
	 * @param {module:echarts/data/Source|Array|Object} source or data (for compatibal with pervious)
	 * @param {Object} [opt]
	 * @param {Array.<Object|string>} [opt.dimsDef] option.series.dimensions User defined dimensions
	 *      For example: ['asdf', {name, type}, ...].
	 * @param {Object|HashMap} [opt.encodeDef] option.series.encode {x: 2, y: [3, 1], tooltip: [1, 2], label: 3}
	 * @param {string} [opt.generateCoord] Generate coord dim with the given name.
	 *                 If not specified, extra dim names will be:
	 *                 'value', 'value0', 'value1', ...
	 * @param {number} [opt.generateCoordCount] By default, the generated dim name is `generateCoord`.
	 *                 If `generateCoordCount` specified, the generated dim names will be:
	 *                 `generateCoord` + 0, `generateCoord` + 1, ...
	 *                 can be Infinity, indicate that use all of the remain columns.
	 * @param {number} [opt.dimCount] If not specified, guess by the first data item.
	 * @param {number} [opt.encodeDefaulter] If not specified, auto find the next available data dim.
	 * @return {Array.<Object>} [{
	 *      name: string mandatory,
	 *      displayName: string, the origin name in dimsDef, see source helper.
	 *                 If displayName given, the tooltip will displayed vertically.
	 *      coordDim: string mandatory,
	 *      coordDimIndex: number mandatory,
	 *      type: string optional,
	 *      otherDims: { never null/undefined
	 *          tooltip: number optional,
	 *          label: number optional,
	 *          itemName: number optional,
	 *          seriesName: number optional,
	 *      },
	 *      isExtraCoord: boolean true if coord is generated
	 *          (not specified in encode and not series specified)
	 *      other props ...
	 * }]
	 */
	function completeDimensions(sysDims, source, opt) {
	  if (!Source.isInstance(source)) {
	    source = Source.seriesDataToSource(source);
	  }
	
	  opt = opt || {};
	  sysDims = (sysDims || []).slice();
	  var dimsDef = (opt.dimsDef || []).slice();
	  var encodeDef = createHashMap(opt.encodeDef);
	  var dataDimNameMap = createHashMap();
	  var coordDimNameMap = createHashMap(); // var valueCandidate;
	
	  var result = [];
	  var dimCount = getDimCount(source, sysDims, dimsDef, opt.dimCount); // Apply user defined dims (`name` and `type`) and init result.
	
	  for (var i = 0; i < dimCount; i++) {
	    var dimDefItem = dimsDef[i] = extend({}, isObject(dimsDef[i]) ? dimsDef[i] : {
	      name: dimsDef[i]
	    });
	    var userDimName = dimDefItem.name;
	    var resultItem = result[i] = {
	      otherDims: {}
	    }; // Name will be applied later for avoiding duplication.
	
	    if (userDimName != null && dataDimNameMap.get(userDimName) == null) {
	      // Only if `series.dimensions` is defined in option
	      // displayName, will be set, and dimension will be diplayed vertically in
	      // tooltip by default.
	      resultItem.name = resultItem.displayName = userDimName;
	      dataDimNameMap.set(userDimName, i);
	    }
	
	    dimDefItem.type != null && (resultItem.type = dimDefItem.type);
	    dimDefItem.displayName != null && (resultItem.displayName = dimDefItem.displayName);
	  } // Set `coordDim` and `coordDimIndex` by `encodeDef` and normalize `encodeDef`.
	
	
	  encodeDef.each(function (dataDims, coordDim) {
	    dataDims = normalizeToArray(dataDims).slice();
	    var validDataDims = encodeDef.set(coordDim, []);
	    each(dataDims, function (resultDimIdx, idx) {
	      // The input resultDimIdx can be dim name or index.
	      isString(resultDimIdx) && (resultDimIdx = dataDimNameMap.get(resultDimIdx));
	
	      if (resultDimIdx != null && resultDimIdx < dimCount) {
	        validDataDims[idx] = resultDimIdx;
	        applyDim(result[resultDimIdx], coordDim, idx);
	      }
	    });
	  }); // Apply templetes and default order from `sysDims`.
	
	  var availDimIdx = 0;
	  each(sysDims, function (sysDimItem, sysDimIndex) {
	    var coordDim;
	    var sysDimItem;
	    var sysDimItemDimsDef;
	    var sysDimItemOtherDims;
	
	    if (isString(sysDimItem)) {
	      coordDim = sysDimItem;
	      sysDimItem = {};
	    } else {
	      coordDim = sysDimItem.name;
	      var ordinalMeta = sysDimItem.ordinalMeta;
	      sysDimItem.ordinalMeta = null;
	      sysDimItem = clone(sysDimItem);
	      sysDimItem.ordinalMeta = ordinalMeta; // `coordDimIndex` should not be set directly.
	
	      sysDimItemDimsDef = sysDimItem.dimsDef;
	      sysDimItemOtherDims = sysDimItem.otherDims;
	      sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex = sysDimItem.dimsDef = sysDimItem.otherDims = null;
	    }
	
	    var dataDims = normalizeToArray(encodeDef.get(coordDim)); // dimensions provides default dim sequences.
	
	    if (!dataDims.length) {
	      for (var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {
	        while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {
	          availDimIdx++;
	        }
	
	        availDimIdx < result.length && dataDims.push(availDimIdx++);
	      }
	    } // Apply templates.
	
	
	    each(dataDims, function (resultDimIdx, coordDimIndex) {
	      var resultItem = result[resultDimIdx];
	      applyDim(defaults(resultItem, sysDimItem), coordDim, coordDimIndex);
	
	      if (resultItem.name == null && sysDimItemDimsDef) {
	        var sysDimItemDimsDefItem = sysDimItemDimsDef[coordDimIndex];
	        !isObject(sysDimItemDimsDefItem) && (sysDimItemDimsDefItem = {
	          name: sysDimItemDimsDefItem
	        });
	        resultItem.name = resultItem.displayName = sysDimItemDimsDefItem.name;
	        resultItem.defaultTooltip = sysDimItemDimsDefItem.defaultTooltip;
	      } // FIXME refactor, currently only used in case: {otherDims: {tooltip: false}}
	
	
	      sysDimItemOtherDims && defaults(resultItem.otherDims, sysDimItemOtherDims);
	    });
	  });
	
	  function applyDim(resultItem, coordDim, coordDimIndex) {
	    if (OTHER_DIMENSIONS.get(coordDim) != null) {
	      resultItem.otherDims[coordDim] = coordDimIndex;
	    } else {
	      resultItem.coordDim = coordDim;
	      resultItem.coordDimIndex = coordDimIndex;
	      coordDimNameMap.set(coordDim, true);
	    }
	  } // Make sure the first extra dim is 'value'.
	
	
	  var generateCoord = opt.generateCoord;
	  var generateCoordCount = opt.generateCoordCount;
	  var fromZero = generateCoordCount != null;
	  generateCoordCount = generateCoord ? generateCoordCount || 1 : 0;
	  var extra = generateCoord || 'value'; // Set dim `name` and other `coordDim` and other props.
	
	  for (var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {
	    var resultItem = result[resultDimIdx] = result[resultDimIdx] || {};
	    var coordDim = resultItem.coordDim;
	
	    if (coordDim == null) {
	      resultItem.coordDim = genName(extra, coordDimNameMap, fromZero);
	      resultItem.coordDimIndex = 0;
	
	      if (!generateCoord || generateCoordCount <= 0) {
	        resultItem.isExtraCoord = true;
	      }
	
	      generateCoordCount--;
	    }
	
	    resultItem.name == null && (resultItem.name = genName(resultItem.coordDim, dataDimNameMap));
	
	    if (resultItem.type == null && guessOrdinal(source, resultDimIdx, resultItem.name)) {
	      resultItem.type = 'ordinal';
	    }
	  }
	
	  return result;
	} // ??? TODO
	// Originally detect dimCount by data[0]. Should we
	// optimize it to only by sysDims and dimensions and encode.
	// So only necessary dims will be initialized.
	// But
	// (1) custom series should be considered. where other dims
	// may be visited.
	// (2) sometimes user need to calcualte bubble size or use visualMap
	// on other dimensions besides coordSys needed.
	// So, dims that is not used by system, should be shared in storage?
	
	
	function getDimCount(source, sysDims, dimsDef, optDimCount) {
	  // Note that the result dimCount should not small than columns count
	  // of data, otherwise `dataDimNameMap` checking will be incorrect.
	  var dimCount = Math.max(source.dimensionsDetectCount || 1, sysDims.length, dimsDef.length, optDimCount || 0);
	  each(sysDims, function (sysDimItem) {
	    var sysDimItemDimsDef = sysDimItem.dimsDef;
	    sysDimItemDimsDef && (dimCount = Math.max(dimCount, sysDimItemDimsDef.length));
	  });
	  return dimCount;
	}
	
	function genName(name, map, fromZero) {
	  if (fromZero || map.get(name) != null) {
	    var i = 0;
	
	    while (map.get(name + i) != null) {
	      i++;
	    }
	
	    name += i;
	  }
	
	  map.set(name, true);
	  return name;
	}
	
	var _default = completeDimensions;
	module.exports = _default;

/***/ }),
/* 1052 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(931);
	
	var each = _util.each;
	var isString = _util.isString;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Note that it is too complicated to support 3d stack by value
	 * (have to create two-dimension inverted index), so in 3d case
	 * we just support that stacked by index.
	 *
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {Array.<string|Object>} dimensionInfoList The same as the input of <module:echarts/data/List>.
	 *        The input dimensionInfoList will be modified.
	 * @param {Object} [opt]
	 * @param {boolean} [opt.stackedCoordDimension=''] Specify a coord dimension if needed.
	 * @param {boolean} [opt.byIndex=false]
	 * @return {Object} calculationInfo
	 * {
	 *     stackedDimension: string
	 *     stackedByDimension: string
	 *     isStackedByIndex: boolean
	 *     stackedOverDimension: string
	 *     stackResultDimension: string
	 * }
	 */
	function enableDataStack(seriesModel, dimensionInfoList, opt) {
	  opt = opt || {};
	  var byIndex = opt.byIndex;
	  var stackedCoordDimension = opt.stackedCoordDimension; // Compatibal: when `stack` is set as '', do not stack.
	
	  var mayStack = !!(seriesModel && seriesModel.get('stack'));
	  var stackedByDimInfo;
	  var stackedDimInfo;
	  var stackResultDimension;
	  var stackedOverDimension;
	  each(dimensionInfoList, function (dimensionInfo, index) {
	    if (isString(dimensionInfo)) {
	      dimensionInfoList[index] = dimensionInfo = {
	        name: dimensionInfo
	      };
	    }
	
	    if (mayStack && !dimensionInfo.isExtraCoord) {
	      // Find the first ordinal dimension as the stackedByDimInfo.
	      if (!byIndex && !stackedByDimInfo && dimensionInfo.ordinalMeta) {
	        stackedByDimInfo = dimensionInfo;
	      } // Find the first stackable dimension as the stackedDimInfo.
	
	
	      if (!stackedDimInfo && dimensionInfo.type !== 'ordinal' && dimensionInfo.type !== 'time' && (!stackedCoordDimension || stackedCoordDimension === dimensionInfo.coordDim)) {
	        stackedDimInfo = dimensionInfo;
	      }
	    }
	  });
	
	  if (stackedDimInfo && !byIndex && !stackedByDimInfo) {
	    // Compatible with previous design, value axis (time axis) only stack by index.
	    // It may make sense if the user provides elaborately constructed data.
	    byIndex = true;
	  } // Add stack dimension, they can be both calculated by coordinate system in `unionExtent`.
	  // That put stack logic in List is for using conveniently in echarts extensions, but it
	  // might not be a good way.
	
	
	  if (stackedDimInfo) {
	    // Use a weird name that not duplicated with other names.
	    stackResultDimension = '__\0ecstackresult';
	    stackedOverDimension = '__\0ecstackedover'; // Create inverted index to fast query index by value.
	
	    if (stackedByDimInfo) {
	      stackedByDimInfo.createInvertedIndices = true;
	    }
	
	    var stackedDimCoordDim = stackedDimInfo.coordDim;
	    var stackedDimType = stackedDimInfo.type;
	    var stackedDimCoordIndex = 0;
	    each(dimensionInfoList, function (dimensionInfo) {
	      if (dimensionInfo.coordDim === stackedDimCoordDim) {
	        stackedDimCoordIndex++;
	      }
	    });
	    dimensionInfoList.push({
	      name: stackResultDimension,
	      coordDim: stackedDimCoordDim,
	      coordDimIndex: stackedDimCoordIndex,
	      type: stackedDimType,
	      isExtraCoord: true,
	      isCalculationCoord: true
	    });
	    stackedDimCoordIndex++;
	    dimensionInfoList.push({
	      name: stackedOverDimension,
	      // This dimension contains stack base (generally, 0), so do not set it as
	      // `stackedDimCoordDim` to avoid extent calculation, consider log scale.
	      coordDim: stackedOverDimension,
	      coordDimIndex: stackedDimCoordIndex,
	      type: stackedDimType,
	      isExtraCoord: true,
	      isCalculationCoord: true
	    });
	  }
	
	  return {
	    stackedDimension: stackedDimInfo && stackedDimInfo.name,
	    stackedByDimension: stackedByDimInfo && stackedByDimInfo.name,
	    isStackedByIndex: byIndex,
	    stackedOverDimension: stackedOverDimension,
	    stackResultDimension: stackResultDimension
	  };
	}
	/**
	 * @param {module:echarts/data/List} data
	 * @param {string} stackedDim
	 */
	
	
	function isDimensionStacked(data, stackedDim
	/*, stackedByDim*/
	) {
	  // Each single series only maps to one pair of axis. So we do not need to
	  // check stackByDim, whatever stacked by a dimension or stacked by index.
	  return !!stackedDim && stackedDim === data.getCalculationInfo('stackedDimension'); // && (
	  //     stackedByDim != null
	  //         ? stackedByDim === data.getCalculationInfo('stackedByDimension')
	  //         : data.getCalculationInfo('isStackedByIndex')
	  // );
	}
	/**
	 * @param {module:echarts/data/List} data
	 * @param {string} targetDim
	 * @param {string} [stackedByDim] If not input this parameter, check whether
	 *                                stacked by index.
	 * @return {string} dimension
	 */
	
	
	function getStackedDimension(data, targetDim) {
	  return isDimensionStacked(data, targetDim) ? data.getCalculationInfo('stackResultDimension') : targetDim;
	}
	
	exports.enableDataStack = enableDataStack;
	exports.isDimensionStacked = isDimensionStacked;
	exports.getStackedDimension = getStackedDimension;

/***/ }),
/* 1053 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	var zrUtil = __webpack_require__(931);
	
	var OrdinalScale = __webpack_require__(1054);
	
	var IntervalScale = __webpack_require__(1057);
	
	var Scale = __webpack_require__(1055);
	
	var numberUtil = __webpack_require__(1013);
	
	var _barGrid = __webpack_require__(1059);
	
	var prepareLayoutBarSeries = _barGrid.prepareLayoutBarSeries;
	var makeColumnLayout = _barGrid.makeColumnLayout;
	var retrieveColumnLayout = _barGrid.retrieveColumnLayout;
	
	var BoundingRect = __webpack_require__(949);
	
	__webpack_require__(1060);
	
	__webpack_require__(1061);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Get axis scale extent before niced.
	 * Item of returned array can only be number (including Infinity and NaN).
	 */
	function getScaleExtent(scale, model) {
	  var scaleType = scale.type;
	  var min = model.getMin();
	  var max = model.getMax();
	  var fixMin = min != null;
	  var fixMax = max != null;
	  var originalExtent = scale.getExtent();
	  var axisDataLen;
	  var boundaryGap;
	  var span;
	
	  if (scaleType === 'ordinal') {
	    axisDataLen = model.getCategories().length;
	  } else {
	    boundaryGap = model.get('boundaryGap');
	
	    if (!zrUtil.isArray(boundaryGap)) {
	      boundaryGap = [boundaryGap || 0, boundaryGap || 0];
	    }
	
	    if (typeof boundaryGap[0] === 'boolean') {
	      boundaryGap = [0, 0];
	    }
	
	    boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);
	    boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);
	    span = originalExtent[1] - originalExtent[0] || Math.abs(originalExtent[0]);
	  } // Notice: When min/max is not set (that is, when there are null/undefined,
	  // which is the most common case), these cases should be ensured:
	  // (1) For 'ordinal', show all axis.data.
	  // (2) For others:
	  //      + `boundaryGap` is applied (if min/max set, boundaryGap is
	  //      disabled).
	  //      + If `needCrossZero`, min/max should be zero, otherwise, min/max should
	  //      be the result that originalExtent enlarged by boundaryGap.
	  // (3) If no data, it should be ensured that `scale.setBlank` is set.
	  // FIXME
	  // (1) When min/max is 'dataMin' or 'dataMax', should boundaryGap be able to used?
	  // (2) When `needCrossZero` and all data is positive/negative, should it be ensured
	  // that the results processed by boundaryGap are positive/negative?
	
	
	  if (min == null) {
	    min = scaleType === 'ordinal' ? axisDataLen ? 0 : NaN : originalExtent[0] - boundaryGap[0] * span;
	  }
	
	  if (max == null) {
	    max = scaleType === 'ordinal' ? axisDataLen ? axisDataLen - 1 : NaN : originalExtent[1] + boundaryGap[1] * span;
	  }
	
	  if (min === 'dataMin') {
	    min = originalExtent[0];
	  } else if (typeof min === 'function') {
	    min = min({
	      min: originalExtent[0],
	      max: originalExtent[1]
	    });
	  }
	
	  if (max === 'dataMax') {
	    max = originalExtent[1];
	  } else if (typeof max === 'function') {
	    max = max({
	      min: originalExtent[0],
	      max: originalExtent[1]
	    });
	  }
	
	  (min == null || !isFinite(min)) && (min = NaN);
	  (max == null || !isFinite(max)) && (max = NaN);
	  scale.setBlank(zrUtil.eqNaN(min) || zrUtil.eqNaN(max) || scaleType === 'ordinal' && !scale.getOrdinalMeta().categories.length); // Evaluate if axis needs cross zero
	
	  if (model.getNeedCrossZero()) {
	    // Axis is over zero and min is not set
	    if (min > 0 && max > 0 && !fixMin) {
	      min = 0;
	    } // Axis is under zero and max is not set
	
	
	    if (min < 0 && max < 0 && !fixMax) {
	      max = 0;
	    }
	  } // If bars are placed on a base axis of type time or interval account for axis boundary overflow and current axis
	  // is base axis
	  // FIXME
	  // (1) Consider support value axis, where below zero and axis `onZero` should be handled properly.
	  // (2) Refactor the logic with `barGrid`. Is it not need to `makeBarWidthAndOffsetInfo` twice with different extent?
	  //     Should not depend on series type `bar`?
	  // (3) Fix that might overlap when using dataZoom.
	  // (4) Consider other chart types using `barGrid`?
	  // See #6728, #4862, `test/bar-overflow-time-plot.html`
	
	
	  var ecModel = model.ecModel;
	
	  if (ecModel && scaleType === 'time'
	  /*|| scaleType === 'interval' */
	  ) {
	    var barSeriesModels = prepareLayoutBarSeries('bar', ecModel);
	    var isBaseAxisAndHasBarSeries;
	    zrUtil.each(barSeriesModels, function (seriesModel) {
	      isBaseAxisAndHasBarSeries |= seriesModel.getBaseAxis() === model.axis;
	    });
	
	    if (isBaseAxisAndHasBarSeries) {
	      // Calculate placement of bars on axis
	      var barWidthAndOffset = makeColumnLayout(barSeriesModels); // Adjust axis min and max to account for overflow
	
	      var adjustedScale = adjustScaleForOverflow(min, max, model, barWidthAndOffset);
	      min = adjustedScale.min;
	      max = adjustedScale.max;
	    }
	  }
	
	  return [min, max];
	}
	
	function adjustScaleForOverflow(min, max, model, barWidthAndOffset) {
	  // Get Axis Length
	  var axisExtent = model.axis.getExtent();
	  var axisLength = axisExtent[1] - axisExtent[0]; // Get bars on current base axis and calculate min and max overflow
	
	  var barsOnCurrentAxis = retrieveColumnLayout(barWidthAndOffset, model.axis);
	
	  if (barsOnCurrentAxis === undefined) {
	    return {
	      min: min,
	      max: max
	    };
	  }
	
	  var minOverflow = Infinity;
	  zrUtil.each(barsOnCurrentAxis, function (item) {
	    minOverflow = Math.min(item.offset, minOverflow);
	  });
	  var maxOverflow = -Infinity;
	  zrUtil.each(barsOnCurrentAxis, function (item) {
	    maxOverflow = Math.max(item.offset + item.width, maxOverflow);
	  });
	  minOverflow = Math.abs(minOverflow);
	  maxOverflow = Math.abs(maxOverflow);
	  var totalOverFlow = minOverflow + maxOverflow; // Calulate required buffer based on old range and overflow
	
	  var oldRange = max - min;
	  var oldRangePercentOfNew = 1 - (minOverflow + maxOverflow) / axisLength;
	  var overflowBuffer = oldRange / oldRangePercentOfNew - oldRange;
	  max += overflowBuffer * (maxOverflow / totalOverFlow);
	  min -= overflowBuffer * (minOverflow / totalOverFlow);
	  return {
	    min: min,
	    max: max
	  };
	}
	
	function niceScaleExtent(scale, model) {
	  var extent = getScaleExtent(scale, model);
	  var fixMin = model.getMin() != null;
	  var fixMax = model.getMax() != null;
	  var splitNumber = model.get('splitNumber');
	
	  if (scale.type === 'log') {
	    scale.base = model.get('logBase');
	  }
	
	  var scaleType = scale.type;
	  scale.setExtent(extent[0], extent[1]);
	  scale.niceExtent({
	    splitNumber: splitNumber,
	    fixMin: fixMin,
	    fixMax: fixMax,
	    minInterval: scaleType === 'interval' || scaleType === 'time' ? model.get('minInterval') : null,
	    maxInterval: scaleType === 'interval' || scaleType === 'time' ? model.get('maxInterval') : null
	  }); // If some one specified the min, max. And the default calculated interval
	  // is not good enough. He can specify the interval. It is often appeared
	  // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard
	  // to be 60.
	  // FIXME
	
	  var interval = model.get('interval');
	
	  if (interval != null) {
	    scale.setInterval && scale.setInterval(interval);
	  }
	}
	/**
	 * @param {module:echarts/model/Model} model
	 * @param {string} [axisType] Default retrieve from model.type
	 * @return {module:echarts/scale/*}
	 */
	
	
	function createScaleByModel(model, axisType) {
	  axisType = axisType || model.get('type');
	
	  if (axisType) {
	    switch (axisType) {
	      // Buildin scale
	      case 'category':
	        return new OrdinalScale(model.getOrdinalMeta ? model.getOrdinalMeta() : model.getCategories(), [Infinity, -Infinity]);
	
	      case 'value':
	        return new IntervalScale();
	      // Extended scale, like time and log
	
	      default:
	        return (Scale.getClass(axisType) || IntervalScale).create(model);
	    }
	  }
	}
	/**
	 * Check if the axis corss 0
	 */
	
	
	function ifAxisCrossZero(axis) {
	  var dataExtent = axis.scale.getExtent();
	  var min = dataExtent[0];
	  var max = dataExtent[1];
	  return !(min > 0 && max > 0 || min < 0 && max < 0);
	}
	/**
	 * @param {module:echarts/coord/Axis} axis
	 * @return {Function} Label formatter function.
	 *         param: {number} tickValue,
	 *         param: {number} idx, the index in all ticks.
	 *                         If category axis, this param is not requied.
	 *         return: {string} label string.
	 */
	
	
	function makeLabelFormatter(axis) {
	  var labelFormatter = axis.getLabelModel().get('formatter');
	  var categoryTickStart = axis.type === 'category' ? axis.scale.getExtent()[0] : null;
	
	  if (typeof labelFormatter === 'string') {
	    labelFormatter = function (tpl) {
	      return function (val) {
	        return tpl.replace('{value}', val != null ? val : '');
	      };
	    }(labelFormatter); // Consider empty array
	
	
	    return labelFormatter;
	  } else if (typeof labelFormatter === 'function') {
	    return function (tickValue, idx) {
	      // The original intention of `idx` is "the index of the tick in all ticks".
	      // But the previous implementation of category axis do not consider the
	      // `axisLabel.interval`, which cause that, for example, the `interval` is
	      // `1`, then the ticks "name5", "name7", "name9" are displayed, where the
	      // corresponding `idx` are `0`, `2`, `4`, but not `0`, `1`, `2`. So we keep
	      // the definition here for back compatibility.
	      if (categoryTickStart != null) {
	        idx = tickValue - categoryTickStart;
	      }
	
	      return labelFormatter(getAxisRawValue(axis, tickValue), idx);
	    };
	  } else {
	    return function (tick) {
	      return axis.scale.getLabel(tick);
	    };
	  }
	}
	
	function getAxisRawValue(axis, value) {
	  // In category axis with data zoom, tick is not the original
	  // index of axis.data. So tick should not be exposed to user
	  // in category axis.
	  return axis.type === 'category' ? axis.scale.getLabel(value) : value;
	}
	/**
	 * @param {module:echarts/coord/Axis} axis
	 * @return {module:zrender/core/BoundingRect} Be null/undefined if no labels.
	 */
	
	
	function estimateLabelUnionRect(axis) {
	  var axisModel = axis.model;
	  var scale = axis.scale;
	
	  if (!axisModel.get('axisLabel.show') || scale.isBlank()) {
	    return;
	  }
	
	  var isCategory = axis.type === 'category';
	  var realNumberScaleTicks;
	  var tickCount;
	  var categoryScaleExtent = scale.getExtent(); // Optimize for large category data, avoid call `getTicks()`.
	
	  if (isCategory) {
	    tickCount = scale.count();
	  } else {
	    realNumberScaleTicks = scale.getTicks();
	    tickCount = realNumberScaleTicks.length;
	  }
	
	  var axisLabelModel = axis.getLabelModel();
	  var labelFormatter = makeLabelFormatter(axis);
	  var rect;
	  var step = 1; // Simple optimization for large amount of labels
	
	  if (tickCount > 40) {
	    step = Math.ceil(tickCount / 40);
	  }
	
	  for (var i = 0; i < tickCount; i += step) {
	    var tickValue = realNumberScaleTicks ? realNumberScaleTicks[i] : categoryScaleExtent[0] + i;
	    var label = labelFormatter(tickValue);
	    var unrotatedSingleRect = axisLabelModel.getTextRect(label);
	    var singleRect = rotateTextRect(unrotatedSingleRect, axisLabelModel.get('rotate') || 0);
	    rect ? rect.union(singleRect) : rect = singleRect;
	  }
	
	  return rect;
	}
	
	function rotateTextRect(textRect, rotate) {
	  var rotateRadians = rotate * Math.PI / 180;
	  var boundingBox = textRect.plain();
	  var beforeWidth = boundingBox.width;
	  var beforeHeight = boundingBox.height;
	  var afterWidth = beforeWidth * Math.cos(rotateRadians) + beforeHeight * Math.sin(rotateRadians);
	  var afterHeight = beforeWidth * Math.sin(rotateRadians) + beforeHeight * Math.cos(rotateRadians);
	  var rotatedRect = new BoundingRect(boundingBox.x, boundingBox.y, afterWidth, afterHeight);
	  return rotatedRect;
	}
	
	exports.getScaleExtent = getScaleExtent;
	exports.niceScaleExtent = niceScaleExtent;
	exports.createScaleByModel = createScaleByModel;
	exports.ifAxisCrossZero = ifAxisCrossZero;
	exports.makeLabelFormatter = makeLabelFormatter;
	exports.getAxisRawValue = getAxisRawValue;
	exports.estimateLabelUnionRect = estimateLabelUnionRect;

/***/ }),
/* 1054 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var Scale = __webpack_require__(1055);
	
	var OrdinalMeta = __webpack_require__(1056);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Linear continuous scale
	 * @module echarts/coord/scale/Ordinal
	 *
	 * http://en.wikipedia.org/wiki/Level_of_measurement
	 */
	// FIXME only one data
	var scaleProto = Scale.prototype;
	var OrdinalScale = Scale.extend({
	  type: 'ordinal',
	
	  /**
	   * @param {module:echarts/data/OrdianlMeta|Array.<string>} ordinalMeta
	   */
	  init: function (ordinalMeta, extent) {
	    // Caution: Should not use instanceof, consider ec-extensions using
	    // import approach to get OrdinalMeta class.
	    if (!ordinalMeta || zrUtil.isArray(ordinalMeta)) {
	      ordinalMeta = new OrdinalMeta({
	        categories: ordinalMeta
	      });
	    }
	
	    this._ordinalMeta = ordinalMeta;
	    this._extent = extent || [0, ordinalMeta.categories.length - 1];
	  },
	  parse: function (val) {
	    return typeof val === 'string' ? this._ordinalMeta.getOrdinal(val) // val might be float.
	    : Math.round(val);
	  },
	  contain: function (rank) {
	    rank = this.parse(rank);
	    return scaleProto.contain.call(this, rank) && this._ordinalMeta.categories[rank] != null;
	  },
	
	  /**
	   * Normalize given rank or name to linear [0, 1]
	   * @param {number|string} [val]
	   * @return {number}
	   */
	  normalize: function (val) {
	    return scaleProto.normalize.call(this, this.parse(val));
	  },
	  scale: function (val) {
	    return Math.round(scaleProto.scale.call(this, val));
	  },
	
	  /**
	   * @return {Array}
	   */
	  getTicks: function () {
	    var ticks = [];
	    var extent = this._extent;
	    var rank = extent[0];
	
	    while (rank <= extent[1]) {
	      ticks.push(rank);
	      rank++;
	    }
	
	    return ticks;
	  },
	
	  /**
	   * Get item on rank n
	   * @param {number} n
	   * @return {string}
	   */
	  getLabel: function (n) {
	    if (!this.isBlank()) {
	      // Note that if no data, ordinalMeta.categories is an empty array.
	      return this._ordinalMeta.categories[n];
	    }
	  },
	
	  /**
	   * @return {number}
	   */
	  count: function () {
	    return this._extent[1] - this._extent[0] + 1;
	  },
	
	  /**
	   * @override
	   */
	  unionExtentFromData: function (data, dim) {
	    this.unionExtent(data.getApproximateExtent(dim));
	  },
	  getOrdinalMeta: function () {
	    return this._ordinalMeta;
	  },
	  niceTicks: zrUtil.noop,
	  niceExtent: zrUtil.noop
	});
	/**
	 * @return {module:echarts/scale/Time}
	 */
	
	OrdinalScale.create = function () {
	  return new OrdinalScale();
	};
	
	var _default = OrdinalScale;
	module.exports = _default;

/***/ }),
/* 1055 */
/***/ (function(module, exports, __webpack_require__) {

	var clazzUtil = __webpack_require__(971);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * // Scale class management
	 * @module echarts/scale/Scale
	 */
	
	/**
	 * @param {Object} [setting]
	 */
	function Scale(setting) {
	  this._setting = setting || {};
	  /**
	   * Extent
	   * @type {Array.<number>}
	   * @protected
	   */
	
	  this._extent = [Infinity, -Infinity];
	  /**
	   * Step is calculated in adjustExtent
	   * @type {Array.<number>}
	   * @protected
	   */
	
	  this._interval = 0;
	  this.init && this.init.apply(this, arguments);
	}
	/**
	 * Parse input val to valid inner number.
	 * @param {*} val
	 * @return {number}
	 */
	
	
	Scale.prototype.parse = function (val) {
	  // Notice: This would be a trap here, If the implementation
	  // of this method depends on extent, and this method is used
	  // before extent set (like in dataZoom), it would be wrong.
	  // Nevertheless, parse does not depend on extent generally.
	  return val;
	};
	
	Scale.prototype.getSetting = function (name) {
	  return this._setting[name];
	};
	
	Scale.prototype.contain = function (val) {
	  var extent = this._extent;
	  return val >= extent[0] && val <= extent[1];
	};
	/**
	 * Normalize value to linear [0, 1], return 0.5 if extent span is 0
	 * @param {number} val
	 * @return {number}
	 */
	
	
	Scale.prototype.normalize = function (val) {
	  var extent = this._extent;
	
	  if (extent[1] === extent[0]) {
	    return 0.5;
	  }
	
	  return (val - extent[0]) / (extent[1] - extent[0]);
	};
	/**
	 * Scale normalized value
	 * @param {number} val
	 * @return {number}
	 */
	
	
	Scale.prototype.scale = function (val) {
	  var extent = this._extent;
	  return val * (extent[1] - extent[0]) + extent[0];
	};
	/**
	 * Set extent from data
	 * @param {Array.<number>} other
	 */
	
	
	Scale.prototype.unionExtent = function (other) {
	  var extent = this._extent;
	  other[0] < extent[0] && (extent[0] = other[0]);
	  other[1] > extent[1] && (extent[1] = other[1]); // not setExtent because in log axis it may transformed to power
	  // this.setExtent(extent[0], extent[1]);
	};
	/**
	 * Set extent from data
	 * @param {module:echarts/data/List} data
	 * @param {string} dim
	 */
	
	
	Scale.prototype.unionExtentFromData = function (data, dim) {
	  this.unionExtent(data.getApproximateExtent(dim));
	};
	/**
	 * Get extent
	 * @return {Array.<number>}
	 */
	
	
	Scale.prototype.getExtent = function () {
	  return this._extent.slice();
	};
	/**
	 * Set extent
	 * @param {number} start
	 * @param {number} end
	 */
	
	
	Scale.prototype.setExtent = function (start, end) {
	  var thisExtent = this._extent;
	
	  if (!isNaN(start)) {
	    thisExtent[0] = start;
	  }
	
	  if (!isNaN(end)) {
	    thisExtent[1] = end;
	  }
	};
	/**
	 * When axis extent depends on data and no data exists,
	 * axis ticks should not be drawn, which is named 'blank'.
	 */
	
	
	Scale.prototype.isBlank = function () {
	  return this._isBlank;
	},
	/**
	 * When axis extent depends on data and no data exists,
	 * axis ticks should not be drawn, which is named 'blank'.
	 */
	Scale.prototype.setBlank = function (isBlank) {
	  this._isBlank = isBlank;
	};
	/**
	 * @abstract
	 * @param {*} tick
	 * @return {string} label of the tick.
	 */
	
	Scale.prototype.getLabel = null;
	clazzUtil.enableClassExtend(Scale);
	clazzUtil.enableClassManagement(Scale, {
	  registerWhenExtend: true
	});
	var _default = Scale;
	module.exports = _default;

/***/ }),
/* 1056 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(931);
	
	var createHashMap = _util.createHashMap;
	var isObject = _util.isObject;
	var map = _util.map;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * @constructor
	 * @param {Object} [opt]
	 * @param {Object} [opt.categories=[]]
	 * @param {Object} [opt.needCollect=false]
	 * @param {Object} [opt.deduplication=false]
	 */
	function OrdinalMeta(opt) {
	  /**
	   * @readOnly
	   * @type {Array.<string>}
	   */
	  this.categories = opt.categories || [];
	  /**
	   * @private
	   * @type {boolean}
	   */
	
	  this._needCollect = opt.needCollect;
	  /**
	   * @private
	   * @type {boolean}
	   */
	
	  this._deduplication = opt.deduplication;
	  /**
	   * @private
	   * @type {boolean}
	   */
	
	  this._map;
	}
	/**
	 * @param {module:echarts/model/Model} axisModel
	 * @return {module:echarts/data/OrdinalMeta}
	 */
	
	
	OrdinalMeta.createByAxisModel = function (axisModel) {
	  var option = axisModel.option;
	  var data = option.data;
	  var categories = data && map(data, getName);
	  return new OrdinalMeta({
	    categories: categories,
	    needCollect: !categories,
	    // deduplication is default in axis.
	    deduplication: option.dedplication !== false
	  });
	};
	
	var proto = OrdinalMeta.prototype;
	/**
	 * @param {string} category
	 * @return {number} ordinal
	 */
	
	proto.getOrdinal = function (category) {
	  return getOrCreateMap(this).get(category);
	};
	/**
	 * @param {*} category
	 * @return {number} The ordinal. If not found, return NaN.
	 */
	
	
	proto.parseAndCollect = function (category) {
	  var index;
	  var needCollect = this._needCollect; // The value of category dim can be the index of the given category set.
	  // This feature is only supported when !needCollect, because we should
	  // consider a common case: a value is 2017, which is a number but is
	  // expected to be tread as a category. This case usually happen in dataset,
	  // where it happent to be no need of the index feature.
	
	  if (typeof category !== 'string' && !needCollect) {
	    return category;
	  } // Optimize for the scenario:
	  // category is ['2012-01-01', '2012-01-02', ...], where the input
	  // data has been ensured not duplicate and is large data.
	  // Notice, if a dataset dimension provide categroies, usually echarts
	  // should remove duplication except user tell echarts dont do that
	  // (set axis.deduplication = false), because echarts do not know whether
	  // the values in the category dimension has duplication (consider the
	  // parallel-aqi example)
	
	
	  if (needCollect && !this._deduplication) {
	    index = this.categories.length;
	    this.categories[index] = category;
	    return index;
	  }
	
	  var map = getOrCreateMap(this);
	  index = map.get(category);
	
	  if (index == null) {
	    if (needCollect) {
	      index = this.categories.length;
	      this.categories[index] = category;
	      map.set(category, index);
	    } else {
	      index = NaN;
	    }
	  }
	
	  return index;
	}; // Consider big data, do not create map until needed.
	
	
	function getOrCreateMap(ordinalMeta) {
	  return ordinalMeta._map || (ordinalMeta._map = createHashMap(ordinalMeta.categories));
	}
	
	function getName(obj) {
	  if (isObject(obj) && obj.value != null) {
	    return obj.value;
	  } else {
	    return obj + '';
	  }
	}
	
	var _default = OrdinalMeta;
	module.exports = _default;

/***/ }),
/* 1057 */
/***/ (function(module, exports, __webpack_require__) {

	var numberUtil = __webpack_require__(1013);
	
	var formatUtil = __webpack_require__(1014);
	
	var Scale = __webpack_require__(1055);
	
	var helper = __webpack_require__(1058);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Interval scale
	 * @module echarts/scale/Interval
	 */
	var roundNumber = numberUtil.round;
	/**
	 * @alias module:echarts/coord/scale/Interval
	 * @constructor
	 */
	
	var IntervalScale = Scale.extend({
	  type: 'interval',
	  _interval: 0,
	  _intervalPrecision: 2,
	  setExtent: function (start, end) {
	    var thisExtent = this._extent; //start,end may be a Number like '25',so...
	
	    if (!isNaN(start)) {
	      thisExtent[0] = parseFloat(start);
	    }
	
	    if (!isNaN(end)) {
	      thisExtent[1] = parseFloat(end);
	    }
	  },
	  unionExtent: function (other) {
	    var extent = this._extent;
	    other[0] < extent[0] && (extent[0] = other[0]);
	    other[1] > extent[1] && (extent[1] = other[1]); // unionExtent may called by it's sub classes
	
	    IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);
	  },
	
	  /**
	   * Get interval
	   */
	  getInterval: function () {
	    return this._interval;
	  },
	
	  /**
	   * Set interval
	   */
	  setInterval: function (interval) {
	    this._interval = interval; // Dropped auto calculated niceExtent and use user setted extent
	    // We assume user wan't to set both interval, min, max to get a better result
	
	    this._niceExtent = this._extent.slice();
	    this._intervalPrecision = helper.getIntervalPrecision(interval);
	  },
	
	  /**
	   * @return {Array.<number>}
	   */
	  getTicks: function () {
	    return helper.intervalScaleGetTicks(this._interval, this._extent, this._niceExtent, this._intervalPrecision);
	  },
	
	  /**
	   * @param {number} data
	   * @param {Object} [opt]
	   * @param {number|string} [opt.precision] If 'auto', use nice presision.
	   * @param {boolean} [opt.pad] returns 1.50 but not 1.5 if precision is 2.
	   * @return {string}
	   */
	  getLabel: function (data, opt) {
	    if (data == null) {
	      return '';
	    }
	
	    var precision = opt && opt.precision;
	
	    if (precision == null) {
	      precision = numberUtil.getPrecisionSafe(data) || 0;
	    } else if (precision === 'auto') {
	      // Should be more precise then tick.
	      precision = this._intervalPrecision;
	    } // (1) If `precision` is set, 12.005 should be display as '12.00500'.
	    // (2) Use roundNumber (toFixed) to avoid scientific notation like '3.5e-7'.
	
	
	    data = roundNumber(data, precision, true);
	    return formatUtil.addCommas(data);
	  },
	
	  /**
	   * Update interval and extent of intervals for nice ticks
	   *
	   * @param {number} [splitNumber = 5] Desired number of ticks
	   * @param {number} [minInterval]
	   * @param {number} [maxInterval]
	   */
	  niceTicks: function (splitNumber, minInterval, maxInterval) {
	    splitNumber = splitNumber || 5;
	    var extent = this._extent;
	    var span = extent[1] - extent[0];
	
	    if (!isFinite(span)) {
	      return;
	    } // User may set axis min 0 and data are all negative
	    // FIXME If it needs to reverse ?
	
	
	    if (span < 0) {
	      span = -span;
	      extent.reverse();
	    }
	
	    var result = helper.intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval);
	    this._intervalPrecision = result.intervalPrecision;
	    this._interval = result.interval;
	    this._niceExtent = result.niceTickExtent;
	  },
	
	  /**
	   * Nice extent.
	   * @param {Object} opt
	   * @param {number} [opt.splitNumber = 5] Given approx tick number
	   * @param {boolean} [opt.fixMin=false]
	   * @param {boolean} [opt.fixMax=false]
	   * @param {boolean} [opt.minInterval]
	   * @param {boolean} [opt.maxInterval]
	   */
	  niceExtent: function (opt) {
	    var extent = this._extent; // If extent start and end are same, expand them
	
	    if (extent[0] === extent[1]) {
	      if (extent[0] !== 0) {
	        // Expand extent
	        var expandSize = extent[0]; // In the fowllowing case
	        //      Axis has been fixed max 100
	        //      Plus data are all 100 and axis extent are [100, 100].
	        // Extend to the both side will cause expanded max is larger than fixed max.
	        // So only expand to the smaller side.
	
	        if (!opt.fixMax) {
	          extent[1] += expandSize / 2;
	          extent[0] -= expandSize / 2;
	        } else {
	          extent[0] -= expandSize / 2;
	        }
	      } else {
	        extent[1] = 1;
	      }
	    }
	
	    var span = extent[1] - extent[0]; // If there are no data and extent are [Infinity, -Infinity]
	
	    if (!isFinite(span)) {
	      extent[0] = 0;
	      extent[1] = 1;
	    }
	
	    this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval); // var extent = this._extent;
	
	    var interval = this._interval;
	
	    if (!opt.fixMin) {
	      extent[0] = roundNumber(Math.floor(extent[0] / interval) * interval);
	    }
	
	    if (!opt.fixMax) {
	      extent[1] = roundNumber(Math.ceil(extent[1] / interval) * interval);
	    }
	  }
	});
	/**
	 * @return {module:echarts/scale/Time}
	 */
	
	IntervalScale.create = function () {
	  return new IntervalScale();
	};
	
	var _default = IntervalScale;
	module.exports = _default;

/***/ }),
/* 1058 */
/***/ (function(module, exports, __webpack_require__) {

	var numberUtil = __webpack_require__(1013);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * For testable.
	 */
	var roundNumber = numberUtil.round;
	/**
	 * @param {Array.<number>} extent Both extent[0] and extent[1] should be valid number.
	 *                                Should be extent[0] < extent[1].
	 * @param {number} splitNumber splitNumber should be >= 1.
	 * @param {number} [minInterval]
	 * @param {number} [maxInterval]
	 * @return {Object} {interval, intervalPrecision, niceTickExtent}
	 */
	
	function intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval) {
	  var result = {};
	  var span = extent[1] - extent[0];
	  var interval = result.interval = numberUtil.nice(span / splitNumber, true);
	
	  if (minInterval != null && interval < minInterval) {
	    interval = result.interval = minInterval;
	  }
	
	  if (maxInterval != null && interval > maxInterval) {
	    interval = result.interval = maxInterval;
	  } // Tow more digital for tick.
	
	
	  var precision = result.intervalPrecision = getIntervalPrecision(interval); // Niced extent inside original extent
	
	  var niceTickExtent = result.niceTickExtent = [roundNumber(Math.ceil(extent[0] / interval) * interval, precision), roundNumber(Math.floor(extent[1] / interval) * interval, precision)];
	  fixExtent(niceTickExtent, extent);
	  return result;
	}
	/**
	 * @param {number} interval
	 * @return {number} interval precision
	 */
	
	
	function getIntervalPrecision(interval) {
	  // Tow more digital for tick.
	  return numberUtil.getPrecisionSafe(interval) + 2;
	}
	
	function clamp(niceTickExtent, idx, extent) {
	  niceTickExtent[idx] = Math.max(Math.min(niceTickExtent[idx], extent[1]), extent[0]);
	} // In some cases (e.g., splitNumber is 1), niceTickExtent may be out of extent.
	
	
	function fixExtent(niceTickExtent, extent) {
	  !isFinite(niceTickExtent[0]) && (niceTickExtent[0] = extent[0]);
	  !isFinite(niceTickExtent[1]) && (niceTickExtent[1] = extent[1]);
	  clamp(niceTickExtent, 0, extent);
	  clamp(niceTickExtent, 1, extent);
	
	  if (niceTickExtent[0] > niceTickExtent[1]) {
	    niceTickExtent[0] = niceTickExtent[1];
	  }
	}
	
	function intervalScaleGetTicks(interval, extent, niceTickExtent, intervalPrecision) {
	  var ticks = []; // If interval is 0, return [];
	
	  if (!interval) {
	    return ticks;
	  } // Consider this case: using dataZoom toolbox, zoom and zoom.
	
	
	  var safeLimit = 10000;
	
	  if (extent[0] < niceTickExtent[0]) {
	    ticks.push(extent[0]);
	  }
	
	  var tick = niceTickExtent[0];
	
	  while (tick <= niceTickExtent[1]) {
	    ticks.push(tick); // Avoid rounding error
	
	    tick = roundNumber(tick + interval, intervalPrecision);
	
	    if (tick === ticks[ticks.length - 1]) {
	      // Consider out of safe float point, e.g.,
	      // -3711126.9907707 + 2e-10 === -3711126.9907707
	      break;
	    }
	
	    if (ticks.length > safeLimit) {
	      return [];
	    }
	  } // Consider this case: the last item of ticks is smaller
	  // than niceTickExtent[1] and niceTickExtent[1] === extent[1].
	
	
	  if (extent[1] > (ticks.length ? ticks[ticks.length - 1] : niceTickExtent[1])) {
	    ticks.push(extent[1]);
	  }
	
	  return ticks;
	}
	
	exports.intervalScaleNiceTicks = intervalScaleNiceTicks;
	exports.getIntervalPrecision = getIntervalPrecision;
	exports.fixExtent = fixExtent;
	exports.intervalScaleGetTicks = intervalScaleGetTicks;

/***/ }),
/* 1059 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var _number = __webpack_require__(1013);
	
	var parsePercent = _number.parsePercent;
	
	var _dataStackHelper = __webpack_require__(1052);
	
	var isDimensionStacked = _dataStackHelper.isDimensionStacked;
	
	var createRenderPlanner = __webpack_require__(1034);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var STACK_PREFIX = '__ec_stack_';
	var LARGE_BAR_MIN_WIDTH = 0.5;
	var LargeArr = typeof Float32Array !== 'undefined' ? Float32Array : Array;
	
	function getSeriesStackId(seriesModel) {
	  return seriesModel.get('stack') || STACK_PREFIX + seriesModel.seriesIndex;
	}
	
	function getAxisKey(axis) {
	  return axis.dim + axis.index;
	}
	/**
	 * @param {Object} opt
	 * @param {module:echarts/coord/Axis} opt.axis Only support category axis currently.
	 * @param {number} opt.count Positive interger.
	 * @param {number} [opt.barWidth]
	 * @param {number} [opt.barMaxWidth]
	 * @param {number} [opt.barGap]
	 * @param {number} [opt.barCategoryGap]
	 * @return {Object} {width, offset, offsetCenter} If axis.type is not 'category', return undefined.
	 */
	
	
	function getLayoutOnAxis(opt) {
	  var params = [];
	  var baseAxis = opt.axis;
	  var axisKey = 'axis0';
	
	  if (baseAxis.type !== 'category') {
	    return;
	  }
	
	  var bandWidth = baseAxis.getBandWidth();
	
	  for (var i = 0; i < opt.count || 0; i++) {
	    params.push(zrUtil.defaults({
	      bandWidth: bandWidth,
	      axisKey: axisKey,
	      stackId: STACK_PREFIX + i
	    }, opt));
	  }
	
	  var widthAndOffsets = doCalBarWidthAndOffset(params);
	  var result = [];
	
	  for (var i = 0; i < opt.count; i++) {
	    var item = widthAndOffsets[axisKey][STACK_PREFIX + i];
	    item.offsetCenter = item.offset + item.width / 2;
	    result.push(item);
	  }
	
	  return result;
	}
	
	function prepareLayoutBarSeries(seriesType, ecModel) {
	  var seriesModels = [];
	  ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	    // Check series coordinate, do layout for cartesian2d only
	    if (isOnCartesian(seriesModel) && !isInLargeMode(seriesModel)) {
	      seriesModels.push(seriesModel);
	    }
	  });
	  return seriesModels;
	}
	
	function makeColumnLayout(barSeries) {
	  var seriesInfoList = [];
	  zrUtil.each(barSeries, function (seriesModel) {
	    var data = seriesModel.getData();
	    var cartesian = seriesModel.coordinateSystem;
	    var baseAxis = cartesian.getBaseAxis();
	    var axisExtent = baseAxis.getExtent();
	    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();
	    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);
	    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);
	    var barGap = seriesModel.get('barGap');
	    var barCategoryGap = seriesModel.get('barCategoryGap');
	    seriesInfoList.push({
	      bandWidth: bandWidth,
	      barWidth: barWidth,
	      barMaxWidth: barMaxWidth,
	      barGap: barGap,
	      barCategoryGap: barCategoryGap,
	      axisKey: getAxisKey(baseAxis),
	      stackId: getSeriesStackId(seriesModel)
	    });
	  });
	  return doCalBarWidthAndOffset(seriesInfoList);
	}
	
	function doCalBarWidthAndOffset(seriesInfoList) {
	  // Columns info on each category axis. Key is cartesian name
	  var columnsMap = {};
	  zrUtil.each(seriesInfoList, function (seriesInfo, idx) {
	    var axisKey = seriesInfo.axisKey;
	    var bandWidth = seriesInfo.bandWidth;
	    var columnsOnAxis = columnsMap[axisKey] || {
	      bandWidth: bandWidth,
	      remainedWidth: bandWidth,
	      autoWidthCount: 0,
	      categoryGap: '20%',
	      gap: '30%',
	      stacks: {}
	    };
	    var stacks = columnsOnAxis.stacks;
	    columnsMap[axisKey] = columnsOnAxis;
	    var stackId = seriesInfo.stackId;
	
	    if (!stacks[stackId]) {
	      columnsOnAxis.autoWidthCount++;
	    }
	
	    stacks[stackId] = stacks[stackId] || {
	      width: 0,
	      maxWidth: 0
	    }; // Caution: In a single coordinate system, these barGrid attributes
	    // will be shared by series. Consider that they have default values,
	    // only the attributes set on the last series will work.
	    // Do not change this fact unless there will be a break change.
	    // TODO
	
	    var barWidth = seriesInfo.barWidth;
	
	    if (barWidth && !stacks[stackId].width) {
	      // See #6312, do not restrict width.
	      stacks[stackId].width = barWidth;
	      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
	      columnsOnAxis.remainedWidth -= barWidth;
	    }
	
	    var barMaxWidth = seriesInfo.barMaxWidth;
	    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
	    var barGap = seriesInfo.barGap;
	    barGap != null && (columnsOnAxis.gap = barGap);
	    var barCategoryGap = seriesInfo.barCategoryGap;
	    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);
	  });
	  var result = {};
	  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {
	    result[coordSysName] = {};
	    var stacks = columnsOnAxis.stacks;
	    var bandWidth = columnsOnAxis.bandWidth;
	    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);
	    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);
	    var remainedWidth = columnsOnAxis.remainedWidth;
	    var autoWidthCount = columnsOnAxis.autoWidthCount;
	    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth
	
	    zrUtil.each(stacks, function (column, stack) {
	      var maxWidth = column.maxWidth;
	
	      if (maxWidth && maxWidth < autoWidth) {
	        maxWidth = Math.min(maxWidth, remainedWidth);
	
	        if (column.width) {
	          maxWidth = Math.min(maxWidth, column.width);
	        }
	
	        remainedWidth -= maxWidth;
	        column.width = maxWidth;
	        autoWidthCount--;
	      }
	    }); // Recalculate width again
	
	    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	    autoWidth = Math.max(autoWidth, 0);
	    var widthSum = 0;
	    var lastColumn;
	    zrUtil.each(stacks, function (column, idx) {
	      if (!column.width) {
	        column.width = autoWidth;
	      }
	
	      lastColumn = column;
	      widthSum += column.width * (1 + barGapPercent);
	    });
	
	    if (lastColumn) {
	      widthSum -= lastColumn.width * barGapPercent;
	    }
	
	    var offset = -widthSum / 2;
	    zrUtil.each(stacks, function (column, stackId) {
	      result[coordSysName][stackId] = result[coordSysName][stackId] || {
	        offset: offset,
	        width: column.width
	      };
	      offset += column.width * (1 + barGapPercent);
	    });
	  });
	  return result;
	}
	/**
	 * @param {Object} barWidthAndOffset The result of makeColumnLayout
	 * @param {module:echarts/coord/Axis} axis
	 * @param {module:echarts/model/Series} [seriesModel] If not provided, return all.
	 * @return {Object} {stackId: {offset, width}} or {offset, width} if seriesModel provided.
	 */
	
	
	function retrieveColumnLayout(barWidthAndOffset, axis, seriesModel) {
	  if (barWidthAndOffset && axis) {
	    var result = barWidthAndOffset[getAxisKey(axis)];
	
	    if (result != null && seriesModel != null) {
	      result = result[getSeriesStackId(seriesModel)];
	    }
	
	    return result;
	  }
	}
	/**
	 * @param {string} seriesType
	 * @param {module:echarts/model/Global} ecModel
	 */
	
	
	function layout(seriesType, ecModel) {
	  var seriesModels = prepareLayoutBarSeries(seriesType, ecModel);
	  var barWidthAndOffset = makeColumnLayout(seriesModels);
	  var lastStackCoords = {};
	  var lastStackCoordsOrigin = {};
	  zrUtil.each(seriesModels, function (seriesModel) {
	    var data = seriesModel.getData();
	    var cartesian = seriesModel.coordinateSystem;
	    var baseAxis = cartesian.getBaseAxis();
	    var stackId = getSeriesStackId(seriesModel);
	    var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];
	    var columnOffset = columnLayoutInfo.offset;
	    var columnWidth = columnLayoutInfo.width;
	    var valueAxis = cartesian.getOtherAxis(baseAxis);
	    var barMinHeight = seriesModel.get('barMinHeight') || 0;
	    lastStackCoords[stackId] = lastStackCoords[stackId] || [];
	    lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243
	
	    data.setLayout({
	      offset: columnOffset,
	      size: columnWidth
	    });
	    var valueDim = data.mapDimension(valueAxis.dim);
	    var baseDim = data.mapDimension(baseAxis.dim);
	    var stacked = isDimensionStacked(data, valueDim
	    /*, baseDim*/
	    );
	    var isValueAxisH = valueAxis.isHorizontal();
	    var valueAxisStart = getValueAxisStart(baseAxis, valueAxis, stacked);
	
	    for (var idx = 0, len = data.count(); idx < len; idx++) {
	      var value = data.get(valueDim, idx);
	      var baseValue = data.get(baseDim, idx);
	
	      if (isNaN(value)) {
	        continue;
	      }
	
	      var sign = value >= 0 ? 'p' : 'n';
	      var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in
	      // stackResultDimension directly.
	
	      if (stacked) {
	        // Only ordinal axis can be stacked.
	        if (!lastStackCoords[stackId][baseValue]) {
	          lastStackCoords[stackId][baseValue] = {
	            p: valueAxisStart,
	            // Positive stack
	            n: valueAxisStart // Negative stack
	
	          };
	        } // Should also consider #4243
	
	
	        baseCoord = lastStackCoords[stackId][baseValue][sign];
	      }
	
	      var x;
	      var y;
	      var width;
	      var height;
	
	      if (isValueAxisH) {
	        var coord = cartesian.dataToPoint([value, baseValue]);
	        x = baseCoord;
	        y = coord[1] + columnOffset;
	        width = coord[0] - valueAxisStart;
	        height = columnWidth;
	
	        if (Math.abs(width) < barMinHeight) {
	          width = (width < 0 ? -1 : 1) * barMinHeight;
	        }
	
	        stacked && (lastStackCoords[stackId][baseValue][sign] += width);
	      } else {
	        var coord = cartesian.dataToPoint([baseValue, value]);
	        x = coord[0] + columnOffset;
	        y = baseCoord;
	        width = columnWidth;
	        height = coord[1] - valueAxisStart;
	
	        if (Math.abs(height) < barMinHeight) {
	          // Include zero to has a positive bar
	          height = (height <= 0 ? -1 : 1) * barMinHeight;
	        }
	
	        stacked && (lastStackCoords[stackId][baseValue][sign] += height);
	      }
	
	      data.setItemLayout(idx, {
	        x: x,
	        y: y,
	        width: width,
	        height: height
	      });
	    }
	  }, this);
	} // TODO: Do not support stack in large mode yet.
	
	
	var largeLayout = {
	  seriesType: 'bar',
	  plan: createRenderPlanner(),
	  reset: function (seriesModel) {
	    if (!isOnCartesian(seriesModel) || !isInLargeMode(seriesModel)) {
	      return;
	    }
	
	    var data = seriesModel.getData();
	    var cartesian = seriesModel.coordinateSystem;
	    var baseAxis = cartesian.getBaseAxis();
	    var valueAxis = cartesian.getOtherAxis(baseAxis);
	    var valueDim = data.mapDimension(valueAxis.dim);
	    var baseDim = data.mapDimension(baseAxis.dim);
	    var valueAxisHorizontal = valueAxis.isHorizontal();
	    var valueDimIdx = valueAxisHorizontal ? 0 : 1;
	    var barWidth = retrieveColumnLayout(makeColumnLayout([seriesModel]), baseAxis, seriesModel).width;
	
	    if (!(barWidth > LARGE_BAR_MIN_WIDTH)) {
	      // jshint ignore:line
	      barWidth = LARGE_BAR_MIN_WIDTH;
	    }
	
	    return {
	      progress: progress
	    };
	
	    function progress(params, data) {
	      var largePoints = new LargeArr(params.count * 2);
	      var dataIndex;
	      var coord = [];
	      var valuePair = [];
	      var offset = 0;
	
	      while ((dataIndex = params.next()) != null) {
	        valuePair[valueDimIdx] = data.get(valueDim, dataIndex);
	        valuePair[1 - valueDimIdx] = data.get(baseDim, dataIndex);
	        coord = cartesian.dataToPoint(valuePair, null, coord);
	        largePoints[offset++] = coord[0];
	        largePoints[offset++] = coord[1];
	      }
	
	      data.setLayout({
	        largePoints: largePoints,
	        barWidth: barWidth,
	        valueAxisStart: getValueAxisStart(baseAxis, valueAxis, false),
	        valueAxisHorizontal: valueAxisHorizontal
	      });
	    }
	  }
	};
	
	function isOnCartesian(seriesModel) {
	  return seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian2d';
	}
	
	function isInLargeMode(seriesModel) {
	  return seriesModel.pipelineContext && seriesModel.pipelineContext.large;
	}
	
	function getValueAxisStart(baseAxis, valueAxis, stacked) {
	  return zrUtil.indexOf(baseAxis.getAxesOnZeroOf(), valueAxis) >= 0 || stacked ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0)) : valueAxis.getGlobalExtent()[0];
	}
	
	exports.getLayoutOnAxis = getLayoutOnAxis;
	exports.prepareLayoutBarSeries = prepareLayoutBarSeries;
	exports.makeColumnLayout = makeColumnLayout;
	exports.retrieveColumnLayout = retrieveColumnLayout;
	exports.layout = layout;
	exports.largeLayout = largeLayout;

/***/ }),
/* 1060 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var numberUtil = __webpack_require__(1013);
	
	var formatUtil = __webpack_require__(1014);
	
	var scaleHelper = __webpack_require__(1058);
	
	var IntervalScale = __webpack_require__(1057);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// [About UTC and local time zone]:
	// In most cases, `number.parseDate` will treat input data string as local time
	// (except time zone is specified in time string). And `format.formateTime` returns
	// local time by default. option.useUTC is false by default. This design have
	// concidered these common case:
	// (1) Time that is persistent in server is in UTC, but it is needed to be diplayed
	// in local time by default.
	// (2) By default, the input data string (e.g., '2011-01-02') should be displayed
	// as its original time, without any time difference.
	var intervalScaleProto = IntervalScale.prototype;
	var mathCeil = Math.ceil;
	var mathFloor = Math.floor;
	var ONE_SECOND = 1000;
	var ONE_MINUTE = ONE_SECOND * 60;
	var ONE_HOUR = ONE_MINUTE * 60;
	var ONE_DAY = ONE_HOUR * 24; // FIXME 公用？
	
	var bisect = function (a, x, lo, hi) {
	  while (lo < hi) {
	    var mid = lo + hi >>> 1;
	
	    if (a[mid][1] < x) {
	      lo = mid + 1;
	    } else {
	      hi = mid;
	    }
	  }
	
	  return lo;
	};
	/**
	 * @alias module:echarts/coord/scale/Time
	 * @constructor
	 */
	
	
	var TimeScale = IntervalScale.extend({
	  type: 'time',
	
	  /**
	   * @override
	   */
	  getLabel: function (val) {
	    var stepLvl = this._stepLvl;
	    var date = new Date(val);
	    return formatUtil.formatTime(stepLvl[0], date, this.getSetting('useUTC'));
	  },
	
	  /**
	   * @override
	   */
	  niceExtent: function (opt) {
	    var extent = this._extent; // If extent start and end are same, expand them
	
	    if (extent[0] === extent[1]) {
	      // Expand extent
	      extent[0] -= ONE_DAY;
	      extent[1] += ONE_DAY;
	    } // If there are no data and extent are [Infinity, -Infinity]
	
	
	    if (extent[1] === -Infinity && extent[0] === Infinity) {
	      var d = new Date();
	      extent[1] = +new Date(d.getFullYear(), d.getMonth(), d.getDate());
	      extent[0] = extent[1] - ONE_DAY;
	    }
	
	    this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval); // var extent = this._extent;
	
	    var interval = this._interval;
	
	    if (!opt.fixMin) {
	      extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);
	    }
	
	    if (!opt.fixMax) {
	      extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);
	    }
	  },
	
	  /**
	   * @override
	   */
	  niceTicks: function (approxTickNum, minInterval, maxInterval) {
	    approxTickNum = approxTickNum || 10;
	    var extent = this._extent;
	    var span = extent[1] - extent[0];
	    var approxInterval = span / approxTickNum;
	
	    if (minInterval != null && approxInterval < minInterval) {
	      approxInterval = minInterval;
	    }
	
	    if (maxInterval != null && approxInterval > maxInterval) {
	      approxInterval = maxInterval;
	    }
	
	    var scaleLevelsLen = scaleLevels.length;
	    var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);
	    var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];
	    var interval = level[1]; // Same with interval scale if span is much larger than 1 year
	
	    if (level[0] === 'year') {
	      var yearSpan = span / interval; // From "Nice Numbers for Graph Labels" of Graphic Gems
	      // var niceYearSpan = numberUtil.nice(yearSpan, false);
	
	      var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);
	      interval *= yearStep;
	    }
	
	    var timezoneOffset = this.getSetting('useUTC') ? 0 : new Date(+extent[0] || +extent[1]).getTimezoneOffset() * 60 * 1000;
	    var niceExtent = [Math.round(mathCeil((extent[0] - timezoneOffset) / interval) * interval + timezoneOffset), Math.round(mathFloor((extent[1] - timezoneOffset) / interval) * interval + timezoneOffset)];
	    scaleHelper.fixExtent(niceExtent, extent);
	    this._stepLvl = level; // Interval will be used in getTicks
	
	    this._interval = interval;
	    this._niceExtent = niceExtent;
	  },
	  parse: function (val) {
	    // val might be float.
	    return +numberUtil.parseDate(val);
	  }
	});
	zrUtil.each(['contain', 'normalize'], function (methodName) {
	  TimeScale.prototype[methodName] = function (val) {
	    return intervalScaleProto[methodName].call(this, this.parse(val));
	  };
	}); // Steps from d3
	
	var scaleLevels = [// Format              interval
	['hh:mm:ss', ONE_SECOND], // 1s
	['hh:mm:ss', ONE_SECOND * 5], // 5s
	['hh:mm:ss', ONE_SECOND * 10], // 10s
	['hh:mm:ss', ONE_SECOND * 15], // 15s
	['hh:mm:ss', ONE_SECOND * 30], // 30s
	['hh:mm\nMM-dd', ONE_MINUTE], // 1m
	['hh:mm\nMM-dd', ONE_MINUTE * 5], // 5m
	['hh:mm\nMM-dd', ONE_MINUTE * 10], // 10m
	['hh:mm\nMM-dd', ONE_MINUTE * 15], // 15m
	['hh:mm\nMM-dd', ONE_MINUTE * 30], // 30m
	['hh:mm\nMM-dd', ONE_HOUR], // 1h
	['hh:mm\nMM-dd', ONE_HOUR * 2], // 2h
	['hh:mm\nMM-dd', ONE_HOUR * 6], // 6h
	['hh:mm\nMM-dd', ONE_HOUR * 12], // 12h
	['MM-dd\nyyyy', ONE_DAY], // 1d
	['MM-dd\nyyyy', ONE_DAY * 2], // 2d
	['MM-dd\nyyyy', ONE_DAY * 3], // 3d
	['MM-dd\nyyyy', ONE_DAY * 4], // 4d
	['MM-dd\nyyyy', ONE_DAY * 5], // 5d
	['MM-dd\nyyyy', ONE_DAY * 6], // 6d
	['week', ONE_DAY * 7], // 7d
	['MM-dd\nyyyy', ONE_DAY * 10], // 10d
	['week', ONE_DAY * 14], // 2w
	['week', ONE_DAY * 21], // 3w
	['month', ONE_DAY * 31], // 1M
	['week', ONE_DAY * 42], // 6w
	['month', ONE_DAY * 62], // 2M
	['week', ONE_DAY * 42], // 10w
	['quarter', ONE_DAY * 380 / 4], // 3M
	['month', ONE_DAY * 31 * 4], // 4M
	['month', ONE_DAY * 31 * 5], // 5M
	['half-year', ONE_DAY * 380 / 2], // 6M
	['month', ONE_DAY * 31 * 8], // 8M
	['month', ONE_DAY * 31 * 10], // 10M
	['year', ONE_DAY * 380] // 1Y
	];
	/**
	 * @param {module:echarts/model/Model}
	 * @return {module:echarts/scale/Time}
	 */
	
	TimeScale.create = function (model) {
	  return new TimeScale({
	    useUTC: model.ecModel.get('useUTC')
	  });
	};
	
	var _default = TimeScale;
	module.exports = _default;

/***/ }),
/* 1061 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var Scale = __webpack_require__(1055);
	
	var numberUtil = __webpack_require__(1013);
	
	var IntervalScale = __webpack_require__(1057);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Log scale
	 * @module echarts/scale/Log
	 */
	// Use some method of IntervalScale
	var scaleProto = Scale.prototype;
	var intervalScaleProto = IntervalScale.prototype;
	var getPrecisionSafe = numberUtil.getPrecisionSafe;
	var roundingErrorFix = numberUtil.round;
	var mathFloor = Math.floor;
	var mathCeil = Math.ceil;
	var mathPow = Math.pow;
	var mathLog = Math.log;
	var LogScale = Scale.extend({
	  type: 'log',
	  base: 10,
	  $constructor: function () {
	    Scale.apply(this, arguments);
	    this._originalScale = new IntervalScale();
	  },
	
	  /**
	   * @return {Array.<number>}
	   */
	  getTicks: function () {
	    var originalScale = this._originalScale;
	    var extent = this._extent;
	    var originalExtent = originalScale.getExtent();
	    return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {
	      var powVal = numberUtil.round(mathPow(this.base, val)); // Fix #4158
	
	      powVal = val === extent[0] && originalScale.__fixMin ? fixRoundingError(powVal, originalExtent[0]) : powVal;
	      powVal = val === extent[1] && originalScale.__fixMax ? fixRoundingError(powVal, originalExtent[1]) : powVal;
	      return powVal;
	    }, this);
	  },
	
	  /**
	   * @param {number} val
	   * @return {string}
	   */
	  getLabel: intervalScaleProto.getLabel,
	
	  /**
	   * @param  {number} val
	   * @return {number}
	   */
	  scale: function (val) {
	    val = scaleProto.scale.call(this, val);
	    return mathPow(this.base, val);
	  },
	
	  /**
	   * @param {number} start
	   * @param {number} end
	   */
	  setExtent: function (start, end) {
	    var base = this.base;
	    start = mathLog(start) / mathLog(base);
	    end = mathLog(end) / mathLog(base);
	    intervalScaleProto.setExtent.call(this, start, end);
	  },
	
	  /**
	   * @return {number} end
	   */
	  getExtent: function () {
	    var base = this.base;
	    var extent = scaleProto.getExtent.call(this);
	    extent[0] = mathPow(base, extent[0]);
	    extent[1] = mathPow(base, extent[1]); // Fix #4158
	
	    var originalScale = this._originalScale;
	    var originalExtent = originalScale.getExtent();
	    originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));
	    originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));
	    return extent;
	  },
	
	  /**
	   * @param  {Array.<number>} extent
	   */
	  unionExtent: function (extent) {
	    this._originalScale.unionExtent(extent);
	
	    var base = this.base;
	    extent[0] = mathLog(extent[0]) / mathLog(base);
	    extent[1] = mathLog(extent[1]) / mathLog(base);
	    scaleProto.unionExtent.call(this, extent);
	  },
	
	  /**
	   * @override
	   */
	  unionExtentFromData: function (data, dim) {
	    // TODO
	    // filter value that <= 0
	    this.unionExtent(data.getApproximateExtent(dim));
	  },
	
	  /**
	   * Update interval and extent of intervals for nice ticks
	   * @param  {number} [approxTickNum = 10] Given approx tick number
	   */
	  niceTicks: function (approxTickNum) {
	    approxTickNum = approxTickNum || 10;
	    var extent = this._extent;
	    var span = extent[1] - extent[0];
	
	    if (span === Infinity || span <= 0) {
	      return;
	    }
	
	    var interval = numberUtil.quantity(span);
	    var err = approxTickNum / span * interval; // Filter ticks to get closer to the desired count.
	
	    if (err <= 0.5) {
	      interval *= 10;
	    } // Interval should be integer
	
	
	    while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {
	      interval *= 10;
	    }
	
	    var niceExtent = [numberUtil.round(mathCeil(extent[0] / interval) * interval), numberUtil.round(mathFloor(extent[1] / interval) * interval)];
	    this._interval = interval;
	    this._niceExtent = niceExtent;
	  },
	
	  /**
	   * Nice extent.
	   * @override
	   */
	  niceExtent: function (opt) {
	    intervalScaleProto.niceExtent.call(this, opt);
	    var originalScale = this._originalScale;
	    originalScale.__fixMin = opt.fixMin;
	    originalScale.__fixMax = opt.fixMax;
	  }
	});
	zrUtil.each(['contain', 'normalize'], function (methodName) {
	  LogScale.prototype[methodName] = function (val) {
	    val = mathLog(val) / mathLog(this.base);
	    return scaleProto[methodName].call(this, val);
	  };
	});
	
	LogScale.create = function () {
	  return new LogScale();
	};
	
	function fixRoundingError(val, originalVal) {
	  return roundingErrorFix(val, getPrecisionSafe(originalVal));
	}
	
	var _default = LogScale;
	module.exports = _default;

/***/ }),
/* 1062 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var axisHelper = __webpack_require__(1053);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = {
	  /**
	   * @param {boolean} origin
	   * @return {number|string} min value or 'dataMin' or null/undefined (means auto) or NaN
	   */
	  getMin: function (origin) {
	    var option = this.option;
	    var min = !origin && option.rangeStart != null ? option.rangeStart : option.min;
	
	    if (this.axis && min != null && min !== 'dataMin' && typeof min !== 'function' && !zrUtil.eqNaN(min)) {
	      min = this.axis.scale.parse(min);
	    }
	
	    return min;
	  },
	
	  /**
	   * @param {boolean} origin
	   * @return {number|string} max value or 'dataMax' or null/undefined (means auto) or NaN
	   */
	  getMax: function (origin) {
	    var option = this.option;
	    var max = !origin && option.rangeEnd != null ? option.rangeEnd : option.max;
	
	    if (this.axis && max != null && max !== 'dataMax' && typeof max !== 'function' && !zrUtil.eqNaN(max)) {
	      max = this.axis.scale.parse(max);
	    }
	
	    return max;
	  },
	
	  /**
	   * @return {boolean}
	   */
	  getNeedCrossZero: function () {
	    var option = this.option;
	    return option.rangeStart != null || option.rangeEnd != null ? false : !option.scale;
	  },
	
	  /**
	   * Should be implemented by each axis model if necessary.
	   * @return {module:echarts/model/Component} coordinate system model
	   */
	  getCoordSysModel: zrUtil.noop,
	
	  /**
	   * @param {number} rangeStart Can only be finite number or null/undefined or NaN.
	   * @param {number} rangeEnd Can only be finite number or null/undefined or NaN.
	   */
	  setRange: function (rangeStart, rangeEnd) {
	    this.option.rangeStart = rangeStart;
	    this.option.rangeEnd = rangeEnd;
	  },
	
	  /**
	   * Reset range
	   */
	  resetRange: function () {
	    // rangeStart and rangeEnd is readonly.
	    this.option.rangeStart = this.option.rangeEnd = null;
	  }
	};
	module.exports = _default;

/***/ }),
/* 1063 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var graphic = __webpack_require__(976);
	
	var BoundingRect = __webpack_require__(949);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Symbol factory
	
	/**
	 * Triangle shape
	 * @inner
	 */
	var Triangle = graphic.extendShape({
	  type: 'triangle',
	  shape: {
	    cx: 0,
	    cy: 0,
	    width: 0,
	    height: 0
	  },
	  buildPath: function (path, shape) {
	    var cx = shape.cx;
	    var cy = shape.cy;
	    var width = shape.width / 2;
	    var height = shape.height / 2;
	    path.moveTo(cx, cy - height);
	    path.lineTo(cx + width, cy + height);
	    path.lineTo(cx - width, cy + height);
	    path.closePath();
	  }
	});
	/**
	 * Diamond shape
	 * @inner
	 */
	
	var Diamond = graphic.extendShape({
	  type: 'diamond',
	  shape: {
	    cx: 0,
	    cy: 0,
	    width: 0,
	    height: 0
	  },
	  buildPath: function (path, shape) {
	    var cx = shape.cx;
	    var cy = shape.cy;
	    var width = shape.width / 2;
	    var height = shape.height / 2;
	    path.moveTo(cx, cy - height);
	    path.lineTo(cx + width, cy);
	    path.lineTo(cx, cy + height);
	    path.lineTo(cx - width, cy);
	    path.closePath();
	  }
	});
	/**
	 * Pin shape
	 * @inner
	 */
	
	var Pin = graphic.extendShape({
	  type: 'pin',
	  shape: {
	    // x, y on the cusp
	    x: 0,
	    y: 0,
	    width: 0,
	    height: 0
	  },
	  buildPath: function (path, shape) {
	    var x = shape.x;
	    var y = shape.y;
	    var w = shape.width / 5 * 3; // Height must be larger than width
	
	    var h = Math.max(w, shape.height);
	    var r = w / 2; // Dist on y with tangent point and circle center
	
	    var dy = r * r / (h - r);
	    var cy = y - h + r + dy;
	    var angle = Math.asin(dy / r); // Dist on x with tangent point and circle center
	
	    var dx = Math.cos(angle) * r;
	    var tanX = Math.sin(angle);
	    var tanY = Math.cos(angle);
	    var cpLen = r * 0.6;
	    var cpLen2 = r * 0.7;
	    path.moveTo(x - dx, cy + dy);
	    path.arc(x, cy, r, Math.PI - angle, Math.PI * 2 + angle);
	    path.bezierCurveTo(x + dx - tanX * cpLen, cy + dy + tanY * cpLen, x, y - cpLen2, x, y);
	    path.bezierCurveTo(x, y - cpLen2, x - dx + tanX * cpLen, cy + dy + tanY * cpLen, x - dx, cy + dy);
	    path.closePath();
	  }
	});
	/**
	 * Arrow shape
	 * @inner
	 */
	
	var Arrow = graphic.extendShape({
	  type: 'arrow',
	  shape: {
	    x: 0,
	    y: 0,
	    width: 0,
	    height: 0
	  },
	  buildPath: function (ctx, shape) {
	    var height = shape.height;
	    var width = shape.width;
	    var x = shape.x;
	    var y = shape.y;
	    var dx = width / 3 * 2;
	    ctx.moveTo(x, y);
	    ctx.lineTo(x + dx, y + height);
	    ctx.lineTo(x, y + height / 4 * 3);
	    ctx.lineTo(x - dx, y + height);
	    ctx.lineTo(x, y);
	    ctx.closePath();
	  }
	});
	/**
	 * Map of path contructors
	 * @type {Object.<string, module:zrender/graphic/Path>}
	 */
	
	var symbolCtors = {
	  line: graphic.Line,
	  rect: graphic.Rect,
	  roundRect: graphic.Rect,
	  square: graphic.Rect,
	  circle: graphic.Circle,
	  diamond: Diamond,
	  pin: Pin,
	  arrow: Arrow,
	  triangle: Triangle
	};
	var symbolShapeMakers = {
	  line: function (x, y, w, h, shape) {
	    // FIXME
	    shape.x1 = x;
	    shape.y1 = y + h / 2;
	    shape.x2 = x + w;
	    shape.y2 = y + h / 2;
	  },
	  rect: function (x, y, w, h, shape) {
	    shape.x = x;
	    shape.y = y;
	    shape.width = w;
	    shape.height = h;
	  },
	  roundRect: function (x, y, w, h, shape) {
	    shape.x = x;
	    shape.y = y;
	    shape.width = w;
	    shape.height = h;
	    shape.r = Math.min(w, h) / 4;
	  },
	  square: function (x, y, w, h, shape) {
	    var size = Math.min(w, h);
	    shape.x = x;
	    shape.y = y;
	    shape.width = size;
	    shape.height = size;
	  },
	  circle: function (x, y, w, h, shape) {
	    // Put circle in the center of square
	    shape.cx = x + w / 2;
	    shape.cy = y + h / 2;
	    shape.r = Math.min(w, h) / 2;
	  },
	  diamond: function (x, y, w, h, shape) {
	    shape.cx = x + w / 2;
	    shape.cy = y + h / 2;
	    shape.width = w;
	    shape.height = h;
	  },
	  pin: function (x, y, w, h, shape) {
	    shape.x = x + w / 2;
	    shape.y = y + h / 2;
	    shape.width = w;
	    shape.height = h;
	  },
	  arrow: function (x, y, w, h, shape) {
	    shape.x = x + w / 2;
	    shape.y = y + h / 2;
	    shape.width = w;
	    shape.height = h;
	  },
	  triangle: function (x, y, w, h, shape) {
	    shape.cx = x + w / 2;
	    shape.cy = y + h / 2;
	    shape.width = w;
	    shape.height = h;
	  }
	};
	var symbolBuildProxies = {};
	zrUtil.each(symbolCtors, function (Ctor, name) {
	  symbolBuildProxies[name] = new Ctor();
	});
	var SymbolClz = graphic.extendShape({
	  type: 'symbol',
	  shape: {
	    symbolType: '',
	    x: 0,
	    y: 0,
	    width: 0,
	    height: 0
	  },
	  beforeBrush: function () {
	    var style = this.style;
	    var shape = this.shape; // FIXME
	
	    if (shape.symbolType === 'pin' && style.textPosition === 'inside') {
	      style.textPosition = ['50%', '40%'];
	      style.textAlign = 'center';
	      style.textVerticalAlign = 'middle';
	    }
	  },
	  buildPath: function (ctx, shape, inBundle) {
	    var symbolType = shape.symbolType;
	    var proxySymbol = symbolBuildProxies[symbolType];
	
	    if (shape.symbolType !== 'none') {
	      if (!proxySymbol) {
	        // Default rect
	        symbolType = 'rect';
	        proxySymbol = symbolBuildProxies[symbolType];
	      }
	
	      symbolShapeMakers[symbolType](shape.x, shape.y, shape.width, shape.height, proxySymbol.shape);
	      proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);
	    }
	  }
	}); // Provide setColor helper method to avoid determine if set the fill or stroke outside
	
	function symbolPathSetColor(color, innerColor) {
	  if (this.type !== 'image') {
	    var symbolStyle = this.style;
	    var symbolShape = this.shape;
	
	    if (symbolShape && symbolShape.symbolType === 'line') {
	      symbolStyle.stroke = color;
	    } else if (this.__isEmptyBrush) {
	      symbolStyle.stroke = color;
	      symbolStyle.fill = innerColor || '#fff';
	    } else {
	      // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?
	      symbolStyle.fill && (symbolStyle.fill = color);
	      symbolStyle.stroke && (symbolStyle.stroke = color);
	    }
	
	    this.dirty(false);
	  }
	}
	/**
	 * Create a symbol element with given symbol configuration: shape, x, y, width, height, color
	 * @param {string} symbolType
	 * @param {number} x
	 * @param {number} y
	 * @param {number} w
	 * @param {number} h
	 * @param {string} color
	 * @param {boolean} [keepAspect=false] whether to keep the ratio of w/h,
	 *                            for path and image only.
	 */
	
	
	function createSymbol(symbolType, x, y, w, h, color, keepAspect) {
	  // TODO Support image object, DynamicImage.
	  var isEmpty = symbolType.indexOf('empty') === 0;
	
	  if (isEmpty) {
	    symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);
	  }
	
	  var symbolPath;
	
	  if (symbolType.indexOf('image://') === 0) {
	    symbolPath = graphic.makeImage(symbolType.slice(8), new BoundingRect(x, y, w, h), keepAspect ? 'center' : 'cover');
	  } else if (symbolType.indexOf('path://') === 0) {
	    symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h), keepAspect ? 'center' : 'cover');
	  } else {
	    symbolPath = new SymbolClz({
	      shape: {
	        symbolType: symbolType,
	        x: x,
	        y: y,
	        width: w,
	        height: h
	      }
	    });
	  }
	
	  symbolPath.__isEmptyBrush = isEmpty;
	  symbolPath.setColor = symbolPathSetColor;
	  symbolPath.setColor(color);
	  return symbolPath;
	}
	
	exports.createSymbol = createSymbol;

/***/ }),
/* 1064 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var Region = __webpack_require__(1065);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Parse and decode geo json
	 * @module echarts/coord/geo/parseGeoJson
	 */
	function decode(json) {
	  if (!json.UTF8Encoding) {
	    return json;
	  }
	
	  var encodeScale = json.UTF8Scale;
	
	  if (encodeScale == null) {
	    encodeScale = 1024;
	  }
	
	  var features = json.features;
	
	  for (var f = 0; f < features.length; f++) {
	    var feature = features[f];
	    var geometry = feature.geometry;
	    var coordinates = geometry.coordinates;
	    var encodeOffsets = geometry.encodeOffsets;
	
	    for (var c = 0; c < coordinates.length; c++) {
	      var coordinate = coordinates[c];
	
	      if (geometry.type === 'Polygon') {
	        coordinates[c] = decodePolygon(coordinate, encodeOffsets[c], encodeScale);
	      } else if (geometry.type === 'MultiPolygon') {
	        for (var c2 = 0; c2 < coordinate.length; c2++) {
	          var polygon = coordinate[c2];
	          coordinate[c2] = decodePolygon(polygon, encodeOffsets[c][c2], encodeScale);
	        }
	      }
	    }
	  } // Has been decoded
	
	
	  json.UTF8Encoding = false;
	  return json;
	}
	
	function decodePolygon(coordinate, encodeOffsets, encodeScale) {
	  var result = [];
	  var prevX = encodeOffsets[0];
	  var prevY = encodeOffsets[1];
	
	  for (var i = 0; i < coordinate.length; i += 2) {
	    var x = coordinate.charCodeAt(i) - 64;
	    var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding
	
	    x = x >> 1 ^ -(x & 1);
	    y = y >> 1 ^ -(y & 1); // Delta deocding
	
	    x += prevX;
	    y += prevY;
	    prevX = x;
	    prevY = y; // Dequantize
	
	    result.push([x / encodeScale, y / encodeScale]);
	  }
	
	  return result;
	}
	/**
	 * @alias module:echarts/coord/geo/parseGeoJson
	 * @param {Object} geoJson
	 * @return {module:zrender/container/Group}
	 */
	
	
	function _default(geoJson) {
	  decode(geoJson);
	  return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {
	    // Output of mapshaper may have geometry null
	    return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;
	  }), function (featureObj) {
	    var properties = featureObj.properties;
	    var geo = featureObj.geometry;
	    var coordinates = geo.coordinates;
	    var geometries = [];
	
	    if (geo.type === 'Polygon') {
	      geometries.push({
	        type: 'polygon',
	        // According to the GeoJSON specification.
	        // First must be exterior, and the rest are all interior(holes).
	        exterior: coordinates[0],
	        interiors: coordinates.slice(1)
	      });
	    }
	
	    if (geo.type === 'MultiPolygon') {
	      zrUtil.each(coordinates, function (item) {
	        if (item[0]) {
	          geometries.push({
	            type: 'polygon',
	            exterior: item[0],
	            interiors: item.slice(1)
	          });
	        }
	      });
	    }
	
	    var region = new Region(properties.name, geometries, properties.cp);
	    region.properties = properties;
	    return region;
	  });
	}
	
	module.exports = _default;

/***/ }),
/* 1065 */
/***/ (function(module, exports, __webpack_require__) {

	var BoundingRect = __webpack_require__(949);
	
	var bbox = __webpack_require__(981);
	
	var vec2 = __webpack_require__(933);
	
	var polygonContain = __webpack_require__(1066);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * @module echarts/coord/geo/Region
	 */
	
	/**
	 * @param {string} name
	 * @param {Array} geometries
	 * @param {Array.<number>} cp
	 */
	function Region(name, geometries, cp) {
	  /**
	   * @type {string}
	   * @readOnly
	   */
	  this.name = name;
	  /**
	   * @type {Array.<Array>}
	   * @readOnly
	   */
	
	  this.geometries = geometries;
	
	  if (!cp) {
	    var rect = this.getBoundingRect();
	    cp = [rect.x + rect.width / 2, rect.y + rect.height / 2];
	  } else {
	    cp = [cp[0], cp[1]];
	  }
	  /**
	   * @type {Array.<number>}
	   */
	
	
	  this.center = cp;
	}
	
	Region.prototype = {
	  constructor: Region,
	  properties: null,
	
	  /**
	   * @return {module:zrender/core/BoundingRect}
	   */
	  getBoundingRect: function () {
	    var rect = this._rect;
	
	    if (rect) {
	      return rect;
	    }
	
	    var MAX_NUMBER = Number.MAX_VALUE;
	    var min = [MAX_NUMBER, MAX_NUMBER];
	    var max = [-MAX_NUMBER, -MAX_NUMBER];
	    var min2 = [];
	    var max2 = [];
	    var geometries = this.geometries;
	
	    for (var i = 0; i < geometries.length; i++) {
	      // Only support polygon
	      if (geometries[i].type !== 'polygon') {
	        continue;
	      } // Doesn't consider hole
	
	
	      var exterior = geometries[i].exterior;
	      bbox.fromPoints(exterior, min2, max2);
	      vec2.min(min, min, min2);
	      vec2.max(max, max, max2);
	    } // No data
	
	
	    if (i === 0) {
	      min[0] = min[1] = max[0] = max[1] = 0;
	    }
	
	    return this._rect = new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);
	  },
	
	  /**
	   * @param {<Array.<number>} coord
	   * @return {boolean}
	   */
	  contain: function (coord) {
	    var rect = this.getBoundingRect();
	    var geometries = this.geometries;
	
	    if (!rect.contain(coord[0], coord[1])) {
	      return false;
	    }
	
	    loopGeo: for (var i = 0, len = geometries.length; i < len; i++) {
	      // Only support polygon.
	      if (geometries[i].type !== 'polygon') {
	        continue;
	      }
	
	      var exterior = geometries[i].exterior;
	      var interiors = geometries[i].interiors;
	
	      if (polygonContain.contain(exterior, coord[0], coord[1])) {
	        // Not in the region if point is in the hole.
	        for (var k = 0; k < (interiors ? interiors.length : 0); k++) {
	          if (polygonContain.contain(interiors[k])) {
	            continue loopGeo;
	          }
	        }
	
	        return true;
	      }
	    }
	
	    return false;
	  },
	  transformTo: function (x, y, width, height) {
	    var rect = this.getBoundingRect();
	    var aspect = rect.width / rect.height;
	
	    if (!width) {
	      width = aspect * height;
	    } else if (!height) {
	      height = width / aspect;
	    }
	
	    var target = new BoundingRect(x, y, width, height);
	    var transform = rect.calculateTransform(target);
	    var geometries = this.geometries;
	
	    for (var i = 0; i < geometries.length; i++) {
	      // Only support polygon.
	      if (geometries[i].type !== 'polygon') {
	        continue;
	      }
	
	      var exterior = geometries[i].exterior;
	      var interiors = geometries[i].interiors;
	
	      for (var p = 0; p < exterior.length; p++) {
	        vec2.applyTransform(exterior[p], exterior[p], transform);
	      }
	
	      for (var h = 0; h < (interiors ? interiors.length : 0); h++) {
	        for (var p = 0; p < interiors[h].length; p++) {
	          vec2.applyTransform(interiors[h][p], interiors[h][p], transform);
	        }
	      }
	    }
	
	    rect = this._rect;
	    rect.copy(target); // Update center
	
	    this.center = [rect.x + rect.width / 2, rect.y + rect.height / 2];
	  }
	};
	var _default = Region;
	module.exports = _default;

/***/ }),
/* 1066 */
/***/ (function(module, exports, __webpack_require__) {

	var windingLine = __webpack_require__(988);
	
	var EPSILON = 1e-8;
	
	function isAroundEqual(a, b) {
	  return Math.abs(a - b) < EPSILON;
	}
	
	function contain(points, x, y) {
	  var w = 0;
	  var p = points[0];
	
	  if (!p) {
	    return false;
	  }
	
	  for (var i = 1; i < points.length; i++) {
	    var p2 = points[i];
	    w += windingLine(p[0], p[1], p2[0], p2[1], x, y);
	    p = p2;
	  } // Close polygon
	
	
	  var p0 = points[0];
	
	  if (!isAroundEqual(p[0], p0[0]) || !isAroundEqual(p[1], p0[1])) {
	    w += windingLine(p[0], p[1], p0[0], p0[1], x, y);
	  }
	
	  return w !== 0;
	}
	
	exports.contain = contain;

/***/ }),
/* 1067 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(931);
	
	var each = _util.each;
	var map = _util.map;
	
	var _number = __webpack_require__(1013);
	
	var linearMap = _number.linearMap;
	var getPixelPrecision = _number.getPixelPrecision;
	
	var _axisTickLabelBuilder = __webpack_require__(1068);
	
	var createAxisTicks = _axisTickLabelBuilder.createAxisTicks;
	var createAxisLabels = _axisTickLabelBuilder.createAxisLabels;
	var calculateCategoryInterval = _axisTickLabelBuilder.calculateCategoryInterval;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var NORMALIZED_EXTENT = [0, 1];
	/**
	 * Base class of Axis.
	 * @constructor
	 */
	
	var Axis = function (dim, scale, extent) {
	  /**
	   * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'.
	   * @type {string}
	   */
	  this.dim = dim;
	  /**
	   * Axis scale
	   * @type {module:echarts/coord/scale/*}
	   */
	
	  this.scale = scale;
	  /**
	   * @type {Array.<number>}
	   * @private
	   */
	
	  this._extent = extent || [0, 0];
	  /**
	   * @type {boolean}
	   */
	
	  this.inverse = false;
	  /**
	   * Usually true when axis has a ordinal scale
	   * @type {boolean}
	   */
	
	  this.onBand = false;
	};
	
	Axis.prototype = {
	  constructor: Axis,
	
	  /**
	   * If axis extent contain given coord
	   * @param {number} coord
	   * @return {boolean}
	   */
	  contain: function (coord) {
	    var extent = this._extent;
	    var min = Math.min(extent[0], extent[1]);
	    var max = Math.max(extent[0], extent[1]);
	    return coord >= min && coord <= max;
	  },
	
	  /**
	   * If axis extent contain given data
	   * @param {number} data
	   * @return {boolean}
	   */
	  containData: function (data) {
	    return this.contain(this.dataToCoord(data));
	  },
	
	  /**
	   * Get coord extent.
	   * @return {Array.<number>}
	   */
	  getExtent: function () {
	    return this._extent.slice();
	  },
	
	  /**
	   * Get precision used for formatting
	   * @param {Array.<number>} [dataExtent]
	   * @return {number}
	   */
	  getPixelPrecision: function (dataExtent) {
	    return getPixelPrecision(dataExtent || this.scale.getExtent(), this._extent);
	  },
	
	  /**
	   * Set coord extent
	   * @param {number} start
	   * @param {number} end
	   */
	  setExtent: function (start, end) {
	    var extent = this._extent;
	    extent[0] = start;
	    extent[1] = end;
	  },
	
	  /**
	   * Convert data to coord. Data is the rank if it has an ordinal scale
	   * @param {number} data
	   * @param  {boolean} clamp
	   * @return {number}
	   */
	  dataToCoord: function (data, clamp) {
	    var extent = this._extent;
	    var scale = this.scale;
	    data = scale.normalize(data);
	
	    if (this.onBand && scale.type === 'ordinal') {
	      extent = extent.slice();
	      fixExtentWithBands(extent, scale.count());
	    }
	
	    return linearMap(data, NORMALIZED_EXTENT, extent, clamp);
	  },
	
	  /**
	   * Convert coord to data. Data is the rank if it has an ordinal scale
	   * @param {number} coord
	   * @param  {boolean} clamp
	   * @return {number}
	   */
	  coordToData: function (coord, clamp) {
	    var extent = this._extent;
	    var scale = this.scale;
	
	    if (this.onBand && scale.type === 'ordinal') {
	      extent = extent.slice();
	      fixExtentWithBands(extent, scale.count());
	    }
	
	    var t = linearMap(coord, extent, NORMALIZED_EXTENT, clamp);
	    return this.scale.scale(t);
	  },
	
	  /**
	   * Convert pixel point to data in axis
	   * @param {Array.<number>} point
	   * @param  {boolean} clamp
	   * @return {number} data
	   */
	  pointToData: function (point, clamp) {// Should be implemented in derived class if necessary.
	  },
	
	  /**
	   * Different from `zrUtil.map(axis.getTicks(), axis.dataToCoord, axis)`,
	   * `axis.getTicksCoords` considers `onBand`, which is used by
	   * `boundaryGap:true` of category axis and splitLine and splitArea.
	   * @param {Object} [opt]
	   * @param {number} [opt.tickModel=axis.model.getModel('axisTick')]
	   * @param {boolean} [opt.clamp] If `true`, the first and the last
	   *        tick must be at the axis end points. Otherwise, clip ticks
	   *        that outside the axis extent.
	   * @return {Array.<Object>} [{
	   *     coord: ...,
	   *     tickValue: ...
	   * }, ...]
	   */
	  getTicksCoords: function (opt) {
	    opt = opt || {};
	    var tickModel = opt.tickModel || this.getTickModel();
	    var result = createAxisTicks(this, tickModel);
	    var ticks = result.ticks;
	    var ticksCoords = map(ticks, function (tickValue) {
	      return {
	        coord: this.dataToCoord(tickValue),
	        tickValue: tickValue
	      };
	    }, this);
	    var alignWithLabel = tickModel.get('alignWithLabel');
	    fixOnBandTicksCoords(this, ticksCoords, result.tickCategoryInterval, alignWithLabel, opt.clamp);
	    return ticksCoords;
	  },
	
	  /**
	   * @return {Array.<Object>} [{
	   *     formattedLabel: string,
	   *     rawLabel: axis.scale.getLabel(tickValue)
	   *     tickValue: number
	   * }, ...]
	   */
	  getViewLabels: function () {
	    return createAxisLabels(this).labels;
	  },
	
	  /**
	   * @return {module:echarts/coord/model/Model}
	   */
	  getLabelModel: function () {
	    return this.model.getModel('axisLabel');
	  },
	
	  /**
	   * Notice here we only get the default tick model. For splitLine
	   * or splitArea, we should pass the splitLineModel or splitAreaModel
	   * manually when calling `getTicksCoords`.
	   * In GL, this method may be overrided to:
	   * `axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));`
	   * @return {module:echarts/coord/model/Model}
	   */
	  getTickModel: function () {
	    return this.model.getModel('axisTick');
	  },
	
	  /**
	   * Get width of band
	   * @return {number}
	   */
	  getBandWidth: function () {
	    var axisExtent = this._extent;
	    var dataExtent = this.scale.getExtent();
	    var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0); // Fix #2728, avoid NaN when only one data.
	
	    len === 0 && (len = 1);
	    var size = Math.abs(axisExtent[1] - axisExtent[0]);
	    return Math.abs(size) / len;
	  },
	
	  /**
	   * @abstract
	   * @return {boolean} Is horizontal
	   */
	  isHorizontal: null,
	
	  /**
	   * @abstract
	   * @return {number} Get axis rotate, by degree.
	   */
	  getRotate: null,
	
	  /**
	   * Only be called in category axis.
	   * Can be overrided, consider other axes like in 3D.
	   * @return {number} Auto interval for cateogry axis tick and label
	   */
	  calculateCategoryInterval: function () {
	    return calculateCategoryInterval(this);
	  }
	};
	
	function fixExtentWithBands(extent, nTick) {
	  var size = extent[1] - extent[0];
	  var len = nTick;
	  var margin = size / len / 2;
	  extent[0] += margin;
	  extent[1] -= margin;
	} // If axis has labels [1, 2, 3, 4]. Bands on the axis are
	// |---1---|---2---|---3---|---4---|.
	// So the displayed ticks and splitLine/splitArea should between
	// each data item, otherwise cause misleading (e.g., split tow bars
	// of a single data item when there are two bar series).
	// Also consider if tickCategoryInterval > 0 and onBand, ticks and
	// splitLine/spliteArea should layout appropriately corresponding
	// to displayed labels. (So we should not use `getBandWidth` in this
	// case).
	
	
	function fixOnBandTicksCoords(axis, ticksCoords, tickCategoryInterval, alignWithLabel, clamp) {
	  var ticksLen = ticksCoords.length;
	
	  if (!axis.onBand || alignWithLabel || !ticksLen) {
	    return;
	  }
	
	  var axisExtent = axis.getExtent();
	  var last;
	
	  if (ticksLen === 1) {
	    ticksCoords[0].coord = axisExtent[0];
	    last = ticksCoords[1] = {
	      coord: axisExtent[0]
	    };
	  } else {
	    var shift = ticksCoords[1].coord - ticksCoords[0].coord;
	    each(ticksCoords, function (ticksItem) {
	      ticksItem.coord -= shift / 2;
	      var tickCategoryInterval = tickCategoryInterval || 0; // Avoid split a single data item when odd interval.
	
	      if (tickCategoryInterval % 2 > 0) {
	        ticksItem.coord -= shift / ((tickCategoryInterval + 1) * 2);
	      }
	    });
	    last = {
	      coord: ticksCoords[ticksLen - 1].coord + shift
	    };
	    ticksCoords.push(last);
	  }
	
	  var inverse = axisExtent[0] > axisExtent[1];
	
	  if (littleThan(ticksCoords[0].coord, axisExtent[0])) {
	    clamp ? ticksCoords[0].coord = axisExtent[0] : ticksCoords.shift();
	  }
	
	  if (clamp && littleThan(axisExtent[0], ticksCoords[0].coord)) {
	    ticksCoords.unshift({
	      coord: axisExtent[0]
	    });
	  }
	
	  if (littleThan(axisExtent[1], last.coord)) {
	    clamp ? last.coord = axisExtent[1] : ticksCoords.pop();
	  }
	
	  if (clamp && littleThan(last.coord, axisExtent[1])) {
	    ticksCoords.push({
	      coord: axisExtent[1]
	    });
	  }
	
	  function littleThan(a, b) {
	    return inverse ? a > b : a < b;
	  }
	}
	
	var _default = Axis;
	module.exports = _default;

/***/ }),
/* 1068 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var textContain = __webpack_require__(961);
	
	var _model = __webpack_require__(969);
	
	var makeInner = _model.makeInner;
	
	var _axisHelper = __webpack_require__(1053);
	
	var makeLabelFormatter = _axisHelper.makeLabelFormatter;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var inner = makeInner();
	/**
	 * @param {module:echats/coord/Axis} axis
	 * @return {Object} {
	 *     labels: [{
	 *         formattedLabel: string,
	 *         rawLabel: string,
	 *         tickValue: number
	 *     }, ...],
	 *     labelCategoryInterval: number
	 * }
	 */
	
	function createAxisLabels(axis) {
	  // Only ordinal scale support tick interval
	  return axis.type === 'category' ? makeCategoryLabels(axis) : makeRealNumberLabels(axis);
	}
	/**
	 * @param {module:echats/coord/Axis} axis
	 * @param {module:echarts/model/Model} tickModel For example, can be axisTick, splitLine, splitArea.
	 * @return {Object} {
	 *     ticks: Array.<number>
	 *     tickCategoryInterval: number
	 * }
	 */
	
	
	function createAxisTicks(axis, tickModel) {
	  // Only ordinal scale support tick interval
	  return axis.type === 'category' ? makeCategoryTicks(axis, tickModel) : {
	    ticks: axis.scale.getTicks()
	  };
	}
	
	function makeCategoryLabels(axis) {
	  var labelModel = axis.getLabelModel();
	  var result = makeCategoryLabelsActually(axis, labelModel);
	  return !labelModel.get('show') || axis.scale.isBlank() ? {
	    labels: [],
	    labelCategoryInterval: result.labelCategoryInterval
	  } : result;
	}
	
	function makeCategoryLabelsActually(axis, labelModel) {
	  var labelsCache = getListCache(axis, 'labels');
	  var optionLabelInterval = getOptionCategoryInterval(labelModel);
	  var result = listCacheGet(labelsCache, optionLabelInterval);
	
	  if (result) {
	    return result;
	  }
	
	  var labels;
	  var numericLabelInterval;
	
	  if (zrUtil.isFunction(optionLabelInterval)) {
	    labels = makeLabelsByCustomizedCategoryInterval(axis, optionLabelInterval);
	  } else {
	    numericLabelInterval = optionLabelInterval === 'auto' ? makeAutoCategoryInterval(axis) : optionLabelInterval;
	    labels = makeLabelsByNumericCategoryInterval(axis, numericLabelInterval);
	  } // Cache to avoid calling interval function repeatly.
	
	
	  return listCacheSet(labelsCache, optionLabelInterval, {
	    labels: labels,
	    labelCategoryInterval: numericLabelInterval
	  });
	}
	
	function makeCategoryTicks(axis, tickModel) {
	  var ticksCache = getListCache(axis, 'ticks');
	  var optionTickInterval = getOptionCategoryInterval(tickModel);
	  var result = listCacheGet(ticksCache, optionTickInterval);
	
	  if (result) {
	    return result;
	  }
	
	  var ticks;
	  var tickCategoryInterval; // Optimize for the case that large category data and no label displayed,
	  // we should not return all ticks.
	
	  if (!tickModel.get('show') || axis.scale.isBlank()) {
	    ticks = [];
	  }
	
	  if (zrUtil.isFunction(optionTickInterval)) {
	    ticks = makeLabelsByCustomizedCategoryInterval(axis, optionTickInterval, true);
	  } // Always use label interval by default despite label show. Consider this
	  // scenario, Use multiple grid with the xAxis sync, and only one xAxis shows
	  // labels. `splitLine` and `axisTick` should be consistent in this case.
	  else if (optionTickInterval === 'auto') {
	      var labelsResult = makeCategoryLabelsActually(axis, axis.getLabelModel());
	      tickCategoryInterval = labelsResult.labelCategoryInterval;
	      ticks = zrUtil.map(labelsResult.labels, function (labelItem) {
	        return labelItem.tickValue;
	      });
	    } else {
	      tickCategoryInterval = optionTickInterval;
	      ticks = makeLabelsByNumericCategoryInterval(axis, tickCategoryInterval, true);
	    } // Cache to avoid calling interval function repeatly.
	
	
	  return listCacheSet(ticksCache, optionTickInterval, {
	    ticks: ticks,
	    tickCategoryInterval: tickCategoryInterval
	  });
	}
	
	function makeRealNumberLabels(axis) {
	  var ticks = axis.scale.getTicks();
	  var labelFormatter = makeLabelFormatter(axis);
	  return {
	    labels: zrUtil.map(ticks, function (tickValue, idx) {
	      return {
	        formattedLabel: labelFormatter(tickValue, idx),
	        rawLabel: axis.scale.getLabel(tickValue),
	        tickValue: tickValue
	      };
	    })
	  };
	} // Large category data calculation is performence sensitive, and ticks and label
	// probably be fetched by multiple times. So we cache the result.
	// axis is created each time during a ec process, so we do not need to clear cache.
	
	
	function getListCache(axis, prop) {
	  // Because key can be funciton, and cache size always be small, we use array cache.
	  return inner(axis)[prop] || (inner(axis)[prop] = []);
	}
	
	function listCacheGet(cache, key) {
	  for (var i = 0; i < cache.length; i++) {
	    if (cache[i].key === key) {
	      return cache[i].value;
	    }
	  }
	}
	
	function listCacheSet(cache, key, value) {
	  cache.push({
	    key: key,
	    value: value
	  });
	  return value;
	}
	
	function makeAutoCategoryInterval(axis) {
	  var result = inner(axis).autoInterval;
	  return result != null ? result : inner(axis).autoInterval = axis.calculateCategoryInterval();
	}
	/**
	 * Calculate interval for category axis ticks and labels.
	 * To get precise result, at least one of `getRotate` and `isHorizontal`
	 * should be implemented in axis.
	 */
	
	
	function calculateCategoryInterval(axis) {
	  var params = fetchAutoCategoryIntervalCalculationParams(axis);
	  var labelFormatter = makeLabelFormatter(axis);
	  var rotation = (params.axisRotate - params.labelRotate) / 180 * Math.PI;
	  var ordinalScale = axis.scale;
	  var ordinalExtent = ordinalScale.getExtent(); // Providing this method is for optimization:
	  // avoid generating a long array by `getTicks`
	  // in large category data case.
	
	  var tickCount = ordinalScale.count();
	
	  if (ordinalExtent[1] - ordinalExtent[0] < 1) {
	    return 0;
	  }
	
	  var step = 1; // Simple optimization. Empirical value: tick count should less than 40.
	
	  if (tickCount > 40) {
	    step = Math.max(1, Math.floor(tickCount / 40));
	  }
	
	  var tickValue = ordinalExtent[0];
	  var unitSpan = axis.dataToCoord(tickValue + 1) - axis.dataToCoord(tickValue);
	  var unitW = Math.abs(unitSpan * Math.cos(rotation));
	  var unitH = Math.abs(unitSpan * Math.sin(rotation));
	  var maxW = 0;
	  var maxH = 0; // Caution: Performance sensitive for large category data.
	  // Consider dataZoom, we should make appropriate step to avoid O(n) loop.
	
	  for (; tickValue <= ordinalExtent[1]; tickValue += step) {
	    var width = 0;
	    var height = 0; // Polar is also calculated in assumptive linear layout here.
	    // Not precise, do not consider align and vertical align
	    // and each distance from axis line yet.
	
	    var rect = textContain.getBoundingRect(labelFormatter(tickValue), params.font, 'center', 'top'); // Magic number
	
	    width = rect.width * 1.3;
	    height = rect.height * 1.3; // Min size, void long loop.
	
	    maxW = Math.max(maxW, width, 7);
	    maxH = Math.max(maxH, height, 7);
	  }
	
	  var dw = maxW / unitW;
	  var dh = maxH / unitH; // 0/0 is NaN, 1/0 is Infinity.
	
	  isNaN(dw) && (dw = Infinity);
	  isNaN(dh) && (dh = Infinity);
	  var interval = Math.max(0, Math.floor(Math.min(dw, dh)));
	  var cache = inner(axis.model);
	  var lastAutoInterval = cache.lastAutoInterval;
	  var lastTickCount = cache.lastTickCount; // Use cache to keep interval stable while moving zoom window,
	  // otherwise the calculated interval might jitter when the zoom
	  // window size is close to the interval-changing size.
	
	  if (lastAutoInterval != null && lastTickCount != null && Math.abs(lastAutoInterval - interval) <= 1 && Math.abs(lastTickCount - tickCount) <= 1 // Always choose the bigger one, otherwise the critical
	  // point is not the same when zooming in or zooming out.
	  && lastAutoInterval > interval) {
	    interval = lastAutoInterval;
	  } // Only update cache if cache not used, otherwise the
	  // changing of interval is too insensitive.
	  else {
	      cache.lastTickCount = tickCount;
	      cache.lastAutoInterval = interval;
	    }
	
	  return interval;
	}
	
	function fetchAutoCategoryIntervalCalculationParams(axis) {
	  var labelModel = axis.getLabelModel();
	  return {
	    axisRotate: axis.getRotate ? axis.getRotate() : axis.isHorizontal && !axis.isHorizontal() ? 90 : 0,
	    labelRotate: labelModel.get('rotate') || 0,
	    font: labelModel.getFont()
	  };
	}
	
	function makeLabelsByNumericCategoryInterval(axis, categoryInterval, onlyTick) {
	  var labelFormatter = makeLabelFormatter(axis);
	  var ordinalScale = axis.scale;
	  var ordinalExtent = ordinalScale.getExtent();
	  var labelModel = axis.getLabelModel();
	  var result = []; // TODO: axisType: ordinalTime, pick the tick from each month/day/year/...
	
	  var step = Math.max((categoryInterval || 0) + 1, 1);
	  var startTick = ordinalExtent[0];
	  var tickCount = ordinalScale.count(); // Calculate start tick based on zero if possible to keep label consistent
	  // while zooming and moving while interval > 0. Otherwise the selection
	  // of displayable ticks and symbols probably keep changing.
	  // 3 is empirical value.
	
	  if (startTick !== 0 && step > 1 && tickCount / step > 2) {
	    startTick = Math.round(Math.ceil(startTick / step) * step);
	  } // (1) Only add min max label here but leave overlap checking
	  // to render stage, which also ensure the returned list
	  // suitable for splitLine and splitArea rendering.
	  // (2) Scales except category always contain min max label so
	  // do not need to perform this process.
	
	
	  var showMinMax = {
	    min: labelModel.get('showMinLabel'),
	    max: labelModel.get('showMaxLabel')
	  };
	
	  if (showMinMax.min && startTick !== ordinalExtent[0]) {
	    addItem(ordinalExtent[0]);
	  } // Optimize: avoid generating large array by `ordinalScale.getTicks()`.
	
	
	  var tickValue = startTick;
	
	  for (; tickValue <= ordinalExtent[1]; tickValue += step) {
	    addItem(tickValue);
	  }
	
	  if (showMinMax.max && tickValue !== ordinalExtent[1]) {
	    addItem(ordinalExtent[1]);
	  }
	
	  function addItem(tVal) {
	    result.push(onlyTick ? tVal : {
	      formattedLabel: labelFormatter(tVal),
	      rawLabel: ordinalScale.getLabel(tVal),
	      tickValue: tVal
	    });
	  }
	
	  return result;
	} // When interval is function, the result `false` means ignore the tick.
	// It is time consuming for large category data.
	
	
	function makeLabelsByCustomizedCategoryInterval(axis, categoryInterval, onlyTick) {
	  var ordinalScale = axis.scale;
	  var labelFormatter = makeLabelFormatter(axis);
	  var result = [];
	  zrUtil.each(ordinalScale.getTicks(), function (tickValue) {
	    var rawLabel = ordinalScale.getLabel(tickValue);
	
	    if (categoryInterval(tickValue, rawLabel)) {
	      result.push(onlyTick ? tickValue : {
	        formattedLabel: labelFormatter(tickValue),
	        rawLabel: rawLabel,
	        tickValue: tickValue
	      });
	    }
	  });
	  return result;
	} // Can be null|'auto'|number|function
	
	
	function getOptionCategoryInterval(model) {
	  var interval = model.get('interval');
	  return interval == null ? 'auto' : interval;
	}
	
	exports.createAxisLabels = createAxisLabels;
	exports.createAxisTicks = createAxisTicks;
	exports.calculateCategoryInterval = calculateCategoryInterval;

/***/ }),
/* 1069 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(926);
	
	var zrUtil = __webpack_require__(931);
	
	var _barGrid = __webpack_require__(1059);
	
	var layout = _barGrid.layout;
	var largeLayout = _barGrid.largeLayout;
	
	__webpack_require__(1070);
	
	__webpack_require__(1078);
	
	__webpack_require__(1080);
	
	__webpack_require__(1084);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// In case developer forget to include grid component
	echarts.registerLayout(zrUtil.curry(layout, 'bar')); // Should after normal bar layout, otherwise it is blocked by normal bar layout.
	
	echarts.registerLayout(largeLayout);
	echarts.registerVisual({
	  seriesType: 'bar',
	  reset: function (seriesModel) {
	    // Visual coding for legend
	    seriesModel.getData().setVisual('legendSymbol', 'roundRect');
	  }
	});

/***/ }),
/* 1070 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	var _util = __webpack_require__(931);
	
	var isObject = _util.isObject;
	var each = _util.each;
	var map = _util.map;
	var indexOf = _util.indexOf;
	var retrieve = _util.retrieve;
	
	var _layout = __webpack_require__(1012);
	
	var getLayoutRect = _layout.getLayoutRect;
	
	var _axisHelper = __webpack_require__(1053);
	
	var createScaleByModel = _axisHelper.createScaleByModel;
	var ifAxisCrossZero = _axisHelper.ifAxisCrossZero;
	var niceScaleExtent = _axisHelper.niceScaleExtent;
	var estimateLabelUnionRect = _axisHelper.estimateLabelUnionRect;
	
	var Cartesian2D = __webpack_require__(1071);
	
	var Axis2D = __webpack_require__(1073);
	
	var CoordinateSystem = __webpack_require__(1023);
	
	var _dataStackHelper = __webpack_require__(1052);
	
	var getStackedDimension = _dataStackHelper.getStackedDimension;
	
	__webpack_require__(1074);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Grid is a region which contains at most 4 cartesian systems
	 *
	 * TODO Default cartesian
	 */
	// Depends on GridModel, AxisModel, which performs preprocess.
	
	/**
	 * Check if the axis is used in the specified grid
	 * @inner
	 */
	function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {
	  return axisModel.getCoordSysModel() === gridModel;
	}
	
	function Grid(gridModel, ecModel, api) {
	  /**
	   * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}
	   * @private
	   */
	  this._coordsMap = {};
	  /**
	   * @type {Array.<module:echarts/coord/cartesian/Cartesian>}
	   * @private
	   */
	
	  this._coordsList = [];
	  /**
	   * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}
	   * @private
	   */
	
	  this._axesMap = {};
	  /**
	   * @type {Array.<module:echarts/coord/cartesian/Axis2D>}
	   * @private
	   */
	
	  this._axesList = [];
	
	  this._initCartesian(gridModel, ecModel, api);
	
	  this.model = gridModel;
	}
	
	var gridProto = Grid.prototype;
	gridProto.type = 'grid';
	gridProto.axisPointerEnabled = true;
	
	gridProto.getRect = function () {
	  return this._rect;
	};
	
	gridProto.update = function (ecModel, api) {
	  var axesMap = this._axesMap;
	
	  this._updateScale(ecModel, this.model);
	
	  each(axesMap.x, function (xAxis) {
	    niceScaleExtent(xAxis.scale, xAxis.model);
	  });
	  each(axesMap.y, function (yAxis) {
	    niceScaleExtent(yAxis.scale, yAxis.model);
	  });
	  each(axesMap.x, function (xAxis) {
	    fixAxisOnZero(axesMap, 'y', xAxis);
	  });
	  each(axesMap.y, function (yAxis) {
	    fixAxisOnZero(axesMap, 'x', yAxis);
	  }); // Resize again if containLabel is enabled
	  // FIXME It may cause getting wrong grid size in data processing stage
	
	  this.resize(this.model, api);
	};
	
	function fixAxisOnZero(axesMap, otherAxisDim, axis) {
	  axis.getAxesOnZeroOf = function () {
	    // TODO: onZero of multiple axes.
	    return otherAxis ? [otherAxis] : [];
	  }; // onZero can not be enabled in these two situations:
	  // 1. When any other axis is a category axis.
	  // 2. When no axis is cross 0 point.
	
	
	  var otherAxes = axesMap[otherAxisDim];
	  var otherAxis;
	  var axisModel = axis.model;
	  var onZero = axisModel.get('axisLine.onZero');
	  var onZeroAxisIndex = axisModel.get('axisLine.onZeroAxisIndex');
	
	  if (!onZero) {
	    return;
	  } // If target axis is specified.
	
	
	  if (onZeroAxisIndex != null) {
	    if (canOnZeroToAxis(otherAxes[onZeroAxisIndex])) {
	      otherAxis = otherAxes[onZeroAxisIndex];
	    }
	
	    return;
	  } // Find the first available other axis.
	
	
	  for (var idx in otherAxes) {
	    if (otherAxes.hasOwnProperty(idx) && canOnZeroToAxis(otherAxes[idx])) {
	      otherAxis = otherAxes[idx];
	      break;
	    }
	  }
	}
	
	function canOnZeroToAxis(axis) {
	  return axis && axis.type !== 'category' && axis.type !== 'time' && ifAxisCrossZero(axis);
	}
	/**
	 * Resize the grid
	 * @param {module:echarts/coord/cartesian/GridModel} gridModel
	 * @param {module:echarts/ExtensionAPI} api
	 */
	
	
	gridProto.resize = function (gridModel, api, ignoreContainLabel) {
	  var gridRect = getLayoutRect(gridModel.getBoxLayoutParams(), {
	    width: api.getWidth(),
	    height: api.getHeight()
	  });
	  this._rect = gridRect;
	  var axesList = this._axesList;
	  adjustAxes(); // Minus label size
	
	  if (!ignoreContainLabel && gridModel.get('containLabel')) {
	    each(axesList, function (axis) {
	      if (!axis.model.get('axisLabel.inside')) {
	        var labelUnionRect = estimateLabelUnionRect(axis);
	
	        if (labelUnionRect) {
	          var dim = axis.isHorizontal() ? 'height' : 'width';
	          var margin = axis.model.get('axisLabel.margin');
	          gridRect[dim] -= labelUnionRect[dim] + margin;
	
	          if (axis.position === 'top') {
	            gridRect.y += labelUnionRect.height + margin;
	          } else if (axis.position === 'left') {
	            gridRect.x += labelUnionRect.width + margin;
	          }
	        }
	      }
	    });
	    adjustAxes();
	  }
	
	  function adjustAxes() {
	    each(axesList, function (axis) {
	      var isHorizontal = axis.isHorizontal();
	      var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];
	      var idx = axis.inverse ? 1 : 0;
	      axis.setExtent(extent[idx], extent[1 - idx]);
	      updateAxisTransform(axis, isHorizontal ? gridRect.x : gridRect.y);
	    });
	  }
	};
	/**
	 * @param {string} axisType
	 * @param {number} [axisIndex]
	 */
	
	
	gridProto.getAxis = function (axisType, axisIndex) {
	  var axesMapOnDim = this._axesMap[axisType];
	
	  if (axesMapOnDim != null) {
	    if (axisIndex == null) {
	      // Find first axis
	      for (var name in axesMapOnDim) {
	        if (axesMapOnDim.hasOwnProperty(name)) {
	          return axesMapOnDim[name];
	        }
	      }
	    }
	
	    return axesMapOnDim[axisIndex];
	  }
	};
	/**
	 * @return {Array.<module:echarts/coord/Axis>}
	 */
	
	
	gridProto.getAxes = function () {
	  return this._axesList.slice();
	};
	/**
	 * Usage:
	 *      grid.getCartesian(xAxisIndex, yAxisIndex);
	 *      grid.getCartesian(xAxisIndex);
	 *      grid.getCartesian(null, yAxisIndex);
	 *      grid.getCartesian({xAxisIndex: ..., yAxisIndex: ...});
	 *
	 * @param {number|Object} [xAxisIndex]
	 * @param {number} [yAxisIndex]
	 */
	
	
	gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {
	  if (xAxisIndex != null && yAxisIndex != null) {
	    var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	    return this._coordsMap[key];
	  }
	
	  if (isObject(xAxisIndex)) {
	    yAxisIndex = xAxisIndex.yAxisIndex;
	    xAxisIndex = xAxisIndex.xAxisIndex;
	  } // When only xAxisIndex or yAxisIndex given, find its first cartesian.
	
	
	  for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {
	    if (coordList[i].getAxis('x').index === xAxisIndex || coordList[i].getAxis('y').index === yAxisIndex) {
	      return coordList[i];
	    }
	  }
	};
	
	gridProto.getCartesians = function () {
	  return this._coordsList.slice();
	};
	/**
	 * @implements
	 * see {module:echarts/CoodinateSystem}
	 */
	
	
	gridProto.convertToPixel = function (ecModel, finder, value) {
	  var target = this._findConvertTarget(ecModel, finder);
	
	  return target.cartesian ? target.cartesian.dataToPoint(value) : target.axis ? target.axis.toGlobalCoord(target.axis.dataToCoord(value)) : null;
	};
	/**
	 * @implements
	 * see {module:echarts/CoodinateSystem}
	 */
	
	
	gridProto.convertFromPixel = function (ecModel, finder, value) {
	  var target = this._findConvertTarget(ecModel, finder);
	
	  return target.cartesian ? target.cartesian.pointToData(value) : target.axis ? target.axis.coordToData(target.axis.toLocalCoord(value)) : null;
	};
	/**
	 * @inner
	 */
	
	
	gridProto._findConvertTarget = function (ecModel, finder) {
	  var seriesModel = finder.seriesModel;
	  var xAxisModel = finder.xAxisModel || seriesModel && seriesModel.getReferringComponents('xAxis')[0];
	  var yAxisModel = finder.yAxisModel || seriesModel && seriesModel.getReferringComponents('yAxis')[0];
	  var gridModel = finder.gridModel;
	  var coordsList = this._coordsList;
	  var cartesian;
	  var axis;
	
	  if (seriesModel) {
	    cartesian = seriesModel.coordinateSystem;
	    indexOf(coordsList, cartesian) < 0 && (cartesian = null);
	  } else if (xAxisModel && yAxisModel) {
	    cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
	  } else if (xAxisModel) {
	    axis = this.getAxis('x', xAxisModel.componentIndex);
	  } else if (yAxisModel) {
	    axis = this.getAxis('y', yAxisModel.componentIndex);
	  } // Lowest priority.
	  else if (gridModel) {
	      var grid = gridModel.coordinateSystem;
	
	      if (grid === this) {
	        cartesian = this._coordsList[0];
	      }
	    }
	
	  return {
	    cartesian: cartesian,
	    axis: axis
	  };
	};
	/**
	 * @implements
	 * see {module:echarts/CoodinateSystem}
	 */
	
	
	gridProto.containPoint = function (point) {
	  var coord = this._coordsList[0];
	
	  if (coord) {
	    return coord.containPoint(point);
	  }
	};
	/**
	 * Initialize cartesian coordinate systems
	 * @private
	 */
	
	
	gridProto._initCartesian = function (gridModel, ecModel, api) {
	  var axisPositionUsed = {
	    left: false,
	    right: false,
	    top: false,
	    bottom: false
	  };
	  var axesMap = {
	    x: {},
	    y: {}
	  };
	  var axesCount = {
	    x: 0,
	    y: 0
	  }; /// Create axis
	
	  ecModel.eachComponent('xAxis', createAxisCreator('x'), this);
	  ecModel.eachComponent('yAxis', createAxisCreator('y'), this);
	
	  if (!axesCount.x || !axesCount.y) {
	    // Roll back when there no either x or y axis
	    this._axesMap = {};
	    this._axesList = [];
	    return;
	  }
	
	  this._axesMap = axesMap; /// Create cartesian2d
	
	  each(axesMap.x, function (xAxis, xAxisIndex) {
	    each(axesMap.y, function (yAxis, yAxisIndex) {
	      var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	      var cartesian = new Cartesian2D(key);
	      cartesian.grid = this;
	      cartesian.model = gridModel;
	      this._coordsMap[key] = cartesian;
	
	      this._coordsList.push(cartesian);
	
	      cartesian.addAxis(xAxis);
	      cartesian.addAxis(yAxis);
	    }, this);
	  }, this);
	
	  function createAxisCreator(axisType) {
	    return function (axisModel, idx) {
	      if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {
	        return;
	      }
	
	      var axisPosition = axisModel.get('position');
	
	      if (axisType === 'x') {
	        // Fix position
	        if (axisPosition !== 'top' && axisPosition !== 'bottom') {
	          // Default bottom of X
	          axisPosition = 'bottom';
	
	          if (axisPositionUsed[axisPosition]) {
	            axisPosition = axisPosition === 'top' ? 'bottom' : 'top';
	          }
	        }
	      } else {
	        // Fix position
	        if (axisPosition !== 'left' && axisPosition !== 'right') {
	          // Default left of Y
	          axisPosition = 'left';
	
	          if (axisPositionUsed[axisPosition]) {
	            axisPosition = axisPosition === 'left' ? 'right' : 'left';
	          }
	        }
	      }
	
	      axisPositionUsed[axisPosition] = true;
	      var axis = new Axis2D(axisType, createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisPosition);
	      var isCategory = axis.type === 'category';
	      axis.onBand = isCategory && axisModel.get('boundaryGap');
	      axis.inverse = axisModel.get('inverse'); // Inject axis into axisModel
	
	      axisModel.axis = axis; // Inject axisModel into axis
	
	      axis.model = axisModel; // Inject grid info axis
	
	      axis.grid = this; // Index of axis, can be used as key
	
	      axis.index = idx;
	
	      this._axesList.push(axis);
	
	      axesMap[axisType][idx] = axis;
	      axesCount[axisType]++;
	    };
	  }
	};
	/**
	 * Update cartesian properties from series
	 * @param  {module:echarts/model/Option} option
	 * @private
	 */
	
	
	gridProto._updateScale = function (ecModel, gridModel) {
	  // Reset scale
	  each(this._axesList, function (axis) {
	    axis.scale.setExtent(Infinity, -Infinity);
	  });
	  ecModel.eachSeries(function (seriesModel) {
	    if (isCartesian2D(seriesModel)) {
	      var axesModels = findAxesModels(seriesModel, ecModel);
	      var xAxisModel = axesModels[0];
	      var yAxisModel = axesModels[1];
	
	      if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel) || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)) {
	        return;
	      }
	
	      var cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
	      var data = seriesModel.getData();
	      var xAxis = cartesian.getAxis('x');
	      var yAxis = cartesian.getAxis('y');
	
	      if (data.type === 'list') {
	        unionExtent(data, xAxis, seriesModel);
	        unionExtent(data, yAxis, seriesModel);
	      }
	    }
	  }, this);
	
	  function unionExtent(data, axis, seriesModel) {
	    each(data.mapDimension(axis.dim, true), function (dim) {
	      axis.scale.unionExtentFromData( // For example, the extent of the orginal dimension
	      // is [0.1, 0.5], the extent of the `stackResultDimension`
	      // is [7, 9], the final extent should not include [0.1, 0.5].
	      data, getStackedDimension(data, dim));
	    });
	  }
	};
	/**
	 * @param {string} [dim] 'x' or 'y' or 'auto' or null/undefined
	 * @return {Object} {baseAxes: [], otherAxes: []}
	 */
	
	
	gridProto.getTooltipAxes = function (dim) {
	  var baseAxes = [];
	  var otherAxes = [];
	  each(this.getCartesians(), function (cartesian) {
	    var baseAxis = dim != null && dim !== 'auto' ? cartesian.getAxis(dim) : cartesian.getBaseAxis();
	    var otherAxis = cartesian.getOtherAxis(baseAxis);
	    indexOf(baseAxes, baseAxis) < 0 && baseAxes.push(baseAxis);
	    indexOf(otherAxes, otherAxis) < 0 && otherAxes.push(otherAxis);
	  });
	  return {
	    baseAxes: baseAxes,
	    otherAxes: otherAxes
	  };
	};
	/**
	 * @inner
	 */
	
	
	function updateAxisTransform(axis, coordBase) {
	  var axisExtent = axis.getExtent();
	  var axisExtentSum = axisExtent[0] + axisExtent[1]; // Fast transform
	
	  axis.toGlobalCoord = axis.dim === 'x' ? function (coord) {
	    return coord + coordBase;
	  } : function (coord) {
	    return axisExtentSum - coord + coordBase;
	  };
	  axis.toLocalCoord = axis.dim === 'x' ? function (coord) {
	    return coord - coordBase;
	  } : function (coord) {
	    return axisExtentSum - coord + coordBase;
	  };
	}
	
	var axesTypes = ['xAxis', 'yAxis'];
	/**
	 * @inner
	 */
	
	function findAxesModels(seriesModel, ecModel) {
	  return map(axesTypes, function (axisType) {
	    var axisModel = seriesModel.getReferringComponents(axisType)[0];
	    return axisModel;
	  });
	}
	/**
	 * @inner
	 */
	
	
	function isCartesian2D(seriesModel) {
	  return seriesModel.get('coordinateSystem') === 'cartesian2d';
	}
	
	Grid.create = function (ecModel, api) {
	  var grids = [];
	  ecModel.eachComponent('grid', function (gridModel, idx) {
	    var grid = new Grid(gridModel, ecModel, api);
	    grid.name = 'grid_' + idx; // dataSampling requires axis extent, so resize
	    // should be performed in create stage.
	
	    grid.resize(gridModel, api, true);
	    gridModel.coordinateSystem = grid;
	    grids.push(grid);
	  }); // Inject the coordinateSystems into seriesModel
	
	  ecModel.eachSeries(function (seriesModel) {
	    if (!isCartesian2D(seriesModel)) {
	      return;
	    }
	
	    var axesModels = findAxesModels(seriesModel, ecModel);
	    var xAxisModel = axesModels[0];
	    var yAxisModel = axesModels[1];
	    var gridModel = xAxisModel.getCoordSysModel();
	    var grid = gridModel.coordinateSystem;
	    seriesModel.coordinateSystem = grid.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
	  });
	  return grids;
	}; // For deciding which dimensions to use when creating list data
	
	
	Grid.dimensions = Grid.prototype.dimensions = Cartesian2D.prototype.dimensions;
	CoordinateSystem.register('cartesian2d', Grid);
	var _default = Grid;
	module.exports = _default;

/***/ }),
/* 1071 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var Cartesian = __webpack_require__(1072);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function Cartesian2D(name) {
	  Cartesian.call(this, name);
	}
	
	Cartesian2D.prototype = {
	  constructor: Cartesian2D,
	  type: 'cartesian2d',
	
	  /**
	   * @type {Array.<string>}
	   * @readOnly
	   */
	  dimensions: ['x', 'y'],
	
	  /**
	   * Base axis will be used on stacking.
	   *
	   * @return {module:echarts/coord/cartesian/Axis2D}
	   */
	  getBaseAxis: function () {
	    return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAxis('x');
	  },
	
	  /**
	   * If contain point
	   * @param {Array.<number>} point
	   * @return {boolean}
	   */
	  containPoint: function (point) {
	    var axisX = this.getAxis('x');
	    var axisY = this.getAxis('y');
	    return axisX.contain(axisX.toLocalCoord(point[0])) && axisY.contain(axisY.toLocalCoord(point[1]));
	  },
	
	  /**
	   * If contain data
	   * @param {Array.<number>} data
	   * @return {boolean}
	   */
	  containData: function (data) {
	    return this.getAxis('x').containData(data[0]) && this.getAxis('y').containData(data[1]);
	  },
	
	  /**
	   * @param {Array.<number>} data
	   * @param {Array.<number>} out
	   * @return {Array.<number>}
	   */
	  dataToPoint: function (data, reserved, out) {
	    var xAxis = this.getAxis('x');
	    var yAxis = this.getAxis('y');
	    out = out || [];
	    out[0] = xAxis.toGlobalCoord(xAxis.dataToCoord(data[0]));
	    out[1] = yAxis.toGlobalCoord(yAxis.dataToCoord(data[1]));
	    return out;
	  },
	
	  /**
	   * @param {Array.<number>} data
	   * @param {Array.<number>} out
	   * @return {Array.<number>}
	   */
	  clampData: function (data, out) {
	    var xScale = this.getAxis('x').scale;
	    var yScale = this.getAxis('y').scale;
	    var xAxisExtent = xScale.getExtent();
	    var yAxisExtent = yScale.getExtent();
	    var x = xScale.parse(data[0]);
	    var y = yScale.parse(data[1]);
	    out = out || [];
	    out[0] = Math.min(Math.max(Math.min(xAxisExtent[0], xAxisExtent[1]), x), Math.max(xAxisExtent[0], xAxisExtent[1]));
	    out[1] = Math.min(Math.max(Math.min(yAxisExtent[0], yAxisExtent[1]), y), Math.max(yAxisExtent[0], yAxisExtent[1]));
	    return out;
	  },
	
	  /**
	   * @param {Array.<number>} point
	   * @param {Array.<number>} out
	   * @return {Array.<number>}
	   */
	  pointToData: function (point, out) {
	    var xAxis = this.getAxis('x');
	    var yAxis = this.getAxis('y');
	    out = out || [];
	    out[0] = xAxis.coordToData(xAxis.toLocalCoord(point[0]));
	    out[1] = yAxis.coordToData(yAxis.toLocalCoord(point[1]));
	    return out;
	  },
	
	  /**
	   * Get other axis
	   * @param {module:echarts/coord/cartesian/Axis2D} axis
	   */
	  getOtherAxis: function (axis) {
	    return this.getAxis(axis.dim === 'x' ? 'y' : 'x');
	  }
	};
	zrUtil.inherits(Cartesian2D, Cartesian);
	var _default = Cartesian2D;
	module.exports = _default;

/***/ }),
/* 1072 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Cartesian coordinate system
	 * @module  echarts/coord/Cartesian
	 *
	 */
	function dimAxisMapper(dim) {
	  return this._axes[dim];
	}
	/**
	 * @alias module:echarts/coord/Cartesian
	 * @constructor
	 */
	
	
	var Cartesian = function (name) {
	  this._axes = {};
	  this._dimList = [];
	  /**
	   * @type {string}
	   */
	
	  this.name = name || '';
	};
	
	Cartesian.prototype = {
	  constructor: Cartesian,
	  type: 'cartesian',
	
	  /**
	   * Get axis
	   * @param  {number|string} dim
	   * @return {module:echarts/coord/Cartesian~Axis}
	   */
	  getAxis: function (dim) {
	    return this._axes[dim];
	  },
	
	  /**
	   * Get axes list
	   * @return {Array.<module:echarts/coord/Cartesian~Axis>}
	   */
	  getAxes: function () {
	    return zrUtil.map(this._dimList, dimAxisMapper, this);
	  },
	
	  /**
	   * Get axes list by given scale type
	   */
	  getAxesByScale: function (scaleType) {
	    scaleType = scaleType.toLowerCase();
	    return zrUtil.filter(this.getAxes(), function (axis) {
	      return axis.scale.type === scaleType;
	    });
	  },
	
	  /**
	   * Add axis
	   * @param {module:echarts/coord/Cartesian.Axis}
	   */
	  addAxis: function (axis) {
	    var dim = axis.dim;
	    this._axes[dim] = axis;
	
	    this._dimList.push(dim);
	  },
	
	  /**
	   * Convert data to coord in nd space
	   * @param {Array.<number>|Object.<string, number>} val
	   * @return {Array.<number>|Object.<string, number>}
	   */
	  dataToCoord: function (val) {
	    return this._dataCoordConvert(val, 'dataToCoord');
	  },
	
	  /**
	   * Convert coord in nd space to data
	   * @param  {Array.<number>|Object.<string, number>} val
	   * @return {Array.<number>|Object.<string, number>}
	   */
	  coordToData: function (val) {
	    return this._dataCoordConvert(val, 'coordToData');
	  },
	  _dataCoordConvert: function (input, method) {
	    var dimList = this._dimList;
	    var output = input instanceof Array ? [] : {};
	
	    for (var i = 0; i < dimList.length; i++) {
	      var dim = dimList[i];
	      var axis = this._axes[dim];
	      output[dim] = axis[method](input[dim]);
	    }
	
	    return output;
	  }
	};
	var _default = Cartesian;
	module.exports = _default;

/***/ }),
/* 1073 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var Axis = __webpack_require__(1067);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Extend axis 2d
	 * @constructor module:echarts/coord/cartesian/Axis2D
	 * @extends {module:echarts/coord/cartesian/Axis}
	 * @param {string} dim
	 * @param {*} scale
	 * @param {Array.<number>} coordExtent
	 * @param {string} axisType
	 * @param {string} position
	 */
	var Axis2D = function (dim, scale, coordExtent, axisType, position) {
	  Axis.call(this, dim, scale, coordExtent);
	  /**
	   * Axis type
	   *  - 'category'
	   *  - 'value'
	   *  - 'time'
	   *  - 'log'
	   * @type {string}
	   */
	
	  this.type = axisType || 'value';
	  /**
	   * Axis position
	   *  - 'top'
	   *  - 'bottom'
	   *  - 'left'
	   *  - 'right'
	   */
	
	  this.position = position || 'bottom';
	};
	
	Axis2D.prototype = {
	  constructor: Axis2D,
	
	  /**
	   * Index of axis, can be used as key
	   */
	  index: 0,
	
	  /**
	   * Implemented in <module:echarts/coord/cartesian/Grid>.
	   * @return {Array.<module:echarts/coord/cartesian/Axis2D>}
	   *         If not on zero of other axis, return null/undefined.
	   *         If no axes, return an empty array.
	   */
	  getAxesOnZeroOf: null,
	
	  /**
	   * Axis model
	   * @param {module:echarts/coord/cartesian/AxisModel}
	   */
	  model: null,
	  isHorizontal: function () {
	    var position = this.position;
	    return position === 'top' || position === 'bottom';
	  },
	
	  /**
	   * Each item cooresponds to this.getExtent(), which
	   * means globalExtent[0] may greater than globalExtent[1],
	   * unless `asc` is input.
	   *
	   * @param {boolean} [asc]
	   * @return {Array.<number>}
	   */
	  getGlobalExtent: function (asc) {
	    var ret = this.getExtent();
	    ret[0] = this.toGlobalCoord(ret[0]);
	    ret[1] = this.toGlobalCoord(ret[1]);
	    asc && ret[0] > ret[1] && ret.reverse();
	    return ret;
	  },
	  getOtherAxis: function () {
	    this.grid.getOtherAxis();
	  },
	
	  /**
	   * @override
	   */
	  pointToData: function (point, clamp) {
	    return this.coordToData(this.toLocalCoord(point[this.dim === 'x' ? 0 : 1]), clamp);
	  },
	
	  /**
	   * Transform global coord to local coord,
	   * i.e. var localCoord = axis.toLocalCoord(80);
	   * designate by module:echarts/coord/cartesian/Grid.
	   * @type {Function}
	   */
	  toLocalCoord: null,
	
	  /**
	   * Transform global coord to local coord,
	   * i.e. var globalCoord = axis.toLocalCoord(40);
	   * designate by module:echarts/coord/cartesian/Grid.
	   * @type {Function}
	   */
	  toGlobalCoord: null
	};
	zrUtil.inherits(Axis2D, Axis);
	var _default = Axis2D;
	module.exports = _default;

/***/ }),
/* 1074 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1075);
	
	var ComponentModel = __webpack_require__(1010);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Grid 是在有直角坐标系的时候必须要存在的
	// 所以这里也要被 Cartesian2D 依赖
	var _default = ComponentModel.extend({
	  type: 'grid',
	  dependencies: ['xAxis', 'yAxis'],
	  layoutMode: 'box',
	
	  /**
	   * @type {module:echarts/coord/cartesian/Grid}
	   */
	  coordinateSystem: null,
	  defaultOption: {
	    show: false,
	    zlevel: 0,
	    z: 0,
	    left: '10%',
	    top: 60,
	    right: '10%',
	    bottom: 60,
	    // If grid size contain label
	    containLabel: false,
	    // width: {totalWidth} - left - right,
	    // height: {totalHeight} - top - bottom,
	    backgroundColor: 'rgba(0,0,0,0)',
	    borderWidth: 1,
	    borderColor: '#ccc'
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 1075 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var ComponentModel = __webpack_require__(1010);
	
	var axisModelCreator = __webpack_require__(1076);
	
	var axisModelCommonMixin = __webpack_require__(1062);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var AxisModel = ComponentModel.extend({
	  type: 'cartesian2dAxis',
	
	  /**
	   * @type {module:echarts/coord/cartesian/Axis2D}
	   */
	  axis: null,
	
	  /**
	   * @override
	   */
	  init: function () {
	    AxisModel.superApply(this, 'init', arguments);
	    this.resetRange();
	  },
	
	  /**
	   * @override
	   */
	  mergeOption: function () {
	    AxisModel.superApply(this, 'mergeOption', arguments);
	    this.resetRange();
	  },
	
	  /**
	   * @override
	   */
	  restoreData: function () {
	    AxisModel.superApply(this, 'restoreData', arguments);
	    this.resetRange();
	  },
	
	  /**
	   * @override
	   * @return {module:echarts/model/Component}
	   */
	  getCoordSysModel: function () {
	    return this.ecModel.queryComponents({
	      mainType: 'grid',
	      index: this.option.gridIndex,
	      id: this.option.gridId
	    })[0];
	  }
	});
	
	function getAxisType(axisDim, option) {
	  // Default axis with data is category axis
	  return option.type || (option.data ? 'category' : 'value');
	}
	
	zrUtil.merge(AxisModel.prototype, axisModelCommonMixin);
	var extraOption = {
	  // gridIndex: 0,
	  // gridId: '',
	  // Offset is for multiple axis on the same position
	  offset: 0
	};
	axisModelCreator('x', AxisModel, getAxisType, extraOption);
	axisModelCreator('y', AxisModel, getAxisType, extraOption);
	var _default = AxisModel;
	module.exports = _default;

/***/ }),
/* 1076 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var axisDefault = __webpack_require__(1077);
	
	var ComponentModel = __webpack_require__(1010);
	
	var _layout = __webpack_require__(1012);
	
	var getLayoutParams = _layout.getLayoutParams;
	var mergeLayoutParam = _layout.mergeLayoutParam;
	
	var OrdinalMeta = __webpack_require__(1056);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// FIXME axisType is fixed ?
	var AXIS_TYPES = ['value', 'category', 'time', 'log'];
	/**
	 * Generate sub axis model class
	 * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'
	 * @param {module:echarts/model/Component} BaseAxisModelClass
	 * @param {Function} axisTypeDefaulter
	 * @param {Object} [extraDefaultOption]
	 */
	
	function _default(axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {
	  zrUtil.each(AXIS_TYPES, function (axisType) {
	    BaseAxisModelClass.extend({
	      /**
	       * @readOnly
	       */
	      type: axisName + 'Axis.' + axisType,
	      mergeDefaultAndTheme: function (option, ecModel) {
	        var layoutMode = this.layoutMode;
	        var inputPositionParams = layoutMode ? getLayoutParams(option) : {};
	        var themeModel = ecModel.getTheme();
	        zrUtil.merge(option, themeModel.get(axisType + 'Axis'));
	        zrUtil.merge(option, this.getDefaultOption());
	        option.type = axisTypeDefaulter(axisName, option);
	
	        if (layoutMode) {
	          mergeLayoutParam(option, inputPositionParams, layoutMode);
	        }
	      },
	
	      /**
	       * @override
	       */
	      optionUpdated: function () {
	        var thisOption = this.option;
	
	        if (thisOption.type === 'category') {
	          this.__ordinalMeta = OrdinalMeta.createByAxisModel(this);
	        }
	      },
	
	      /**
	       * Should not be called before all of 'getInitailData' finished.
	       * Because categories are collected during initializing data.
	       */
	      getCategories: function (rawData) {
	        var option = this.option; // FIXME
	        // warning if called before all of 'getInitailData' finished.
	
	        if (option.type === 'category') {
	          if (rawData) {
	            return option.data;
	          }
	
	          return this.__ordinalMeta.categories;
	        }
	      },
	      getOrdinalMeta: function () {
	        return this.__ordinalMeta;
	      },
	      defaultOption: zrUtil.mergeAll([{}, axisDefault[axisType + 'Axis'], extraDefaultOption], true)
	    });
	  });
	  ComponentModel.registerSubTypeDefaulter(axisName + 'Axis', zrUtil.curry(axisTypeDefaulter, axisName));
	}
	
	module.exports = _default;

/***/ }),
/* 1077 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var defaultOption = {
	  show: true,
	  zlevel: 0,
	  z: 0,
	  // Inverse the axis.
	  inverse: false,
	  // Axis name displayed.
	  name: '',
	  // 'start' | 'middle' | 'end'
	  nameLocation: 'end',
	  // By degree. By defualt auto rotate by nameLocation.
	  nameRotate: null,
	  nameTruncate: {
	    maxWidth: null,
	    ellipsis: '...',
	    placeholder: '.'
	  },
	  // Use global text style by default.
	  nameTextStyle: {},
	  // The gap between axisName and axisLine.
	  nameGap: 15,
	  // Default `false` to support tooltip.
	  silent: false,
	  // Default `false` to avoid legacy user event listener fail.
	  triggerEvent: false,
	  tooltip: {
	    show: false
	  },
	  axisPointer: {},
	  axisLine: {
	    show: true,
	    onZero: true,
	    onZeroAxisIndex: null,
	    lineStyle: {
	      color: '#333',
	      width: 1,
	      type: 'solid'
	    },
	    // The arrow at both ends the the axis.
	    symbol: ['none', 'none'],
	    symbolSize: [10, 15]
	  },
	  axisTick: {
	    show: true,
	    // Whether axisTick is inside the grid or outside the grid.
	    inside: false,
	    // The length of axisTick.
	    length: 5,
	    lineStyle: {
	      width: 1
	    }
	  },
	  axisLabel: {
	    show: true,
	    // Whether axisLabel is inside the grid or outside the grid.
	    inside: false,
	    rotate: 0,
	    // true | false | null/undefined (auto)
	    showMinLabel: null,
	    // true | false | null/undefined (auto)
	    showMaxLabel: null,
	    margin: 8,
	    // formatter: null,
	    fontSize: 12
	  },
	  splitLine: {
	    show: true,
	    lineStyle: {
	      color: ['#ccc'],
	      width: 1,
	      type: 'solid'
	    }
	  },
	  splitArea: {
	    show: false,
	    areaStyle: {
	      color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)']
	    }
	  }
	};
	var axisDefault = {};
	axisDefault.categoryAxis = zrUtil.merge({
	  // The gap at both ends of the axis. For categoryAxis, boolean.
	  boundaryGap: true,
	  // Set false to faster category collection.
	  // Only usefull in the case like: category is
	  // ['2012-01-01', '2012-01-02', ...], where the input
	  // data has been ensured not duplicate and is large data.
	  // null means "auto":
	  // if axis.data provided, do not deduplication,
	  // else do deduplication.
	  deduplication: null,
	  // splitArea: {
	  // show: false
	  // },
	  splitLine: {
	    show: false
	  },
	  axisTick: {
	    // If tick is align with label when boundaryGap is true
	    alignWithLabel: false,
	    interval: 'auto'
	  },
	  axisLabel: {
	    interval: 'auto'
	  }
	}, defaultOption);
	axisDefault.valueAxis = zrUtil.merge({
	  // The gap at both ends of the axis. For value axis, [GAP, GAP], where
	  // `GAP` can be an absolute pixel number (like `35`), or percent (like `'30%'`)
	  boundaryGap: [0, 0],
	  // TODO
	  // min/max: [30, datamin, 60] or [20, datamin] or [datamin, 60]
	  // Min value of the axis. can be:
	  // + a number
	  // + 'dataMin': use the min value in data.
	  // + null/undefined: auto decide min value (consider pretty look and boundaryGap).
	  // min: null,
	  // Max value of the axis. can be:
	  // + a number
	  // + 'dataMax': use the max value in data.
	  // + null/undefined: auto decide max value (consider pretty look and boundaryGap).
	  // max: null,
	  // Readonly prop, specifies start value of the range when using data zoom.
	  // rangeStart: null
	  // Readonly prop, specifies end value of the range when using data zoom.
	  // rangeEnd: null
	  // Optional value can be:
	  // + `false`: always include value 0.
	  // + `true`: the extent do not consider value 0.
	  // scale: false,
	  // AxisTick and axisLabel and splitLine are caculated based on splitNumber.
	  splitNumber: 5 // Interval specifies the span of the ticks is mandatorily.
	  // interval: null
	  // Specify min interval when auto calculate tick interval.
	  // minInterval: null
	  // Specify max interval when auto calculate tick interval.
	  // maxInterval: null
	
	}, defaultOption);
	axisDefault.timeAxis = zrUtil.defaults({
	  scale: true,
	  min: 'dataMin',
	  max: 'dataMax'
	}, axisDefault.valueAxis);
	axisDefault.logAxis = zrUtil.defaults({
	  scale: true,
	  logBase: 10
	}, axisDefault.valueAxis);
	var _default = axisDefault;
	module.exports = _default;

/***/ }),
/* 1078 */
/***/ (function(module, exports, __webpack_require__) {

	var BaseBarSeries = __webpack_require__(1079);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = BaseBarSeries.extend({
	  type: 'series.bar',
	  dependencies: ['grid', 'polar'],
	  brushSelector: 'rect',
	
	  /**
	   * @override
	   */
	  getProgressive: function () {
	    // Do not support progressive in normal mode.
	    return this.get('large') ? this.get('progressive') : false;
	  },
	
	  /**
	   * @override
	   */
	  getProgressiveThreshold: function () {
	    // Do not support progressive in normal mode.
	    var progressiveThreshold = this.get('progressiveThreshold');
	    var largeThreshold = this.get('largeThreshold');
	
	    if (largeThreshold > progressiveThreshold) {
	      progressiveThreshold = largeThreshold;
	    }
	
	    return progressiveThreshold;
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 1079 */
/***/ (function(module, exports, __webpack_require__) {

	var SeriesModel = __webpack_require__(1028);
	
	var createListFromArray = __webpack_require__(1046);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = SeriesModel.extend({
	  type: 'series.__base_bar__',
	  getInitialData: function (option, ecModel) {
	    return createListFromArray(this.getSource(), this);
	  },
	  getMarkerPosition: function (value) {
	    var coordSys = this.coordinateSystem;
	
	    if (coordSys) {
	      // PENDING if clamp ?
	      var pt = coordSys.dataToPoint(coordSys.clampData(value));
	      var data = this.getData();
	      var offset = data.getLayout('offset');
	      var size = data.getLayout('size');
	      var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;
	      pt[offsetIndex] += offset + size / 2;
	      return pt;
	    }
	
	    return [NaN, NaN];
	  },
	  defaultOption: {
	    zlevel: 0,
	    // 一级层叠
	    z: 2,
	    // 二级层叠
	    coordinateSystem: 'cartesian2d',
	    legendHoverLink: true,
	    // stack: null
	    // Cartesian coordinate system
	    // xAxisIndex: 0,
	    // yAxisIndex: 0,
	    // 最小高度改为0
	    barMinHeight: 0,
	    // 最小角度为0，仅对极坐标系下的柱状图有效
	    barMinAngle: 0,
	    // cursor: null,
	    large: false,
	    largeThreshold: 400,
	    progressive: 5e3,
	    progressiveChunkMode: 'mod',
	    // barMaxWidth: null,
	    // 默认自适应
	    // barWidth: null,
	    // 柱间距离，默认为柱形宽度的30%，可设固定值
	    // barGap: '30%',
	    // 类目间柱形距离，默认为类目间距的20%，可设固定值
	    // barCategoryGap: '20%',
	    // label: {
	    //      show: false
	    // },
	    itemStyle: {},
	    emphasis: {}
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 1080 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	var echarts = __webpack_require__(926);
	
	var zrUtil = __webpack_require__(931);
	
	var graphic = __webpack_require__(976);
	
	var _helper = __webpack_require__(1081);
	
	var setLabel = _helper.setLabel;
	
	var Model = __webpack_require__(970);
	
	var barItemStyle = __webpack_require__(1083);
	
	var Path = __webpack_require__(978);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'barBorderWidth']; // FIXME
	// Just for compatible with ec2.
	
	zrUtil.extend(Model.prototype, barItemStyle);
	
	var _default = echarts.extendChartView({
	  type: 'bar',
	  render: function (seriesModel, ecModel, api) {
	    this._updateDrawMode(seriesModel);
	
	    var coordinateSystemType = seriesModel.get('coordinateSystem');
	
	    if (coordinateSystemType === 'cartesian2d' || coordinateSystemType === 'polar') {
	      this._isLargeDraw ? this._renderLarge(seriesModel, ecModel, api) : this._renderNormal(seriesModel, ecModel, api);
	    } else {}
	
	    return this.group;
	  },
	  incrementalPrepareRender: function (seriesModel, ecModel, api) {
	    this._clear();
	
	    this._updateDrawMode(seriesModel);
	  },
	  incrementalRender: function (params, seriesModel, ecModel, api) {
	    // Do not support progressive in normal mode.
	    this._incrementalRenderLarge(params, seriesModel);
	  },
	  _updateDrawMode: function (seriesModel) {
	    var isLargeDraw = seriesModel.pipelineContext.large;
	
	    if (this._isLargeDraw == null || isLargeDraw ^ this._isLargeDraw) {
	      this._isLargeDraw = isLargeDraw;
	
	      this._clear();
	    }
	  },
	  _renderNormal: function (seriesModel, ecModel, api) {
	    var group = this.group;
	    var data = seriesModel.getData();
	    var oldData = this._data;
	    var coord = seriesModel.coordinateSystem;
	    var baseAxis = coord.getBaseAxis();
	    var isHorizontalOrRadial;
	
	    if (coord.type === 'cartesian2d') {
	      isHorizontalOrRadial = baseAxis.isHorizontal();
	    } else if (coord.type === 'polar') {
	      isHorizontalOrRadial = baseAxis.dim === 'angle';
	    }
	
	    var animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;
	    data.diff(oldData).add(function (dataIndex) {
	      if (!data.hasValue(dataIndex)) {
	        return;
	      }
	
	      var itemModel = data.getItemModel(dataIndex);
	      var layout = getLayout[coord.type](data, dataIndex, itemModel);
	      var el = elementCreator[coord.type](data, dataIndex, itemModel, layout, isHorizontalOrRadial, animationModel);
	      data.setItemGraphicEl(dataIndex, el);
	      group.add(el);
	      updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontalOrRadial, coord.type === 'polar');
	    }).update(function (newIndex, oldIndex) {
	      var el = oldData.getItemGraphicEl(oldIndex);
	
	      if (!data.hasValue(newIndex)) {
	        group.remove(el);
	        return;
	      }
	
	      var itemModel = data.getItemModel(newIndex);
	      var layout = getLayout[coord.type](data, newIndex, itemModel);
	
	      if (el) {
	        graphic.updateProps(el, {
	          shape: layout
	        }, animationModel, newIndex);
	      } else {
	        el = elementCreator[coord.type](data, newIndex, itemModel, layout, isHorizontalOrRadial, animationModel, true);
	      }
	
	      data.setItemGraphicEl(newIndex, el); // Add back
	
	      group.add(el);
	      updateStyle(el, data, newIndex, itemModel, layout, seriesModel, isHorizontalOrRadial, coord.type === 'polar');
	    }).remove(function (dataIndex) {
	      var el = oldData.getItemGraphicEl(dataIndex);
	
	      if (coord.type === 'cartesian2d') {
	        el && removeRect(dataIndex, animationModel, el);
	      } else {
	        el && removeSector(dataIndex, animationModel, el);
	      }
	    }).execute();
	    this._data = data;
	  },
	  _renderLarge: function (seriesModel, ecModel, api) {
	    this._clear();
	
	    createLarge(seriesModel, this.group);
	  },
	  _incrementalRenderLarge: function (params, seriesModel) {
	    createLarge(seriesModel, this.group, true);
	  },
	  dispose: zrUtil.noop,
	  remove: function (ecModel) {
	    this._clear(ecModel);
	  },
	  _clear: function (ecModel) {
	    var group = this.group;
	    var data = this._data;
	
	    if (ecModel && ecModel.get('animation') && data && !this._isLargeDraw) {
	      data.eachItemGraphicEl(function (el) {
	        if (el.type === 'sector') {
	          removeSector(el.dataIndex, ecModel, el);
	        } else {
	          removeRect(el.dataIndex, ecModel, el);
	        }
	      });
	    } else {
	      group.removeAll();
	    }
	
	    this._data = null;
	  }
	});
	
	var elementCreator = {
	  cartesian2d: function (data, dataIndex, itemModel, layout, isHorizontal, animationModel, isUpdate) {
	    var rect = new graphic.Rect({
	      shape: zrUtil.extend({}, layout)
	    }); // Animation
	
	    if (animationModel) {
	      var rectShape = rect.shape;
	      var animateProperty = isHorizontal ? 'height' : 'width';
	      var animateTarget = {};
	      rectShape[animateProperty] = 0;
	      animateTarget[animateProperty] = layout[animateProperty];
	      graphic[isUpdate ? 'updateProps' : 'initProps'](rect, {
	        shape: animateTarget
	      }, animationModel, dataIndex);
	    }
	
	    return rect;
	  },
	  polar: function (data, dataIndex, itemModel, layout, isRadial, animationModel, isUpdate) {
	    // Keep the same logic with bar in catesion: use end value to control
	    // direction. Notice that if clockwise is true (by default), the sector
	    // will always draw clockwisely, no matter whether endAngle is greater
	    // or less than startAngle.
	    var clockwise = layout.startAngle < layout.endAngle;
	    var sector = new graphic.Sector({
	      shape: zrUtil.defaults({
	        clockwise: clockwise
	      }, layout)
	    }); // Animation
	
	    if (animationModel) {
	      var sectorShape = sector.shape;
	      var animateProperty = isRadial ? 'r' : 'endAngle';
	      var animateTarget = {};
	      sectorShape[animateProperty] = isRadial ? 0 : layout.startAngle;
	      animateTarget[animateProperty] = layout[animateProperty];
	      graphic[isUpdate ? 'updateProps' : 'initProps'](sector, {
	        shape: animateTarget
	      }, animationModel, dataIndex);
	    }
	
	    return sector;
	  }
	};
	
	function removeRect(dataIndex, animationModel, el) {
	  // Not show text when animating
	  el.style.text = null;
	  graphic.updateProps(el, {
	    shape: {
	      width: 0
	    }
	  }, animationModel, dataIndex, function () {
	    el.parent && el.parent.remove(el);
	  });
	}
	
	function removeSector(dataIndex, animationModel, el) {
	  // Not show text when animating
	  el.style.text = null;
	  graphic.updateProps(el, {
	    shape: {
	      r: el.shape.r0
	    }
	  }, animationModel, dataIndex, function () {
	    el.parent && el.parent.remove(el);
	  });
	}
	
	var getLayout = {
	  cartesian2d: function (data, dataIndex, itemModel) {
	    var layout = data.getItemLayout(dataIndex);
	    var fixedLineWidth = getLineWidth(itemModel, layout); // fix layout with lineWidth
	
	    var signX = layout.width > 0 ? 1 : -1;
	    var signY = layout.height > 0 ? 1 : -1;
	    return {
	      x: layout.x + signX * fixedLineWidth / 2,
	      y: layout.y + signY * fixedLineWidth / 2,
	      width: layout.width - signX * fixedLineWidth,
	      height: layout.height - signY * fixedLineWidth
	    };
	  },
	  polar: function (data, dataIndex, itemModel) {
	    var layout = data.getItemLayout(dataIndex);
	    return {
	      cx: layout.cx,
	      cy: layout.cy,
	      r0: layout.r0,
	      r: layout.r,
	      startAngle: layout.startAngle,
	      endAngle: layout.endAngle
	    };
	  }
	};
	
	function updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal, isPolar) {
	  var color = data.getItemVisual(dataIndex, 'color');
	  var opacity = data.getItemVisual(dataIndex, 'opacity');
	  var itemStyleModel = itemModel.getModel('itemStyle');
	  var hoverStyle = itemModel.getModel('emphasis.itemStyle').getBarItemStyle();
	
	  if (!isPolar) {
	    el.setShape('r', itemStyleModel.get('barBorderRadius') || 0);
	  }
	
	  el.useStyle(zrUtil.defaults({
	    fill: color,
	    opacity: opacity
	  }, itemStyleModel.getBarItemStyle()));
	  var cursorStyle = itemModel.getShallow('cursor');
	  cursorStyle && el.attr('cursor', cursorStyle);
	  var labelPositionOutside = isHorizontal ? layout.height > 0 ? 'bottom' : 'top' : layout.width > 0 ? 'left' : 'right';
	
	  if (!isPolar) {
	    setLabel(el.style, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside);
	  }
	
	  graphic.setHoverStyle(el, hoverStyle);
	} // In case width or height are too small.
	
	
	function getLineWidth(itemModel, rawLayout) {
	  var lineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;
	  return Math.min(lineWidth, Math.abs(rawLayout.width), Math.abs(rawLayout.height));
	}
	
	var LargePath = Path.extend({
	  type: 'largeBar',
	  shape: {
	    points: []
	  },
	  buildPath: function (ctx, shape) {
	    // Drawing lines is more efficient than drawing
	    // a whole line or drawing rects.
	    var points = shape.points;
	    var startPoint = this.__startPoint;
	    var valueIdx = this.__valueIdx;
	
	    for (var i = 0; i < points.length; i += 2) {
	      startPoint[this.__valueIdx] = points[i + valueIdx];
	      ctx.moveTo(startPoint[0], startPoint[1]);
	      ctx.lineTo(points[i], points[i + 1]);
	    }
	  }
	});
	
	function createLarge(seriesModel, group, incremental) {
	  // TODO support polar
	  var data = seriesModel.getData();
	  var startPoint = [];
	  var valueIdx = data.getLayout('valueAxisHorizontal') ? 1 : 0;
	  startPoint[1 - valueIdx] = data.getLayout('valueAxisStart');
	  var el = new LargePath({
	    shape: {
	      points: data.getLayout('largePoints')
	    },
	    incremental: !!incremental,
	    __startPoint: startPoint,
	    __valueIdx: valueIdx
	  });
	  group.add(el);
	  setLargeStyle(el, seriesModel, data);
	}
	
	function setLargeStyle(el, seriesModel, data) {
	  var borderColor = data.getVisual('borderColor') || data.getVisual('color');
	  var itemStyle = seriesModel.getModel('itemStyle').getItemStyle(['color', 'borderColor']);
	  el.useStyle(itemStyle);
	  el.style.fill = null;
	  el.style.stroke = borderColor;
	  el.style.lineWidth = data.getLayout('barWidth');
	}
	
	module.exports = _default;

/***/ }),
/* 1081 */
/***/ (function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(976);
	
	var _labelHelper = __webpack_require__(1082);
	
	var getDefaultLabel = _labelHelper.getDefaultLabel;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function setLabel(normalStyle, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside) {
	  var labelModel = itemModel.getModel('label');
	  var hoverLabelModel = itemModel.getModel('emphasis.label');
	  graphic.setLabelStyle(normalStyle, hoverStyle, labelModel, hoverLabelModel, {
	    labelFetcher: seriesModel,
	    labelDataIndex: dataIndex,
	    defaultText: getDefaultLabel(seriesModel.getData(), dataIndex),
	    isRectText: true,
	    autoColor: color
	  });
	  fixPosition(normalStyle);
	  fixPosition(hoverStyle);
	}
	
	function fixPosition(style, labelPositionOutside) {
	  if (style.textPosition === 'outside') {
	    style.textPosition = labelPositionOutside;
	  }
	}
	
	exports.setLabel = setLabel;

/***/ }),
/* 1082 */
/***/ (function(module, exports, __webpack_require__) {

	var _dataProvider = __webpack_require__(1030);
	
	var retrieveRawValue = _dataProvider.retrieveRawValue;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * @param {module:echarts/data/List} data
	 * @param {number} dataIndex
	 * @return {string} label string. Not null/undefined
	 */
	function getDefaultLabel(data, dataIndex) {
	  var labelDims = data.mapDimension('defaultedLabel', true);
	  var len = labelDims.length; // Simple optimization (in lots of cases, label dims length is 1)
	
	  if (len === 1) {
	    return retrieveRawValue(data, dataIndex, labelDims[0]);
	  } else if (len) {
	    var vals = [];
	
	    for (var i = 0; i < labelDims.length; i++) {
	      var val = retrieveRawValue(data, dataIndex, labelDims[i]);
	      vals.push(val);
	    }
	
	    return vals.join(' ');
	  }
	}
	
	exports.getDefaultLabel = getDefaultLabel;

/***/ }),
/* 1083 */
/***/ (function(module, exports, __webpack_require__) {

	var makeStyleMapper = __webpack_require__(973);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var getBarItemStyle = makeStyleMapper([['fill', 'color'], ['stroke', 'borderColor'], ['lineWidth', 'borderWidth'], // Compatitable with 2
	['stroke', 'barBorderColor'], ['lineWidth', 'barBorderWidth'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']]);
	var _default = {
	  getBarItemStyle: function (excludes) {
	    var style = getBarItemStyle(this, excludes);
	
	    if (this.getBorderLineDash) {
	      var lineDash = this.getBorderLineDash();
	      lineDash && (style.lineDash = lineDash);
	    }
	
	    return style;
	  }
	};
	module.exports = _default;

/***/ }),
/* 1084 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(926);
	
	var zrUtil = __webpack_require__(931);
	
	var graphic = __webpack_require__(976);
	
	__webpack_require__(1070);
	
	__webpack_require__(1085);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Grid view
	echarts.extendComponentView({
	  type: 'grid',
	  render: function (gridModel, ecModel) {
	    this.group.removeAll();
	
	    if (gridModel.get('show')) {
	      this.group.add(new graphic.Rect({
	        shape: gridModel.coordinateSystem.getRect(),
	        style: zrUtil.defaults({
	          fill: gridModel.get('backgroundColor')
	        }, gridModel.getItemStyle()),
	        silent: true,
	        z2: -1
	      }));
	    }
	  }
	});
	echarts.registerPreprocessor(function (option) {
	  // Only create grid when need
	  if (option.xAxis && option.yAxis && !option.grid) {
	    option.grid = {};
	  }
	});

/***/ }),
/* 1085 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1075);
	
	__webpack_require__(1086);

/***/ }),
/* 1086 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var graphic = __webpack_require__(976);
	
	var AxisBuilder = __webpack_require__(1087);
	
	var AxisView = __webpack_require__(1088);
	
	var cartesianAxisHelper = __webpack_require__(1090);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];
	var selfBuilderAttrs = ['splitArea', 'splitLine']; // function getAlignWithLabel(model, axisModel) {
	//     var alignWithLabel = model.get('alignWithLabel');
	//     if (alignWithLabel === 'auto') {
	//         alignWithLabel = axisModel.get('axisTick.alignWithLabel');
	//     }
	//     return alignWithLabel;
	// }
	
	var CartesianAxisView = AxisView.extend({
	  type: 'cartesianAxis',
	  axisPointerClass: 'CartesianAxisPointer',
	
	  /**
	   * @override
	   */
	  render: function (axisModel, ecModel, api, payload) {
	    this.group.removeAll();
	    var oldAxisGroup = this._axisGroup;
	    this._axisGroup = new graphic.Group();
	    this.group.add(this._axisGroup);
	
	    if (!axisModel.get('show')) {
	      return;
	    }
	
	    var gridModel = axisModel.getCoordSysModel();
	    var layout = cartesianAxisHelper.layout(gridModel, axisModel);
	    var axisBuilder = new AxisBuilder(axisModel, layout);
	    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	
	    this._axisGroup.add(axisBuilder.getGroup());
	
	    zrUtil.each(selfBuilderAttrs, function (name) {
	      if (axisModel.get(name + '.show')) {
	        this['_' + name](axisModel, gridModel);
	      }
	    }, this);
	    graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);
	    CartesianAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);
	  },
	  remove: function () {
	    this._splitAreaColors = null;
	  },
	
	  /**
	   * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	   * @param {module:echarts/coord/cartesian/GridModel} gridModel
	   * @private
	   */
	  _splitLine: function (axisModel, gridModel) {
	    var axis = axisModel.axis;
	
	    if (axis.scale.isBlank()) {
	      return;
	    }
	
	    var splitLineModel = axisModel.getModel('splitLine');
	    var lineStyleModel = splitLineModel.getModel('lineStyle');
	    var lineColors = lineStyleModel.get('color');
	    lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];
	    var gridRect = gridModel.coordinateSystem.getRect();
	    var isHorizontal = axis.isHorizontal();
	    var lineCount = 0;
	    var ticksCoords = axis.getTicksCoords({
	      tickModel: splitLineModel
	    });
	    var p1 = [];
	    var p2 = []; // Simple optimization
	    // Batching the lines if color are the same
	
	    var lineStyle = lineStyleModel.getLineStyle();
	
	    for (var i = 0; i < ticksCoords.length; i++) {
	      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);
	
	      if (isHorizontal) {
	        p1[0] = tickCoord;
	        p1[1] = gridRect.y;
	        p2[0] = tickCoord;
	        p2[1] = gridRect.y + gridRect.height;
	      } else {
	        p1[0] = gridRect.x;
	        p1[1] = tickCoord;
	        p2[0] = gridRect.x + gridRect.width;
	        p2[1] = tickCoord;
	      }
	
	      var colorIndex = lineCount++ % lineColors.length;
	      var tickValue = ticksCoords[i].tickValue;
	
	      this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({
	        anid: tickValue != null ? 'line_' + ticksCoords[i].tickValue : null,
	        shape: {
	          x1: p1[0],
	          y1: p1[1],
	          x2: p2[0],
	          y2: p2[1]
	        },
	        style: zrUtil.defaults({
	          stroke: lineColors[colorIndex]
	        }, lineStyle),
	        silent: true
	      })));
	    }
	  },
	
	  /**
	   * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	   * @param {module:echarts/coord/cartesian/GridModel} gridModel
	   * @private
	   */
	  _splitArea: function (axisModel, gridModel) {
	    var axis = axisModel.axis;
	
	    if (axis.scale.isBlank()) {
	      return;
	    }
	
	    var splitAreaModel = axisModel.getModel('splitArea');
	    var areaStyleModel = splitAreaModel.getModel('areaStyle');
	    var areaColors = areaStyleModel.get('color');
	    var gridRect = gridModel.coordinateSystem.getRect();
	    var ticksCoords = axis.getTicksCoords({
	      tickModel: splitAreaModel,
	      clamp: true
	    });
	
	    if (!ticksCoords.length) {
	      return;
	    } // For Making appropriate splitArea animation, the color and anid
	    // should be corresponding to previous one if possible.
	
	
	    var areaColorsLen = areaColors.length;
	    var lastSplitAreaColors = this._splitAreaColors;
	    var newSplitAreaColors = zrUtil.createHashMap();
	    var colorIndex = 0;
	
	    if (lastSplitAreaColors) {
	      for (var i = 0; i < ticksCoords.length; i++) {
	        var cIndex = lastSplitAreaColors.get(ticksCoords[i].tickValue);
	
	        if (cIndex != null) {
	          colorIndex = (cIndex + (areaColorsLen - 1) * i) % areaColorsLen;
	          break;
	        }
	      }
	    }
	
	    var prev = axis.toGlobalCoord(ticksCoords[0].coord);
	    var areaStyle = areaStyleModel.getAreaStyle();
	    areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];
	
	    for (var i = 1; i < ticksCoords.length; i++) {
	      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);
	      var x;
	      var y;
	      var width;
	      var height;
	
	      if (axis.isHorizontal()) {
	        x = prev;
	        y = gridRect.y;
	        width = tickCoord - x;
	        height = gridRect.height;
	        prev = x + width;
	      } else {
	        x = gridRect.x;
	        y = prev;
	        width = gridRect.width;
	        height = tickCoord - y;
	        prev = y + height;
	      }
	
	      var tickValue = ticksCoords[i - 1].tickValue;
	      tickValue != null && newSplitAreaColors.set(tickValue, colorIndex);
	
	      this._axisGroup.add(new graphic.Rect({
	        anid: tickValue != null ? 'area_' + tickValue : null,
	        shape: {
	          x: x,
	          y: y,
	          width: width,
	          height: height
	        },
	        style: zrUtil.defaults({
	          fill: areaColors[colorIndex]
	        }, areaStyle),
	        silent: true
	      }));
	
	      colorIndex = (colorIndex + 1) % areaColorsLen;
	    }
	
	    this._splitAreaColors = newSplitAreaColors;
	  }
	});
	CartesianAxisView.extend({
	  type: 'xAxis'
	});
	CartesianAxisView.extend({
	  type: 'yAxis'
	});

/***/ }),
/* 1087 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(931);
	
	var retrieve = _util.retrieve;
	var defaults = _util.defaults;
	var extend = _util.extend;
	var each = _util.each;
	
	var formatUtil = __webpack_require__(1014);
	
	var graphic = __webpack_require__(976);
	
	var Model = __webpack_require__(970);
	
	var _number = __webpack_require__(1013);
	
	var isRadianAroundZero = _number.isRadianAroundZero;
	var remRadian = _number.remRadian;
	
	var _symbol = __webpack_require__(1063);
	
	var createSymbol = _symbol.createSymbol;
	
	var matrixUtil = __webpack_require__(940);
	
	var _vector = __webpack_require__(933);
	
	var v2ApplyTransform = _vector.applyTransform;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var PI = Math.PI;
	
	function makeAxisEventDataBase(axisModel) {
	  var eventData = {
	    componentType: axisModel.mainType
	  };
	  eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;
	  return eventData;
	}
	/**
	 * A final axis is translated and rotated from a "standard axis".
	 * So opt.position and opt.rotation is required.
	 *
	 * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],
	 * for example: (0, 0) ------------> (0, 50)
	 *
	 * nameDirection or tickDirection or labelDirection is 1 means tick
	 * or label is below the standard axis, whereas is -1 means above
	 * the standard axis. labelOffset means offset between label and axis,
	 * which is useful when 'onZero', where axisLabel is in the grid and
	 * label in outside grid.
	 *
	 * Tips: like always,
	 * positive rotation represents anticlockwise, and negative rotation
	 * represents clockwise.
	 * The direction of position coordinate is the same as the direction
	 * of screen coordinate.
	 *
	 * Do not need to consider axis 'inverse', which is auto processed by
	 * axis extent.
	 *
	 * @param {module:zrender/container/Group} group
	 * @param {Object} axisModel
	 * @param {Object} opt Standard axis parameters.
	 * @param {Array.<number>} opt.position [x, y]
	 * @param {number} opt.rotation by radian
	 * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle' or 'center'.
	 * @param {number} [opt.tickDirection=1] 1 or -1
	 * @param {number} [opt.labelDirection=1] 1 or -1
	 * @param {number} [opt.labelOffset=0] Usefull when onZero.
	 * @param {string} [opt.axisLabelShow] default get from axisModel.
	 * @param {string} [opt.axisName] default get from axisModel.
	 * @param {number} [opt.axisNameAvailableWidth]
	 * @param {number} [opt.labelRotate] by degree, default get from axisModel.
	 * @param {number} [opt.strokeContainThreshold] Default label interval when label
	 * @param {number} [opt.nameTruncateMaxWidth]
	 */
	
	
	var AxisBuilder = function (axisModel, opt) {
	  /**
	   * @readOnly
	   */
	  this.opt = opt;
	  /**
	   * @readOnly
	   */
	
	  this.axisModel = axisModel; // Default value
	
	  defaults(opt, {
	    labelOffset: 0,
	    nameDirection: 1,
	    tickDirection: 1,
	    labelDirection: 1,
	    silent: true
	  });
	  /**
	   * @readOnly
	   */
	
	  this.group = new graphic.Group(); // FIXME Not use a seperate text group?
	
	  var dumbGroup = new graphic.Group({
	    position: opt.position.slice(),
	    rotation: opt.rotation
	  }); // this.group.add(dumbGroup);
	  // this._dumbGroup = dumbGroup;
	
	  dumbGroup.updateTransform();
	  this._transform = dumbGroup.transform;
	  this._dumbGroup = dumbGroup;
	};
	
	AxisBuilder.prototype = {
	  constructor: AxisBuilder,
	  hasBuilder: function (name) {
	    return !!builders[name];
	  },
	  add: function (name) {
	    builders[name].call(this);
	  },
	  getGroup: function () {
	    return this.group;
	  }
	};
	var builders = {
	  /**
	   * @private
	   */
	  axisLine: function () {
	    var opt = this.opt;
	    var axisModel = this.axisModel;
	
	    if (!axisModel.get('axisLine.show')) {
	      return;
	    }
	
	    var extent = this.axisModel.axis.getExtent();
	    var matrix = this._transform;
	    var pt1 = [extent[0], 0];
	    var pt2 = [extent[1], 0];
	
	    if (matrix) {
	      v2ApplyTransform(pt1, pt1, matrix);
	      v2ApplyTransform(pt2, pt2, matrix);
	    }
	
	    var lineStyle = extend({
	      lineCap: 'round'
	    }, axisModel.getModel('axisLine.lineStyle').getLineStyle());
	    this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({
	      // Id for animation
	      anid: 'line',
	      shape: {
	        x1: pt1[0],
	        y1: pt1[1],
	        x2: pt2[0],
	        y2: pt2[1]
	      },
	      style: lineStyle,
	      strokeContainThreshold: opt.strokeContainThreshold || 5,
	      silent: true,
	      z2: 1
	    })));
	    var arrows = axisModel.get('axisLine.symbol');
	    var arrowSize = axisModel.get('axisLine.symbolSize');
	    var arrowOffset = axisModel.get('axisLine.symbolOffset') || 0;
	
	    if (typeof arrowOffset === 'number') {
	      arrowOffset = [arrowOffset, arrowOffset];
	    }
	
	    if (arrows != null) {
	      if (typeof arrows === 'string') {
	        // Use the same arrow for start and end point
	        arrows = [arrows, arrows];
	      }
	
	      if (typeof arrowSize === 'string' || typeof arrowSize === 'number') {
	        // Use the same size for width and height
	        arrowSize = [arrowSize, arrowSize];
	      }
	
	      var symbolWidth = arrowSize[0];
	      var symbolHeight = arrowSize[1];
	      each([{
	        rotate: opt.rotation + Math.PI / 2,
	        offset: arrowOffset[0],
	        r: 0
	      }, {
	        rotate: opt.rotation - Math.PI / 2,
	        offset: arrowOffset[1],
	        r: Math.sqrt((pt1[0] - pt2[0]) * (pt1[0] - pt2[0]) + (pt1[1] - pt2[1]) * (pt1[1] - pt2[1]))
	      }], function (point, index) {
	        if (arrows[index] !== 'none' && arrows[index] != null) {
	          var symbol = createSymbol(arrows[index], -symbolWidth / 2, -symbolHeight / 2, symbolWidth, symbolHeight, lineStyle.stroke, true); // Calculate arrow position with offset
	
	          var r = point.r + point.offset;
	          var pos = [pt1[0] + r * Math.cos(opt.rotation), pt1[1] - r * Math.sin(opt.rotation)];
	          symbol.attr({
	            rotation: point.rotate,
	            position: pos,
	            silent: true
	          });
	          this.group.add(symbol);
	        }
	      }, this);
	    }
	  },
	
	  /**
	   * @private
	   */
	  axisTickLabel: function () {
	    var axisModel = this.axisModel;
	    var opt = this.opt;
	    var tickEls = buildAxisTick(this, axisModel, opt);
	    var labelEls = buildAxisLabel(this, axisModel, opt);
	    fixMinMaxLabelShow(axisModel, labelEls, tickEls);
	  },
	
	  /**
	   * @private
	   */
	  axisName: function () {
	    var opt = this.opt;
	    var axisModel = this.axisModel;
	    var name = retrieve(opt.axisName, axisModel.get('name'));
	
	    if (!name) {
	      return;
	    }
	
	    var nameLocation = axisModel.get('nameLocation');
	    var nameDirection = opt.nameDirection;
	    var textStyleModel = axisModel.getModel('nameTextStyle');
	    var gap = axisModel.get('nameGap') || 0;
	    var extent = this.axisModel.axis.getExtent();
	    var gapSignal = extent[0] > extent[1] ? -1 : 1;
	    var pos = [nameLocation === 'start' ? extent[0] - gapSignal * gap : nameLocation === 'end' ? extent[1] + gapSignal * gap : (extent[0] + extent[1]) / 2, // 'middle'
	    // Reuse labelOffset.
	    isNameLocationCenter(nameLocation) ? opt.labelOffset + nameDirection * gap : 0];
	    var labelLayout;
	    var nameRotation = axisModel.get('nameRotate');
	
	    if (nameRotation != null) {
	      nameRotation = nameRotation * PI / 180; // To radian.
	    }
	
	    var axisNameAvailableWidth;
	
	    if (isNameLocationCenter(nameLocation)) {
	      labelLayout = innerTextLayout(opt.rotation, nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.
	      nameDirection);
	    } else {
	      labelLayout = endTextLayout(opt, nameLocation, nameRotation || 0, extent);
	      axisNameAvailableWidth = opt.axisNameAvailableWidth;
	
	      if (axisNameAvailableWidth != null) {
	        axisNameAvailableWidth = Math.abs(axisNameAvailableWidth / Math.sin(labelLayout.rotation));
	        !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);
	      }
	    }
	
	    var textFont = textStyleModel.getFont();
	    var truncateOpt = axisModel.get('nameTruncate', true) || {};
	    var ellipsis = truncateOpt.ellipsis;
	    var maxWidth = retrieve(opt.nameTruncateMaxWidth, truncateOpt.maxWidth, axisNameAvailableWidth); // FIXME
	    // truncate rich text? (consider performance)
	
	    var truncatedText = ellipsis != null && maxWidth != null ? formatUtil.truncateText(name, maxWidth, textFont, ellipsis, {
	      minChar: 2,
	      placeholder: truncateOpt.placeholder
	    }) : name;
	    var tooltipOpt = axisModel.get('tooltip', true);
	    var mainType = axisModel.mainType;
	    var formatterParams = {
	      componentType: mainType,
	      name: name,
	      $vars: ['name']
	    };
	    formatterParams[mainType + 'Index'] = axisModel.componentIndex;
	    var textEl = new graphic.Text({
	      // Id for animation
	      anid: 'name',
	      __fullText: name,
	      __truncatedText: truncatedText,
	      position: pos,
	      rotation: labelLayout.rotation,
	      silent: isSilent(axisModel),
	      z2: 1,
	      tooltip: tooltipOpt && tooltipOpt.show ? extend({
	        content: name,
	        formatter: function () {
	          return name;
	        },
	        formatterParams: formatterParams
	      }, tooltipOpt) : null
	    });
	    graphic.setTextStyle(textEl.style, textStyleModel, {
	      text: truncatedText,
	      textFont: textFont,
	      textFill: textStyleModel.getTextColor() || axisModel.get('axisLine.lineStyle.color'),
	      textAlign: labelLayout.textAlign,
	      textVerticalAlign: labelLayout.textVerticalAlign
	    });
	
	    if (axisModel.get('triggerEvent')) {
	      textEl.eventData = makeAxisEventDataBase(axisModel);
	      textEl.eventData.targetType = 'axisName';
	      textEl.eventData.name = name;
	    } // FIXME
	
	
	    this._dumbGroup.add(textEl);
	
	    textEl.updateTransform();
	    this.group.add(textEl);
	    textEl.decomposeTransform();
	  }
	};
	/**
	 * @public
	 * @static
	 * @param {Object} opt
	 * @param {number} axisRotation in radian
	 * @param {number} textRotation in radian
	 * @param {number} direction
	 * @return {Object} {
	 *  rotation, // according to axis
	 *  textAlign,
	 *  textVerticalAlign
	 * }
	 */
	
	var innerTextLayout = AxisBuilder.innerTextLayout = function (axisRotation, textRotation, direction) {
	  var rotationDiff = remRadian(textRotation - axisRotation);
	  var textAlign;
	  var textVerticalAlign;
	
	  if (isRadianAroundZero(rotationDiff)) {
	    // Label is parallel with axis line.
	    textVerticalAlign = direction > 0 ? 'top' : 'bottom';
	    textAlign = 'center';
	  } else if (isRadianAroundZero(rotationDiff - PI)) {
	    // Label is inverse parallel with axis line.
	    textVerticalAlign = direction > 0 ? 'bottom' : 'top';
	    textAlign = 'center';
	  } else {
	    textVerticalAlign = 'middle';
	
	    if (rotationDiff > 0 && rotationDiff < PI) {
	      textAlign = direction > 0 ? 'right' : 'left';
	    } else {
	      textAlign = direction > 0 ? 'left' : 'right';
	    }
	  }
	
	  return {
	    rotation: rotationDiff,
	    textAlign: textAlign,
	    textVerticalAlign: textVerticalAlign
	  };
	};
	
	function endTextLayout(opt, textPosition, textRotate, extent) {
	  var rotationDiff = remRadian(textRotate - opt.rotation);
	  var textAlign;
	  var textVerticalAlign;
	  var inverse = extent[0] > extent[1];
	  var onLeft = textPosition === 'start' && !inverse || textPosition !== 'start' && inverse;
	
	  if (isRadianAroundZero(rotationDiff - PI / 2)) {
	    textVerticalAlign = onLeft ? 'bottom' : 'top';
	    textAlign = 'center';
	  } else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {
	    textVerticalAlign = onLeft ? 'top' : 'bottom';
	    textAlign = 'center';
	  } else {
	    textVerticalAlign = 'middle';
	
	    if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {
	      textAlign = onLeft ? 'left' : 'right';
	    } else {
	      textAlign = onLeft ? 'right' : 'left';
	    }
	  }
	
	  return {
	    rotation: rotationDiff,
	    textAlign: textAlign,
	    textVerticalAlign: textVerticalAlign
	  };
	}
	
	function isSilent(axisModel) {
	  var tooltipOpt = axisModel.get('tooltip');
	  return axisModel.get('silent') // Consider mouse cursor, add these restrictions.
	  || !(axisModel.get('triggerEvent') || tooltipOpt && tooltipOpt.show);
	}
	
	function fixMinMaxLabelShow(axisModel, labelEls, tickEls) {
	  // If min or max are user set, we need to check
	  // If the tick on min(max) are overlap on their neighbour tick
	  // If they are overlapped, we need to hide the min(max) tick label
	  var showMinLabel = axisModel.get('axisLabel.showMinLabel');
	  var showMaxLabel = axisModel.get('axisLabel.showMaxLabel'); // FIXME
	  // Have not consider onBand yet, where tick els is more than label els.
	
	  labelEls = labelEls || [];
	  tickEls = tickEls || [];
	  var firstLabel = labelEls[0];
	  var nextLabel = labelEls[1];
	  var lastLabel = labelEls[labelEls.length - 1];
	  var prevLabel = labelEls[labelEls.length - 2];
	  var firstTick = tickEls[0];
	  var nextTick = tickEls[1];
	  var lastTick = tickEls[tickEls.length - 1];
	  var prevTick = tickEls[tickEls.length - 2];
	
	  if (showMinLabel === false) {
	    ignoreEl(firstLabel);
	    ignoreEl(firstTick);
	  } else if (isTwoLabelOverlapped(firstLabel, nextLabel)) {
	    if (showMinLabel) {
	      ignoreEl(nextLabel);
	      ignoreEl(nextTick);
	    } else {
	      ignoreEl(firstLabel);
	      ignoreEl(firstTick);
	    }
	  }
	
	  if (showMaxLabel === false) {
	    ignoreEl(lastLabel);
	    ignoreEl(lastTick);
	  } else if (isTwoLabelOverlapped(prevLabel, lastLabel)) {
	    if (showMaxLabel) {
	      ignoreEl(prevLabel);
	      ignoreEl(prevTick);
	    } else {
	      ignoreEl(lastLabel);
	      ignoreEl(lastTick);
	    }
	  }
	}
	
	function ignoreEl(el) {
	  el && (el.ignore = true);
	}
	
	function isTwoLabelOverlapped(current, next, labelLayout) {
	  // current and next has the same rotation.
	  var firstRect = current && current.getBoundingRect().clone();
	  var nextRect = next && next.getBoundingRect().clone();
	
	  if (!firstRect || !nextRect) {
	    return;
	  } // When checking intersect of two rotated labels, we use mRotationBack
	  // to avoid that boundingRect is enlarge when using `boundingRect.applyTransform`.
	
	
	  var mRotationBack = matrixUtil.identity([]);
	  matrixUtil.rotate(mRotationBack, mRotationBack, -current.rotation);
	  firstRect.applyTransform(matrixUtil.mul([], mRotationBack, current.getLocalTransform()));
	  nextRect.applyTransform(matrixUtil.mul([], mRotationBack, next.getLocalTransform()));
	  return firstRect.intersect(nextRect);
	}
	
	function isNameLocationCenter(nameLocation) {
	  return nameLocation === 'middle' || nameLocation === 'center';
	}
	
	function buildAxisTick(axisBuilder, axisModel, opt) {
	  var axis = axisModel.axis;
	
	  if (!axisModel.get('axisTick.show') || axis.scale.isBlank()) {
	    return;
	  }
	
	  var tickModel = axisModel.getModel('axisTick');
	  var lineStyleModel = tickModel.getModel('lineStyle');
	  var tickLen = tickModel.get('length');
	  var ticksCoords = axis.getTicksCoords();
	  var pt1 = [];
	  var pt2 = [];
	  var matrix = axisBuilder._transform;
	  var tickEls = [];
	
	  for (var i = 0; i < ticksCoords.length; i++) {
	    var tickCoord = ticksCoords[i].coord;
	    pt1[0] = tickCoord;
	    pt1[1] = 0;
	    pt2[0] = tickCoord;
	    pt2[1] = opt.tickDirection * tickLen;
	
	    if (matrix) {
	      v2ApplyTransform(pt1, pt1, matrix);
	      v2ApplyTransform(pt2, pt2, matrix);
	    } // Tick line, Not use group transform to have better line draw
	
	
	    var tickEl = new graphic.Line(graphic.subPixelOptimizeLine({
	      // Id for animation
	      anid: 'tick_' + ticksCoords[i].tickValue,
	      shape: {
	        x1: pt1[0],
	        y1: pt1[1],
	        x2: pt2[0],
	        y2: pt2[1]
	      },
	      style: defaults(lineStyleModel.getLineStyle(), {
	        stroke: axisModel.get('axisLine.lineStyle.color')
	      }),
	      z2: 2,
	      silent: true
	    }));
	    axisBuilder.group.add(tickEl);
	    tickEls.push(tickEl);
	  }
	
	  return tickEls;
	}
	
	function buildAxisLabel(axisBuilder, axisModel, opt) {
	  var axis = axisModel.axis;
	  var show = retrieve(opt.axisLabelShow, axisModel.get('axisLabel.show'));
	
	  if (!show || axis.scale.isBlank()) {
	    return;
	  }
	
	  var labelModel = axisModel.getModel('axisLabel');
	  var labelMargin = labelModel.get('margin');
	  var labels = axis.getViewLabels(); // Special label rotate.
	
	  var labelRotation = (retrieve(opt.labelRotate, labelModel.get('rotate')) || 0) * PI / 180;
	  var labelLayout = innerTextLayout(opt.rotation, labelRotation, opt.labelDirection);
	  var rawCategoryData = axisModel.getCategories(true);
	  var labelEls = [];
	  var silent = isSilent(axisModel);
	  var triggerEvent = axisModel.get('triggerEvent');
	  each(labels, function (labelItem, index) {
	    var tickValue = labelItem.tickValue;
	    var formattedLabel = labelItem.formattedLabel;
	    var rawLabel = labelItem.rawLabel;
	    var itemLabelModel = labelModel;
	
	    if (rawCategoryData && rawCategoryData[tickValue] && rawCategoryData[tickValue].textStyle) {
	      itemLabelModel = new Model(rawCategoryData[tickValue].textStyle, labelModel, axisModel.ecModel);
	    }
	
	    var textColor = itemLabelModel.getTextColor() || axisModel.get('axisLine.lineStyle.color');
	    var tickCoord = axis.dataToCoord(tickValue);
	    var pos = [tickCoord, opt.labelOffset + opt.labelDirection * labelMargin];
	    var textEl = new graphic.Text({
	      // Id for animation
	      anid: 'label_' + tickValue,
	      position: pos,
	      rotation: labelLayout.rotation,
	      silent: silent,
	      z2: 10
	    });
	    graphic.setTextStyle(textEl.style, itemLabelModel, {
	      text: formattedLabel,
	      textAlign: itemLabelModel.getShallow('align', true) || labelLayout.textAlign,
	      textVerticalAlign: itemLabelModel.getShallow('verticalAlign', true) || itemLabelModel.getShallow('baseline', true) || labelLayout.textVerticalAlign,
	      textFill: typeof textColor === 'function' ? textColor( // (1) In category axis with data zoom, tick is not the original
	      // index of axis.data. So tick should not be exposed to user
	      // in category axis.
	      // (2) Compatible with previous version, which always use formatted label as
	      // input. But in interval scale the formatted label is like '223,445', which
	      // maked user repalce ','. So we modify it to return original val but remain
	      // it as 'string' to avoid error in replacing.
	      axis.type === 'category' ? rawLabel : axis.type === 'value' ? tickValue + '' : tickValue, index) : textColor
	    }); // Pack data for mouse event
	
	    if (triggerEvent) {
	      textEl.eventData = makeAxisEventDataBase(axisModel);
	      textEl.eventData.targetType = 'axisLabel';
	      textEl.eventData.value = rawLabel;
	    } // FIXME
	
	
	    axisBuilder._dumbGroup.add(textEl);
	
	    textEl.updateTransform();
	    labelEls.push(textEl);
	    axisBuilder.group.add(textEl);
	    textEl.decomposeTransform();
	  });
	  return labelEls;
	}
	
	var _default = AxisBuilder;
	module.exports = _default;

/***/ }),
/* 1088 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	var echarts = __webpack_require__(926);
	
	var axisPointerModelHelper = __webpack_require__(1089);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Base class of AxisView.
	 */
	var AxisView = echarts.extendComponentView({
	  type: 'axis',
	
	  /**
	   * @private
	   */
	  _axisPointer: null,
	
	  /**
	   * @protected
	   * @type {string}
	   */
	  axisPointerClass: null,
	
	  /**
	   * @override
	   */
	  render: function (axisModel, ecModel, api, payload) {
	    // FIXME
	    // This process should proformed after coordinate systems updated
	    // (axis scale updated), and should be performed each time update.
	    // So put it here temporarily, although it is not appropriate to
	    // put a model-writing procedure in `view`.
	    this.axisPointerClass && axisPointerModelHelper.fixValue(axisModel);
	    AxisView.superApply(this, 'render', arguments);
	    updateAxisPointer(this, axisModel, ecModel, api, payload, true);
	  },
	
	  /**
	   * Action handler.
	   * @public
	   * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	   * @param {module:echarts/model/Global} ecModel
	   * @param {module:echarts/ExtensionAPI} api
	   * @param {Object} payload
	   */
	  updateAxisPointer: function (axisModel, ecModel, api, payload, force) {
	    updateAxisPointer(this, axisModel, ecModel, api, payload, false);
	  },
	
	  /**
	   * @override
	   */
	  remove: function (ecModel, api) {
	    var axisPointer = this._axisPointer;
	    axisPointer && axisPointer.remove(api);
	    AxisView.superApply(this, 'remove', arguments);
	  },
	
	  /**
	   * @override
	   */
	  dispose: function (ecModel, api) {
	    disposeAxisPointer(this, api);
	    AxisView.superApply(this, 'dispose', arguments);
	  }
	});
	
	function updateAxisPointer(axisView, axisModel, ecModel, api, payload, forceRender) {
	  var Clazz = AxisView.getAxisPointerClass(axisView.axisPointerClass);
	
	  if (!Clazz) {
	    return;
	  }
	
	  var axisPointerModel = axisPointerModelHelper.getAxisPointerModel(axisModel);
	  axisPointerModel ? (axisView._axisPointer || (axisView._axisPointer = new Clazz())).render(axisModel, axisPointerModel, api, forceRender) : disposeAxisPointer(axisView, api);
	}
	
	function disposeAxisPointer(axisView, ecModel, api) {
	  var axisPointer = axisView._axisPointer;
	  axisPointer && axisPointer.dispose(ecModel, api);
	  axisView._axisPointer = null;
	}
	
	var axisPointerClazz = [];
	
	AxisView.registerAxisPointerClass = function (type, clazz) {
	  axisPointerClazz[type] = clazz;
	};
	
	AxisView.getAxisPointerClass = function (type) {
	  return type && axisPointerClazz[type];
	};
	
	var _default = AxisView;
	module.exports = _default;

/***/ }),
/* 1089 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var Model = __webpack_require__(970);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;
	var curry = zrUtil.curry; // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.
	// allAxesInfo should be updated when setOption performed.
	
	function collect(ecModel, api) {
	  var result = {
	    /**
	     * key: makeKey(axis.model)
	     * value: {
	     *      axis,
	     *      coordSys,
	     *      axisPointerModel,
	     *      triggerTooltip,
	     *      involveSeries,
	     *      snap,
	     *      seriesModels,
	     *      seriesDataCount
	     * }
	     */
	    axesInfo: {},
	    seriesInvolved: false,
	
	    /**
	     * key: makeKey(coordSys.model)
	     * value: Object: key makeKey(axis.model), value: axisInfo
	     */
	    coordSysAxesInfo: {},
	    coordSysMap: {}
	  };
	  collectAxesInfo(result, ecModel, api); // Check seriesInvolved for performance, in case too many series in some chart.
	
	  result.seriesInvolved && collectSeriesInfo(result, ecModel);
	  return result;
	}
	
	function collectAxesInfo(result, ecModel, api) {
	  var globalTooltipModel = ecModel.getComponent('tooltip');
	  var globalAxisPointerModel = ecModel.getComponent('axisPointer'); // links can only be set on global.
	
	  var linksOption = globalAxisPointerModel.get('link', true) || [];
	  var linkGroups = []; // Collect axes info.
	
	  each(api.getCoordinateSystems(), function (coordSys) {
	    // Some coordinate system do not support axes, like geo.
	    if (!coordSys.axisPointerEnabled) {
	      return;
	    }
	
	    var coordSysKey = makeKey(coordSys.model);
	    var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};
	    result.coordSysMap[coordSysKey] = coordSys; // Set tooltip (like 'cross') is a convienent way to show axisPointer
	    // for user. So we enable seting tooltip on coordSys model.
	
	    var coordSysModel = coordSys.model;
	    var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);
	    each(coordSys.getAxes(), curry(saveTooltipAxisInfo, false, null)); // If axis tooltip used, choose tooltip axis for each coordSys.
	    // Notice this case: coordSys is `grid` but not `cartesian2D` here.
	
	    if (coordSys.getTooltipAxes && globalTooltipModel // If tooltip.showContent is set as false, tooltip will not
	    // show but axisPointer will show as normal.
	    && baseTooltipModel.get('show')) {
	      // Compatible with previous logic. But series.tooltip.trigger: 'axis'
	      // or series.data[n].tooltip.trigger: 'axis' are not support any more.
	      var triggerAxis = baseTooltipModel.get('trigger') === 'axis';
	      var cross = baseTooltipModel.get('axisPointer.type') === 'cross';
	      var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get('axisPointer.axis'));
	
	      if (triggerAxis || cross) {
	        each(tooltipAxes.baseAxes, curry(saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis));
	      }
	
	      if (cross) {
	        each(tooltipAxes.otherAxes, curry(saveTooltipAxisInfo, 'cross', false));
	      }
	    } // fromTooltip: true | false | 'cross'
	    // triggerTooltip: true | false | null
	
	
	    function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {
	      var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);
	      var axisPointerShow = axisPointerModel.get('show');
	
	      if (!axisPointerShow || axisPointerShow === 'auto' && !fromTooltip && !isHandleTrigger(axisPointerModel)) {
	        return;
	      }
	
	      if (triggerTooltip == null) {
	        triggerTooltip = axisPointerModel.get('triggerTooltip');
	      }
	
	      axisPointerModel = fromTooltip ? makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) : axisPointerModel;
	      var snap = axisPointerModel.get('snap');
	      var key = makeKey(axis.model);
	      var involveSeries = triggerTooltip || snap || axis.type === 'category'; // If result.axesInfo[key] exist, override it (tooltip has higher priority).
	
	      var axisInfo = result.axesInfo[key] = {
	        key: key,
	        axis: axis,
	        coordSys: coordSys,
	        axisPointerModel: axisPointerModel,
	        triggerTooltip: triggerTooltip,
	        involveSeries: involveSeries,
	        snap: snap,
	        useHandle: isHandleTrigger(axisPointerModel),
	        seriesModels: []
	      };
	      axesInfoInCoordSys[key] = axisInfo;
	      result.seriesInvolved |= involveSeries;
	      var groupIndex = getLinkGroupIndex(linksOption, axis);
	
	      if (groupIndex != null) {
	        var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {
	          axesInfo: {}
	        });
	        linkGroup.axesInfo[key] = axisInfo;
	        linkGroup.mapper = linksOption[groupIndex].mapper;
	        axisInfo.linkGroup = linkGroup;
	      }
	    }
	  });
	}
	
	function makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) {
	  var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');
	  var volatileOption = {};
	  each(['type', 'snap', 'lineStyle', 'shadowStyle', 'label', 'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'], function (field) {
	    volatileOption[field] = zrUtil.clone(tooltipAxisPointerModel.get(field));
	  }); // category axis do not auto snap, otherwise some tick that do not
	  // has value can not be hovered. value/time/log axis default snap if
	  // triggered from tooltip and trigger tooltip.
	
	  volatileOption.snap = axis.type !== 'category' && !!triggerTooltip; // Compatibel with previous behavior, tooltip axis do not show label by default.
	  // Only these properties can be overrided from tooltip to axisPointer.
	
	  if (tooltipAxisPointerModel.get('type') === 'cross') {
	    volatileOption.type = 'line';
	  }
	
	  var labelOption = volatileOption.label || (volatileOption.label = {}); // Follow the convention, do not show label when triggered by tooltip by default.
	
	  labelOption.show == null && (labelOption.show = false);
	
	  if (fromTooltip === 'cross') {
	    // When 'cross', both axes show labels.
	    var tooltipAxisPointerLabelShow = tooltipAxisPointerModel.get('label.show');
	    labelOption.show = tooltipAxisPointerLabelShow != null ? tooltipAxisPointerLabelShow : true; // If triggerTooltip, this is a base axis, which should better not use cross style
	    // (cross style is dashed by default)
	
	    if (!triggerTooltip) {
	      var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');
	      crossStyle && zrUtil.defaults(labelOption, crossStyle.textStyle);
	    }
	  }
	
	  return axis.model.getModel('axisPointer', new Model(volatileOption, globalAxisPointerModel, ecModel));
	}
	
	function collectSeriesInfo(result, ecModel) {
	  // Prepare data for axis trigger
	  ecModel.eachSeries(function (seriesModel) {
	    // Notice this case: this coordSys is `cartesian2D` but not `grid`.
	    var coordSys = seriesModel.coordinateSystem;
	    var seriesTooltipTrigger = seriesModel.get('tooltip.trigger', true);
	    var seriesTooltipShow = seriesModel.get('tooltip.show', true);
	
	    if (!coordSys || seriesTooltipTrigger === 'none' || seriesTooltipTrigger === false || seriesTooltipTrigger === 'item' || seriesTooltipShow === false || seriesModel.get('axisPointer.show', true) === false) {
	      return;
	    }
	
	    each(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {
	      var axis = axisInfo.axis;
	
	      if (coordSys.getAxis(axis.dim) === axis) {
	        axisInfo.seriesModels.push(seriesModel);
	        axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);
	        axisInfo.seriesDataCount += seriesModel.getData().count();
	      }
	    });
	  }, this);
	}
	/**
	 * For example:
	 * {
	 *     axisPointer: {
	 *         links: [{
	 *             xAxisIndex: [2, 4],
	 *             yAxisIndex: 'all'
	 *         }, {
	 *             xAxisId: ['a5', 'a7'],
	 *             xAxisName: 'xxx'
	 *         }]
	 *     }
	 * }
	 */
	
	
	function getLinkGroupIndex(linksOption, axis) {
	  var axisModel = axis.model;
	  var dim = axis.dim;
	
	  for (var i = 0; i < linksOption.length; i++) {
	    var linkOption = linksOption[i] || {};
	
	    if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id) || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex) || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)) {
	      return i;
	    }
	  }
	}
	
	function checkPropInLink(linkPropValue, axisPropValue) {
	  return linkPropValue === 'all' || zrUtil.isArray(linkPropValue) && zrUtil.indexOf(linkPropValue, axisPropValue) >= 0 || linkPropValue === axisPropValue;
	}
	
	function fixValue(axisModel) {
	  var axisInfo = getAxisInfo(axisModel);
	
	  if (!axisInfo) {
	    return;
	  }
	
	  var axisPointerModel = axisInfo.axisPointerModel;
	  var scale = axisInfo.axis.scale;
	  var option = axisPointerModel.option;
	  var status = axisPointerModel.get('status');
	  var value = axisPointerModel.get('value'); // Parse init value for category and time axis.
	
	  if (value != null) {
	    value = scale.parse(value);
	  }
	
	  var useHandle = isHandleTrigger(axisPointerModel); // If `handle` used, `axisPointer` will always be displayed, so value
	  // and status should be initialized.
	
	  if (status == null) {
	    option.status = useHandle ? 'show' : 'hide';
	  }
	
	  var extent = scale.getExtent().slice();
	  extent[0] > extent[1] && extent.reverse();
	
	  if ( // Pick a value on axis when initializing.
	  value == null // If both `handle` and `dataZoom` are used, value may be out of axis extent,
	  // where we should re-pick a value to keep `handle` displaying normally.
	  || value > extent[1]) {
	    // Make handle displayed on the end of the axis when init, which looks better.
	    value = extent[1];
	  }
	
	  if (value < extent[0]) {
	    value = extent[0];
	  }
	
	  option.value = value;
	
	  if (useHandle) {
	    option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';
	  }
	}
	
	function getAxisInfo(axisModel) {
	  var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;
	  return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];
	}
	
	function getAxisPointerModel(axisModel) {
	  var axisInfo = getAxisInfo(axisModel);
	  return axisInfo && axisInfo.axisPointerModel;
	}
	
	function isHandleTrigger(axisPointerModel) {
	  return !!axisPointerModel.get('handle.show');
	}
	/**
	 * @param {module:echarts/model/Model} model
	 * @return {string} unique key
	 */
	
	
	function makeKey(model) {
	  return model.type + '||' + model.id;
	}
	
	exports.collect = collect;
	exports.fixValue = fixValue;
	exports.getAxisInfo = getAxisInfo;
	exports.getAxisPointerModel = getAxisPointerModel;
	exports.makeKey = makeKey;

/***/ }),
/* 1090 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Can only be called after coordinate system creation stage.
	 * (Can be called before coordinate system update stage).
	 *
	 * @param {Object} opt {labelInside}
	 * @return {Object} {
	 *  position, rotation, labelDirection, labelOffset,
	 *  tickDirection, labelRotate, z2
	 * }
	 */
	function layout(gridModel, axisModel, opt) {
	  opt = opt || {};
	  var grid = gridModel.coordinateSystem;
	  var axis = axisModel.axis;
	  var layout = {};
	  var otherAxisOnZeroOf = axis.getAxesOnZeroOf()[0];
	  var rawAxisPosition = axis.position;
	  var axisPosition = otherAxisOnZeroOf ? 'onZero' : rawAxisPosition;
	  var axisDim = axis.dim;
	  var rect = grid.getRect();
	  var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];
	  var idx = {
	    left: 0,
	    right: 1,
	    top: 0,
	    bottom: 1,
	    onZero: 2
	  };
	  var axisOffset = axisModel.get('offset') || 0;
	  var posBound = axisDim === 'x' ? [rectBound[2] - axisOffset, rectBound[3] + axisOffset] : [rectBound[0] - axisOffset, rectBound[1] + axisOffset];
	
	  if (otherAxisOnZeroOf) {
	    var onZeroCoord = otherAxisOnZeroOf.toGlobalCoord(otherAxisOnZeroOf.dataToCoord(0));
	    posBound[idx['onZero']] = Math.max(Math.min(onZeroCoord, posBound[1]), posBound[0]);
	  } // Axis position
	
	
	  layout.position = [axisDim === 'y' ? posBound[idx[axisPosition]] : rectBound[0], axisDim === 'x' ? posBound[idx[axisPosition]] : rectBound[3]]; // Axis rotation
	
	  layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1); // Tick and label direction, x y is axisDim
	
	  var dirMap = {
	    top: -1,
	    bottom: 1,
	    left: -1,
	    right: 1
	  };
	  layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];
	  layout.labelOffset = otherAxisOnZeroOf ? posBound[idx[rawAxisPosition]] - posBound[idx['onZero']] : 0;
	
	  if (axisModel.get('axisTick.inside')) {
	    layout.tickDirection = -layout.tickDirection;
	  }
	
	  if (zrUtil.retrieve(opt.labelInside, axisModel.get('axisLabel.inside'))) {
	    layout.labelDirection = -layout.labelDirection;
	  } // Special label rotation
	
	
	  var labelRotate = axisModel.get('axisLabel.rotate');
	  layout.labelRotate = axisPosition === 'top' ? -labelRotate : labelRotate; // Over splitLine and splitArea
	
	  layout.z2 = 1;
	  return layout;
	}
	
	exports.layout = layout;

/***/ }),
/* 1091 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(926);
	
	__webpack_require__(1092);
	
	__webpack_require__(1093);
	
	var visualSymbol = __webpack_require__(1099);
	
	var layoutPoints = __webpack_require__(1100);
	
	var dataSample = __webpack_require__(1101);
	
	__webpack_require__(1084);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// In case developer forget to include grid component
	echarts.registerVisual(visualSymbol('line', 'circle', 'line'));
	echarts.registerLayout(layoutPoints('line')); // Down sample after filter
	
	echarts.registerProcessor(echarts.PRIORITY.PROCESSOR.STATISTIC, dataSample('line'));

/***/ }),
/* 1092 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	var createListFromArray = __webpack_require__(1046);
	
	var SeriesModel = __webpack_require__(1028);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = SeriesModel.extend({
	  type: 'series.line',
	  dependencies: ['grid', 'polar'],
	  getInitialData: function (option, ecModel) {
	    return createListFromArray(this.getSource(), this);
	  },
	  defaultOption: {
	    zlevel: 0,
	    z: 2,
	    coordinateSystem: 'cartesian2d',
	    legendHoverLink: true,
	    hoverAnimation: true,
	    // stack: null
	    // xAxisIndex: 0,
	    // yAxisIndex: 0,
	    // polarIndex: 0,
	    // If clip the overflow value
	    clipOverflow: true,
	    // cursor: null,
	    label: {
	      position: 'top'
	    },
	    // itemStyle: {
	    // },
	    lineStyle: {
	      width: 2,
	      type: 'solid'
	    },
	    // areaStyle: {
	    // origin of areaStyle. Valid values:
	    // `'auto'/null/undefined`: from axisLine to data
	    // `'start'`: from min to data
	    // `'end'`: from data to max
	    // origin: 'auto'
	    // },
	    // false, 'start', 'end', 'middle'
	    step: false,
	    // Disabled if step is true
	    smooth: false,
	    smoothMonotone: null,
	    symbol: 'emptyCircle',
	    symbolSize: 4,
	    symbolRotate: null,
	    showSymbol: true,
	    // `false`: follow the label interval strategy.
	    // `true`: show all symbols.
	    // `'auto'`: If possible, show all symbols, otherwise
	    //           follow the label interval strategy.
	    showAllSymbol: 'auto',
	    // Whether to connect break point.
	    connectNulls: false,
	    // Sampling for large data. Can be: 'average', 'max', 'min', 'sum'.
	    sampling: 'none',
	    animationEasing: 'linear',
	    // Disable progressive
	    progressive: 0,
	    hoverLayerThreshold: Infinity
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 1093 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	var zrUtil = __webpack_require__(931);
	
	var SymbolDraw = __webpack_require__(1094);
	
	var SymbolClz = __webpack_require__(1095);
	
	var lineAnimationDiff = __webpack_require__(1096);
	
	var graphic = __webpack_require__(976);
	
	var modelUtil = __webpack_require__(969);
	
	var _poly = __webpack_require__(1098);
	
	var Polyline = _poly.Polyline;
	var Polygon = _poly.Polygon;
	
	var ChartView = __webpack_require__(1033);
	
	var _number = __webpack_require__(1013);
	
	var round = _number.round;
	
	var _helper = __webpack_require__(1097);
	
	var prepareDataCoordInfo = _helper.prepareDataCoordInfo;
	var getStackedOnPoint = _helper.getStackedOnPoint;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// FIXME step not support polar
	function isPointsSame(points1, points2) {
	  if (points1.length !== points2.length) {
	    return;
	  }
	
	  for (var i = 0; i < points1.length; i++) {
	    var p1 = points1[i];
	    var p2 = points2[i];
	
	    if (p1[0] !== p2[0] || p1[1] !== p2[1]) {
	      return;
	    }
	  }
	
	  return true;
	}
	
	function getSmooth(smooth) {
	  return typeof smooth === 'number' ? smooth : smooth ? 0.5 : 0;
	}
	
	function getAxisExtentWithGap(axis) {
	  var extent = axis.getGlobalExtent();
	
	  if (axis.onBand) {
	    // Remove extra 1px to avoid line miter in clipped edge
	    var halfBandWidth = axis.getBandWidth() / 2 - 1;
	    var dir = extent[1] > extent[0] ? 1 : -1;
	    extent[0] += dir * halfBandWidth;
	    extent[1] -= dir * halfBandWidth;
	  }
	
	  return extent;
	}
	/**
	 * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys
	 * @param {module:echarts/data/List} data
	 * @param {Object} dataCoordInfo
	 * @param {Array.<Array.<number>>} points
	 */
	
	
	function getStackedOnPoints(coordSys, data, dataCoordInfo) {
	  if (!dataCoordInfo.valueDim) {
	    return [];
	  }
	
	  var points = [];
	
	  for (var idx = 0, len = data.count(); idx < len; idx++) {
	    points.push(getStackedOnPoint(dataCoordInfo, coordSys, data, idx));
	  }
	
	  return points;
	}
	
	function createGridClipShape(cartesian, hasAnimation, forSymbol, seriesModel) {
	  var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));
	  var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));
	  var isHorizontal = cartesian.getBaseAxis().isHorizontal();
	  var x = Math.min(xExtent[0], xExtent[1]);
	  var y = Math.min(yExtent[0], yExtent[1]);
	  var width = Math.max(xExtent[0], xExtent[1]) - x;
	  var height = Math.max(yExtent[0], yExtent[1]) - y; // Avoid float number rounding error for symbol on the edge of axis extent.
	  // See #7913 and `test/dataZoom-clip.html`.
	
	  if (forSymbol) {
	    x -= 0.5;
	    width += 0.5;
	    y -= 0.5;
	    height += 0.5;
	  } else {
	    var lineWidth = seriesModel.get('lineStyle.width') || 2; // Expand clip shape to avoid clipping when line value exceeds axis
	
	    var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);
	
	    if (isHorizontal) {
	      y -= expandSize;
	      height += expandSize * 2;
	    } else {
	      x -= expandSize;
	      width += expandSize * 2;
	    }
	  }
	
	  var clipPath = new graphic.Rect({
	    shape: {
	      x: x,
	      y: y,
	      width: width,
	      height: height
	    }
	  });
	
	  if (hasAnimation) {
	    clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;
	    graphic.initProps(clipPath, {
	      shape: {
	        width: width,
	        height: height
	      }
	    }, seriesModel);
	  }
	
	  return clipPath;
	}
	
	function createPolarClipShape(polar, hasAnimation, forSymbol, seriesModel) {
	  var angleAxis = polar.getAngleAxis();
	  var radiusAxis = polar.getRadiusAxis();
	  var radiusExtent = radiusAxis.getExtent().slice();
	  radiusExtent[0] > radiusExtent[1] && radiusExtent.reverse();
	  var angleExtent = angleAxis.getExtent();
	  var RADIAN = Math.PI / 180; // Avoid float number rounding error for symbol on the edge of axis extent.
	
	  if (forSymbol) {
	    radiusExtent[0] -= 0.5;
	    radiusExtent[1] += 0.5;
	  }
	
	  var clipPath = new graphic.Sector({
	    shape: {
	      cx: round(polar.cx, 1),
	      cy: round(polar.cy, 1),
	      r0: round(radiusExtent[0], 1),
	      r: round(radiusExtent[1], 1),
	      startAngle: -angleExtent[0] * RADIAN,
	      endAngle: -angleExtent[1] * RADIAN,
	      clockwise: angleAxis.inverse
	    }
	  });
	
	  if (hasAnimation) {
	    clipPath.shape.endAngle = -angleExtent[0] * RADIAN;
	    graphic.initProps(clipPath, {
	      shape: {
	        endAngle: -angleExtent[1] * RADIAN
	      }
	    }, seriesModel);
	  }
	
	  return clipPath;
	}
	
	function createClipShape(coordSys, hasAnimation, forSymbol, seriesModel) {
	  return coordSys.type === 'polar' ? createPolarClipShape(coordSys, hasAnimation, forSymbol, seriesModel) : createGridClipShape(coordSys, hasAnimation, forSymbol, seriesModel);
	}
	
	function turnPointsIntoStep(points, coordSys, stepTurnAt) {
	  var baseAxis = coordSys.getBaseAxis();
	  var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;
	  var stepPoints = [];
	
	  for (var i = 0; i < points.length - 1; i++) {
	    var nextPt = points[i + 1];
	    var pt = points[i];
	    stepPoints.push(pt);
	    var stepPt = [];
	
	    switch (stepTurnAt) {
	      case 'end':
	        stepPt[baseIndex] = nextPt[baseIndex];
	        stepPt[1 - baseIndex] = pt[1 - baseIndex]; // default is start
	
	        stepPoints.push(stepPt);
	        break;
	
	      case 'middle':
	        // default is start
	        var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;
	        var stepPt2 = [];
	        stepPt[baseIndex] = stepPt2[baseIndex] = middle;
	        stepPt[1 - baseIndex] = pt[1 - baseIndex];
	        stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];
	        stepPoints.push(stepPt);
	        stepPoints.push(stepPt2);
	        break;
	
	      default:
	        stepPt[baseIndex] = pt[baseIndex];
	        stepPt[1 - baseIndex] = nextPt[1 - baseIndex]; // default is start
	
	        stepPoints.push(stepPt);
	    }
	  } // Last points
	
	
	  points[i] && stepPoints.push(points[i]);
	  return stepPoints;
	}
	
	function getVisualGradient(data, coordSys) {
	  var visualMetaList = data.getVisual('visualMeta');
	
	  if (!visualMetaList || !visualMetaList.length || !data.count()) {
	    // When data.count() is 0, gradient range can not be calculated.
	    return;
	  }
	
	  if (coordSys.type !== 'cartesian2d') {
	    return;
	  }
	
	  var coordDim;
	  var visualMeta;
	
	  for (var i = visualMetaList.length - 1; i >= 0; i--) {
	    var dimIndex = visualMetaList[i].dimension;
	    var dimName = data.dimensions[dimIndex];
	    var dimInfo = data.getDimensionInfo(dimName);
	    coordDim = dimInfo && dimInfo.coordDim; // Can only be x or y
	
	    if (coordDim === 'x' || coordDim === 'y') {
	      visualMeta = visualMetaList[i];
	      break;
	    }
	  }
	
	  if (!visualMeta) {
	    return;
	  } // If the area to be rendered is bigger than area defined by LinearGradient,
	  // the canvas spec prescribes that the color of the first stop and the last
	  // stop should be used. But if two stops are added at offset 0, in effect
	  // browsers use the color of the second stop to render area outside
	  // LinearGradient. So we can only infinitesimally extend area defined in
	  // LinearGradient to render `outerColors`.
	
	
	  var axis = coordSys.getAxis(coordDim); // dataToCoor mapping may not be linear, but must be monotonic.
	
	  var colorStops = zrUtil.map(visualMeta.stops, function (stop) {
	    return {
	      coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),
	      color: stop.color
	    };
	  });
	  var stopLen = colorStops.length;
	  var outerColors = visualMeta.outerColors.slice();
	
	  if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {
	    colorStops.reverse();
	    outerColors.reverse();
	  }
	
	  var tinyExtent = 10; // Arbitrary value: 10px
	
	  var minCoord = colorStops[0].coord - tinyExtent;
	  var maxCoord = colorStops[stopLen - 1].coord + tinyExtent;
	  var coordSpan = maxCoord - minCoord;
	
	  if (coordSpan < 1e-3) {
	    return 'transparent';
	  }
	
	  zrUtil.each(colorStops, function (stop) {
	    stop.offset = (stop.coord - minCoord) / coordSpan;
	  });
	  colorStops.push({
	    offset: stopLen ? colorStops[stopLen - 1].offset : 0.5,
	    color: outerColors[1] || 'transparent'
	  });
	  colorStops.unshift({
	    // notice colorStops.length have been changed.
	    offset: stopLen ? colorStops[0].offset : 0.5,
	    color: outerColors[0] || 'transparent'
	  }); // zrUtil.each(colorStops, function (colorStop) {
	  //     // Make sure each offset has rounded px to avoid not sharp edge
	  //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);
	  // });
	
	  var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStops, true);
	  gradient[coordDim] = minCoord;
	  gradient[coordDim + '2'] = maxCoord;
	  return gradient;
	}
	
	function getIsIgnoreFunc(seriesModel, data, coordSys) {
	  var showAllSymbol = seriesModel.get('showAllSymbol');
	  var isAuto = showAllSymbol === 'auto';
	
	  if (showAllSymbol && !isAuto) {
	    return;
	  }
	
	  var categoryAxis = coordSys.getAxesByScale('ordinal')[0];
	
	  if (!categoryAxis) {
	    return;
	  } // Note that category label interval strategy might bring some weird effect
	  // in some scenario: users may wonder why some of the symbols are not
	  // displayed. So we show all symbols as possible as we can.
	
	
	  if (isAuto // Simplify the logic, do not determine label overlap here.
	  && canShowAllSymbolForCategory(categoryAxis, data)) {
	    return;
	  } // Otherwise follow the label interval strategy on category axis.
	
	
	  var categoryDataDim = data.mapDimension(categoryAxis.dim);
	  var labelMap = {};
	  zrUtil.each(categoryAxis.getViewLabels(), function (labelItem) {
	    labelMap[labelItem.tickValue] = 1;
	  });
	  return function (dataIndex) {
	    return !labelMap.hasOwnProperty(data.get(categoryDataDim, dataIndex));
	  };
	}
	
	function canShowAllSymbolForCategory(categoryAxis, data) {
	  // In mose cases, line is monotonous on category axis, and the label size
	  // is close with each other. So we check the symbol size and some of the
	  // label size alone with the category axis to estimate whether all symbol
	  // can be shown without overlap.
	  var axisExtent = categoryAxis.getExtent();
	  var availSize = Math.abs(axisExtent[1] - axisExtent[0]) / categoryAxis.scale.count();
	  isNaN(availSize) && (availSize = 0); // 0/0 is NaN.
	  // Sampling some points, max 5.
	
	  var dataLen = data.count();
	  var step = Math.max(1, Math.round(dataLen / 5));
	
	  for (var dataIndex = 0; dataIndex < dataLen; dataIndex += step) {
	    if (SymbolClz.getSymbolSize(data, dataIndex // Only for cartesian, where `isHorizontal` exists.
	    )[categoryAxis.isHorizontal() ? 1 : 0] // Empirical number
	    * 1.5 > availSize) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	var _default = ChartView.extend({
	  type: 'line',
	  init: function () {
	    var lineGroup = new graphic.Group();
	    var symbolDraw = new SymbolDraw();
	    this.group.add(symbolDraw.group);
	    this._symbolDraw = symbolDraw;
	    this._lineGroup = lineGroup;
	  },
	  render: function (seriesModel, ecModel, api) {
	    var coordSys = seriesModel.coordinateSystem;
	    var group = this.group;
	    var data = seriesModel.getData();
	    var lineStyleModel = seriesModel.getModel('lineStyle');
	    var areaStyleModel = seriesModel.getModel('areaStyle');
	    var points = data.mapArray(data.getItemLayout);
	    var isCoordSysPolar = coordSys.type === 'polar';
	    var prevCoordSys = this._coordSys;
	    var symbolDraw = this._symbolDraw;
	    var polyline = this._polyline;
	    var polygon = this._polygon;
	    var lineGroup = this._lineGroup;
	    var hasAnimation = seriesModel.get('animation');
	    var isAreaChart = !areaStyleModel.isEmpty();
	    var valueOrigin = areaStyleModel.get('origin');
	    var dataCoordInfo = prepareDataCoordInfo(coordSys, data, valueOrigin);
	    var stackedOnPoints = getStackedOnPoints(coordSys, data, dataCoordInfo);
	    var showSymbol = seriesModel.get('showSymbol');
	    var isIgnoreFunc = showSymbol && !isCoordSysPolar && getIsIgnoreFunc(seriesModel, data, coordSys); // Remove temporary symbols
	
	    var oldData = this._data;
	    oldData && oldData.eachItemGraphicEl(function (el, idx) {
	      if (el.__temp) {
	        group.remove(el);
	        oldData.setItemGraphicEl(idx, null);
	      }
	    }); // Remove previous created symbols if showSymbol changed to false
	
	    if (!showSymbol) {
	      symbolDraw.remove();
	    }
	
	    group.add(lineGroup); // FIXME step not support polar
	
	    var step = !isCoordSysPolar && seriesModel.get('step'); // Initialization animation or coordinate system changed
	
	    if (!(polyline && prevCoordSys.type === coordSys.type && step === this._step)) {
	      showSymbol && symbolDraw.updateData(data, {
	        isIgnore: isIgnoreFunc,
	        clipShape: createClipShape(coordSys, false, true, seriesModel)
	      });
	
	      if (step) {
	        // TODO If stacked series is not step
	        points = turnPointsIntoStep(points, coordSys, step);
	        stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);
	      }
	
	      polyline = this._newPolyline(points, coordSys, hasAnimation);
	
	      if (isAreaChart) {
	        polygon = this._newPolygon(points, stackedOnPoints, coordSys, hasAnimation);
	      }
	
	      lineGroup.setClipPath(createClipShape(coordSys, true, false, seriesModel));
	    } else {
	      if (isAreaChart && !polygon) {
	        // If areaStyle is added
	        polygon = this._newPolygon(points, stackedOnPoints, coordSys, hasAnimation);
	      } else if (polygon && !isAreaChart) {
	        // If areaStyle is removed
	        lineGroup.remove(polygon);
	        polygon = this._polygon = null;
	      } // Update clipPath
	
	
	      lineGroup.setClipPath(createClipShape(coordSys, false, false, seriesModel)); // Always update, or it is wrong in the case turning on legend
	      // because points are not changed
	
	      showSymbol && symbolDraw.updateData(data, {
	        isIgnore: isIgnoreFunc,
	        clipShape: createClipShape(coordSys, false, true, seriesModel)
	      }); // Stop symbol animation and sync with line points
	      // FIXME performance?
	
	      data.eachItemGraphicEl(function (el) {
	        el.stopAnimation(true);
	      }); // In the case data zoom triggerred refreshing frequently
	      // Data may not change if line has a category axis. So it should animate nothing
	
	      if (!isPointsSame(this._stackedOnPoints, stackedOnPoints) || !isPointsSame(this._points, points)) {
	        if (hasAnimation) {
	          this._updateAnimation(data, stackedOnPoints, coordSys, api, step, valueOrigin);
	        } else {
	          // Not do it in update with animation
	          if (step) {
	            // TODO If stacked series is not step
	            points = turnPointsIntoStep(points, coordSys, step);
	            stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);
	          }
	
	          polyline.setShape({
	            points: points
	          });
	          polygon && polygon.setShape({
	            points: points,
	            stackedOnPoints: stackedOnPoints
	          });
	        }
	      }
	    }
	
	    var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');
	    polyline.useStyle(zrUtil.defaults( // Use color in lineStyle first
	    lineStyleModel.getLineStyle(), {
	      fill: 'none',
	      stroke: visualColor,
	      lineJoin: 'bevel'
	    }));
	    var smooth = seriesModel.get('smooth');
	    smooth = getSmooth(seriesModel.get('smooth'));
	    polyline.setShape({
	      smooth: smooth,
	      smoothMonotone: seriesModel.get('smoothMonotone'),
	      connectNulls: seriesModel.get('connectNulls')
	    });
	
	    if (polygon) {
	      var stackedOnSeries = data.getCalculationInfo('stackedOnSeries');
	      var stackedOnSmooth = 0;
	      polygon.useStyle(zrUtil.defaults(areaStyleModel.getAreaStyle(), {
	        fill: visualColor,
	        opacity: 0.7,
	        lineJoin: 'bevel'
	      }));
	
	      if (stackedOnSeries) {
	        stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));
	      }
	
	      polygon.setShape({
	        smooth: smooth,
	        stackedOnSmooth: stackedOnSmooth,
	        smoothMonotone: seriesModel.get('smoothMonotone'),
	        connectNulls: seriesModel.get('connectNulls')
	      });
	    }
	
	    this._data = data; // Save the coordinate system for transition animation when data changed
	
	    this._coordSys = coordSys;
	    this._stackedOnPoints = stackedOnPoints;
	    this._points = points;
	    this._step = step;
	    this._valueOrigin = valueOrigin;
	  },
	  dispose: function () {},
	  highlight: function (seriesModel, ecModel, api, payload) {
	    var data = seriesModel.getData();
	    var dataIndex = modelUtil.queryDataIndex(data, payload);
	
	    if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {
	      var symbol = data.getItemGraphicEl(dataIndex);
	
	      if (!symbol) {
	        // Create a temporary symbol if it is not exists
	        var pt = data.getItemLayout(dataIndex);
	
	        if (!pt) {
	          // Null data
	          return;
	        }
	
	        symbol = new SymbolClz(data, dataIndex);
	        symbol.position = pt;
	        symbol.setZ(seriesModel.get('zlevel'), seriesModel.get('z'));
	        symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);
	        symbol.__temp = true;
	        data.setItemGraphicEl(dataIndex, symbol); // Stop scale animation
	
	        symbol.stopSymbolAnimation(true);
	        this.group.add(symbol);
	      }
	
	      symbol.highlight();
	    } else {
	      // Highlight whole series
	      ChartView.prototype.highlight.call(this, seriesModel, ecModel, api, payload);
	    }
	  },
	  downplay: function (seriesModel, ecModel, api, payload) {
	    var data = seriesModel.getData();
	    var dataIndex = modelUtil.queryDataIndex(data, payload);
	
	    if (dataIndex != null && dataIndex >= 0) {
	      var symbol = data.getItemGraphicEl(dataIndex);
	
	      if (symbol) {
	        if (symbol.__temp) {
	          data.setItemGraphicEl(dataIndex, null);
	          this.group.remove(symbol);
	        } else {
	          symbol.downplay();
	        }
	      }
	    } else {
	      // FIXME
	      // can not downplay completely.
	      // Downplay whole series
	      ChartView.prototype.downplay.call(this, seriesModel, ecModel, api, payload);
	    }
	  },
	
	  /**
	   * @param {module:zrender/container/Group} group
	   * @param {Array.<Array.<number>>} points
	   * @private
	   */
	  _newPolyline: function (points) {
	    var polyline = this._polyline; // Remove previous created polyline
	
	    if (polyline) {
	      this._lineGroup.remove(polyline);
	    }
	
	    polyline = new Polyline({
	      shape: {
	        points: points
	      },
	      silent: true,
	      z2: 10
	    });
	
	    this._lineGroup.add(polyline);
	
	    this._polyline = polyline;
	    return polyline;
	  },
	
	  /**
	   * @param {module:zrender/container/Group} group
	   * @param {Array.<Array.<number>>} stackedOnPoints
	   * @param {Array.<Array.<number>>} points
	   * @private
	   */
	  _newPolygon: function (points, stackedOnPoints) {
	    var polygon = this._polygon; // Remove previous created polygon
	
	    if (polygon) {
	      this._lineGroup.remove(polygon);
	    }
	
	    polygon = new Polygon({
	      shape: {
	        points: points,
	        stackedOnPoints: stackedOnPoints
	      },
	      silent: true
	    });
	
	    this._lineGroup.add(polygon);
	
	    this._polygon = polygon;
	    return polygon;
	  },
	
	  /**
	   * @private
	   */
	  // FIXME Two value axis
	  _updateAnimation: function (data, stackedOnPoints, coordSys, api, step, valueOrigin) {
	    var polyline = this._polyline;
	    var polygon = this._polygon;
	    var seriesModel = data.hostModel;
	    var diff = lineAnimationDiff(this._data, data, this._stackedOnPoints, stackedOnPoints, this._coordSys, coordSys, this._valueOrigin, valueOrigin);
	    var current = diff.current;
	    var stackedOnCurrent = diff.stackedOnCurrent;
	    var next = diff.next;
	    var stackedOnNext = diff.stackedOnNext;
	
	    if (step) {
	      // TODO If stacked series is not step
	      current = turnPointsIntoStep(diff.current, coordSys, step);
	      stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);
	      next = turnPointsIntoStep(diff.next, coordSys, step);
	      stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);
	    } // `diff.current` is subset of `current` (which should be ensured by
	    // turnPointsIntoStep), so points in `__points` can be updated when
	    // points in `current` are update during animation.
	
	
	    polyline.shape.__points = diff.current;
	    polyline.shape.points = current;
	    graphic.updateProps(polyline, {
	      shape: {
	        points: next
	      }
	    }, seriesModel);
	
	    if (polygon) {
	      polygon.setShape({
	        points: current,
	        stackedOnPoints: stackedOnCurrent
	      });
	      graphic.updateProps(polygon, {
	        shape: {
	          points: next,
	          stackedOnPoints: stackedOnNext
	        }
	      }, seriesModel);
	    }
	
	    var updatedDataInfo = [];
	    var diffStatus = diff.status;
	
	    for (var i = 0; i < diffStatus.length; i++) {
	      var cmd = diffStatus[i].cmd;
	
	      if (cmd === '=') {
	        var el = data.getItemGraphicEl(diffStatus[i].idx1);
	
	        if (el) {
	          updatedDataInfo.push({
	            el: el,
	            ptIdx: i // Index of points
	
	          });
	        }
	      }
	    }
	
	    if (polyline.animators && polyline.animators.length) {
	      polyline.animators[0].during(function () {
	        for (var i = 0; i < updatedDataInfo.length; i++) {
	          var el = updatedDataInfo[i].el;
	          el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);
	        }
	      });
	    }
	  },
	  remove: function (ecModel) {
	    var group = this.group;
	    var oldData = this._data;
	
	    this._lineGroup.removeAll();
	
	    this._symbolDraw.remove(true); // Remove temporary created elements when highlighting
	
	
	    oldData && oldData.eachItemGraphicEl(function (el, idx) {
	      if (el.__temp) {
	        group.remove(el);
	        oldData.setItemGraphicEl(idx, null);
	      }
	    });
	    this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._data = null;
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 1094 */
/***/ (function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(976);
	
	var SymbolClz = __webpack_require__(1095);
	
	var _util = __webpack_require__(931);
	
	var isObject = _util.isObject;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * @module echarts/chart/helper/SymbolDraw
	 */
	
	/**
	 * @constructor
	 * @alias module:echarts/chart/helper/SymbolDraw
	 * @param {module:zrender/graphic/Group} [symbolCtor]
	 */
	function SymbolDraw(symbolCtor) {
	  this.group = new graphic.Group();
	  this._symbolCtor = symbolCtor || SymbolClz;
	}
	
	var symbolDrawProto = SymbolDraw.prototype;
	
	function symbolNeedsDraw(data, point, idx, opt) {
	  return point && !isNaN(point[0]) && !isNaN(point[1]) && !(opt.isIgnore && opt.isIgnore(idx)) // We do not set clipShape on group, because it will cut part of
	  // the symbol element shape. We use the same clip shape here as
	  // the line clip.
	  && !(opt.clipShape && !opt.clipShape.contain(point[0], point[1])) && data.getItemVisual(idx, 'symbol') !== 'none';
	}
	/**
	 * Update symbols draw by new data
	 * @param {module:echarts/data/List} data
	 * @param {Object} [opt] Or isIgnore
	 * @param {Function} [opt.isIgnore]
	 * @param {Object} [opt.clipShape]
	 */
	
	
	symbolDrawProto.updateData = function (data, opt) {
	  opt = normalizeUpdateOpt(opt);
	  var group = this.group;
	  var seriesModel = data.hostModel;
	  var oldData = this._data;
	  var SymbolCtor = this._symbolCtor;
	  var seriesScope = makeSeriesScope(data); // There is no oldLineData only when first rendering or switching from
	  // stream mode to normal mode, where previous elements should be removed.
	
	  if (!oldData) {
	    group.removeAll();
	  }
	
	  data.diff(oldData).add(function (newIdx) {
	    var point = data.getItemLayout(newIdx);
	
	    if (symbolNeedsDraw(data, point, newIdx, opt)) {
	      var symbolEl = new SymbolCtor(data, newIdx, seriesScope);
	      symbolEl.attr('position', point);
	      data.setItemGraphicEl(newIdx, symbolEl);
	      group.add(symbolEl);
	    }
	  }).update(function (newIdx, oldIdx) {
	    var symbolEl = oldData.getItemGraphicEl(oldIdx);
	    var point = data.getItemLayout(newIdx);
	
	    if (!symbolNeedsDraw(data, point, newIdx, opt)) {
	      group.remove(symbolEl);
	      return;
	    }
	
	    if (!symbolEl) {
	      symbolEl = new SymbolCtor(data, newIdx);
	      symbolEl.attr('position', point);
	    } else {
	      symbolEl.updateData(data, newIdx, seriesScope);
	      graphic.updateProps(symbolEl, {
	        position: point
	      }, seriesModel);
	    } // Add back
	
	
	    group.add(symbolEl);
	    data.setItemGraphicEl(newIdx, symbolEl);
	  }).remove(function (oldIdx) {
	    var el = oldData.getItemGraphicEl(oldIdx);
	    el && el.fadeOut(function () {
	      group.remove(el);
	    });
	  }).execute();
	  this._data = data;
	};
	
	symbolDrawProto.isPersistent = function () {
	  return true;
	};
	
	symbolDrawProto.updateLayout = function () {
	  var data = this._data;
	
	  if (data) {
	    // Not use animation
	    data.eachItemGraphicEl(function (el, idx) {
	      var point = data.getItemLayout(idx);
	      el.attr('position', point);
	    });
	  }
	};
	
	symbolDrawProto.incrementalPrepareUpdate = function (data) {
	  this._seriesScope = makeSeriesScope(data);
	  this._data = null;
	  this.group.removeAll();
	};
	/**
	 * Update symbols draw by new data
	 * @param {module:echarts/data/List} data
	 * @param {Object} [opt] Or isIgnore
	 * @param {Function} [opt.isIgnore]
	 * @param {Object} [opt.clipShape]
	 */
	
	
	symbolDrawProto.incrementalUpdate = function (taskParams, data, opt) {
	  opt = normalizeUpdateOpt(opt);
	
	  function updateIncrementalAndHover(el) {
	    if (!el.isGroup) {
	      el.incremental = el.useHoverLayer = true;
	    }
	  }
	
	  for (var idx = taskParams.start; idx < taskParams.end; idx++) {
	    var point = data.getItemLayout(idx);
	
	    if (symbolNeedsDraw(data, point, idx, opt)) {
	      var el = new this._symbolCtor(data, idx, this._seriesScope);
	      el.traverse(updateIncrementalAndHover);
	      el.attr('position', point);
	      this.group.add(el);
	      data.setItemGraphicEl(idx, el);
	    }
	  }
	};
	
	function normalizeUpdateOpt(opt) {
	  if (opt != null && !isObject(opt)) {
	    opt = {
	      isIgnore: opt
	    };
	  }
	
	  return opt || {};
	}
	
	symbolDrawProto.remove = function (enableAnimation) {
	  var group = this.group;
	  var data = this._data; // Incremental model do not have this._data.
	
	  if (data && enableAnimation) {
	    data.eachItemGraphicEl(function (el) {
	      el.fadeOut(function () {
	        group.remove(el);
	      });
	    });
	  } else {
	    group.removeAll();
	  }
	};
	
	function makeSeriesScope(data) {
	  var seriesModel = data.hostModel;
	  return {
	    itemStyle: seriesModel.getModel('itemStyle').getItemStyle(['color']),
	    hoverItemStyle: seriesModel.getModel('emphasis.itemStyle').getItemStyle(),
	    symbolRotate: seriesModel.get('symbolRotate'),
	    symbolOffset: seriesModel.get('symbolOffset'),
	    hoverAnimation: seriesModel.get('hoverAnimation'),
	    labelModel: seriesModel.getModel('label'),
	    hoverLabelModel: seriesModel.getModel('emphasis.label'),
	    cursorStyle: seriesModel.get('cursor')
	  };
	}
	
	var _default = SymbolDraw;
	module.exports = _default;

/***/ }),
/* 1095 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var _symbol = __webpack_require__(1063);
	
	var createSymbol = _symbol.createSymbol;
	
	var graphic = __webpack_require__(976);
	
	var _number = __webpack_require__(1013);
	
	var parsePercent = _number.parsePercent;
	
	var _labelHelper = __webpack_require__(1082);
	
	var getDefaultLabel = _labelHelper.getDefaultLabel;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * @module echarts/chart/helper/Symbol
	 */
	
	/**
	 * @constructor
	 * @alias {module:echarts/chart/helper/Symbol}
	 * @param {module:echarts/data/List} data
	 * @param {number} idx
	 * @extends {module:zrender/graphic/Group}
	 */
	function SymbolClz(data, idx, seriesScope) {
	  graphic.Group.call(this);
	  this.updateData(data, idx, seriesScope);
	}
	
	var symbolProto = SymbolClz.prototype;
	/**
	 * @public
	 * @static
	 * @param {module:echarts/data/List} data
	 * @param {number} dataIndex
	 * @return {Array.<number>} [width, height]
	 */
	
	var getSymbolSize = SymbolClz.getSymbolSize = function (data, idx) {
	  var symbolSize = data.getItemVisual(idx, 'symbolSize');
	  return symbolSize instanceof Array ? symbolSize.slice() : [+symbolSize, +symbolSize];
	};
	
	function getScale(symbolSize) {
	  return [symbolSize[0] / 2, symbolSize[1] / 2];
	}
	
	function driftSymbol(dx, dy) {
	  this.parent.drift(dx, dy);
	}
	
	symbolProto._createSymbol = function (symbolType, data, idx, symbolSize, keepAspect) {
	  // Remove paths created before
	  this.removeAll();
	  var color = data.getItemVisual(idx, 'color'); // var symbolPath = createSymbol(
	  //     symbolType, -0.5, -0.5, 1, 1, color
	  // );
	  // If width/height are set too small (e.g., set to 1) on ios10
	  // and macOS Sierra, a circle stroke become a rect, no matter what
	  // the scale is set. So we set width/height as 2. See #4150.
	
	  var symbolPath = createSymbol(symbolType, -1, -1, 2, 2, color, keepAspect);
	  symbolPath.attr({
	    z2: 100,
	    culling: true,
	    scale: getScale(symbolSize)
	  }); // Rewrite drift method
	
	  symbolPath.drift = driftSymbol;
	  this._symbolType = symbolType;
	  this.add(symbolPath);
	};
	/**
	 * Stop animation
	 * @param {boolean} toLastFrame
	 */
	
	
	symbolProto.stopSymbolAnimation = function (toLastFrame) {
	  this.childAt(0).stopAnimation(toLastFrame);
	};
	/**
	 * FIXME:
	 * Caution: This method breaks the encapsulation of this module,
	 * but it indeed brings convenience. So do not use the method
	 * unless you detailedly know all the implements of `Symbol`,
	 * especially animation.
	 *
	 * Get symbol path element.
	 */
	
	
	symbolProto.getSymbolPath = function () {
	  return this.childAt(0);
	};
	/**
	 * Get scale(aka, current symbol size).
	 * Including the change caused by animation
	 */
	
	
	symbolProto.getScale = function () {
	  return this.childAt(0).scale;
	};
	/**
	 * Highlight symbol
	 */
	
	
	symbolProto.highlight = function () {
	  this.childAt(0).trigger('emphasis');
	};
	/**
	 * Downplay symbol
	 */
	
	
	symbolProto.downplay = function () {
	  this.childAt(0).trigger('normal');
	};
	/**
	 * @param {number} zlevel
	 * @param {number} z
	 */
	
	
	symbolProto.setZ = function (zlevel, z) {
	  var symbolPath = this.childAt(0);
	  symbolPath.zlevel = zlevel;
	  symbolPath.z = z;
	};
	
	symbolProto.setDraggable = function (draggable) {
	  var symbolPath = this.childAt(0);
	  symbolPath.draggable = draggable;
	  symbolPath.cursor = draggable ? 'move' : 'pointer';
	};
	/**
	 * Update symbol properties
	 * @param {module:echarts/data/List} data
	 * @param {number} idx
	 * @param {Object} [seriesScope]
	 * @param {Object} [seriesScope.itemStyle]
	 * @param {Object} [seriesScope.hoverItemStyle]
	 * @param {Object} [seriesScope.symbolRotate]
	 * @param {Object} [seriesScope.symbolOffset]
	 * @param {module:echarts/model/Model} [seriesScope.labelModel]
	 * @param {module:echarts/model/Model} [seriesScope.hoverLabelModel]
	 * @param {boolean} [seriesScope.hoverAnimation]
	 * @param {Object} [seriesScope.cursorStyle]
	 * @param {module:echarts/model/Model} [seriesScope.itemModel]
	 * @param {string} [seriesScope.symbolInnerColor]
	 * @param {Object} [seriesScope.fadeIn=false]
	 */
	
	
	symbolProto.updateData = function (data, idx, seriesScope) {
	  this.silent = false;
	  var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';
	  var seriesModel = data.hostModel;
	  var symbolSize = getSymbolSize(data, idx);
	  var isInit = symbolType !== this._symbolType;
	
	  if (isInit) {
	    var keepAspect = data.getItemVisual(idx, 'symbolKeepAspect');
	
	    this._createSymbol(symbolType, data, idx, symbolSize, keepAspect);
	  } else {
	    var symbolPath = this.childAt(0);
	    symbolPath.silent = false;
	    graphic.updateProps(symbolPath, {
	      scale: getScale(symbolSize)
	    }, seriesModel, idx);
	  }
	
	  this._updateCommon(data, idx, symbolSize, seriesScope);
	
	  if (isInit) {
	    var symbolPath = this.childAt(0);
	    var fadeIn = seriesScope && seriesScope.fadeIn;
	    var target = {
	      scale: symbolPath.scale.slice()
	    };
	    fadeIn && (target.style = {
	      opacity: symbolPath.style.opacity
	    });
	    symbolPath.scale = [0, 0];
	    fadeIn && (symbolPath.style.opacity = 0);
	    graphic.initProps(symbolPath, target, seriesModel, idx);
	  }
	
	  this._seriesModel = seriesModel;
	}; // Update common properties
	
	
	var normalStyleAccessPath = ['itemStyle'];
	var emphasisStyleAccessPath = ['emphasis', 'itemStyle'];
	var normalLabelAccessPath = ['label'];
	var emphasisLabelAccessPath = ['emphasis', 'label'];
	/**
	 * @param {module:echarts/data/List} data
	 * @param {number} idx
	 * @param {Array.<number>} symbolSize
	 * @param {Object} [seriesScope]
	 */
	
	symbolProto._updateCommon = function (data, idx, symbolSize, seriesScope) {
	  var symbolPath = this.childAt(0);
	  var seriesModel = data.hostModel;
	  var color = data.getItemVisual(idx, 'color'); // Reset style
	
	  if (symbolPath.type !== 'image') {
	    symbolPath.useStyle({
	      strokeNoScale: true
	    });
	  }
	
	  var itemStyle = seriesScope && seriesScope.itemStyle;
	  var hoverItemStyle = seriesScope && seriesScope.hoverItemStyle;
	  var symbolRotate = seriesScope && seriesScope.symbolRotate;
	  var symbolOffset = seriesScope && seriesScope.symbolOffset;
	  var labelModel = seriesScope && seriesScope.labelModel;
	  var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;
	  var hoverAnimation = seriesScope && seriesScope.hoverAnimation;
	  var cursorStyle = seriesScope && seriesScope.cursorStyle;
	
	  if (!seriesScope || data.hasItemOption) {
	    var itemModel = seriesScope && seriesScope.itemModel ? seriesScope.itemModel : data.getItemModel(idx); // Color must be excluded.
	    // Because symbol provide setColor individually to set fill and stroke
	
	    itemStyle = itemModel.getModel(normalStyleAccessPath).getItemStyle(['color']);
	    hoverItemStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
	    symbolRotate = itemModel.getShallow('symbolRotate');
	    symbolOffset = itemModel.getShallow('symbolOffset');
	    labelModel = itemModel.getModel(normalLabelAccessPath);
	    hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);
	    hoverAnimation = itemModel.getShallow('hoverAnimation');
	    cursorStyle = itemModel.getShallow('cursor');
	  } else {
	    hoverItemStyle = zrUtil.extend({}, hoverItemStyle);
	  }
	
	  var elStyle = symbolPath.style;
	  symbolPath.attr('rotation', (symbolRotate || 0) * Math.PI / 180 || 0);
	
	  if (symbolOffset) {
	    symbolPath.attr('position', [parsePercent(symbolOffset[0], symbolSize[0]), parsePercent(symbolOffset[1], symbolSize[1])]);
	  }
	
	  cursorStyle && symbolPath.attr('cursor', cursorStyle); // PENDING setColor before setStyle!!!
	
	  symbolPath.setColor(color, seriesScope && seriesScope.symbolInnerColor);
	  symbolPath.setStyle(itemStyle);
	  var opacity = data.getItemVisual(idx, 'opacity');
	
	  if (opacity != null) {
	    elStyle.opacity = opacity;
	  }
	
	  var liftZ = data.getItemVisual(idx, 'liftZ');
	  var z2Origin = symbolPath.__z2Origin;
	
	  if (liftZ != null) {
	    if (z2Origin == null) {
	      symbolPath.__z2Origin = symbolPath.z2;
	      symbolPath.z2 += liftZ;
	    }
	  } else if (z2Origin != null) {
	    symbolPath.z2 = z2Origin;
	    symbolPath.__z2Origin = null;
	  }
	
	  var useNameLabel = seriesScope && seriesScope.useNameLabel;
	  graphic.setLabelStyle(elStyle, hoverItemStyle, labelModel, hoverLabelModel, {
	    labelFetcher: seriesModel,
	    labelDataIndex: idx,
	    defaultText: getLabelDefaultText,
	    isRectText: true,
	    autoColor: color
	  }); // Do not execute util needed.
	
	  function getLabelDefaultText(idx, opt) {
	    return useNameLabel ? data.getName(idx) : getDefaultLabel(data, idx);
	  }
	
	  symbolPath.off('mouseover').off('mouseout').off('emphasis').off('normal');
	  symbolPath.hoverStyle = hoverItemStyle; // FIXME
	  // Do not use symbol.trigger('emphasis'), but use symbol.highlight() instead.
	
	  graphic.setHoverStyle(symbolPath);
	  var scale = getScale(symbolSize);
	
	  if (hoverAnimation && seriesModel.isAnimationEnabled()) {
	    var onEmphasis = function () {
	      // Do not support this hover animation util some scenario required.
	      // Animation can only be supported in hover layer when using `el.incremetal`.
	      if (this.incremental) {
	        return;
	      }
	
	      var ratio = scale[1] / scale[0];
	      this.animateTo({
	        scale: [Math.max(scale[0] * 1.1, scale[0] + 3), Math.max(scale[1] * 1.1, scale[1] + 3 * ratio)]
	      }, 400, 'elasticOut');
	    };
	
	    var onNormal = function () {
	      if (this.incremental) {
	        return;
	      }
	
	      this.animateTo({
	        scale: scale
	      }, 400, 'elasticOut');
	    };
	
	    symbolPath.on('mouseover', onEmphasis).on('mouseout', onNormal).on('emphasis', onEmphasis).on('normal', onNormal);
	  }
	};
	/**
	 * @param {Function} cb
	 * @param {Object} [opt]
	 * @param {Object} [opt.keepLabel=true]
	 */
	
	
	symbolProto.fadeOut = function (cb, opt) {
	  var symbolPath = this.childAt(0); // Avoid mistaken hover when fading out
	
	  this.silent = symbolPath.silent = true; // Not show text when animating
	
	  !(opt && opt.keepLabel) && (symbolPath.style.text = null);
	  graphic.updateProps(symbolPath, {
	    style: {
	      opacity: 0
	    },
	    scale: [0, 0]
	  }, this._seriesModel, this.dataIndex, cb);
	};
	
	zrUtil.inherits(SymbolClz, graphic.Group);
	var _default = SymbolClz;
	module.exports = _default;

/***/ }),
/* 1096 */
/***/ (function(module, exports, __webpack_require__) {

	var _helper = __webpack_require__(1097);
	
	var prepareDataCoordInfo = _helper.prepareDataCoordInfo;
	var getStackedOnPoint = _helper.getStackedOnPoint;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// var arrayDiff = require('zrender/src/core/arrayDiff');
	// 'zrender/src/core/arrayDiff' has been used before, but it did
	// not do well in performance when roam with fixed dataZoom window.
	// function convertToIntId(newIdList, oldIdList) {
	//     // Generate int id instead of string id.
	//     // Compare string maybe slow in score function of arrDiff
	//     // Assume id in idList are all unique
	//     var idIndicesMap = {};
	//     var idx = 0;
	//     for (var i = 0; i < newIdList.length; i++) {
	//         idIndicesMap[newIdList[i]] = idx;
	//         newIdList[i] = idx++;
	//     }
	//     for (var i = 0; i < oldIdList.length; i++) {
	//         var oldId = oldIdList[i];
	//         // Same with newIdList
	//         if (idIndicesMap[oldId]) {
	//             oldIdList[i] = idIndicesMap[oldId];
	//         }
	//         else {
	//             oldIdList[i] = idx++;
	//         }
	//     }
	// }
	function diffData(oldData, newData) {
	  var diffResult = [];
	  newData.diff(oldData).add(function (idx) {
	    diffResult.push({
	      cmd: '+',
	      idx: idx
	    });
	  }).update(function (newIdx, oldIdx) {
	    diffResult.push({
	      cmd: '=',
	      idx: oldIdx,
	      idx1: newIdx
	    });
	  }).remove(function (idx) {
	    diffResult.push({
	      cmd: '-',
	      idx: idx
	    });
	  }).execute();
	  return diffResult;
	}
	
	function _default(oldData, newData, oldStackedOnPoints, newStackedOnPoints, oldCoordSys, newCoordSys, oldValueOrigin, newValueOrigin) {
	  var diff = diffData(oldData, newData); // var newIdList = newData.mapArray(newData.getId);
	  // var oldIdList = oldData.mapArray(oldData.getId);
	  // convertToIntId(newIdList, oldIdList);
	  // // FIXME One data ?
	  // diff = arrayDiff(oldIdList, newIdList);
	
	  var currPoints = [];
	  var nextPoints = []; // Points for stacking base line
	
	  var currStackedPoints = [];
	  var nextStackedPoints = [];
	  var status = [];
	  var sortedIndices = [];
	  var rawIndices = [];
	  var newDataOldCoordInfo = prepareDataCoordInfo(oldCoordSys, newData, oldValueOrigin);
	  var oldDataNewCoordInfo = prepareDataCoordInfo(newCoordSys, oldData, newValueOrigin);
	
	  for (var i = 0; i < diff.length; i++) {
	    var diffItem = diff[i];
	    var pointAdded = true; // FIXME, animation is not so perfect when dataZoom window moves fast
	    // Which is in case remvoing or add more than one data in the tail or head
	
	    switch (diffItem.cmd) {
	      case '=':
	        var currentPt = oldData.getItemLayout(diffItem.idx);
	        var nextPt = newData.getItemLayout(diffItem.idx1); // If previous data is NaN, use next point directly
	
	        if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {
	          currentPt = nextPt.slice();
	        }
	
	        currPoints.push(currentPt);
	        nextPoints.push(nextPt);
	        currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);
	        nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);
	        rawIndices.push(newData.getRawIndex(diffItem.idx1));
	        break;
	
	      case '+':
	        var idx = diffItem.idx;
	        currPoints.push(oldCoordSys.dataToPoint([newData.get(newDataOldCoordInfo.dataDimsForPoint[0], idx), newData.get(newDataOldCoordInfo.dataDimsForPoint[1], idx)]));
	        nextPoints.push(newData.getItemLayout(idx).slice());
	        currStackedPoints.push(getStackedOnPoint(newDataOldCoordInfo, oldCoordSys, newData, idx));
	        nextStackedPoints.push(newStackedOnPoints[idx]);
	        rawIndices.push(newData.getRawIndex(idx));
	        break;
	
	      case '-':
	        var idx = diffItem.idx;
	        var rawIndex = oldData.getRawIndex(idx); // Data is replaced. In the case of dynamic data queue
	        // FIXME FIXME FIXME
	
	        if (rawIndex !== idx) {
	          currPoints.push(oldData.getItemLayout(idx));
	          nextPoints.push(newCoordSys.dataToPoint([oldData.get(oldDataNewCoordInfo.dataDimsForPoint[0], idx), oldData.get(oldDataNewCoordInfo.dataDimsForPoint[1], idx)]));
	          currStackedPoints.push(oldStackedOnPoints[idx]);
	          nextStackedPoints.push(getStackedOnPoint(oldDataNewCoordInfo, newCoordSys, oldData, idx));
	          rawIndices.push(rawIndex);
	        } else {
	          pointAdded = false;
	        }
	
	    } // Original indices
	
	
	    if (pointAdded) {
	      status.push(diffItem);
	      sortedIndices.push(sortedIndices.length);
	    }
	  } // Diff result may be crossed if all items are changed
	  // Sort by data index
	
	
	  sortedIndices.sort(function (a, b) {
	    return rawIndices[a] - rawIndices[b];
	  });
	  var sortedCurrPoints = [];
	  var sortedNextPoints = [];
	  var sortedCurrStackedPoints = [];
	  var sortedNextStackedPoints = [];
	  var sortedStatus = [];
	
	  for (var i = 0; i < sortedIndices.length; i++) {
	    var idx = sortedIndices[i];
	    sortedCurrPoints[i] = currPoints[idx];
	    sortedNextPoints[i] = nextPoints[idx];
	    sortedCurrStackedPoints[i] = currStackedPoints[idx];
	    sortedNextStackedPoints[i] = nextStackedPoints[idx];
	    sortedStatus[i] = status[idx];
	  }
	
	  return {
	    current: sortedCurrPoints,
	    next: sortedNextPoints,
	    stackedOnCurrent: sortedCurrStackedPoints,
	    stackedOnNext: sortedNextStackedPoints,
	    status: sortedStatus
	  };
	}
	
	module.exports = _default;

/***/ }),
/* 1097 */
/***/ (function(module, exports, __webpack_require__) {

	var _dataStackHelper = __webpack_require__(1052);
	
	var isDimensionStacked = _dataStackHelper.isDimensionStacked;
	
	var _util = __webpack_require__(931);
	
	var map = _util.map;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * @param {Object} coordSys
	 * @param {module:echarts/data/List} data
	 * @param {string} valueOrigin lineSeries.option.areaStyle.origin
	 */
	function prepareDataCoordInfo(coordSys, data, valueOrigin) {
	  var baseAxis = coordSys.getBaseAxis();
	  var valueAxis = coordSys.getOtherAxis(baseAxis);
	  var valueStart = getValueStart(valueAxis, valueOrigin);
	  var baseAxisDim = baseAxis.dim;
	  var valueAxisDim = valueAxis.dim;
	  var valueDim = data.mapDimension(valueAxisDim);
	  var baseDim = data.mapDimension(baseAxisDim);
	  var baseDataOffset = valueAxisDim === 'x' || valueAxisDim === 'radius' ? 1 : 0;
	  var dims = map(coordSys.dimensions, function (coordDim) {
	    return data.mapDimension(coordDim);
	  });
	  var stacked;
	  var stackResultDim = data.getCalculationInfo('stackResultDimension');
	
	  if (stacked |= isDimensionStacked(data, dims[0]
	  /*, dims[1]*/
	  )) {
	    // jshint ignore:line
	    dims[0] = stackResultDim;
	  }
	
	  if (stacked |= isDimensionStacked(data, dims[1]
	  /*, dims[0]*/
	  )) {
	    // jshint ignore:line
	    dims[1] = stackResultDim;
	  }
	
	  return {
	    dataDimsForPoint: dims,
	    valueStart: valueStart,
	    valueAxisDim: valueAxisDim,
	    baseAxisDim: baseAxisDim,
	    stacked: !!stacked,
	    valueDim: valueDim,
	    baseDim: baseDim,
	    baseDataOffset: baseDataOffset,
	    stackedOverDimension: data.getCalculationInfo('stackedOverDimension')
	  };
	}
	
	function getValueStart(valueAxis, valueOrigin) {
	  var valueStart = 0;
	  var extent = valueAxis.scale.getExtent();
	
	  if (valueOrigin === 'start') {
	    valueStart = extent[0];
	  } else if (valueOrigin === 'end') {
	    valueStart = extent[1];
	  } // auto
	  else {
	      // Both positive
	      if (extent[0] > 0) {
	        valueStart = extent[0];
	      } // Both negative
	      else if (extent[1] < 0) {
	          valueStart = extent[1];
	        } // If is one positive, and one negative, onZero shall be true
	
	    }
	
	  return valueStart;
	}
	
	function getStackedOnPoint(dataCoordInfo, coordSys, data, idx) {
	  var value = NaN;
	
	  if (dataCoordInfo.stacked) {
	    value = data.get(data.getCalculationInfo('stackedOverDimension'), idx);
	  }
	
	  if (isNaN(value)) {
	    value = dataCoordInfo.valueStart;
	  }
	
	  var baseDataOffset = dataCoordInfo.baseDataOffset;
	  var stackedData = [];
	  stackedData[baseDataOffset] = data.get(dataCoordInfo.baseDim, idx);
	  stackedData[1 - baseDataOffset] = value;
	  return coordSys.dataToPoint(stackedData);
	}
	
	exports.prepareDataCoordInfo = prepareDataCoordInfo;
	exports.getStackedOnPoint = getStackedOnPoint;

/***/ }),
/* 1098 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(978);
	
	var vec2 = __webpack_require__(933);
	
	var fixClipWithShadow = __webpack_require__(993);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Poly path support NaN point
	var vec2Min = vec2.min;
	var vec2Max = vec2.max;
	var scaleAndAdd = vec2.scaleAndAdd;
	var v2Copy = vec2.copy; // Temporary variable
	
	var v = [];
	var cp0 = [];
	var cp1 = [];
	
	function isPointNull(p) {
	  return isNaN(p[0]) || isNaN(p[1]);
	}
	
	function drawSegment(ctx, points, start, segLen, allLen, dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls) {
	  // if (smoothMonotone == null) {
	  //     if (isMono(points, 'x')) {
	  //         return drawMono(ctx, points, start, segLen, allLen,
	  //             dir, smoothMin, smoothMax, smooth, 'x', connectNulls);
	  //     }
	  //     else if (isMono(points, 'y')) {
	  //         return drawMono(ctx, points, start, segLen, allLen,
	  //             dir, smoothMin, smoothMax, smooth, 'y', connectNulls);
	  //     }
	  //     else {
	  //         return drawNonMono.apply(this, arguments);
	  //     }
	  // }
	  // else if (smoothMonotone !== 'none' && isMono(points, smoothMonotone)) {
	  //     return drawMono.apply(this, arguments);
	  // }
	  // else {
	  //     return drawNonMono.apply(this, arguments);
	  // }
	  if (smoothMonotone === 'none' || !smoothMonotone) {
	    return drawNonMono.apply(this, arguments);
	  } else {
	    return drawMono.apply(this, arguments);
	  }
	}
	/**
	 * Check if points is in monotone.
	 *
	 * @param {number[][]} points         Array of points which is in [x, y] form
	 * @param {string}     smoothMonotone 'x', 'y', or 'none', stating for which
	 *                                    dimension that is checking.
	 *                                    If is 'none', `drawNonMono` should be
	 *                                    called.
	 *                                    If is undefined, either being monotone
	 *                                    in 'x' or 'y' will call `drawMono`.
	 */
	// function isMono(points, smoothMonotone) {
	//     if (points.length <= 1) {
	//         return true;
	//     }
	//     var dim = smoothMonotone === 'x' ? 0 : 1;
	//     var last = points[0][dim];
	//     var lastDiff = 0;
	//     for (var i = 1; i < points.length; ++i) {
	//         var diff = points[i][dim] - last;
	//         if (!isNaN(diff) && !isNaN(lastDiff)
	//             && diff !== 0 && lastDiff !== 0
	//             && ((diff >= 0) !== (lastDiff >= 0))
	//         ) {
	//             return false;
	//         }
	//         if (!isNaN(diff) && diff !== 0) {
	//             lastDiff = diff;
	//             last = points[i][dim];
	//         }
	//     }
	//     return true;
	// }
	
	/**
	 * Draw smoothed line in monotone, in which only vertical or horizontal bezier
	 * control points will be used. This should be used when points are monotone
	 * either in x or y dimension.
	 */
	
	
	function drawMono(ctx, points, start, segLen, allLen, dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls) {
	  var prevIdx = 0;
	  var idx = start;
	
	  for (var k = 0; k < segLen; k++) {
	    var p = points[idx];
	
	    if (idx >= allLen || idx < 0) {
	      break;
	    }
	
	    if (isPointNull(p)) {
	      if (connectNulls) {
	        idx += dir;
	        continue;
	      }
	
	      break;
	    }
	
	    if (idx === start) {
	      ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);
	    } else {
	      if (smooth > 0) {
	        var prevP = points[prevIdx];
	        var dim = smoothMonotone === 'y' ? 1 : 0; // Length of control point to p, either in x or y, but not both
	
	        var ctrlLen = (p[dim] - prevP[dim]) * smooth;
	        v2Copy(cp0, prevP);
	        cp0[dim] = prevP[dim] + ctrlLen;
	        v2Copy(cp1, p);
	        cp1[dim] = p[dim] - ctrlLen;
	        ctx.bezierCurveTo(cp0[0], cp0[1], cp1[0], cp1[1], p[0], p[1]);
	      } else {
	        ctx.lineTo(p[0], p[1]);
	      }
	    }
	
	    prevIdx = idx;
	    idx += dir;
	  }
	
	  return k;
	}
	/**
	 * Draw smoothed line in non-monotone, in may cause undesired curve in extreme
	 * situations. This should be used when points are non-monotone neither in x or
	 * y dimension.
	 */
	
	
	function drawNonMono(ctx, points, start, segLen, allLen, dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls) {
	  var prevIdx = 0;
	  var idx = start;
	
	  for (var k = 0; k < segLen; k++) {
	    var p = points[idx];
	
	    if (idx >= allLen || idx < 0) {
	      break;
	    }
	
	    if (isPointNull(p)) {
	      if (connectNulls) {
	        idx += dir;
	        continue;
	      }
	
	      break;
	    }
	
	    if (idx === start) {
	      ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);
	      v2Copy(cp0, p);
	    } else {
	      if (smooth > 0) {
	        var nextIdx = idx + dir;
	        var nextP = points[nextIdx];
	
	        if (connectNulls) {
	          // Find next point not null
	          while (nextP && isPointNull(points[nextIdx])) {
	            nextIdx += dir;
	            nextP = points[nextIdx];
	          }
	        }
	
	        var ratioNextSeg = 0.5;
	        var prevP = points[prevIdx];
	        var nextP = points[nextIdx]; // Last point
	
	        if (!nextP || isPointNull(nextP)) {
	          v2Copy(cp1, p);
	        } else {
	          // If next data is null in not connect case
	          if (isPointNull(nextP) && !connectNulls) {
	            nextP = p;
	          }
	
	          vec2.sub(v, nextP, prevP);
	          var lenPrevSeg;
	          var lenNextSeg;
	
	          if (smoothMonotone === 'x' || smoothMonotone === 'y') {
	            var dim = smoothMonotone === 'x' ? 0 : 1;
	            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);
	            lenNextSeg = Math.abs(p[dim] - nextP[dim]);
	          } else {
	            lenPrevSeg = vec2.dist(p, prevP);
	            lenNextSeg = vec2.dist(p, nextP);
	          } // Use ratio of seg length
	
	
	          ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);
	          scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));
	        } // Smooth constraint
	
	
	        vec2Min(cp0, cp0, smoothMax);
	        vec2Max(cp0, cp0, smoothMin);
	        vec2Min(cp1, cp1, smoothMax);
	        vec2Max(cp1, cp1, smoothMin);
	        ctx.bezierCurveTo(cp0[0], cp0[1], cp1[0], cp1[1], p[0], p[1]); // cp0 of next segment
	
	        scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);
	      } else {
	        ctx.lineTo(p[0], p[1]);
	      }
	    }
	
	    prevIdx = idx;
	    idx += dir;
	  }
	
	  return k;
	}
	
	function getBoundingBox(points, smoothConstraint) {
	  var ptMin = [Infinity, Infinity];
	  var ptMax = [-Infinity, -Infinity];
	
	  if (smoothConstraint) {
	    for (var i = 0; i < points.length; i++) {
	      var pt = points[i];
	
	      if (pt[0] < ptMin[0]) {
	        ptMin[0] = pt[0];
	      }
	
	      if (pt[1] < ptMin[1]) {
	        ptMin[1] = pt[1];
	      }
	
	      if (pt[0] > ptMax[0]) {
	        ptMax[0] = pt[0];
	      }
	
	      if (pt[1] > ptMax[1]) {
	        ptMax[1] = pt[1];
	      }
	    }
	  }
	
	  return {
	    min: smoothConstraint ? ptMin : ptMax,
	    max: smoothConstraint ? ptMax : ptMin
	  };
	}
	
	var Polyline = Path.extend({
	  type: 'ec-polyline',
	  shape: {
	    points: [],
	    smooth: 0,
	    smoothConstraint: true,
	    smoothMonotone: null,
	    connectNulls: false
	  },
	  style: {
	    fill: null,
	    stroke: '#000'
	  },
	  brush: fixClipWithShadow(Path.prototype.brush),
	  buildPath: function (ctx, shape) {
	    var points = shape.points;
	    var i = 0;
	    var len = points.length;
	    var result = getBoundingBox(points, shape.smoothConstraint);
	
	    if (shape.connectNulls) {
	      // Must remove first and last null values avoid draw error in polygon
	      for (; len > 0; len--) {
	        if (!isPointNull(points[len - 1])) {
	          break;
	        }
	      }
	
	      for (; i < len; i++) {
	        if (!isPointNull(points[i])) {
	          break;
	        }
	      }
	    }
	
	    while (i < len) {
	      i += drawSegment(ctx, points, i, len, len, 1, result.min, result.max, shape.smooth, shape.smoothMonotone, shape.connectNulls) + 1;
	    }
	  }
	});
	var Polygon = Path.extend({
	  type: 'ec-polygon',
	  shape: {
	    points: [],
	    // Offset between stacked base points and points
	    stackedOnPoints: [],
	    smooth: 0,
	    stackedOnSmooth: 0,
	    smoothConstraint: true,
	    smoothMonotone: null,
	    connectNulls: false
	  },
	  brush: fixClipWithShadow(Path.prototype.brush),
	  buildPath: function (ctx, shape) {
	    var points = shape.points;
	    var stackedOnPoints = shape.stackedOnPoints;
	    var i = 0;
	    var len = points.length;
	    var smoothMonotone = shape.smoothMonotone;
	    var bbox = getBoundingBox(points, shape.smoothConstraint);
	    var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);
	
	    if (shape.connectNulls) {
	      // Must remove first and last null values avoid draw error in polygon
	      for (; len > 0; len--) {
	        if (!isPointNull(points[len - 1])) {
	          break;
	        }
	      }
	
	      for (; i < len; i++) {
	        if (!isPointNull(points[i])) {
	          break;
	        }
	      }
	    }
	
	    while (i < len) {
	      var k = drawSegment(ctx, points, i, len, len, 1, bbox.min, bbox.max, shape.smooth, smoothMonotone, shape.connectNulls);
	      drawSegment(ctx, stackedOnPoints, i + k - 1, k, len, -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth, smoothMonotone, shape.connectNulls);
	      i += k + 1;
	      ctx.closePath();
	    }
	  }
	});
	exports.Polyline = Polyline;
	exports.Polygon = Polygon;

/***/ }),
/* 1099 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function _default(seriesType, defaultSymbolType, legendSymbol) {
	  // Encoding visual for all series include which is filtered for legend drawing
	  return {
	    seriesType: seriesType,
	    // For legend.
	    performRawSeries: true,
	    reset: function (seriesModel, ecModel, api) {
	      var data = seriesModel.getData();
	      var symbolType = seriesModel.get('symbol') || defaultSymbolType;
	      var symbolSize = seriesModel.get('symbolSize');
	      var keepAspect = seriesModel.get('symbolKeepAspect');
	      data.setVisual({
	        legendSymbol: legendSymbol || symbolType,
	        symbol: symbolType,
	        symbolSize: symbolSize,
	        symbolKeepAspect: keepAspect
	      }); // Only visible series has each data be visual encoded
	
	      if (ecModel.isSeriesFiltered(seriesModel)) {
	        return;
	      }
	
	      var hasCallback = typeof symbolSize === 'function';
	
	      function dataEach(data, idx) {
	        if (typeof symbolSize === 'function') {
	          var rawValue = seriesModel.getRawValue(idx); // FIXME
	
	          var params = seriesModel.getDataParams(idx);
	          data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));
	        }
	
	        if (data.hasItemOption) {
	          var itemModel = data.getItemModel(idx);
	          var itemSymbolType = itemModel.getShallow('symbol', true);
	          var itemSymbolSize = itemModel.getShallow('symbolSize', true);
	          var itemSymbolKeepAspect = itemModel.getShallow('symbolKeepAspect', true); // If has item symbol
	
	          if (itemSymbolType != null) {
	            data.setItemVisual(idx, 'symbol', itemSymbolType);
	          }
	
	          if (itemSymbolSize != null) {
	            // PENDING Transform symbolSize ?
	            data.setItemVisual(idx, 'symbolSize', itemSymbolSize);
	          }
	
	          if (itemSymbolKeepAspect != null) {
	            data.setItemVisual(idx, 'symbolKeepAspect', itemSymbolKeepAspect);
	          }
	        }
	      }
	
	      return {
	        dataEach: data.hasItemOption || hasCallback ? dataEach : null
	      };
	    }
	  };
	}
	
	module.exports = _default;

/***/ }),
/* 1100 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(931);
	
	var map = _util.map;
	
	var createRenderPlanner = __webpack_require__(1034);
	
	var _dataStackHelper = __webpack_require__(1052);
	
	var isDimensionStacked = _dataStackHelper.isDimensionStacked;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function _default(seriesType) {
	  return {
	    seriesType: seriesType,
	    plan: createRenderPlanner(),
	    reset: function (seriesModel) {
	      var data = seriesModel.getData();
	      var coordSys = seriesModel.coordinateSystem;
	      var pipelineContext = seriesModel.pipelineContext;
	      var isLargeRender = pipelineContext.large;
	
	      if (!coordSys) {
	        return;
	      }
	
	      var dims = map(coordSys.dimensions, function (dim) {
	        return data.mapDimension(dim);
	      }).slice(0, 2);
	      var dimLen = dims.length;
	      var stackResultDim = data.getCalculationInfo('stackResultDimension');
	
	      if (isDimensionStacked(data, dims[0]
	      /*, dims[1]*/
	      )) {
	        dims[0] = stackResultDim;
	      }
	
	      if (isDimensionStacked(data, dims[1]
	      /*, dims[0]*/
	      )) {
	        dims[1] = stackResultDim;
	      }
	
	      function progress(params, data) {
	        var segCount = params.end - params.start;
	        var points = isLargeRender && new Float32Array(segCount * dimLen);
	
	        for (var i = params.start, offset = 0, tmpIn = [], tmpOut = []; i < params.end; i++) {
	          var point;
	
	          if (dimLen === 1) {
	            var x = data.get(dims[0], i);
	            point = !isNaN(x) && coordSys.dataToPoint(x, null, tmpOut);
	          } else {
	            var x = tmpIn[0] = data.get(dims[0], i);
	            var y = tmpIn[1] = data.get(dims[1], i); // Also {Array.<number>}, not undefined to avoid if...else... statement
	
	            point = !isNaN(x) && !isNaN(y) && coordSys.dataToPoint(tmpIn, null, tmpOut);
	          }
	
	          if (isLargeRender) {
	            points[offset++] = point ? point[0] : NaN;
	            points[offset++] = point ? point[1] : NaN;
	          } else {
	            data.setItemLayout(i, point && point.slice() || [NaN, NaN]);
	          }
	        }
	
	        isLargeRender && data.setLayout('symbolPoints', points);
	      }
	
	      return dimLen && {
	        progress: progress
	      };
	    }
	  };
	}
	
	module.exports = _default;

/***/ }),
/* 1101 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var samplers = {
	  average: function (frame) {
	    var sum = 0;
	    var count = 0;
	
	    for (var i = 0; i < frame.length; i++) {
	      if (!isNaN(frame[i])) {
	        sum += frame[i];
	        count++;
	      }
	    } // Return NaN if count is 0
	
	
	    return count === 0 ? NaN : sum / count;
	  },
	  sum: function (frame) {
	    var sum = 0;
	
	    for (var i = 0; i < frame.length; i++) {
	      // Ignore NaN
	      sum += frame[i] || 0;
	    }
	
	    return sum;
	  },
	  max: function (frame) {
	    var max = -Infinity;
	
	    for (var i = 0; i < frame.length; i++) {
	      frame[i] > max && (max = frame[i]);
	    } // NaN will cause illegal axis extent.
	
	
	    return isFinite(max) ? max : NaN;
	  },
	  min: function (frame) {
	    var min = Infinity;
	
	    for (var i = 0; i < frame.length; i++) {
	      frame[i] < min && (min = frame[i]);
	    } // NaN will cause illegal axis extent.
	
	
	    return isFinite(min) ? min : NaN;
	  },
	  // TODO
	  // Median
	  nearest: function (frame) {
	    return frame[0];
	  }
	};
	
	var indexSampler = function (frame, value) {
	  return Math.round(frame.length / 2);
	};
	
	function _default(seriesType) {
	  return {
	    seriesType: seriesType,
	    modifyOutputEnd: true,
	    reset: function (seriesModel, ecModel, api) {
	      var data = seriesModel.getData();
	      var sampling = seriesModel.get('sampling');
	      var coordSys = seriesModel.coordinateSystem; // Only cartesian2d support down sampling
	
	      if (coordSys.type === 'cartesian2d' && sampling) {
	        var baseAxis = coordSys.getBaseAxis();
	        var valueAxis = coordSys.getOtherAxis(baseAxis);
	        var extent = baseAxis.getExtent(); // Coordinste system has been resized
	
	        var size = extent[1] - extent[0];
	        var rate = Math.round(data.count() / size);
	
	        if (rate > 1) {
	          var sampler;
	
	          if (typeof sampling === 'string') {
	            sampler = samplers[sampling];
	          } else if (typeof sampling === 'function') {
	            sampler = sampling;
	          }
	
	          if (sampler) {
	            // Only support sample the first dim mapped from value axis.
	            seriesModel.setData(data.downSample(data.mapDimension(valueAxis.dim), 1 / rate, sampler, indexSampler));
	          }
	        }
	      }
	    }
	  };
	}
	
	module.exports = _default;

/***/ }),
/* 1102 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(926);
	
	__webpack_require__(1103);
	
	__webpack_require__(1112);
	
	__webpack_require__(1113);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// FIXME Better way to pack data in graphic element
	
	/**
	 * @action
	 * @property {string} type
	 * @property {number} seriesIndex
	 * @property {number} dataIndex
	 * @property {number} [x]
	 * @property {number} [y]
	 */
	echarts.registerAction({
	  type: 'showTip',
	  event: 'showTip',
	  update: 'tooltip:manuallyShowTip'
	}, // noop
	function () {});
	echarts.registerAction({
	  type: 'hideTip',
	  event: 'hideTip',
	  update: 'tooltip:manuallyHideTip'
	}, // noop
	function () {});

/***/ }),
/* 1103 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(926);
	
	var zrUtil = __webpack_require__(931);
	
	var axisPointerModelHelper = __webpack_require__(1089);
	
	var axisTrigger = __webpack_require__(1104);
	
	__webpack_require__(1106);
	
	__webpack_require__(1107);
	
	__webpack_require__(1109);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// CartesianAxisPointer is not supposed to be required here. But consider
	// echarts.simple.js and online build tooltip, which only require gridSimple,
	// CartesianAxisPointer should be able to required somewhere.
	echarts.registerPreprocessor(function (option) {
	  // Always has a global axisPointerModel for default setting.
	  if (option) {
	    (!option.axisPointer || option.axisPointer.length === 0) && (option.axisPointer = {});
	    var link = option.axisPointer.link; // Normalize to array to avoid object mergin. But if link
	    // is not set, remain null/undefined, otherwise it will
	    // override existent link setting.
	
	    if (link && !zrUtil.isArray(link)) {
	      option.axisPointer.link = [link];
	    }
	  }
	}); // This process should proformed after coordinate systems created
	// and series data processed. So put it on statistic processing stage.
	
	echarts.registerProcessor(echarts.PRIORITY.PROCESSOR.STATISTIC, function (ecModel, api) {
	  // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.
	  // allAxesInfo should be updated when setOption performed.
	  ecModel.getComponent('axisPointer').coordSysAxesInfo = axisPointerModelHelper.collect(ecModel, api);
	}); // Broadcast to all views.
	
	echarts.registerAction({
	  type: 'updateAxisPointer',
	  event: 'updateAxisPointer',
	  update: ':updateAxisPointer'
	}, axisTrigger);

/***/ }),
/* 1104 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var _model = __webpack_require__(969);
	
	var makeInner = _model.makeInner;
	
	var modelHelper = __webpack_require__(1089);
	
	var findPointFromSeries = __webpack_require__(1105);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;
	var curry = zrUtil.curry;
	var inner = makeInner();
	/**
	 * Basic logic: check all axis, if they do not demand show/highlight,
	 * then hide/downplay them.
	 *
	 * @param {Object} coordSysAxesInfo
	 * @param {Object} payload
	 * @param {string} [payload.currTrigger] 'click' | 'mousemove' | 'leave'
	 * @param {Array.<number>} [payload.x] x and y, which are mandatory, specify a point to
	 *              trigger axisPointer and tooltip.
	 * @param {Array.<number>} [payload.y] x and y, which are mandatory, specify a point to
	 *              trigger axisPointer and tooltip.
	 * @param {Object} [payload.seriesIndex] finder, optional, restrict target axes.
	 * @param {Object} [payload.dataIndex] finder, restrict target axes.
	 * @param {Object} [payload.axesInfo] finder, restrict target axes.
	 *        [{
	 *          axisDim: 'x'|'y'|'angle'|...,
	 *          axisIndex: ...,
	 *          value: ...
	 *        }, ...]
	 * @param {Function} [payload.dispatchAction]
	 * @param {Object} [payload.tooltipOption]
	 * @param {Object|Array.<number>|Function} [payload.position] Tooltip position,
	 *        which can be specified in dispatchAction
	 * @param {module:echarts/model/Global} ecModel
	 * @param {module:echarts/ExtensionAPI} api
	 * @return {Object} content of event obj for echarts.connect.
	 */
	
	function _default(payload, ecModel, api) {
	  var currTrigger = payload.currTrigger;
	  var point = [payload.x, payload.y];
	  var finder = payload;
	  var dispatchAction = payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);
	  var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo; // Pending
	  // See #6121. But we are not able to reproduce it yet.
	
	  if (!coordSysAxesInfo) {
	    return;
	  }
	
	  if (illegalPoint(point)) {
	    // Used in the default behavior of `connection`: use the sample seriesIndex
	    // and dataIndex. And also used in the tooltipView trigger.
	    point = findPointFromSeries({
	      seriesIndex: finder.seriesIndex,
	      // Do not use dataIndexInside from other ec instance.
	      // FIXME: auto detect it?
	      dataIndex: finder.dataIndex
	    }, ecModel).point;
	  }
	
	  var isIllegalPoint = illegalPoint(point); // Axis and value can be specified when calling dispatchAction({type: 'updateAxisPointer'}).
	  // Notice: In this case, it is difficult to get the `point` (which is necessary to show
	  // tooltip, so if point is not given, we just use the point found by sample seriesIndex
	  // and dataIndex.
	
	  var inputAxesInfo = finder.axesInfo;
	  var axesInfo = coordSysAxesInfo.axesInfo;
	  var shouldHide = currTrigger === 'leave' || illegalPoint(point);
	  var outputFinder = {};
	  var showValueMap = {};
	  var dataByCoordSys = {
	    list: [],
	    map: {}
	  };
	  var updaters = {
	    showPointer: curry(showPointer, showValueMap),
	    showTooltip: curry(showTooltip, dataByCoordSys)
	  }; // Process for triggered axes.
	
	  each(coordSysAxesInfo.coordSysMap, function (coordSys, coordSysKey) {
	    // If a point given, it must be contained by the coordinate system.
	    var coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);
	    each(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function (axisInfo, key) {
	      var axis = axisInfo.axis;
	      var inputAxisInfo = findInputAxisInfo(inputAxesInfo, axisInfo); // If no inputAxesInfo, no axis is restricted.
	
	      if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {
	        var val = inputAxisInfo && inputAxisInfo.value;
	
	        if (val == null && !isIllegalPoint) {
	          val = axis.pointToData(point);
	        }
	
	        val != null && processOnAxis(axisInfo, val, updaters, false, outputFinder);
	      }
	    });
	  }); // Process for linked axes.
	
	  var linkTriggers = {};
	  each(axesInfo, function (tarAxisInfo, tarKey) {
	    var linkGroup = tarAxisInfo.linkGroup; // If axis has been triggered in the previous stage, it should not be triggered by link.
	
	    if (linkGroup && !showValueMap[tarKey]) {
	      each(linkGroup.axesInfo, function (srcAxisInfo, srcKey) {
	        var srcValItem = showValueMap[srcKey]; // If srcValItem exist, source axis is triggered, so link to target axis.
	
	        if (srcAxisInfo !== tarAxisInfo && srcValItem) {
	          var val = srcValItem.value;
	          linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(val, makeMapperParam(srcAxisInfo), makeMapperParam(tarAxisInfo))));
	          linkTriggers[tarAxisInfo.key] = val;
	        }
	      });
	    }
	  });
	  each(linkTriggers, function (val, tarKey) {
	    processOnAxis(axesInfo[tarKey], val, updaters, true, outputFinder);
	  });
	  updateModelActually(showValueMap, axesInfo, outputFinder);
	  dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction);
	  dispatchHighDownActually(axesInfo, dispatchAction, api);
	  return outputFinder;
	}
	
	function processOnAxis(axisInfo, newValue, updaters, dontSnap, outputFinder) {
	  var axis = axisInfo.axis;
	
	  if (axis.scale.isBlank() || !axis.containData(newValue)) {
	    return;
	  }
	
	  if (!axisInfo.involveSeries) {
	    updaters.showPointer(axisInfo, newValue);
	    return;
	  } // Heavy calculation. So put it after axis.containData checking.
	
	
	  var payloadInfo = buildPayloadsBySeries(newValue, axisInfo);
	  var payloadBatch = payloadInfo.payloadBatch;
	  var snapToValue = payloadInfo.snapToValue; // Fill content of event obj for echarts.connect.
	  // By defualt use the first involved series data as a sample to connect.
	
	  if (payloadBatch[0] && outputFinder.seriesIndex == null) {
	    zrUtil.extend(outputFinder, payloadBatch[0]);
	  } // If no linkSource input, this process is for collecting link
	  // target, where snap should not be accepted.
	
	
	  if (!dontSnap && axisInfo.snap) {
	    if (axis.containData(snapToValue) && snapToValue != null) {
	      newValue = snapToValue;
	    }
	  }
	
	  updaters.showPointer(axisInfo, newValue, payloadBatch, outputFinder); // Tooltip should always be snapToValue, otherwise there will be
	  // incorrect "axis value ~ series value" mapping displayed in tooltip.
	
	  updaters.showTooltip(axisInfo, payloadInfo, snapToValue);
	}
	
	function buildPayloadsBySeries(value, axisInfo) {
	  var axis = axisInfo.axis;
	  var dim = axis.dim;
	  var snapToValue = value;
	  var payloadBatch = [];
	  var minDist = Number.MAX_VALUE;
	  var minDiff = -1;
	  each(axisInfo.seriesModels, function (series, idx) {
	    var dataDim = series.getData().mapDimension(dim, true);
	    var seriesNestestValue;
	    var dataIndices;
	
	    if (series.getAxisTooltipData) {
	      var result = series.getAxisTooltipData(dataDim, value, axis);
	      dataIndices = result.dataIndices;
	      seriesNestestValue = result.nestestValue;
	    } else {
	      dataIndices = series.getData().indicesOfNearest(dataDim[0], value, // Add a threshold to avoid find the wrong dataIndex
	      // when data length is not same.
	      // false,
	      axis.type === 'category' ? 0.5 : null);
	
	      if (!dataIndices.length) {
	        return;
	      }
	
	      seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);
	    }
	
	    if (seriesNestestValue == null || !isFinite(seriesNestestValue)) {
	      return;
	    }
	
	    var diff = value - seriesNestestValue;
	    var dist = Math.abs(diff); // Consider category case
	
	    if (dist <= minDist) {
	      if (dist < minDist || diff >= 0 && minDiff < 0) {
	        minDist = dist;
	        minDiff = diff;
	        snapToValue = seriesNestestValue;
	        payloadBatch.length = 0;
	      }
	
	      each(dataIndices, function (dataIndex) {
	        payloadBatch.push({
	          seriesIndex: series.seriesIndex,
	          dataIndexInside: dataIndex,
	          dataIndex: series.getData().getRawIndex(dataIndex)
	        });
	      });
	    }
	  });
	  return {
	    payloadBatch: payloadBatch,
	    snapToValue: snapToValue
	  };
	}
	
	function showPointer(showValueMap, axisInfo, value, payloadBatch) {
	  showValueMap[axisInfo.key] = {
	    value: value,
	    payloadBatch: payloadBatch
	  };
	}
	
	function showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {
	  var payloadBatch = payloadInfo.payloadBatch;
	  var axis = axisInfo.axis;
	  var axisModel = axis.model;
	  var axisPointerModel = axisInfo.axisPointerModel; // If no data, do not create anything in dataByCoordSys,
	  // whose length will be used to judge whether dispatch action.
	
	  if (!axisInfo.triggerTooltip || !payloadBatch.length) {
	    return;
	  }
	
	  var coordSysModel = axisInfo.coordSys.model;
	  var coordSysKey = modelHelper.makeKey(coordSysModel);
	  var coordSysItem = dataByCoordSys.map[coordSysKey];
	
	  if (!coordSysItem) {
	    coordSysItem = dataByCoordSys.map[coordSysKey] = {
	      coordSysId: coordSysModel.id,
	      coordSysIndex: coordSysModel.componentIndex,
	      coordSysType: coordSysModel.type,
	      coordSysMainType: coordSysModel.mainType,
	      dataByAxis: []
	    };
	    dataByCoordSys.list.push(coordSysItem);
	  }
	
	  coordSysItem.dataByAxis.push({
	    axisDim: axis.dim,
	    axisIndex: axisModel.componentIndex,
	    axisType: axisModel.type,
	    axisId: axisModel.id,
	    value: value,
	    // Caustion: viewHelper.getValueLabel is actually on "view stage", which
	    // depends that all models have been updated. So it should not be performed
	    // here. Considering axisPointerModel used here is volatile, which is hard
	    // to be retrieve in TooltipView, we prepare parameters here.
	    valueLabelOpt: {
	      precision: axisPointerModel.get('label.precision'),
	      formatter: axisPointerModel.get('label.formatter')
	    },
	    seriesDataIndices: payloadBatch.slice()
	  });
	}
	
	function updateModelActually(showValueMap, axesInfo, outputFinder) {
	  var outputAxesInfo = outputFinder.axesInfo = []; // Basic logic: If no 'show' required, 'hide' this axisPointer.
	
	  each(axesInfo, function (axisInfo, key) {
	    var option = axisInfo.axisPointerModel.option;
	    var valItem = showValueMap[key];
	
	    if (valItem) {
	      !axisInfo.useHandle && (option.status = 'show');
	      option.value = valItem.value; // For label formatter param and highlight.
	
	      option.seriesDataIndices = (valItem.payloadBatch || []).slice();
	    } // When always show (e.g., handle used), remain
	    // original value and status.
	    else {
	        // If hide, value still need to be set, consider
	        // click legend to toggle axis blank.
	        !axisInfo.useHandle && (option.status = 'hide');
	      } // If status is 'hide', should be no info in payload.
	
	
	    option.status === 'show' && outputAxesInfo.push({
	      axisDim: axisInfo.axis.dim,
	      axisIndex: axisInfo.axis.model.componentIndex,
	      value: option.value
	    });
	  });
	}
	
	function dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction) {
	  // Basic logic: If no showTip required, hideTip will be dispatched.
	  if (illegalPoint(point) || !dataByCoordSys.list.length) {
	    dispatchAction({
	      type: 'hideTip'
	    });
	    return;
	  } // In most case only one axis (or event one series is used). It is
	  // convinient to fetch payload.seriesIndex and payload.dataIndex
	  // dirtectly. So put the first seriesIndex and dataIndex of the first
	  // axis on the payload.
	
	
	  var sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};
	  dispatchAction({
	    type: 'showTip',
	    escapeConnect: true,
	    x: point[0],
	    y: point[1],
	    tooltipOption: payload.tooltipOption,
	    position: payload.position,
	    dataIndexInside: sampleItem.dataIndexInside,
	    dataIndex: sampleItem.dataIndex,
	    seriesIndex: sampleItem.seriesIndex,
	    dataByCoordSys: dataByCoordSys.list
	  });
	}
	
	function dispatchHighDownActually(axesInfo, dispatchAction, api) {
	  // FIXME
	  // highlight status modification shoule be a stage of main process?
	  // (Consider confilct (e.g., legend and axisPointer) and setOption)
	  var zr = api.getZr();
	  var highDownKey = 'axisPointerLastHighlights';
	  var lastHighlights = inner(zr)[highDownKey] || {};
	  var newHighlights = inner(zr)[highDownKey] = {}; // Update highlight/downplay status according to axisPointer model.
	  // Build hash map and remove duplicate incidentally.
	
	  each(axesInfo, function (axisInfo, key) {
	    var option = axisInfo.axisPointerModel.option;
	    option.status === 'show' && each(option.seriesDataIndices, function (batchItem) {
	      var key = batchItem.seriesIndex + ' | ' + batchItem.dataIndex;
	      newHighlights[key] = batchItem;
	    });
	  }); // Diff.
	
	  var toHighlight = [];
	  var toDownplay = [];
	  zrUtil.each(lastHighlights, function (batchItem, key) {
	    !newHighlights[key] && toDownplay.push(batchItem);
	  });
	  zrUtil.each(newHighlights, function (batchItem, key) {
	    !lastHighlights[key] && toHighlight.push(batchItem);
	  });
	  toDownplay.length && api.dispatchAction({
	    type: 'downplay',
	    escapeConnect: true,
	    batch: toDownplay
	  });
	  toHighlight.length && api.dispatchAction({
	    type: 'highlight',
	    escapeConnect: true,
	    batch: toHighlight
	  });
	}
	
	function findInputAxisInfo(inputAxesInfo, axisInfo) {
	  for (var i = 0; i < (inputAxesInfo || []).length; i++) {
	    var inputAxisInfo = inputAxesInfo[i];
	
	    if (axisInfo.axis.dim === inputAxisInfo.axisDim && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex) {
	      return inputAxisInfo;
	    }
	  }
	}
	
	function makeMapperParam(axisInfo) {
	  var axisModel = axisInfo.axis.model;
	  var item = {};
	  var dim = item.axisDim = axisInfo.axis.dim;
	  item.axisIndex = item[dim + 'AxisIndex'] = axisModel.componentIndex;
	  item.axisName = item[dim + 'AxisName'] = axisModel.name;
	  item.axisId = item[dim + 'AxisId'] = axisModel.id;
	  return item;
	}
	
	function illegalPoint(point) {
	  return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);
	}
	
	module.exports = _default;

/***/ }),
/* 1105 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var modelUtil = __webpack_require__(969);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * @param {Object} finder contains {seriesIndex, dataIndex, dataIndexInside}
	 * @param {module:echarts/model/Global} ecModel
	 * @return {Object} {point: [x, y], el: ...} point Will not be null.
	 */
	function _default(finder, ecModel) {
	  var point = [];
	  var seriesIndex = finder.seriesIndex;
	  var seriesModel;
	
	  if (seriesIndex == null || !(seriesModel = ecModel.getSeriesByIndex(seriesIndex))) {
	    return {
	      point: []
	    };
	  }
	
	  var data = seriesModel.getData();
	  var dataIndex = modelUtil.queryDataIndex(data, finder);
	
	  if (dataIndex == null || dataIndex < 0 || zrUtil.isArray(dataIndex)) {
	    return {
	      point: []
	    };
	  }
	
	  var el = data.getItemGraphicEl(dataIndex);
	  var coordSys = seriesModel.coordinateSystem;
	
	  if (seriesModel.getTooltipPosition) {
	    point = seriesModel.getTooltipPosition(dataIndex) || [];
	  } else if (coordSys && coordSys.dataToPoint) {
	    point = coordSys.dataToPoint(data.getValues(zrUtil.map(coordSys.dimensions, function (dim) {
	      return data.mapDimension(dim);
	    }), dataIndex, true)) || [];
	  } else if (el) {
	    // Use graphic bounding rect
	    var rect = el.getBoundingRect().clone();
	    rect.applyTransform(el.transform);
	    point = [rect.x + rect.width / 2, rect.y + rect.height / 2];
	  }
	
	  return {
	    point: point,
	    el: el
	  };
	}
	
	module.exports = _default;

/***/ }),
/* 1106 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(926);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var AxisPointerModel = echarts.extendComponentModel({
	  type: 'axisPointer',
	  coordSysAxesInfo: null,
	  defaultOption: {
	    // 'auto' means that show when triggered by tooltip or handle.
	    show: 'auto',
	    // 'click' | 'mousemove' | 'none'
	    triggerOn: null,
	    // set default in AxisPonterView.js
	    zlevel: 0,
	    z: 50,
	    type: 'line',
	    // axispointer triggered by tootip determine snap automatically,
	    // see `modelHelper`.
	    snap: false,
	    triggerTooltip: true,
	    value: null,
	    status: null,
	    // Init value depends on whether handle is used.
	    // [group0, group1, ...]
	    // Each group can be: {
	    //      mapper: function () {},
	    //      singleTooltip: 'multiple',  // 'multiple' or 'single'
	    //      xAxisId: ...,
	    //      yAxisName: ...,
	    //      angleAxisIndex: ...
	    // }
	    // mapper: can be ignored.
	    //      input: {axisInfo, value}
	    //      output: {axisInfo, value}
	    link: [],
	    // Do not set 'auto' here, otherwise global animation: false
	    // will not effect at this axispointer.
	    animation: null,
	    animationDurationUpdate: 200,
	    lineStyle: {
	      color: '#aaa',
	      width: 1,
	      type: 'solid'
	    },
	    shadowStyle: {
	      color: 'rgba(150,150,150,0.3)'
	    },
	    label: {
	      show: true,
	      formatter: null,
	      // string | Function
	      precision: 'auto',
	      // Or a number like 0, 1, 2 ...
	      margin: 3,
	      color: '#fff',
	      padding: [5, 7, 5, 7],
	      backgroundColor: 'auto',
	      // default: axis line color
	      borderColor: null,
	      borderWidth: 0,
	      shadowBlur: 3,
	      shadowColor: '#aaa' // Considering applicability, common style should
	      // better not have shadowOffset.
	      // shadowOffsetX: 0,
	      // shadowOffsetY: 2
	
	    },
	    handle: {
	      show: false,
	      icon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z',
	      // jshint ignore:line
	      size: 45,
	      // handle margin is from symbol center to axis, which is stable when circular move.
	      margin: 50,
	      // color: '#1b8bbd'
	      // color: '#2f4554'
	      color: '#333',
	      shadowBlur: 3,
	      shadowColor: '#aaa',
	      shadowOffsetX: 0,
	      shadowOffsetY: 2,
	      // For mobile performance
	      throttle: 40
	    }
	  }
	});
	var _default = AxisPointerModel;
	module.exports = _default;

/***/ }),
/* 1107 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(926);
	
	var globalListener = __webpack_require__(1108);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var AxisPointerView = echarts.extendComponentView({
	  type: 'axisPointer',
	  render: function (globalAxisPointerModel, ecModel, api) {
	    var globalTooltipModel = ecModel.getComponent('tooltip');
	    var triggerOn = globalAxisPointerModel.get('triggerOn') || globalTooltipModel && globalTooltipModel.get('triggerOn') || 'mousemove|click'; // Register global listener in AxisPointerView to enable
	    // AxisPointerView to be independent to Tooltip.
	
	    globalListener.register('axisPointer', api, function (currTrigger, e, dispatchAction) {
	      // If 'none', it is not controlled by mouse totally.
	      if (triggerOn !== 'none' && (currTrigger === 'leave' || triggerOn.indexOf(currTrigger) >= 0)) {
	        dispatchAction({
	          type: 'updateAxisPointer',
	          currTrigger: currTrigger,
	          x: e && e.offsetX,
	          y: e && e.offsetY
	        });
	      }
	    });
	  },
	
	  /**
	   * @override
	   */
	  remove: function (ecModel, api) {
	    globalListener.unregister(api.getZr(), 'axisPointer');
	    AxisPointerView.superApply(this._model, 'remove', arguments);
	  },
	
	  /**
	   * @override
	   */
	  dispose: function (ecModel, api) {
	    globalListener.unregister('axisPointer', api);
	    AxisPointerView.superApply(this._model, 'dispose', arguments);
	  }
	});
	var _default = AxisPointerView;
	module.exports = _default;

/***/ }),
/* 1108 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var env = __webpack_require__(930);
	
	var _model = __webpack_require__(969);
	
	var makeInner = _model.makeInner;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var inner = makeInner();
	var each = zrUtil.each;
	/**
	 * @param {string} key
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {Function} handler
	 *      param: {string} currTrigger
	 *      param: {Array.<number>} point
	 */
	
	function register(key, api, handler) {
	  if (env.node) {
	    return;
	  }
	
	  var zr = api.getZr();
	  inner(zr).records || (inner(zr).records = {});
	  initGlobalListeners(zr, api);
	  var record = inner(zr).records[key] || (inner(zr).records[key] = {});
	  record.handler = handler;
	}
	
	function initGlobalListeners(zr, api) {
	  if (inner(zr).initialized) {
	    return;
	  }
	
	  inner(zr).initialized = true;
	  useHandler('click', zrUtil.curry(doEnter, 'click'));
	  useHandler('mousemove', zrUtil.curry(doEnter, 'mousemove')); // useHandler('mouseout', onLeave);
	
	  useHandler('globalout', onLeave);
	
	  function useHandler(eventType, cb) {
	    zr.on(eventType, function (e) {
	      var dis = makeDispatchAction(api);
	      each(inner(zr).records, function (record) {
	        record && cb(record, e, dis.dispatchAction);
	      });
	      dispatchTooltipFinally(dis.pendings, api);
	    });
	  }
	}
	
	function dispatchTooltipFinally(pendings, api) {
	  var showLen = pendings.showTip.length;
	  var hideLen = pendings.hideTip.length;
	  var actuallyPayload;
	
	  if (showLen) {
	    actuallyPayload = pendings.showTip[showLen - 1];
	  } else if (hideLen) {
	    actuallyPayload = pendings.hideTip[hideLen - 1];
	  }
	
	  if (actuallyPayload) {
	    actuallyPayload.dispatchAction = null;
	    api.dispatchAction(actuallyPayload);
	  }
	}
	
	function onLeave(record, e, dispatchAction) {
	  record.handler('leave', null, dispatchAction);
	}
	
	function doEnter(currTrigger, record, e, dispatchAction) {
	  record.handler(currTrigger, e, dispatchAction);
	}
	
	function makeDispatchAction(api) {
	  var pendings = {
	    showTip: [],
	    hideTip: []
	  }; // FIXME
	  // better approach?
	  // 'showTip' and 'hideTip' can be triggered by axisPointer and tooltip,
	  // which may be conflict, (axisPointer call showTip but tooltip call hideTip);
	  // So we have to add "final stage" to merge those dispatched actions.
	
	  var dispatchAction = function (payload) {
	    var pendingList = pendings[payload.type];
	
	    if (pendingList) {
	      pendingList.push(payload);
	    } else {
	      payload.dispatchAction = dispatchAction;
	      api.dispatchAction(payload);
	    }
	  };
	
	  return {
	    dispatchAction: dispatchAction,
	    pendings: pendings
	  };
	}
	/**
	 * @param {string} key
	 * @param {module:echarts/ExtensionAPI} api
	 */
	
	
	function unregister(key, api) {
	  if (env.node) {
	    return;
	  }
	
	  var zr = api.getZr();
	  var record = (inner(zr).records || {})[key];
	
	  if (record) {
	    inner(zr).records[key] = null;
	  }
	}
	
	exports.register = register;
	exports.unregister = unregister;

/***/ }),
/* 1109 */
/***/ (function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(976);
	
	var BaseAxisPointer = __webpack_require__(1110);
	
	var viewHelper = __webpack_require__(1111);
	
	var cartesianAxisHelper = __webpack_require__(1090);
	
	var AxisView = __webpack_require__(1088);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var CartesianAxisPointer = BaseAxisPointer.extend({
	  /**
	   * @override
	   */
	  makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {
	    var axis = axisModel.axis;
	    var grid = axis.grid;
	    var axisPointerType = axisPointerModel.get('type');
	    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();
	    var pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, true));
	
	    if (axisPointerType && axisPointerType !== 'none') {
	      var elStyle = viewHelper.buildElStyle(axisPointerModel);
	      var pointerOption = pointerShapeBuilder[axisPointerType](axis, pixelValue, otherExtent, elStyle);
	      pointerOption.style = elStyle;
	      elOption.graphicKey = pointerOption.type;
	      elOption.pointer = pointerOption;
	    }
	
	    var layoutInfo = cartesianAxisHelper.layout(grid.model, axisModel);
	    viewHelper.buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api);
	  },
	
	  /**
	   * @override
	   */
	  getHandleTransform: function (value, axisModel, axisPointerModel) {
	    var layoutInfo = cartesianAxisHelper.layout(axisModel.axis.grid.model, axisModel, {
	      labelInside: false
	    });
	    layoutInfo.labelMargin = axisPointerModel.get('handle.margin');
	    return {
	      position: viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo),
	      rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)
	    };
	  },
	
	  /**
	   * @override
	   */
	  updateHandleTransform: function (transform, delta, axisModel, axisPointerModel) {
	    var axis = axisModel.axis;
	    var grid = axis.grid;
	    var axisExtent = axis.getGlobalExtent(true);
	    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();
	    var dimIndex = axis.dim === 'x' ? 0 : 1;
	    var currPosition = transform.position;
	    currPosition[dimIndex] += delta[dimIndex];
	    currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);
	    currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);
	    var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;
	    var cursorPoint = [cursorOtherValue, cursorOtherValue];
	    cursorPoint[dimIndex] = currPosition[dimIndex]; // Make tooltip do not overlap axisPointer and in the middle of the grid.
	
	    var tooltipOptions = [{
	      verticalAlign: 'middle'
	    }, {
	      align: 'center'
	    }];
	    return {
	      position: currPosition,
	      rotation: transform.rotation,
	      cursorPoint: cursorPoint,
	      tooltipOption: tooltipOptions[dimIndex]
	    };
	  }
	});
	
	function getCartesian(grid, axis) {
	  var opt = {};
	  opt[axis.dim + 'AxisIndex'] = axis.index;
	  return grid.getCartesian(opt);
	}
	
	var pointerShapeBuilder = {
	  line: function (axis, pixelValue, otherExtent, elStyle) {
	    var targetShape = viewHelper.makeLineShape([pixelValue, otherExtent[0]], [pixelValue, otherExtent[1]], getAxisDimIndex(axis));
	    graphic.subPixelOptimizeLine({
	      shape: targetShape,
	      style: elStyle
	    });
	    return {
	      type: 'Line',
	      shape: targetShape
	    };
	  },
	  shadow: function (axis, pixelValue, otherExtent, elStyle) {
	    var bandWidth = Math.max(1, axis.getBandWidth());
	    var span = otherExtent[1] - otherExtent[0];
	    return {
	      type: 'Rect',
	      shape: viewHelper.makeRectShape([pixelValue - bandWidth / 2, otherExtent[0]], [bandWidth, span], getAxisDimIndex(axis))
	    };
	  }
	};
	
	function getAxisDimIndex(axis) {
	  return axis.dim === 'x' ? 0 : 1;
	}
	
	AxisView.registerAxisPointerClass('CartesianAxisPointer', CartesianAxisPointer);
	var _default = CartesianAxisPointer;
	module.exports = _default;

/***/ }),
/* 1110 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var clazzUtil = __webpack_require__(971);
	
	var graphic = __webpack_require__(976);
	
	var axisPointerModelHelper = __webpack_require__(1089);
	
	var eventTool = __webpack_require__(965);
	
	var throttleUtil = __webpack_require__(1035);
	
	var _model = __webpack_require__(969);
	
	var makeInner = _model.makeInner;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var inner = makeInner();
	var clone = zrUtil.clone;
	var bind = zrUtil.bind;
	/**
	 * Base axis pointer class in 2D.
	 * Implemenents {module:echarts/component/axis/IAxisPointer}.
	 */
	
	function BaseAxisPointer() {}
	
	BaseAxisPointer.prototype = {
	  /**
	   * @private
	   */
	  _group: null,
	
	  /**
	   * @private
	   */
	  _lastGraphicKey: null,
	
	  /**
	   * @private
	   */
	  _handle: null,
	
	  /**
	   * @private
	   */
	  _dragging: false,
	
	  /**
	   * @private
	   */
	  _lastValue: null,
	
	  /**
	   * @private
	   */
	  _lastStatus: null,
	
	  /**
	   * @private
	   */
	  _payloadInfo: null,
	
	  /**
	   * In px, arbitrary value. Do not set too small,
	   * no animation is ok for most cases.
	   * @protected
	   */
	  animationThreshold: 15,
	
	  /**
	   * @implement
	   */
	  render: function (axisModel, axisPointerModel, api, forceRender) {
	    var value = axisPointerModel.get('value');
	    var status = axisPointerModel.get('status'); // Bind them to `this`, not in closure, otherwise they will not
	    // be replaced when user calling setOption in not merge mode.
	
	    this._axisModel = axisModel;
	    this._axisPointerModel = axisPointerModel;
	    this._api = api; // Optimize: `render` will be called repeatly during mouse move.
	    // So it is power consuming if performing `render` each time,
	    // especially on mobile device.
	
	    if (!forceRender && this._lastValue === value && this._lastStatus === status) {
	      return;
	    }
	
	    this._lastValue = value;
	    this._lastStatus = status;
	    var group = this._group;
	    var handle = this._handle;
	
	    if (!status || status === 'hide') {
	      // Do not clear here, for animation better.
	      group && group.hide();
	      handle && handle.hide();
	      return;
	    }
	
	    group && group.show();
	    handle && handle.show(); // Otherwise status is 'show'
	
	    var elOption = {};
	    this.makeElOption(elOption, value, axisModel, axisPointerModel, api); // Enable change axis pointer type.
	
	    var graphicKey = elOption.graphicKey;
	
	    if (graphicKey !== this._lastGraphicKey) {
	      this.clear(api);
	    }
	
	    this._lastGraphicKey = graphicKey;
	    var moveAnimation = this._moveAnimation = this.determineAnimation(axisModel, axisPointerModel);
	
	    if (!group) {
	      group = this._group = new graphic.Group();
	      this.createPointerEl(group, elOption, axisModel, axisPointerModel);
	      this.createLabelEl(group, elOption, axisModel, axisPointerModel);
	      api.getZr().add(group);
	    } else {
	      var doUpdateProps = zrUtil.curry(updateProps, axisPointerModel, moveAnimation);
	      this.updatePointerEl(group, elOption, doUpdateProps, axisPointerModel);
	      this.updateLabelEl(group, elOption, doUpdateProps, axisPointerModel);
	    }
	
	    updateMandatoryProps(group, axisPointerModel, true);
	
	    this._renderHandle(value);
	  },
	
	  /**
	   * @implement
	   */
	  remove: function (api) {
	    this.clear(api);
	  },
	
	  /**
	   * @implement
	   */
	  dispose: function (api) {
	    this.clear(api);
	  },
	
	  /**
	   * @protected
	   */
	  determineAnimation: function (axisModel, axisPointerModel) {
	    var animation = axisPointerModel.get('animation');
	    var axis = axisModel.axis;
	    var isCategoryAxis = axis.type === 'category';
	    var useSnap = axisPointerModel.get('snap'); // Value axis without snap always do not snap.
	
	    if (!useSnap && !isCategoryAxis) {
	      return false;
	    }
	
	    if (animation === 'auto' || animation == null) {
	      var animationThreshold = this.animationThreshold;
	
	      if (isCategoryAxis && axis.getBandWidth() > animationThreshold) {
	        return true;
	      } // It is important to auto animation when snap used. Consider if there is
	      // a dataZoom, animation will be disabled when too many points exist, while
	      // it will be enabled for better visual effect when little points exist.
	
	
	      if (useSnap) {
	        var seriesDataCount = axisPointerModelHelper.getAxisInfo(axisModel).seriesDataCount;
	        var axisExtent = axis.getExtent(); // Approximate band width
	
	        return Math.abs(axisExtent[0] - axisExtent[1]) / seriesDataCount > animationThreshold;
	      }
	
	      return false;
	    }
	
	    return animation === true;
	  },
	
	  /**
	   * add {pointer, label, graphicKey} to elOption
	   * @protected
	   */
	  makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {// Shoule be implemenented by sub-class.
	  },
	
	  /**
	   * @protected
	   */
	  createPointerEl: function (group, elOption, axisModel, axisPointerModel) {
	    var pointerOption = elOption.pointer;
	
	    if (pointerOption) {
	      var pointerEl = inner(group).pointerEl = new graphic[pointerOption.type](clone(elOption.pointer));
	      group.add(pointerEl);
	    }
	  },
	
	  /**
	   * @protected
	   */
	  createLabelEl: function (group, elOption, axisModel, axisPointerModel) {
	    if (elOption.label) {
	      var labelEl = inner(group).labelEl = new graphic.Rect(clone(elOption.label));
	      group.add(labelEl);
	      updateLabelShowHide(labelEl, axisPointerModel);
	    }
	  },
	
	  /**
	   * @protected
	   */
	  updatePointerEl: function (group, elOption, updateProps) {
	    var pointerEl = inner(group).pointerEl;
	
	    if (pointerEl) {
	      pointerEl.setStyle(elOption.pointer.style);
	      updateProps(pointerEl, {
	        shape: elOption.pointer.shape
	      });
	    }
	  },
	
	  /**
	   * @protected
	   */
	  updateLabelEl: function (group, elOption, updateProps, axisPointerModel) {
	    var labelEl = inner(group).labelEl;
	
	    if (labelEl) {
	      labelEl.setStyle(elOption.label.style);
	      updateProps(labelEl, {
	        // Consider text length change in vertical axis, animation should
	        // be used on shape, otherwise the effect will be weird.
	        shape: elOption.label.shape,
	        position: elOption.label.position
	      });
	      updateLabelShowHide(labelEl, axisPointerModel);
	    }
	  },
	
	  /**
	   * @private
	   */
	  _renderHandle: function (value) {
	    if (this._dragging || !this.updateHandleTransform) {
	      return;
	    }
	
	    var axisPointerModel = this._axisPointerModel;
	
	    var zr = this._api.getZr();
	
	    var handle = this._handle;
	    var handleModel = axisPointerModel.getModel('handle');
	    var status = axisPointerModel.get('status');
	
	    if (!handleModel.get('show') || !status || status === 'hide') {
	      handle && zr.remove(handle);
	      this._handle = null;
	      return;
	    }
	
	    var isInit;
	
	    if (!this._handle) {
	      isInit = true;
	      handle = this._handle = graphic.createIcon(handleModel.get('icon'), {
	        cursor: 'move',
	        draggable: true,
	        onmousemove: function (e) {
	          // Fot mobile devicem, prevent screen slider on the button.
	          eventTool.stop(e.event);
	        },
	        onmousedown: bind(this._onHandleDragMove, this, 0, 0),
	        drift: bind(this._onHandleDragMove, this),
	        ondragend: bind(this._onHandleDragEnd, this)
	      });
	      zr.add(handle);
	    }
	
	    updateMandatoryProps(handle, axisPointerModel, false); // update style
	
	    var includeStyles = ['color', 'borderColor', 'borderWidth', 'opacity', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];
	    handle.setStyle(handleModel.getItemStyle(null, includeStyles)); // update position
	
	    var handleSize = handleModel.get('size');
	
	    if (!zrUtil.isArray(handleSize)) {
	      handleSize = [handleSize, handleSize];
	    }
	
	    handle.attr('scale', [handleSize[0] / 2, handleSize[1] / 2]);
	    throttleUtil.createOrUpdate(this, '_doDispatchAxisPointer', handleModel.get('throttle') || 0, 'fixRate');
	
	    this._moveHandleToValue(value, isInit);
	  },
	
	  /**
	   * @private
	   */
	  _moveHandleToValue: function (value, isInit) {
	    updateProps(this._axisPointerModel, !isInit && this._moveAnimation, this._handle, getHandleTransProps(this.getHandleTransform(value, this._axisModel, this._axisPointerModel)));
	  },
	
	  /**
	   * @private
	   */
	  _onHandleDragMove: function (dx, dy) {
	    var handle = this._handle;
	
	    if (!handle) {
	      return;
	    }
	
	    this._dragging = true; // Persistent for throttle.
	
	    var trans = this.updateHandleTransform(getHandleTransProps(handle), [dx, dy], this._axisModel, this._axisPointerModel);
	    this._payloadInfo = trans;
	    handle.stopAnimation();
	    handle.attr(getHandleTransProps(trans));
	    inner(handle).lastProp = null;
	
	    this._doDispatchAxisPointer();
	  },
	
	  /**
	   * Throttled method.
	   * @private
	   */
	  _doDispatchAxisPointer: function () {
	    var handle = this._handle;
	
	    if (!handle) {
	      return;
	    }
	
	    var payloadInfo = this._payloadInfo;
	    var axisModel = this._axisModel;
	
	    this._api.dispatchAction({
	      type: 'updateAxisPointer',
	      x: payloadInfo.cursorPoint[0],
	      y: payloadInfo.cursorPoint[1],
	      tooltipOption: payloadInfo.tooltipOption,
	      axesInfo: [{
	        axisDim: axisModel.axis.dim,
	        axisIndex: axisModel.componentIndex
	      }]
	    });
	  },
	
	  /**
	   * @private
	   */
	  _onHandleDragEnd: function (moveAnimation) {
	    this._dragging = false;
	    var handle = this._handle;
	
	    if (!handle) {
	      return;
	    }
	
	    var value = this._axisPointerModel.get('value'); // Consider snap or categroy axis, handle may be not consistent with
	    // axisPointer. So move handle to align the exact value position when
	    // drag ended.
	
	
	    this._moveHandleToValue(value); // For the effect: tooltip will be shown when finger holding on handle
	    // button, and will be hidden after finger left handle button.
	
	
	    this._api.dispatchAction({
	      type: 'hideTip'
	    });
	  },
	
	  /**
	   * Should be implemenented by sub-class if support `handle`.
	   * @protected
	   * @param {number} value
	   * @param {module:echarts/model/Model} axisModel
	   * @param {module:echarts/model/Model} axisPointerModel
	   * @return {Object} {position: [x, y], rotation: 0}
	   */
	  getHandleTransform: null,
	
	  /**
	   * * Should be implemenented by sub-class if support `handle`.
	   * @protected
	   * @param {Object} transform {position, rotation}
	   * @param {Array.<number>} delta [dx, dy]
	   * @param {module:echarts/model/Model} axisModel
	   * @param {module:echarts/model/Model} axisPointerModel
	   * @return {Object} {position: [x, y], rotation: 0, cursorPoint: [x, y]}
	   */
	  updateHandleTransform: null,
	
	  /**
	   * @private
	   */
	  clear: function (api) {
	    this._lastValue = null;
	    this._lastStatus = null;
	    var zr = api.getZr();
	    var group = this._group;
	    var handle = this._handle;
	
	    if (zr && group) {
	      this._lastGraphicKey = null;
	      group && zr.remove(group);
	      handle && zr.remove(handle);
	      this._group = null;
	      this._handle = null;
	      this._payloadInfo = null;
	    }
	  },
	
	  /**
	   * @protected
	   */
	  doClear: function () {// Implemented by sub-class if necessary.
	  },
	
	  /**
	   * @protected
	   * @param {Array.<number>} xy
	   * @param {Array.<number>} wh
	   * @param {number} [xDimIndex=0] or 1
	   */
	  buildLabel: function (xy, wh, xDimIndex) {
	    xDimIndex = xDimIndex || 0;
	    return {
	      x: xy[xDimIndex],
	      y: xy[1 - xDimIndex],
	      width: wh[xDimIndex],
	      height: wh[1 - xDimIndex]
	    };
	  }
	};
	BaseAxisPointer.prototype.constructor = BaseAxisPointer;
	
	function updateProps(animationModel, moveAnimation, el, props) {
	  // Animation optimize.
	  if (!propsEqual(inner(el).lastProp, props)) {
	    inner(el).lastProp = props;
	    moveAnimation ? graphic.updateProps(el, props, animationModel) : (el.stopAnimation(), el.attr(props));
	  }
	}
	
	function propsEqual(lastProps, newProps) {
	  if (zrUtil.isObject(lastProps) && zrUtil.isObject(newProps)) {
	    var equals = true;
	    zrUtil.each(newProps, function (item, key) {
	      equals = equals && propsEqual(lastProps[key], item);
	    });
	    return !!equals;
	  } else {
	    return lastProps === newProps;
	  }
	}
	
	function updateLabelShowHide(labelEl, axisPointerModel) {
	  labelEl[axisPointerModel.get('label.show') ? 'show' : 'hide']();
	}
	
	function getHandleTransProps(trans) {
	  return {
	    position: trans.position.slice(),
	    rotation: trans.rotation || 0
	  };
	}
	
	function updateMandatoryProps(group, axisPointerModel, silent) {
	  var z = axisPointerModel.get('z');
	  var zlevel = axisPointerModel.get('zlevel');
	  group && group.traverse(function (el) {
	    if (el.type !== 'group') {
	      z != null && (el.z = z);
	      zlevel != null && (el.zlevel = zlevel);
	      el.silent = silent;
	    }
	  });
	}
	
	clazzUtil.enableClassExtend(BaseAxisPointer);
	var _default = BaseAxisPointer;
	module.exports = _default;

/***/ }),
/* 1111 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var graphic = __webpack_require__(976);
	
	var textContain = __webpack_require__(961);
	
	var formatUtil = __webpack_require__(1014);
	
	var matrix = __webpack_require__(940);
	
	var axisHelper = __webpack_require__(1053);
	
	var AxisBuilder = __webpack_require__(1087);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * @param {module:echarts/model/Model} axisPointerModel
	 */
	function buildElStyle(axisPointerModel) {
	  var axisPointerType = axisPointerModel.get('type');
	  var styleModel = axisPointerModel.getModel(axisPointerType + 'Style');
	  var style;
	
	  if (axisPointerType === 'line') {
	    style = styleModel.getLineStyle();
	    style.fill = null;
	  } else if (axisPointerType === 'shadow') {
	    style = styleModel.getAreaStyle();
	    style.stroke = null;
	  }
	
	  return style;
	}
	/**
	 * @param {Function} labelPos {align, verticalAlign, position}
	 */
	
	
	function buildLabelElOption(elOption, axisModel, axisPointerModel, api, labelPos) {
	  var value = axisPointerModel.get('value');
	  var text = getValueLabel(value, axisModel.axis, axisModel.ecModel, axisPointerModel.get('seriesDataIndices'), {
	    precision: axisPointerModel.get('label.precision'),
	    formatter: axisPointerModel.get('label.formatter')
	  });
	  var labelModel = axisPointerModel.getModel('label');
	  var paddings = formatUtil.normalizeCssArray(labelModel.get('padding') || 0);
	  var font = labelModel.getFont();
	  var textRect = textContain.getBoundingRect(text, font);
	  var position = labelPos.position;
	  var width = textRect.width + paddings[1] + paddings[3];
	  var height = textRect.height + paddings[0] + paddings[2]; // Adjust by align.
	
	  var align = labelPos.align;
	  align === 'right' && (position[0] -= width);
	  align === 'center' && (position[0] -= width / 2);
	  var verticalAlign = labelPos.verticalAlign;
	  verticalAlign === 'bottom' && (position[1] -= height);
	  verticalAlign === 'middle' && (position[1] -= height / 2); // Not overflow ec container
	
	  confineInContainer(position, width, height, api);
	  var bgColor = labelModel.get('backgroundColor');
	
	  if (!bgColor || bgColor === 'auto') {
	    bgColor = axisModel.get('axisLine.lineStyle.color');
	  }
	
	  elOption.label = {
	    shape: {
	      x: 0,
	      y: 0,
	      width: width,
	      height: height,
	      r: labelModel.get('borderRadius')
	    },
	    position: position.slice(),
	    // TODO: rich
	    style: {
	      text: text,
	      textFont: font,
	      textFill: labelModel.getTextColor(),
	      textPosition: 'inside',
	      fill: bgColor,
	      stroke: labelModel.get('borderColor') || 'transparent',
	      lineWidth: labelModel.get('borderWidth') || 0,
	      shadowBlur: labelModel.get('shadowBlur'),
	      shadowColor: labelModel.get('shadowColor'),
	      shadowOffsetX: labelModel.get('shadowOffsetX'),
	      shadowOffsetY: labelModel.get('shadowOffsetY')
	    },
	    // Lable should be over axisPointer.
	    z2: 10
	  };
	} // Do not overflow ec container
	
	
	function confineInContainer(position, width, height, api) {
	  var viewWidth = api.getWidth();
	  var viewHeight = api.getHeight();
	  position[0] = Math.min(position[0] + width, viewWidth) - width;
	  position[1] = Math.min(position[1] + height, viewHeight) - height;
	  position[0] = Math.max(position[0], 0);
	  position[1] = Math.max(position[1], 0);
	}
	/**
	 * @param {number} value
	 * @param {module:echarts/coord/Axis} axis
	 * @param {module:echarts/model/Global} ecModel
	 * @param {Object} opt
	 * @param {Array.<Object>} seriesDataIndices
	 * @param {number|string} opt.precision 'auto' or a number
	 * @param {string|Function} opt.formatter label formatter
	 */
	
	
	function getValueLabel(value, axis, ecModel, seriesDataIndices, opt) {
	  value = axis.scale.parse(value);
	  var text = axis.scale.getLabel( // If `precision` is set, width can be fixed (like '12.00500'), which
	  // helps to debounce when when moving label.
	  value, {
	    precision: opt.precision
	  });
	  var formatter = opt.formatter;
	
	  if (formatter) {
	    var params = {
	      value: axisHelper.getAxisRawValue(axis, value),
	      seriesData: []
	    };
	    zrUtil.each(seriesDataIndices, function (idxItem) {
	      var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);
	      var dataIndex = idxItem.dataIndexInside;
	      var dataParams = series && series.getDataParams(dataIndex);
	      dataParams && params.seriesData.push(dataParams);
	    });
	
	    if (zrUtil.isString(formatter)) {
	      text = formatter.replace('{value}', text);
	    } else if (zrUtil.isFunction(formatter)) {
	      text = formatter(params);
	    }
	  }
	
	  return text;
	}
	/**
	 * @param {module:echarts/coord/Axis} axis
	 * @param {number} value
	 * @param {Object} layoutInfo {
	 *  rotation, position, labelOffset, labelDirection, labelMargin
	 * }
	 */
	
	
	function getTransformedPosition(axis, value, layoutInfo) {
	  var transform = matrix.create();
	  matrix.rotate(transform, transform, layoutInfo.rotation);
	  matrix.translate(transform, transform, layoutInfo.position);
	  return graphic.applyTransform([axis.dataToCoord(value), (layoutInfo.labelOffset || 0) + (layoutInfo.labelDirection || 1) * (layoutInfo.labelMargin || 0)], transform);
	}
	
	function buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api) {
	  var textLayout = AxisBuilder.innerTextLayout(layoutInfo.rotation, 0, layoutInfo.labelDirection);
	  layoutInfo.labelMargin = axisPointerModel.get('label.margin');
	  buildLabelElOption(elOption, axisModel, axisPointerModel, api, {
	    position: getTransformedPosition(axisModel.axis, value, layoutInfo),
	    align: textLayout.textAlign,
	    verticalAlign: textLayout.textVerticalAlign
	  });
	}
	/**
	 * @param {Array.<number>} p1
	 * @param {Array.<number>} p2
	 * @param {number} [xDimIndex=0] or 1
	 */
	
	
	function makeLineShape(p1, p2, xDimIndex) {
	  xDimIndex = xDimIndex || 0;
	  return {
	    x1: p1[xDimIndex],
	    y1: p1[1 - xDimIndex],
	    x2: p2[xDimIndex],
	    y2: p2[1 - xDimIndex]
	  };
	}
	/**
	 * @param {Array.<number>} xy
	 * @param {Array.<number>} wh
	 * @param {number} [xDimIndex=0] or 1
	 */
	
	
	function makeRectShape(xy, wh, xDimIndex) {
	  xDimIndex = xDimIndex || 0;
	  return {
	    x: xy[xDimIndex],
	    y: xy[1 - xDimIndex],
	    width: wh[xDimIndex],
	    height: wh[1 - xDimIndex]
	  };
	}
	
	function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {
	  return {
	    cx: cx,
	    cy: cy,
	    r0: r0,
	    r: r,
	    startAngle: startAngle,
	    endAngle: endAngle,
	    clockwise: true
	  };
	}
	
	exports.buildElStyle = buildElStyle;
	exports.buildLabelElOption = buildLabelElOption;
	exports.getValueLabel = getValueLabel;
	exports.getTransformedPosition = getTransformedPosition;
	exports.buildCartesianSingleLabelElOption = buildCartesianSingleLabelElOption;
	exports.makeLineShape = makeLineShape;
	exports.makeRectShape = makeRectShape;
	exports.makeSectorShape = makeSectorShape;

/***/ }),
/* 1112 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(926);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = echarts.extendComponentModel({
	  type: 'tooltip',
	  dependencies: ['axisPointer'],
	  defaultOption: {
	    zlevel: 0,
	    z: 8,
	    show: true,
	    // tooltip主体内容
	    showContent: true,
	    // 'trigger' only works on coordinate system.
	    // 'item' | 'axis' | 'none'
	    trigger: 'item',
	    // 'click' | 'mousemove' | 'none'
	    triggerOn: 'mousemove|click',
	    alwaysShowContent: false,
	    displayMode: 'single',
	    // 'single' | 'multipleByCoordSys'
	    // 位置 {Array} | {Function}
	    // position: null
	    // Consider triggered from axisPointer handle, verticalAlign should be 'middle'
	    // align: null,
	    // verticalAlign: null,
	    // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。
	    confine: false,
	    // 内容格式器：{string}（Template） ¦ {Function}
	    // formatter: null
	    showDelay: 0,
	    // 隐藏延迟，单位ms
	    hideDelay: 100,
	    // 动画变换时间，单位s
	    transitionDuration: 0.4,
	    enterable: false,
	    // 提示背景颜色，默认为透明度为0.7的黑色
	    backgroundColor: 'rgba(50,50,50,0.7)',
	    // 提示边框颜色
	    borderColor: '#333',
	    // 提示边框圆角，单位px，默认为4
	    borderRadius: 4,
	    // 提示边框线宽，单位px，默认为0（无边框）
	    borderWidth: 0,
	    // 提示内边距，单位px，默认各方向内边距为5，
	    // 接受数组分别设定上右下左边距，同css
	    padding: 5,
	    // Extra css text
	    extraCssText: '',
	    // 坐标轴指示器，坐标轴触发有效
	    axisPointer: {
	      // 默认为直线
	      // 可选为：'line' | 'shadow' | 'cross'
	      type: 'line',
	      // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选
	      // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'
	      // 默认 'auto'，会选择类型为 category 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴
	      // 极坐标系会默认选择 angle 轴
	      axis: 'auto',
	      animation: 'auto',
	      animationDurationUpdate: 200,
	      animationEasingUpdate: 'exponentialOut',
	      crossStyle: {
	        color: '#999',
	        width: 1,
	        type: 'dashed',
	        // TODO formatter
	        textStyle: {} // lineStyle and shadowStyle should not be specified here,
	        // otherwise it will always override those styles on option.axisPointer.
	
	      }
	    },
	    textStyle: {
	      color: '#fff',
	      fontSize: 14
	    }
	  }
	});
	
	module.exports = _default;

/***/ }),
/* 1113 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(926);
	
	var zrUtil = __webpack_require__(931);
	
	var env = __webpack_require__(930);
	
	var TooltipContent = __webpack_require__(1114);
	
	var formatUtil = __webpack_require__(1014);
	
	var numberUtil = __webpack_require__(1013);
	
	var graphic = __webpack_require__(976);
	
	var findPointFromSeries = __webpack_require__(1105);
	
	var layoutUtil = __webpack_require__(1012);
	
	var Model = __webpack_require__(970);
	
	var globalListener = __webpack_require__(1108);
	
	var axisHelper = __webpack_require__(1053);
	
	var axisPointerViewHelper = __webpack_require__(1111);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var bind = zrUtil.bind;
	var each = zrUtil.each;
	var parsePercent = numberUtil.parsePercent;
	var proxyRect = new graphic.Rect({
	  shape: {
	    x: -1,
	    y: -1,
	    width: 2,
	    height: 2
	  }
	});
	
	var _default = echarts.extendComponentView({
	  type: 'tooltip',
	  init: function (ecModel, api) {
	    if (env.node) {
	      return;
	    }
	
	    var tooltipContent = new TooltipContent(api.getDom(), api);
	    this._tooltipContent = tooltipContent;
	  },
	  render: function (tooltipModel, ecModel, api) {
	    if (env.node || env.wxa) {
	      return;
	    } // Reset
	
	
	    this.group.removeAll();
	    /**
	     * @private
	     * @type {module:echarts/component/tooltip/TooltipModel}
	     */
	
	    this._tooltipModel = tooltipModel;
	    /**
	     * @private
	     * @type {module:echarts/model/Global}
	     */
	
	    this._ecModel = ecModel;
	    /**
	     * @private
	     * @type {module:echarts/ExtensionAPI}
	     */
	
	    this._api = api;
	    /**
	     * Should be cleaned when render.
	     * @private
	     * @type {Array.<Array.<Object>>}
	     */
	
	    this._lastDataByCoordSys = null;
	    /**
	     * @private
	     * @type {boolean}
	     */
	
	    this._alwaysShowContent = tooltipModel.get('alwaysShowContent');
	    var tooltipContent = this._tooltipContent;
	    tooltipContent.update();
	    tooltipContent.setEnterable(tooltipModel.get('enterable'));
	
	    this._initGlobalListener();
	
	    this._keepShow();
	  },
	  _initGlobalListener: function () {
	    var tooltipModel = this._tooltipModel;
	    var triggerOn = tooltipModel.get('triggerOn');
	    globalListener.register('itemTooltip', this._api, bind(function (currTrigger, e, dispatchAction) {
	      // If 'none', it is not controlled by mouse totally.
	      if (triggerOn !== 'none') {
	        if (triggerOn.indexOf(currTrigger) >= 0) {
	          this._tryShow(e, dispatchAction);
	        } else if (currTrigger === 'leave') {
	          this._hide(dispatchAction);
	        }
	      }
	    }, this));
	  },
	  _keepShow: function () {
	    var tooltipModel = this._tooltipModel;
	    var ecModel = this._ecModel;
	    var api = this._api; // Try to keep the tooltip show when refreshing
	
	    if (this._lastX != null && this._lastY != null // When user is willing to control tooltip totally using API,
	    // self.manuallyShowTip({x, y}) might cause tooltip hide,
	    // which is not expected.
	    && tooltipModel.get('triggerOn') !== 'none') {
	      var self = this;
	      clearTimeout(this._refreshUpdateTimeout);
	      this._refreshUpdateTimeout = setTimeout(function () {
	        // Show tip next tick after other charts are rendered
	        // In case highlight action has wrong result
	        // FIXME
	        self.manuallyShowTip(tooltipModel, ecModel, api, {
	          x: self._lastX,
	          y: self._lastY
	        });
	      });
	    }
	  },
	
	  /**
	   * Show tip manually by
	   * dispatchAction({
	   *     type: 'showTip',
	   *     x: 10,
	   *     y: 10
	   * });
	   * Or
	   * dispatchAction({
	   *      type: 'showTip',
	   *      seriesIndex: 0,
	   *      dataIndex or dataIndexInside or name
	   * });
	   *
	   *  TODO Batch
	   */
	  manuallyShowTip: function (tooltipModel, ecModel, api, payload) {
	    if (payload.from === this.uid || env.node) {
	      return;
	    }
	
	    var dispatchAction = makeDispatchAction(payload, api); // Reset ticket
	
	    this._ticket = ''; // When triggered from axisPointer.
	
	    var dataByCoordSys = payload.dataByCoordSys;
	
	    if (payload.tooltip && payload.x != null && payload.y != null) {
	      var el = proxyRect;
	      el.position = [payload.x, payload.y];
	      el.update();
	      el.tooltip = payload.tooltip; // Manually show tooltip while view is not using zrender elements.
	
	      this._tryShow({
	        offsetX: payload.x,
	        offsetY: payload.y,
	        target: el
	      }, dispatchAction);
	    } else if (dataByCoordSys) {
	      this._tryShow({
	        offsetX: payload.x,
	        offsetY: payload.y,
	        position: payload.position,
	        event: {},
	        dataByCoordSys: payload.dataByCoordSys,
	        tooltipOption: payload.tooltipOption
	      }, dispatchAction);
	    } else if (payload.seriesIndex != null) {
	      if (this._manuallyAxisShowTip(tooltipModel, ecModel, api, payload)) {
	        return;
	      }
	
	      var pointInfo = findPointFromSeries(payload, ecModel);
	      var cx = pointInfo.point[0];
	      var cy = pointInfo.point[1];
	
	      if (cx != null && cy != null) {
	        this._tryShow({
	          offsetX: cx,
	          offsetY: cy,
	          position: payload.position,
	          target: pointInfo.el,
	          event: {}
	        }, dispatchAction);
	      }
	    } else if (payload.x != null && payload.y != null) {
	      // FIXME
	      // should wrap dispatchAction like `axisPointer/globalListener` ?
	      api.dispatchAction({
	        type: 'updateAxisPointer',
	        x: payload.x,
	        y: payload.y
	      });
	
	      this._tryShow({
	        offsetX: payload.x,
	        offsetY: payload.y,
	        position: payload.position,
	        target: api.getZr().findHover(payload.x, payload.y).target,
	        event: {}
	      }, dispatchAction);
	    }
	  },
	  manuallyHideTip: function (tooltipModel, ecModel, api, payload) {
	    var tooltipContent = this._tooltipContent;
	
	    if (!this._alwaysShowContent && this._tooltipModel) {
	      tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));
	    }
	
	    this._lastX = this._lastY = null;
	
	    if (payload.from !== this.uid) {
	      this._hide(makeDispatchAction(payload, api));
	    }
	  },
	  // Be compatible with previous design, that is, when tooltip.type is 'axis' and
	  // dispatchAction 'showTip' with seriesIndex and dataIndex will trigger axis pointer
	  // and tooltip.
	  _manuallyAxisShowTip: function (tooltipModel, ecModel, api, payload) {
	    var seriesIndex = payload.seriesIndex;
	    var dataIndex = payload.dataIndex;
	    var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo;
	
	    if (seriesIndex == null || dataIndex == null || coordSysAxesInfo == null) {
	      return;
	    }
	
	    var seriesModel = ecModel.getSeriesByIndex(seriesIndex);
	
	    if (!seriesModel) {
	      return;
	    }
	
	    var data = seriesModel.getData();
	    var tooltipModel = buildTooltipModel([data.getItemModel(dataIndex), seriesModel, (seriesModel.coordinateSystem || {}).model, tooltipModel]);
	
	    if (tooltipModel.get('trigger') !== 'axis') {
	      return;
	    }
	
	    api.dispatchAction({
	      type: 'updateAxisPointer',
	      seriesIndex: seriesIndex,
	      dataIndex: dataIndex,
	      position: payload.position
	    });
	    return true;
	  },
	  _tryShow: function (e, dispatchAction) {
	    var el = e.target;
	    var tooltipModel = this._tooltipModel;
	
	    if (!tooltipModel) {
	      return;
	    } // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed
	
	
	    this._lastX = e.offsetX;
	    this._lastY = e.offsetY;
	    var dataByCoordSys = e.dataByCoordSys;
	
	    if (dataByCoordSys && dataByCoordSys.length) {
	      this._showAxisTooltip(dataByCoordSys, e);
	    } // Always show item tooltip if mouse is on the element with dataIndex
	    else if (el && el.dataIndex != null) {
	        this._lastDataByCoordSys = null;
	
	        this._showSeriesItemTooltip(e, el, dispatchAction);
	      } // Tooltip provided directly. Like legend.
	      else if (el && el.tooltip) {
	          this._lastDataByCoordSys = null;
	
	          this._showComponentItemTooltip(e, el, dispatchAction);
	        } else {
	          this._lastDataByCoordSys = null;
	
	          this._hide(dispatchAction);
	        }
	  },
	  _showOrMove: function (tooltipModel, cb) {
	    // showDelay is used in this case: tooltip.enterable is set
	    // as true. User intent to move mouse into tooltip and click
	    // something. `showDelay` makes it easyer to enter the content
	    // but tooltip do not move immediately.
	    var delay = tooltipModel.get('showDelay');
	    cb = zrUtil.bind(cb, this);
	    clearTimeout(this._showTimout);
	    delay > 0 ? this._showTimout = setTimeout(cb, delay) : cb();
	  },
	  _showAxisTooltip: function (dataByCoordSys, e) {
	    var ecModel = this._ecModel;
	    var globalTooltipModel = this._tooltipModel;
	    var point = [e.offsetX, e.offsetY];
	    var singleDefaultHTML = [];
	    var singleParamsList = [];
	    var singleTooltipModel = buildTooltipModel([e.tooltipOption, globalTooltipModel]);
	    each(dataByCoordSys, function (itemCoordSys) {
	      // var coordParamList = [];
	      // var coordDefaultHTML = [];
	      // var coordTooltipModel = buildTooltipModel([
	      //     e.tooltipOption,
	      //     itemCoordSys.tooltipOption,
	      //     ecModel.getComponent(itemCoordSys.coordSysMainType, itemCoordSys.coordSysIndex),
	      //     globalTooltipModel
	      // ]);
	      // var displayMode = coordTooltipModel.get('displayMode');
	      // var paramsList = displayMode === 'single' ? singleParamsList : [];
	      each(itemCoordSys.dataByAxis, function (item) {
	        var axisModel = ecModel.getComponent(item.axisDim + 'Axis', item.axisIndex);
	        var axisValue = item.value;
	        var seriesDefaultHTML = [];
	
	        if (!axisModel || axisValue == null) {
	          return;
	        }
	
	        var valueLabel = axisPointerViewHelper.getValueLabel(axisValue, axisModel.axis, ecModel, item.seriesDataIndices, item.valueLabelOpt);
	        zrUtil.each(item.seriesDataIndices, function (idxItem) {
	          var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);
	          var dataIndex = idxItem.dataIndexInside;
	          var dataParams = series && series.getDataParams(dataIndex);
	          dataParams.axisDim = item.axisDim;
	          dataParams.axisIndex = item.axisIndex;
	          dataParams.axisType = item.axisType;
	          dataParams.axisId = item.axisId;
	          dataParams.axisValue = axisHelper.getAxisRawValue(axisModel.axis, axisValue);
	          dataParams.axisValueLabel = valueLabel;
	
	          if (dataParams) {
	            singleParamsList.push(dataParams);
	            seriesDefaultHTML.push(series.formatTooltip(dataIndex, true));
	          }
	        }); // Default tooltip content
	        // FIXME
	        // (1) shold be the first data which has name?
	        // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.
	
	        var firstLine = valueLabel;
	        singleDefaultHTML.push((firstLine ? formatUtil.encodeHTML(firstLine) + '<br />' : '') + seriesDefaultHTML.join('<br />'));
	      });
	    }, this); // In most case, the second axis is shown upper than the first one.
	
	    singleDefaultHTML.reverse();
	    singleDefaultHTML = singleDefaultHTML.join('<br /><br />');
	    var positionExpr = e.position;
	
	    this._showOrMove(singleTooltipModel, function () {
	      if (this._updateContentNotChangedOnAxis(dataByCoordSys)) {
	        this._updatePosition(singleTooltipModel, positionExpr, point[0], point[1], this._tooltipContent, singleParamsList);
	      } else {
	        this._showTooltipContent(singleTooltipModel, singleDefaultHTML, singleParamsList, Math.random(), point[0], point[1], positionExpr);
	      }
	    }); // Do not trigger events here, because this branch only be entered
	    // from dispatchAction.
	
	  },
	  _showSeriesItemTooltip: function (e, el, dispatchAction) {
	    var ecModel = this._ecModel; // Use dataModel in element if possible
	    // Used when mouseover on a element like markPoint or edge
	    // In which case, the data is not main data in series.
	
	    var seriesIndex = el.seriesIndex;
	    var seriesModel = ecModel.getSeriesByIndex(seriesIndex); // For example, graph link.
	
	    var dataModel = el.dataModel || seriesModel;
	    var dataIndex = el.dataIndex;
	    var dataType = el.dataType;
	    var data = dataModel.getData();
	    var tooltipModel = buildTooltipModel([data.getItemModel(dataIndex), dataModel, seriesModel && (seriesModel.coordinateSystem || {}).model, this._tooltipModel]);
	    var tooltipTrigger = tooltipModel.get('trigger');
	
	    if (tooltipTrigger != null && tooltipTrigger !== 'item') {
	      return;
	    }
	
	    var params = dataModel.getDataParams(dataIndex, dataType);
	    var defaultHtml = dataModel.formatTooltip(dataIndex, false, dataType);
	    var asyncTicket = 'item_' + dataModel.name + '_' + dataIndex;
	
	    this._showOrMove(tooltipModel, function () {
	      this._showTooltipContent(tooltipModel, defaultHtml, params, asyncTicket, e.offsetX, e.offsetY, e.position, e.target);
	    }); // FIXME
	    // duplicated showtip if manuallyShowTip is called from dispatchAction.
	
	
	    dispatchAction({
	      type: 'showTip',
	      dataIndexInside: dataIndex,
	      dataIndex: data.getRawIndex(dataIndex),
	      seriesIndex: seriesIndex,
	      from: this.uid
	    });
	  },
	  _showComponentItemTooltip: function (e, el, dispatchAction) {
	    var tooltipOpt = el.tooltip;
	
	    if (typeof tooltipOpt === 'string') {
	      var content = tooltipOpt;
	      tooltipOpt = {
	        content: content,
	        // Fixed formatter
	        formatter: content
	      };
	    }
	
	    var subTooltipModel = new Model(tooltipOpt, this._tooltipModel, this._ecModel);
	    var defaultHtml = subTooltipModel.get('content');
	    var asyncTicket = Math.random(); // Do not check whether `trigger` is 'none' here, because `trigger`
	    // only works on cooridinate system. In fact, we have not found case
	    // that requires setting `trigger` nothing on component yet.
	
	    this._showOrMove(subTooltipModel, function () {
	      this._showTooltipContent(subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {}, asyncTicket, e.offsetX, e.offsetY, e.position, el);
	    }); // If not dispatch showTip, tip may be hide triggered by axis.
	
	
	    dispatchAction({
	      type: 'showTip',
	      from: this.uid
	    });
	  },
	  _showTooltipContent: function (tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, el) {
	    // Reset ticket
	    this._ticket = '';
	
	    if (!tooltipModel.get('showContent') || !tooltipModel.get('show')) {
	      return;
	    }
	
	    var tooltipContent = this._tooltipContent;
	    var formatter = tooltipModel.get('formatter');
	    positionExpr = positionExpr || tooltipModel.get('position');
	    var html = defaultHtml;
	
	    if (formatter && typeof formatter === 'string') {
	      html = formatUtil.formatTpl(formatter, params, true);
	    } else if (typeof formatter === 'function') {
	      var callback = bind(function (cbTicket, html) {
	        if (cbTicket === this._ticket) {
	          tooltipContent.setContent(html);
	
	          this._updatePosition(tooltipModel, positionExpr, x, y, tooltipContent, params, el);
	        }
	      }, this);
	      this._ticket = asyncTicket;
	      html = formatter(params, asyncTicket, callback);
	    }
	
	    tooltipContent.setContent(html);
	    tooltipContent.show(tooltipModel);
	
	    this._updatePosition(tooltipModel, positionExpr, x, y, tooltipContent, params, el);
	  },
	
	  /**
	   * @param  {string|Function|Array.<number>|Object} positionExpr
	   * @param  {number} x Mouse x
	   * @param  {number} y Mouse y
	   * @param  {boolean} confine Whether confine tooltip content in view rect.
	   * @param  {Object|<Array.<Object>} params
	   * @param  {module:zrender/Element} el target element
	   * @param  {module:echarts/ExtensionAPI} api
	   * @return {Array.<number>}
	   */
	  _updatePosition: function (tooltipModel, positionExpr, x, y, content, params, el) {
	    var viewWidth = this._api.getWidth();
	
	    var viewHeight = this._api.getHeight();
	
	    positionExpr = positionExpr || tooltipModel.get('position');
	    var contentSize = content.getSize();
	    var align = tooltipModel.get('align');
	    var vAlign = tooltipModel.get('verticalAlign');
	    var rect = el && el.getBoundingRect().clone();
	    el && rect.applyTransform(el.transform);
	
	    if (typeof positionExpr === 'function') {
	      // Callback of position can be an array or a string specify the position
	      positionExpr = positionExpr([x, y], params, content.el, rect, {
	        viewSize: [viewWidth, viewHeight],
	        contentSize: contentSize.slice()
	      });
	    }
	
	    if (zrUtil.isArray(positionExpr)) {
	      x = parsePercent(positionExpr[0], viewWidth);
	      y = parsePercent(positionExpr[1], viewHeight);
	    } else if (zrUtil.isObject(positionExpr)) {
	      positionExpr.width = contentSize[0];
	      positionExpr.height = contentSize[1];
	      var layoutRect = layoutUtil.getLayoutRect(positionExpr, {
	        width: viewWidth,
	        height: viewHeight
	      });
	      x = layoutRect.x;
	      y = layoutRect.y;
	      align = null; // When positionExpr is left/top/right/bottom,
	      // align and verticalAlign will not work.
	
	      vAlign = null;
	    } // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element
	    else if (typeof positionExpr === 'string' && el) {
	        var pos = calcTooltipPosition(positionExpr, rect, contentSize);
	        x = pos[0];
	        y = pos[1];
	      } else {
	        var pos = refixTooltipPosition(x, y, content.el, viewWidth, viewHeight, align ? null : 20, vAlign ? null : 20);
	        x = pos[0];
	        y = pos[1];
	      }
	
	    align && (x -= isCenterAlign(align) ? contentSize[0] / 2 : align === 'right' ? contentSize[0] : 0);
	    vAlign && (y -= isCenterAlign(vAlign) ? contentSize[1] / 2 : vAlign === 'bottom' ? contentSize[1] : 0);
	
	    if (tooltipModel.get('confine')) {
	      var pos = confineTooltipPosition(x, y, content.el, viewWidth, viewHeight);
	      x = pos[0];
	      y = pos[1];
	    }
	
	    content.moveTo(x, y);
	  },
	  // FIXME
	  // Should we remove this but leave this to user?
	  _updateContentNotChangedOnAxis: function (dataByCoordSys) {
	    var lastCoordSys = this._lastDataByCoordSys;
	    var contentNotChanged = !!lastCoordSys && lastCoordSys.length === dataByCoordSys.length;
	    contentNotChanged && each(lastCoordSys, function (lastItemCoordSys, indexCoordSys) {
	      var lastDataByAxis = lastItemCoordSys.dataByAxis || {};
	      var thisItemCoordSys = dataByCoordSys[indexCoordSys] || {};
	      var thisDataByAxis = thisItemCoordSys.dataByAxis || [];
	      contentNotChanged &= lastDataByAxis.length === thisDataByAxis.length;
	      contentNotChanged && each(lastDataByAxis, function (lastItem, indexAxis) {
	        var thisItem = thisDataByAxis[indexAxis] || {};
	        var lastIndices = lastItem.seriesDataIndices || [];
	        var newIndices = thisItem.seriesDataIndices || [];
	        contentNotChanged &= lastItem.value === thisItem.value && lastItem.axisType === thisItem.axisType && lastItem.axisId === thisItem.axisId && lastIndices.length === newIndices.length;
	        contentNotChanged && each(lastIndices, function (lastIdxItem, j) {
	          var newIdxItem = newIndices[j];
	          contentNotChanged &= lastIdxItem.seriesIndex === newIdxItem.seriesIndex && lastIdxItem.dataIndex === newIdxItem.dataIndex;
	        });
	      });
	    });
	    this._lastDataByCoordSys = dataByCoordSys;
	    return !!contentNotChanged;
	  },
	  _hide: function (dispatchAction) {
	    // Do not directly hideLater here, because this behavior may be prevented
	    // in dispatchAction when showTip is dispatched.
	    // FIXME
	    // duplicated hideTip if manuallyHideTip is called from dispatchAction.
	    this._lastDataByCoordSys = null;
	    dispatchAction({
	      type: 'hideTip',
	      from: this.uid
	    });
	  },
	  dispose: function (ecModel, api) {
	    if (env.node || env.wxa) {
	      return;
	    }
	
	    this._tooltipContent.hide();
	
	    globalListener.unregister('itemTooltip', api);
	  }
	});
	/**
	 * @param {Array.<Object|module:echarts/model/Model>} modelCascade
	 * From top to bottom. (the last one should be globalTooltipModel);
	 */
	
	
	function buildTooltipModel(modelCascade) {
	  var resultModel = modelCascade.pop();
	
	  while (modelCascade.length) {
	    var tooltipOpt = modelCascade.pop();
	
	    if (tooltipOpt) {
	      if (Model.isInstance(tooltipOpt)) {
	        tooltipOpt = tooltipOpt.get('tooltip', true);
	      } // In each data item tooltip can be simply write:
	      // {
	      //  value: 10,
	      //  tooltip: 'Something you need to know'
	      // }
	
	
	      if (typeof tooltipOpt === 'string') {
	        tooltipOpt = {
	          formatter: tooltipOpt
	        };
	      }
	
	      resultModel = new Model(tooltipOpt, resultModel, resultModel.ecModel);
	    }
	  }
	
	  return resultModel;
	}
	
	function makeDispatchAction(payload, api) {
	  return payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);
	}
	
	function refixTooltipPosition(x, y, el, viewWidth, viewHeight, gapH, gapV) {
	  var size = getOuterSize(el);
	  var width = size.width;
	  var height = size.height;
	
	  if (gapH != null) {
	    if (x + width + gapH > viewWidth) {
	      x -= width + gapH;
	    } else {
	      x += gapH;
	    }
	  }
	
	  if (gapV != null) {
	    if (y + height + gapV > viewHeight) {
	      y -= height + gapV;
	    } else {
	      y += gapV;
	    }
	  }
	
	  return [x, y];
	}
	
	function confineTooltipPosition(x, y, el, viewWidth, viewHeight) {
	  var size = getOuterSize(el);
	  var width = size.width;
	  var height = size.height;
	  x = Math.min(x + width, viewWidth) - width;
	  y = Math.min(y + height, viewHeight) - height;
	  x = Math.max(x, 0);
	  y = Math.max(y, 0);
	  return [x, y];
	}
	
	function getOuterSize(el) {
	  var width = el.clientWidth;
	  var height = el.clientHeight; // Consider browser compatibility.
	  // IE8 does not support getComputedStyle.
	
	  if (document.defaultView && document.defaultView.getComputedStyle) {
	    var stl = document.defaultView.getComputedStyle(el);
	
	    if (stl) {
	      width += parseInt(stl.paddingLeft, 10) + parseInt(stl.paddingRight, 10) + parseInt(stl.borderLeftWidth, 10) + parseInt(stl.borderRightWidth, 10);
	      height += parseInt(stl.paddingTop, 10) + parseInt(stl.paddingBottom, 10) + parseInt(stl.borderTopWidth, 10) + parseInt(stl.borderBottomWidth, 10);
	    }
	  }
	
	  return {
	    width: width,
	    height: height
	  };
	}
	
	function calcTooltipPosition(position, rect, contentSize) {
	  var domWidth = contentSize[0];
	  var domHeight = contentSize[1];
	  var gap = 5;
	  var x = 0;
	  var y = 0;
	  var rectWidth = rect.width;
	  var rectHeight = rect.height;
	
	  switch (position) {
	    case 'inside':
	      x = rect.x + rectWidth / 2 - domWidth / 2;
	      y = rect.y + rectHeight / 2 - domHeight / 2;
	      break;
	
	    case 'top':
	      x = rect.x + rectWidth / 2 - domWidth / 2;
	      y = rect.y - domHeight - gap;
	      break;
	
	    case 'bottom':
	      x = rect.x + rectWidth / 2 - domWidth / 2;
	      y = rect.y + rectHeight + gap;
	      break;
	
	    case 'left':
	      x = rect.x - domWidth - gap;
	      y = rect.y + rectHeight / 2 - domHeight / 2;
	      break;
	
	    case 'right':
	      x = rect.x + rectWidth + gap;
	      y = rect.y + rectHeight / 2 - domHeight / 2;
	  }
	
	  return [x, y];
	}
	
	function isCenterAlign(align) {
	  return align === 'center' || align === 'middle';
	}
	
	module.exports = _default;

/***/ }),
/* 1114 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(931);
	
	var zrColor = __webpack_require__(945);
	
	var eventUtil = __webpack_require__(965);
	
	var env = __webpack_require__(930);
	
	var formatUtil = __webpack_require__(1014);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;
	var toCamelCase = formatUtil.toCamelCase;
	var vendors = ['', '-webkit-', '-moz-', '-o-'];
	var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';
	/**
	 * @param {number} duration
	 * @return {string}
	 * @inner
	 */
	
	function assembleTransition(duration) {
	  var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';
	  var transitionText = 'left ' + duration + 's ' + transitionCurve + ',' + 'top ' + duration + 's ' + transitionCurve;
	  return zrUtil.map(vendors, function (vendorPrefix) {
	    return vendorPrefix + 'transition:' + transitionText;
	  }).join(';');
	}
	/**
	 * @param {Object} textStyle
	 * @return {string}
	 * @inner
	 */
	
	
	function assembleFont(textStyleModel) {
	  var cssText = [];
	  var fontSize = textStyleModel.get('fontSize');
	  var color = textStyleModel.getTextColor();
	  color && cssText.push('color:' + color);
	  cssText.push('font:' + textStyleModel.getFont());
	  fontSize && cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');
	  each(['decoration', 'align'], function (name) {
	    var val = textStyleModel.get(name);
	    val && cssText.push('text-' + name + ':' + val);
	  });
	  return cssText.join(';');
	}
	/**
	 * @param {Object} tooltipModel
	 * @return {string}
	 * @inner
	 */
	
	
	function assembleCssText(tooltipModel) {
	  var cssText = [];
	  var transitionDuration = tooltipModel.get('transitionDuration');
	  var backgroundColor = tooltipModel.get('backgroundColor');
	  var textStyleModel = tooltipModel.getModel('textStyle');
	  var padding = tooltipModel.get('padding'); // Animation transition. Do not animate when transitionDuration is 0.
	
	  transitionDuration && cssText.push(assembleTransition(transitionDuration));
	
	  if (backgroundColor) {
	    if (env.canvasSupported) {
	      cssText.push('background-Color:' + backgroundColor);
	    } else {
	      // for ie
	      cssText.push('background-Color:#' + zrColor.toHex(backgroundColor));
	      cssText.push('filter:alpha(opacity=70)');
	    }
	  } // Border style
	
	
	  each(['width', 'color', 'radius'], function (name) {
	    var borderName = 'border-' + name;
	    var camelCase = toCamelCase(borderName);
	    var val = tooltipModel.get(camelCase);
	    val != null && cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));
	  }); // Text style
	
	  cssText.push(assembleFont(textStyleModel)); // Padding
	
	  if (padding != null) {
	    cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');
	  }
	
	  return cssText.join(';') + ';';
	}
	/**
	 * @alias module:echarts/component/tooltip/TooltipContent
	 * @constructor
	 */
	
	
	function TooltipContent(container, api) {
	  if (env.wxa) {
	    return null;
	  }
	
	  var el = document.createElement('div');
	  var zr = this._zr = api.getZr();
	  this.el = el;
	  this._x = api.getWidth() / 2;
	  this._y = api.getHeight() / 2;
	  container.appendChild(el);
	  this._container = container;
	  this._show = false;
	  /**
	   * @private
	   */
	
	  this._hideTimeout;
	  var self = this;
	
	  el.onmouseenter = function () {
	    // clear the timeout in hideLater and keep showing tooltip
	    if (self._enterable) {
	      clearTimeout(self._hideTimeout);
	      self._show = true;
	    }
	
	    self._inContent = true;
	  };
	
	  el.onmousemove = function (e) {
	    e = e || window.event;
	
	    if (!self._enterable) {
	      // Try trigger zrender event to avoid mouse
	      // in and out shape too frequently
	      var handler = zr.handler;
	      eventUtil.normalizeEvent(container, e, true);
	      handler.dispatch('mousemove', e);
	    }
	  };
	
	  el.onmouseleave = function () {
	    if (self._enterable) {
	      if (self._show) {
	        self.hideLater(self._hideDelay);
	      }
	    }
	
	    self._inContent = false;
	  };
	}
	
	TooltipContent.prototype = {
	  constructor: TooltipContent,
	
	  /**
	   * @private
	   * @type {boolean}
	   */
	  _enterable: true,
	
	  /**
	   * Update when tooltip is rendered
	   */
	  update: function () {
	    // FIXME
	    // Move this logic to ec main?
	    var container = this._container;
	    var stl = container.currentStyle || document.defaultView.getComputedStyle(container);
	    var domStyle = container.style;
	
	    if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {
	      domStyle.position = 'relative';
	    } // Hide the tooltip
	    // PENDING
	    // this.hide();
	
	  },
	  show: function (tooltipModel) {
	    clearTimeout(this._hideTimeout);
	    var el = this.el;
	    el.style.cssText = gCssText + assembleCssText(tooltipModel) // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore
	    + ';left:' + this._x + 'px;top:' + this._y + 'px;' + (tooltipModel.get('extraCssText') || '');
	    el.style.display = el.innerHTML ? 'block' : 'none';
	    this._show = true;
	  },
	  setContent: function (content) {
	    this.el.innerHTML = content == null ? '' : content;
	  },
	  setEnterable: function (enterable) {
	    this._enterable = enterable;
	  },
	  getSize: function () {
	    var el = this.el;
	    return [el.clientWidth, el.clientHeight];
	  },
	  moveTo: function (x, y) {
	    // xy should be based on canvas root. But tooltipContent is
	    // the sibling of canvas root. So padding of ec container
	    // should be considered here.
	    var zr = this._zr;
	    var viewportRootOffset;
	
	    if (zr && zr.painter && (viewportRootOffset = zr.painter.getViewportRootOffset())) {
	      x += viewportRootOffset.offsetLeft;
	      y += viewportRootOffset.offsetTop;
	    }
	
	    var style = this.el.style;
	    style.left = x + 'px';
	    style.top = y + 'px';
	    this._x = x;
	    this._y = y;
	  },
	  hide: function () {
	    this.el.style.display = 'none';
	    this._show = false;
	  },
	  hideLater: function (time) {
	    if (this._show && !(this._inContent && this._enterable)) {
	      if (time) {
	        this._hideDelay = time; // Set show false to avoid invoke hideLater mutiple times
	
	        this._show = false;
	        this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);
	      } else {
	        this.hide();
	      }
	    }
	  },
	  isShow: function () {
	    return this._show;
	  }
	};
	var _default = TooltipContent;
	module.exports = _default;

/***/ }),
/* 1115 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(926);
	
	var graphic = __webpack_require__(976);
	
	var _layout = __webpack_require__(1012);
	
	var getLayoutRect = _layout.getLayoutRect;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Model
	echarts.extendComponentModel({
	  type: 'title',
	  layoutMode: {
	    type: 'box',
	    ignoreSize: true
	  },
	  defaultOption: {
	    // 一级层叠
	    zlevel: 0,
	    // 二级层叠
	    z: 6,
	    show: true,
	    text: '',
	    // 超链接跳转
	    // link: null,
	    // 仅支持self | blank
	    target: 'blank',
	    subtext: '',
	    // 超链接跳转
	    // sublink: null,
	    // 仅支持self | blank
	    subtarget: 'blank',
	    // 'center' ¦ 'left' ¦ 'right'
	    // ¦ {number}（x坐标，单位px）
	    left: 0,
	    // 'top' ¦ 'bottom' ¦ 'center'
	    // ¦ {number}（y坐标，单位px）
	    top: 0,
	    // 水平对齐
	    // 'auto' | 'left' | 'right' | 'center'
	    // 默认根据 left 的位置判断是左对齐还是右对齐
	    // textAlign: null
	    //
	    // 垂直对齐
	    // 'auto' | 'top' | 'bottom' | 'middle'
	    // 默认根据 top 位置判断是上对齐还是下对齐
	    // textBaseline: null
	    backgroundColor: 'rgba(0,0,0,0)',
	    // 标题边框颜色
	    borderColor: '#ccc',
	    // 标题边框线宽，单位px，默认为0（无边框）
	    borderWidth: 0,
	    // 标题内边距，单位px，默认各方向内边距为5，
	    // 接受数组分别设定上右下左边距，同css
	    padding: 5,
	    // 主副标题纵向间隔，单位px，默认为10，
	    itemGap: 10,
	    textStyle: {
	      fontSize: 18,
	      fontWeight: 'bolder',
	      color: '#333'
	    },
	    subtextStyle: {
	      color: '#aaa'
	    }
	  }
	}); // View
	
	echarts.extendComponentView({
	  type: 'title',
	  render: function (titleModel, ecModel, api) {
	    this.group.removeAll();
	
	    if (!titleModel.get('show')) {
	      return;
	    }
	
	    var group = this.group;
	    var textStyleModel = titleModel.getModel('textStyle');
	    var subtextStyleModel = titleModel.getModel('subtextStyle');
	    var textAlign = titleModel.get('textAlign');
	    var textBaseline = titleModel.get('textBaseline');
	    var textEl = new graphic.Text({
	      style: graphic.setTextStyle({}, textStyleModel, {
	        text: titleModel.get('text'),
	        textFill: textStyleModel.getTextColor()
	      }, {
	        disableBox: true
	      }),
	      z2: 10
	    });
	    var textRect = textEl.getBoundingRect();
	    var subText = titleModel.get('subtext');
	    var subTextEl = new graphic.Text({
	      style: graphic.setTextStyle({}, subtextStyleModel, {
	        text: subText,
	        textFill: subtextStyleModel.getTextColor(),
	        y: textRect.height + titleModel.get('itemGap'),
	        textVerticalAlign: 'top'
	      }, {
	        disableBox: true
	      }),
	      z2: 10
	    });
	    var link = titleModel.get('link');
	    var sublink = titleModel.get('sublink');
	    textEl.silent = !link;
	    subTextEl.silent = !sublink;
	
	    if (link) {
	      textEl.on('click', function () {
	        window.open(link, '_' + titleModel.get('target'));
	      });
	    }
	
	    if (sublink) {
	      subTextEl.on('click', function () {
	        window.open(sublink, '_' + titleModel.get('subtarget'));
	      });
	    }
	
	    group.add(textEl);
	    subText && group.add(subTextEl); // If no subText, but add subTextEl, there will be an empty line.
	
	    var groupRect = group.getBoundingRect();
	    var layoutOption = titleModel.getBoxLayoutParams();
	    layoutOption.width = groupRect.width;
	    layoutOption.height = groupRect.height;
	    var layoutRect = getLayoutRect(layoutOption, {
	      width: api.getWidth(),
	      height: api.getHeight()
	    }, titleModel.get('padding')); // Adjust text align based on position
	
	    if (!textAlign) {
	      // Align left if title is on the left. center and right is same
	      textAlign = titleModel.get('left') || titleModel.get('right');
	
	      if (textAlign === 'middle') {
	        textAlign = 'center';
	      } // Adjust layout by text align
	
	
	      if (textAlign === 'right') {
	        layoutRect.x += layoutRect.width;
	      } else if (textAlign === 'center') {
	        layoutRect.x += layoutRect.width / 2;
	      }
	    }
	
	    if (!textBaseline) {
	      textBaseline = titleModel.get('top') || titleModel.get('bottom');
	
	      if (textBaseline === 'center') {
	        textBaseline = 'middle';
	      }
	
	      if (textBaseline === 'bottom') {
	        layoutRect.y += layoutRect.height;
	      } else if (textBaseline === 'middle') {
	        layoutRect.y += layoutRect.height / 2;
	      }
	
	      textBaseline = textBaseline || 'top';
	    }
	
	    group.attr('position', [layoutRect.x, layoutRect.y]);
	    var alignStyle = {
	      textAlign: textAlign,
	      textVerticalAlign: textBaseline
	    };
	    textEl.setStyle(alignStyle);
	    subTextEl.setStyle(alignStyle); // Render background
	    // Get groupRect again because textAlign has been changed
	
	    groupRect = group.getBoundingRect();
	    var padding = layoutRect.margin;
	    var style = titleModel.getItemStyle(['color', 'opacity']);
	    style.fill = titleModel.get('backgroundColor');
	    var rect = new graphic.Rect({
	      shape: {
	        x: groupRect.x - padding[3],
	        y: groupRect.y - padding[0],
	        width: groupRect.width + padding[1] + padding[3],
	        height: groupRect.height + padding[0] + padding[2],
	        r: titleModel.get('borderRadius')
	      },
	      style: style,
	      silent: true
	    });
	    graphic.subPixelOptimizeRect(rect);
	    group.add(rect);
	  }
	});

/***/ }),
/* 1116 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(926);
	
	__webpack_require__(1117);
	
	__webpack_require__(1118);
	
	__webpack_require__(1119);
	
	var legendFilter = __webpack_require__(1121);
	
	var Component = __webpack_require__(1010);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Do not contain scrollable legend, for sake of file size.
	// Series Filter
	echarts.registerProcessor(legendFilter);
	Component.registerSubTypeDefaulter('legend', function () {
	  // Default 'plain' when no type specified.
	  return 'plain';
	});

/***/ }),
/* 1117 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(926);
	
	var zrUtil = __webpack_require__(931);
	
	var Model = __webpack_require__(970);
	
	var _model = __webpack_require__(969);
	
	var isNameSpecified = _model.isNameSpecified;
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var LegendModel = echarts.extendComponentModel({
	  type: 'legend.plain',
	  dependencies: ['series'],
	  layoutMode: {
	    type: 'box',
	    // legend.width/height are maxWidth/maxHeight actually,
	    // whereas realy width/height is calculated by its content.
	    // (Setting {left: 10, right: 10} does not make sense).
	    // So consider the case:
	    // `setOption({legend: {left: 10});`
	    // then `setOption({legend: {right: 10});`
	    // The previous `left` should be cleared by setting `ignoreSize`.
	    ignoreSize: true
	  },
	  init: function (option, parentModel, ecModel) {
	    this.mergeDefaultAndTheme(option, ecModel);
	    option.selected = option.selected || {};
	  },
	  mergeOption: function (option) {
	    LegendModel.superCall(this, 'mergeOption', option);
	  },
	  optionUpdated: function () {
	    this._updateData(this.ecModel);
	
	    var legendData = this._data; // If selectedMode is single, try to select one
	
	    if (legendData[0] && this.get('selectedMode') === 'single') {
	      var hasSelected = false; // If has any selected in option.selected
	
	      for (var i = 0; i < legendData.length; i++) {
	        var name = legendData[i].get('name');
	
	        if (this.isSelected(name)) {
	          // Force to unselect others
	          this.select(name);
	          hasSelected = true;
	          break;
	        }
	      } // Try select the first if selectedMode is single
	
	
	      !hasSelected && this.select(legendData[0].get('name'));
	    }
	  },
	  _updateData: function (ecModel) {
	    var potentialData = [];
	    var availableNames = [];
	    ecModel.eachRawSeries(function (seriesModel) {
	      var seriesName = seriesModel.name;
	      availableNames.push(seriesName);
	      var isPotential;
	
	      if (seriesModel.legendDataProvider) {
	        var data = seriesModel.legendDataProvider();
	        var names = data.mapArray(data.getName);
	
	        if (!ecModel.isSeriesFiltered(seriesModel)) {
	          availableNames = availableNames.concat(names);
	        }
	
	        if (names.length) {
	          potentialData = potentialData.concat(names);
	        } else {
	          isPotential = true;
	        }
	      } else {
	        isPotential = true;
	      }
	
	      if (isPotential && isNameSpecified(seriesModel)) {
	        potentialData.push(seriesModel.name);
	      }
	    });
	    /**
	     * @type {Array.<string>}
	     * @private
	     */
	
	    this._availableNames = availableNames; // If legend.data not specified in option, use availableNames as data,
	    // which is convinient for user preparing option.
	
	    var rawData = this.get('data') || potentialData;
	    var legendData = zrUtil.map(rawData, function (dataItem) {
	      // Can be string or number
	      if (typeof dataItem === 'string' || typeof dataItem === 'number') {
	        dataItem = {
	          name: dataItem
	        };
	      }
	
	      return new Model(dataItem, this, this.ecModel);
	    }, this);
	    /**
	     * @type {Array.<module:echarts/model/Model>}
	     * @private
	     */
	
	    this._data = legendData;
	  },
	
	  /**
	   * @return {Array.<module:echarts/model/Model>}
	   */
	  getData: function () {
	    return this._data;
	  },
	
	  /**
	   * @param {string} name
	   */
	  select: function (name) {
	    var selected = this.option.selected;
	    var selectedMode = this.get('selectedMode');
	
	    if (selectedMode === 'single') {
	      var data = this._data;
	      zrUtil.each(data, function (dataItem) {
	        selected[dataItem.get('name')] = false;
	      });
	    }
	
	    selected[name] = true;
	  },
	
	  /**
	   * @param {string} name
	   */
	  unSelect: function (name) {
	    if (this.get('selectedMode') !== 'single') {
	      this.option.selected[name] = false;
	    }
	  },
	
	  /**
	   * @param {string} name
	   */
	  toggleSelected: function (name) {
	    var selected = this.option.selected; // Default is true
	
	    if (!selected.hasOwnProperty(name)) {
	      selected[name] = true;
	    }
	
	    this[selected[name] ? 'unSelect' : 'select'](name);
	  },
	
	  /**
	   * @param {string} name
	   */
	  isSelected: function (name) {
	    var selected = this.option.selected;
	    return !(selected.hasOwnProperty(name) && !selected[name]) && zrUtil.indexOf(this._availableNames, name) >= 0;
	  },
	  defaultOption: {
	    // 一级层叠
	    zlevel: 0,
	    // 二级层叠
	    z: 4,
	    show: true,
	    // 布局方式，默认为水平布局，可选为：
	    // 'horizontal' | 'vertical'
	    orient: 'horizontal',
	    left: 'center',
	    // right: 'center',
	    top: 0,
	    // bottom: null,
	    // 水平对齐
	    // 'auto' | 'left' | 'right'
	    // 默认为 'auto', 根据 x 的位置判断是左对齐还是右对齐
	    align: 'auto',
	    backgroundColor: 'rgba(0,0,0,0)',
	    // 图例边框颜色
	    borderColor: '#ccc',
	    borderRadius: 0,
	    // 图例边框线宽，单位px，默认为0（无边框）
	    borderWidth: 0,
	    // 图例内边距，单位px，默认各方向内边距为5，
	    // 接受数组分别设定上右下左边距，同css
	    padding: 5,
	    // 各个item之间的间隔，单位px，默认为10，
	    // 横向布局时为水平间隔，纵向布局时为纵向间隔
	    itemGap: 10,
	    // 图例图形宽度
	    itemWidth: 25,
	    // 图例图形高度
	    itemHeight: 14,
	    // 图例关闭时候的颜色
	    inactiveColor: '#ccc',
	    textStyle: {
	      // 图例文字颜色
	      color: '#333'
	    },
	    // formatter: '',
	    // 选择模式，默认开启图例开关
	    selectedMode: true,
	    // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入
	    // selected: null,
	    // 图例内容（详见legend.data，数组中每一项代表一个item
	    // data: [],
	    // Tooltip 相关配置
	    tooltip: {
	      show: false
	    }
	  }
	});
	var _default = LegendModel;
	module.exports = _default;

/***/ }),
/* 1118 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(926);
	
	var zrUtil = __webpack_require__(931);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function legendSelectActionHandler(methodName, payload, ecModel) {
	  var selectedMap = {};
	  var isToggleSelect = methodName === 'toggleSelected';
	  var isSelected; // Update all legend components
	
	  ecModel.eachComponent('legend', function (legendModel) {
	    if (isToggleSelect && isSelected != null) {
	      // Force other legend has same selected status
	      // Or the first is toggled to true and other are toggled to false
	      // In the case one legend has some item unSelected in option. And if other legend
	      // doesn't has the item, they will assume it is selected.
	      legendModel[isSelected ? 'select' : 'unSelect'](payload.name);
	    } else {
	      legendModel[methodName](payload.name);
	      isSelected = legendModel.isSelected(payload.name);
	    }
	
	    var legendData = legendModel.getData();
	    zrUtil.each(legendData, function (model) {
	      var name = model.get('name'); // Wrap element
	
	      if (name === '\n' || name === '') {
	        return;
	      }
	
	      var isItemSelected = legendModel.isSelected(name);
	
	      if (selectedMap.hasOwnProperty(name)) {
	        // Unselected if any legend is unselected
	        selectedMap[name] = selectedMap[name] && isItemSelected;
	      } else {
	        selectedMap[name] = isItemSelected;
	      }
	    });
	  }); // Return the event explicitly
	
	  return {
	    name: payload.name,
	    selected: selectedMap
	  };
	}
	/**
	 * @event legendToggleSelect
	 * @type {Object}
	 * @property {string} type 'legendToggleSelect'
	 * @property {string} [from]
	 * @property {string} name Series name or data item name
	 */
	
	
	echarts.registerAction('legendToggleSelect', 'legendselectchanged', zrUtil.curry(legendSelectActionHandler, 'toggleSelected'));
	/**
	 * @event legendSelect
	 * @type {Object}
	 * @property {string} type 'legendSelect'
	 * @property {string} name Series name or data item name
	 */
	
	echarts.registerAction('legendSelect', 'legendselected', zrUtil.curry(legendSelectActionHandler, 'select'));
	/**
	 * @event legendUnSelect
	 * @type {Object}
	 * @property {string} type 'legendUnSelect'
	 * @property {string} name Series name or data item name
	 */
	
	echarts.registerAction('legendUnSelect', 'legendunselected', zrUtil.curry(legendSelectActionHandler, 'unSelect'));

/***/ }),
/* 1119 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(927);
	
	var __DEV__ = _config.__DEV__;
	
	var echarts = __webpack_require__(926);
	
	var zrUtil = __webpack_require__(931);
	
	var _symbol = __webpack_require__(1063);
	
	var createSymbol = _symbol.createSymbol;
	
	var graphic = __webpack_require__(976);
	
	var _listComponent = __webpack_require__(1120);
	
	var makeBackground = _listComponent.makeBackground;
	
	var layoutUtil = __webpack_require__(1012);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var curry = zrUtil.curry;
	var each = zrUtil.each;
	var Group = graphic.Group;
	
	var _default = echarts.extendComponentView({
	  type: 'legend.plain',
	  newlineDisabled: false,
	
	  /**
	   * @override
	   */
	  init: function () {
	    /**
	     * @private
	     * @type {module:zrender/container/Group}
	     */
	    this.group.add(this._contentGroup = new Group());
	    /**
	     * @private
	     * @type {module:zrender/Element}
	     */
	
	    this._backgroundEl;
	  },
	
	  /**
	   * @protected
	   */
	  getContentGroup: function () {
	    return this._contentGroup;
	  },
	
	  /**
	   * @override
	   */
	  render: function (legendModel, ecModel, api) {
	    this.resetInner();
	
	    if (!legendModel.get('show', true)) {
	      return;
	    }
	
	    var itemAlign = legendModel.get('align');
	
	    if (!itemAlign || itemAlign === 'auto') {
	      itemAlign = legendModel.get('left') === 'right' && legendModel.get('orient') === 'vertical' ? 'right' : 'left';
	    }
	
	    this.renderInner(itemAlign, legendModel, ecModel, api); // Perform layout.
	
	    var positionInfo = legendModel.getBoxLayoutParams();
	    var viewportSize = {
	      width: api.getWidth(),
	      height: api.getHeight()
	    };
	    var padding = legendModel.get('padding');
	    var maxSize = layoutUtil.getLayoutRect(positionInfo, viewportSize, padding);
	    var mainRect = this.layoutInner(legendModel, itemAlign, maxSize); // Place mainGroup, based on the calculated `mainRect`.
	
	    var layoutRect = layoutUtil.getLayoutRect(zrUtil.defaults({
	      width: mainRect.width,
	      height: mainRect.height
	    }, positionInfo), viewportSize, padding);
	    this.group.attr('position', [layoutRect.x - mainRect.x, layoutRect.y - mainRect.y]); // Render background after group is layout.
	
	    this.group.add(this._backgroundEl = makeBackground(mainRect, legendModel));
	  },
	
	  /**
	   * @protected
	   */
	  resetInner: function () {
	    this.getContentGroup().removeAll();
	    this._backgroundEl && this.group.remove(this._backgroundEl);
	  },
	
	  /**
	   * @protected
	   */
	  renderInner: function (itemAlign, legendModel, ecModel, api) {
	    var contentGroup = this.getContentGroup();
	    var legendDrawnMap = zrUtil.createHashMap();
	    var selectMode = legendModel.get('selectedMode');
	    var excludeSeriesId = [];
	    ecModel.eachRawSeries(function (seriesModel) {
	      !seriesModel.get('legendHoverLink') && excludeSeriesId.push(seriesModel.id);
	    });
	    each(legendModel.getData(), function (itemModel, dataIndex) {
	      var name = itemModel.get('name'); // Use empty string or \n as a newline string
	
	      if (!this.newlineDisabled && (name === '' || name === '\n')) {
	        contentGroup.add(new Group({
	          newline: true
	        }));
	        return;
	      } // Representitive series.
	
	
	      var seriesModel = ecModel.getSeriesByName(name)[0];
	
	      if (legendDrawnMap.get(name)) {
	        // Have been drawed
	        return;
	      } // Series legend
	
	
	      if (seriesModel) {
	        var data = seriesModel.getData();
	        var color = data.getVisual('color'); // If color is a callback function
	
	        if (typeof color === 'function') {
	          // Use the first data
	          color = color(seriesModel.getDataParams(0));
	        } // Using rect symbol defaultly
	
	
	        var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';
	        var symbolType = data.getVisual('symbol');
	
	        var itemGroup = this._createItem(name, dataIndex, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, selectMode);
	
	        itemGroup.on('click', curry(dispatchSelectAction, name, api)).on('mouseover', curry(dispatchHighlightAction, seriesModel, null, api, excludeSeriesId)).on('mouseout', curry(dispatchDownplayAction, seriesModel, null, api, excludeSeriesId));
	        legendDrawnMap.set(name, true);
	      } else {
	        // Data legend of pie, funnel
	        ecModel.eachRawSeries(function (seriesModel) {
	          // In case multiple series has same data name
	          if (legendDrawnMap.get(name)) {
	            return;
	          }
	
	          if (seriesModel.legendDataProvider) {
	            var data = seriesModel.legendDataProvider();
	            var idx = data.indexOfName(name);
	
	            if (idx < 0) {
	              return;
	            }
	
	            var color = data.getItemVisual(idx, 'color');
	            var legendSymbolType = 'roundRect';
	
	            var itemGroup = this._createItem(name, dataIndex, itemModel, legendModel, legendSymbolType, null, itemAlign, color, selectMode); // FIXME: consider different series has items with the same name.
	
	
	            itemGroup.on('click', curry(dispatchSelectAction, name, api)) // FIXME Should not specify the series name
	            .on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api, excludeSeriesId)).on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api, excludeSeriesId));
	            legendDrawnMap.set(name, true);
	          }
	        }, this);
	      }
	    }, this);
	  },
	  _createItem: function (name, dataIndex, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, selectMode) {
	    var itemWidth = legendModel.get('itemWidth');
	    var itemHeight = legendModel.get('itemHeight');
	    var inactiveColor = legendModel.get('inactiveColor');
	    var symbolKeepAspect = legendModel.get('symbolKeepAspect');
	    var isSelected = legendModel.isSelected(name);
	    var itemGroup = new Group();
	    var textStyleModel = itemModel.getModel('textStyle');
	    var itemIcon = itemModel.get('icon');
	    var tooltipModel = itemModel.getModel('tooltip');
	    var legendGlobalTooltipModel = tooltipModel.parentModel; // Use user given icon first
	
	    legendSymbolType = itemIcon || legendSymbolType;
	    itemGroup.add(createSymbol(legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : inactiveColor, // symbolKeepAspect default true for legend
	    symbolKeepAspect == null ? true : symbolKeepAspect)); // Compose symbols
	    // PENDING
	
	    if (!itemIcon && symbolType // At least show one symbol, can't be all none
	    && (symbolType !== legendSymbolType || symbolType == 'none')) {
	      var size = itemHeight * 0.8;
	
	      if (symbolType === 'none') {
	        symbolType = 'circle';
	      } // Put symbol in the center
	
	
	      itemGroup.add(createSymbol(symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size, isSelected ? color : inactiveColor, // symbolKeepAspect default true for legend
	      symbolKeepAspect == null ? true : symbolKeepAspect));
	    }
	
	    var textX = itemAlign === 'left' ? itemWidth + 5 : -5;
	    var textAlign = itemAlign;
	    var formatter = legendModel.get('formatter');
	    var content = name;
	
	    if (typeof formatter === 'string' && formatter) {
	      content = formatter.replace('{name}', name != null ? name : '');
	    } else if (typeof formatter === 'function') {
	      content = formatter(name);
	    }
	
	    itemGroup.add(new graphic.Text({
	      style: graphic.setTextStyle({}, textStyleModel, {
	        text: content,
	        x: textX,
	        y: itemHeight / 2,
	        textFill: isSelected ? textStyleModel.getTextColor() : inactiveColor,
	        textAlign: textAlign,
	        textVerticalAlign: 'middle'
	      })
	    })); // Add a invisible rect to increase the area of mouse hover
	
	    var hitRect = new graphic.Rect({
	      shape: itemGroup.getBoundingRect(),
	      invisible: true,
	      tooltip: tooltipModel.get('show') ? zrUtil.extend({
	        content: name,
	        // Defaul formatter
	        formatter: legendGlobalTooltipModel.get('formatter', true) || function () {
	          return name;
	        },
	        formatterParams: {
	          componentType: 'legend',
	          legendIndex: legendModel.componentIndex,
	          name: name,
	          $vars: ['name']
	        }
	      }, tooltipModel.option) : null
	    });
	    itemGroup.add(hitRect);
	    itemGroup.eachChild(function (child) {
	      child.silent = true;
	    });
	    hitRect.silent = !selectMode;
	    this.getContentGroup().add(itemGroup);
	    graphic.setHoverStyle(itemGroup);
	    itemGroup.__legendDataIndex = dataIndex;
	    return itemGroup;
	  },
	
	  /**
	   * @protected
	   */
	  layoutInner: function (legendModel, itemAlign, maxSize) {
	    var contentGroup = this.getContentGroup(); // Place items in contentGroup.
	
	    layoutUtil.box(legendModel.get('orient'), contentGroup, legendModel.get('itemGap'), maxSize.width, maxSize.height);
	    var contentRect = contentGroup.getBoundingRect();
	    contentGroup.attr('position', [-contentRect.x, -contentRect.y]);
	    return this.group.getBoundingRect();
	  }
	});
	
	function dispatchSelectAction(name, api) {
	  api.dispatchAction({
	    type: 'legendToggleSelect',
	    name: name
	  });
	}
	
	function dispatchHighlightAction(seriesModel, dataName, api, excludeSeriesId) {
	  // If element hover will move to a hoverLayer.
	  var el = api.getZr().storage.getDisplayList()[0];
	
	  if (!(el && el.useHoverLayer)) {
	    api.dispatchAction({
	      type: 'highlight',
	      seriesName: seriesModel.name,
	      name: dataName,
	      excludeSeriesId: excludeSeriesId
	    });
	  }
	}
	
	function dispatchDownplayAction(seriesModel, dataName, api, excludeSeriesId) {
	  // If element hover will move to a hoverLayer.
	  var el = api.getZr().storage.getDisplayList()[0];
	
	  if (!(el && el.useHoverLayer)) {
	    api.dispatchAction({
	      type: 'downplay',
	      seriesName: seriesModel.name,
	      name: dataName,
	      excludeSeriesId: excludeSeriesId
	    });
	  }
	}
	
	module.exports = _default;

/***/ }),
/* 1120 */
/***/ (function(module, exports, __webpack_require__) {

	var _layout = __webpack_require__(1012);
	
	var getLayoutRect = _layout.getLayoutRect;
	var layoutBox = _layout.box;
	var positionElement = _layout.positionElement;
	
	var formatUtil = __webpack_require__(1014);
	
	var graphic = __webpack_require__(976);
	
	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	
	/**
	 * Layout list like component.
	 * It will box layout each items in group of component and then position the whole group in the viewport
	 * @param {module:zrender/group/Group} group
	 * @param {module:echarts/model/Component} componentModel
	 * @param {module:echarts/ExtensionAPI}
	 */
	function layout(group, componentModel, api) {
	  var boxLayoutParams = componentModel.getBoxLayoutParams();
	  var padding = componentModel.get('padding');
	  var viewportSize = {
	    width: api.getWidth(),
	    height: api.getHeight()
	  };
	  var rect = getLayoutRect(boxLayoutParams, viewportSize, padding);
	  layoutBox(componentModel.get('orient'), group, componentModel.get('itemGap'), rect.width, rect.height);
	  positionElement(group, boxLayoutParams, viewportSize, padding);
	}
	
	function makeBackground(rect, componentModel) {
	  var padding = formatUtil.normalizeCssArray(componentModel.get('padding'));
	  var style = componentModel.getItemStyle(['color', 'opacity']);
	  style.fill = componentModel.get('backgroundColor');
	  var rect = new graphic.Rect({
	    shape: {
	      x: rect.x - padding[3],
	      y: rect.y - padding[0],
	      width: rect.width + padding[1] + padding[3],
	      height: rect.height + padding[0] + padding[2],
	      r: componentModel.get('borderRadius')
	    },
	    style: style,
	    silent: true,
	    z2: -1
	  }); // FIXME
	  // `subPixelOptimizeRect` may bring some gap between edge of viewpart
	  // and background rect when setting like `left: 0`, `top: 0`.
	  // graphic.subPixelOptimizeRect(rect);
	
	  return rect;
	}
	
	exports.layout = layout;
	exports.makeBackground = makeBackground;

/***/ }),
/* 1121 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function _default(ecModel) {
	  var legendModels = ecModel.findComponents({
	    mainType: 'legend'
	  });
	
	  if (legendModels && legendModels.length) {
	    ecModel.filterSeries(function (series) {
	      // If in any legend component the status is not selected.
	      // Because in legend series is assumed selected when it is not in the legend data.
	      for (var i = 0; i < legendModels.length; i++) {
	        if (!legendModels[i].isSelected(series.name)) {
	          return false;
	        }
	      }
	
	      return true;
	    });
	  }
	}
	
	module.exports = _default;

/***/ }),
/* 1122 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1123);
	
	var _zrender = __webpack_require__(928);
	
	var registerPainter = _zrender.registerPainter;
	
	var Painter = __webpack_require__(1125);
	
	registerPainter('vml', Painter);

/***/ }),
/* 1123 */
/***/ (function(module, exports, __webpack_require__) {

	var env = __webpack_require__(930);
	
	var _vector = __webpack_require__(933);
	
	var applyTransform = _vector.applyTransform;
	
	var BoundingRect = __webpack_require__(949);
	
	var colorTool = __webpack_require__(945);
	
	var textContain = __webpack_require__(961);
	
	var textHelper = __webpack_require__(960);
	
	var RectText = __webpack_require__(959);
	
	var Displayable = __webpack_require__(958);
	
	var ZImage = __webpack_require__(957);
	
	var Text = __webpack_require__(990);
	
	var Path = __webpack_require__(978);
	
	var PathProxy = __webpack_require__(979);
	
	var Gradient = __webpack_require__(1006);
	
	var vmlCore = __webpack_require__(1124);
	
	// http://www.w3.org/TR/NOTE-VML
	// TODO Use proxy like svg instead of overwrite brush methods
	var CMD = PathProxy.CMD;
	var round = Math.round;
	var sqrt = Math.sqrt;
	var abs = Math.abs;
	var cos = Math.cos;
	var sin = Math.sin;
	var mathMax = Math.max;
	
	if (!env.canvasSupported) {
	  var comma = ',';
	  var imageTransformPrefix = 'progid:DXImageTransform.Microsoft';
	  var Z = 21600;
	  var Z2 = Z / 2;
	  var ZLEVEL_BASE = 100000;
	  var Z_BASE = 1000;
	
	  var initRootElStyle = function (el) {
	    el.style.cssText = 'position:absolute;left:0;top:0;width:1px;height:1px;';
	    el.coordsize = Z + ',' + Z;
	    el.coordorigin = '0,0';
	  };
	
	  var encodeHtmlAttribute = function (s) {
	    return String(s).replace(/&/g, '&amp;').replace(/"/g, '&quot;');
	  };
	
	  var rgb2Str = function (r, g, b) {
	    return 'rgb(' + [r, g, b].join(',') + ')';
	  };
	
	  var append = function (parent, child) {
	    if (child && parent && child.parentNode !== parent) {
	      parent.appendChild(child);
	    }
	  };
	
	  var remove = function (parent, child) {
	    if (child && parent && child.parentNode === parent) {
	      parent.removeChild(child);
	    }
	  };
	
	  var getZIndex = function (zlevel, z, z2) {
	    // z 的取值范围为 [0, 1000]
	    return (parseFloat(zlevel) || 0) * ZLEVEL_BASE + (parseFloat(z) || 0) * Z_BASE + z2;
	  };
	
	  var parsePercent = function (value, maxValue) {
	    if (typeof value === 'string') {
	      if (value.lastIndexOf('%') >= 0) {
	        return parseFloat(value) / 100 * maxValue;
	      }
	
	      return parseFloat(value);
	    }
	
	    return value;
	  };
	  /***************************************************
	   * PATH
	   **************************************************/
	
	
	  var setColorAndOpacity = function (el, color, opacity) {
	    var colorArr = colorTool.parse(color);
	    opacity = +opacity;
	
	    if (isNaN(opacity)) {
	      opacity = 1;
	    }
	
	    if (colorArr) {
	      el.color = rgb2Str(colorArr[0], colorArr[1], colorArr[2]);
	      el.opacity = opacity * colorArr[3];
	    }
	  };
	
	  var getColorAndAlpha = function (color) {
	    var colorArr = colorTool.parse(color);
	    return [rgb2Str(colorArr[0], colorArr[1], colorArr[2]), colorArr[3]];
	  };
	
	  var updateFillNode = function (el, style, zrEl) {
	    // TODO pattern
	    var fill = style.fill;
	
	    if (fill != null) {
	      // Modified from excanvas
	      if (fill instanceof Gradient) {
	        var gradientType;
	        var angle = 0;
	        var focus = [0, 0]; // additional offset
	
	        var shift = 0; // scale factor for offset
	
	        var expansion = 1;
	        var rect = zrEl.getBoundingRect();
	        var rectWidth = rect.width;
	        var rectHeight = rect.height;
	
	        if (fill.type === 'linear') {
	          gradientType = 'gradient';
	          var transform = zrEl.transform;
	          var p0 = [fill.x * rectWidth, fill.y * rectHeight];
	          var p1 = [fill.x2 * rectWidth, fill.y2 * rectHeight];
	
	          if (transform) {
	            applyTransform(p0, p0, transform);
	            applyTransform(p1, p1, transform);
	          }
	
	          var dx = p1[0] - p0[0];
	          var dy = p1[1] - p0[1];
	          angle = Math.atan2(dx, dy) * 180 / Math.PI; // The angle should be a non-negative number.
	
	          if (angle < 0) {
	            angle += 360;
	          } // Very small angles produce an unexpected result because they are
	          // converted to a scientific notation string.
	
	
	          if (angle < 1e-6) {
	            angle = 0;
	          }
	        } else {
	          gradientType = 'gradientradial';
	          var p0 = [fill.x * rectWidth, fill.y * rectHeight];
	          var transform = zrEl.transform;
	          var scale = zrEl.scale;
	          var width = rectWidth;
	          var height = rectHeight;
	          focus = [// Percent in bounding rect
	          (p0[0] - rect.x) / width, (p0[1] - rect.y) / height];
	
	          if (transform) {
	            applyTransform(p0, p0, transform);
	          }
	
	          width /= scale[0] * Z;
	          height /= scale[1] * Z;
	          var dimension = mathMax(width, height);
	          shift = 2 * 0 / dimension;
	          expansion = 2 * fill.r / dimension - shift;
	        } // We need to sort the color stops in ascending order by offset,
	        // otherwise IE won't interpret it correctly.
	
	
	        var stops = fill.colorStops.slice();
	        stops.sort(function (cs1, cs2) {
	          return cs1.offset - cs2.offset;
	        });
	        var length = stops.length; // Color and alpha list of first and last stop
	
	        var colorAndAlphaList = [];
	        var colors = [];
	
	        for (var i = 0; i < length; i++) {
	          var stop = stops[i];
	          var colorAndAlpha = getColorAndAlpha(stop.color);
	          colors.push(stop.offset * expansion + shift + ' ' + colorAndAlpha[0]);
	
	          if (i === 0 || i === length - 1) {
	            colorAndAlphaList.push(colorAndAlpha);
	          }
	        }
	
	        if (length >= 2) {
	          var color1 = colorAndAlphaList[0][0];
	          var color2 = colorAndAlphaList[1][0];
	          var opacity1 = colorAndAlphaList[0][1] * style.opacity;
	          var opacity2 = colorAndAlphaList[1][1] * style.opacity;
	          el.type = gradientType;
	          el.method = 'none';
	          el.focus = '100%';
	          el.angle = angle;
	          el.color = color1;
	          el.color2 = color2;
	          el.colors = colors.join(','); // When colors attribute is used, the meanings of opacity and o:opacity2
	          // are reversed.
	
	          el.opacity = opacity2; // FIXME g_o_:opacity ?
	
	          el.opacity2 = opacity1;
	        }
	
	        if (gradientType === 'radial') {
	          el.focusposition = focus.join(',');
	        }
	      } else {
	        // FIXME Change from Gradient fill to color fill
	        setColorAndOpacity(el, fill, style.opacity);
	      }
	    }
	  };
	
	  var updateStrokeNode = function (el, style) {
	    // if (style.lineJoin != null) {
	    //     el.joinstyle = style.lineJoin;
	    // }
	    // if (style.miterLimit != null) {
	    //     el.miterlimit = style.miterLimit * Z;
	    // }
	    // if (style.lineCap != null) {
	    //     el.endcap = style.lineCap;
	    // }
	    if (style.lineDash != null) {
	      el.dashstyle = style.lineDash.join(' ');
	    }
	
	    if (style.stroke != null && !(style.stroke instanceof Gradient)) {
	      setColorAndOpacity(el, style.stroke, style.opacity);
	    }
	  };
	
	  var updateFillAndStroke = function (vmlEl, type, style, zrEl) {
	    var isFill = type == 'fill';
	    var el = vmlEl.getElementsByTagName(type)[0]; // Stroke must have lineWidth
	
	    if (style[type] != null && style[type] !== 'none' && (isFill || !isFill && style.lineWidth)) {
	      vmlEl[isFill ? 'filled' : 'stroked'] = 'true'; // FIXME Remove before updating, or set `colors` will throw error
	
	      if (style[type] instanceof Gradient) {
	        remove(vmlEl, el);
	      }
	
	      if (!el) {
	        el = vmlCore.createNode(type);
	      }
	
	      isFill ? updateFillNode(el, style, zrEl) : updateStrokeNode(el, style);
	      append(vmlEl, el);
	    } else {
	      vmlEl[isFill ? 'filled' : 'stroked'] = 'false';
	      remove(vmlEl, el);
	    }
	  };
	
	  var points = [[], [], []];
	
	  var pathDataToString = function (path, m) {
	    var M = CMD.M;
	    var C = CMD.C;
	    var L = CMD.L;
	    var A = CMD.A;
	    var Q = CMD.Q;
	    var str = [];
	    var nPoint;
	    var cmdStr;
	    var cmd;
	    var i;
	    var xi;
	    var yi;
	    var data = path.data;
	    var dataLength = path.len();
	
	    for (i = 0; i < dataLength;) {
	      cmd = data[i++];
	      cmdStr = '';
	      nPoint = 0;
	
	      switch (cmd) {
	        case M:
	          cmdStr = ' m ';
	          nPoint = 1;
	          xi = data[i++];
	          yi = data[i++];
	          points[0][0] = xi;
	          points[0][1] = yi;
	          break;
	
	        case L:
	          cmdStr = ' l ';
	          nPoint = 1;
	          xi = data[i++];
	          yi = data[i++];
	          points[0][0] = xi;
	          points[0][1] = yi;
	          break;
	
	        case Q:
	        case C:
	          cmdStr = ' c ';
	          nPoint = 3;
	          var x1 = data[i++];
	          var y1 = data[i++];
	          var x2 = data[i++];
	          var y2 = data[i++];
	          var x3;
	          var y3;
	
	          if (cmd === Q) {
	            // Convert quadratic to cubic using degree elevation
	            x3 = x2;
	            y3 = y2;
	            x2 = (x2 + 2 * x1) / 3;
	            y2 = (y2 + 2 * y1) / 3;
	            x1 = (xi + 2 * x1) / 3;
	            y1 = (yi + 2 * y1) / 3;
	          } else {
	            x3 = data[i++];
	            y3 = data[i++];
	          }
	
	          points[0][0] = x1;
	          points[0][1] = y1;
	          points[1][0] = x2;
	          points[1][1] = y2;
	          points[2][0] = x3;
	          points[2][1] = y3;
	          xi = x3;
	          yi = y3;
	          break;
	
	        case A:
	          var x = 0;
	          var y = 0;
	          var sx = 1;
	          var sy = 1;
	          var angle = 0;
	
	          if (m) {
	            // Extract SRT from matrix
	            x = m[4];
	            y = m[5];
	            sx = sqrt(m[0] * m[0] + m[1] * m[1]);
	            sy = sqrt(m[2] * m[2] + m[3] * m[3]);
	            angle = Math.atan2(-m[1] / sy, m[0] / sx);
	          }
	
	          var cx = data[i++];
	          var cy = data[i++];
	          var rx = data[i++];
	          var ry = data[i++];
	          var startAngle = data[i++] + angle;
	          var endAngle = data[i++] + startAngle + angle; // FIXME
	          // var psi = data[i++];
	
	          i++;
	          var clockwise = data[i++];
	          var x0 = cx + cos(startAngle) * rx;
	          var y0 = cy + sin(startAngle) * ry;
	          var x1 = cx + cos(endAngle) * rx;
	          var y1 = cy + sin(endAngle) * ry;
	          var type = clockwise ? ' wa ' : ' at ';
	
	          if (Math.abs(x0 - x1) < 1e-4) {
	            // IE won't render arches drawn counter clockwise if x0 == x1.
	            if (Math.abs(endAngle - startAngle) > 1e-2) {
	              // Offset x0 by 1/80 of a pixel. Use something
	              // that can be represented in binary
	              if (clockwise) {
	                x0 += 270 / Z;
	              }
	            } else {
	              // Avoid case draw full circle
	              if (Math.abs(y0 - cy) < 1e-4) {
	                if (clockwise && x0 < cx || !clockwise && x0 > cx) {
	                  y1 -= 270 / Z;
	                } else {
	                  y1 += 270 / Z;
	                }
	              } else if (clockwise && y0 < cy || !clockwise && y0 > cy) {
	                x1 += 270 / Z;
	              } else {
	                x1 -= 270 / Z;
	              }
	            }
	          }
	
	          str.push(type, round(((cx - rx) * sx + x) * Z - Z2), comma, round(((cy - ry) * sy + y) * Z - Z2), comma, round(((cx + rx) * sx + x) * Z - Z2), comma, round(((cy + ry) * sy + y) * Z - Z2), comma, round((x0 * sx + x) * Z - Z2), comma, round((y0 * sy + y) * Z - Z2), comma, round((x1 * sx + x) * Z - Z2), comma, round((y1 * sy + y) * Z - Z2));
	          xi = x1;
	          yi = y1;
	          break;
	
	        case CMD.R:
	          var p0 = points[0];
	          var p1 = points[1]; // x0, y0
	
	          p0[0] = data[i++];
	          p0[1] = data[i++]; // x1, y1
	
	          p1[0] = p0[0] + data[i++];
	          p1[1] = p0[1] + data[i++];
	
	          if (m) {
	            applyTransform(p0, p0, m);
	            applyTransform(p1, p1, m);
	          }
	
	          p0[0] = round(p0[0] * Z - Z2);
	          p1[0] = round(p1[0] * Z - Z2);
	          p0[1] = round(p0[1] * Z - Z2);
	          p1[1] = round(p1[1] * Z - Z2);
	          str.push( // x0, y0
	          ' m ', p0[0], comma, p0[1], // x1, y0
	          ' l ', p1[0], comma, p0[1], // x1, y1
	          ' l ', p1[0], comma, p1[1], // x0, y1
	          ' l ', p0[0], comma, p1[1]);
	          break;
	
	        case CMD.Z:
	          // FIXME Update xi, yi
	          str.push(' x ');
	      }
	
	      if (nPoint > 0) {
	        str.push(cmdStr);
	
	        for (var k = 0; k < nPoint; k++) {
	          var p = points[k];
	          m && applyTransform(p, p, m); // 不 round 会非常慢
	
	          str.push(round(p[0] * Z - Z2), comma, round(p[1] * Z - Z2), k < nPoint - 1 ? comma : '');
	        }
	      }
	    }
	
	    return str.join('');
	  }; // Rewrite the original path method
	
	
	  Path.prototype.brushVML = function (vmlRoot) {
	    var style = this.style;
	    var vmlEl = this._vmlEl;
	
	    if (!vmlEl) {
	      vmlEl = vmlCore.createNode('shape');
	      initRootElStyle(vmlEl);
	      this._vmlEl = vmlEl;
	    }
	
	    updateFillAndStroke(vmlEl, 'fill', style, this);
	    updateFillAndStroke(vmlEl, 'stroke', style, this);
	    var m = this.transform;
	    var needTransform = m != null;
	    var strokeEl = vmlEl.getElementsByTagName('stroke')[0];
	
	    if (strokeEl) {
	      var lineWidth = style.lineWidth; // Get the line scale.
	      // Determinant of this.m_ means how much the area is enlarged by the
	      // transformation. So its square root can be used as a scale factor
	      // for width.
	
	      if (needTransform && !style.strokeNoScale) {
	        var det = m[0] * m[3] - m[1] * m[2];
	        lineWidth *= sqrt(abs(det));
	      }
	
	      strokeEl.weight = lineWidth + 'px';
	    }
	
	    var path = this.path || (this.path = new PathProxy());
	
	    if (this.__dirtyPath) {
	      path.beginPath();
	      this.buildPath(path, this.shape);
	      path.toStatic();
	      this.__dirtyPath = false;
	    }
	
	    vmlEl.path = pathDataToString(path, this.transform);
	    vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2); // Append to root
	
	    append(vmlRoot, vmlEl); // Text
	
	    if (style.text != null) {
	      this.drawRectText(vmlRoot, this.getBoundingRect());
	    } else {
	      this.removeRectText(vmlRoot);
	    }
	  };
	
	  Path.prototype.onRemove = function (vmlRoot) {
	    remove(vmlRoot, this._vmlEl);
	    this.removeRectText(vmlRoot);
	  };
	
	  Path.prototype.onAdd = function (vmlRoot) {
	    append(vmlRoot, this._vmlEl);
	    this.appendRectText(vmlRoot);
	  };
	  /***************************************************
	   * IMAGE
	   **************************************************/
	
	
	  var isImage = function (img) {
	    // FIXME img instanceof Image 如果 img 是一个字符串的时候，IE8 下会报错
	    return typeof img === 'object' && img.tagName && img.tagName.toUpperCase() === 'IMG'; // return img instanceof Image;
	  }; // Rewrite the original path method
	
	
	  ZImage.prototype.brushVML = function (vmlRoot) {
	    var style = this.style;
	    var image = style.image; // Image original width, height
	
	    var ow;
	    var oh;
	
	    if (isImage(image)) {
	      var src = image.src;
	
	      if (src === this._imageSrc) {
	        ow = this._imageWidth;
	        oh = this._imageHeight;
	      } else {
	        var imageRuntimeStyle = image.runtimeStyle;
	        var oldRuntimeWidth = imageRuntimeStyle.width;
	        var oldRuntimeHeight = imageRuntimeStyle.height;
	        imageRuntimeStyle.width = 'auto';
	        imageRuntimeStyle.height = 'auto'; // get the original size
	
	        ow = image.width;
	        oh = image.height; // and remove overides
	
	        imageRuntimeStyle.width = oldRuntimeWidth;
	        imageRuntimeStyle.height = oldRuntimeHeight; // Caching image original width, height and src
	
	        this._imageSrc = src;
	        this._imageWidth = ow;
	        this._imageHeight = oh;
	      }
	
	      image = src;
	    } else {
	      if (image === this._imageSrc) {
	        ow = this._imageWidth;
	        oh = this._imageHeight;
	      }
	    }
	
	    if (!image) {
	      return;
	    }
	
	    var x = style.x || 0;
	    var y = style.y || 0;
	    var dw = style.width;
	    var dh = style.height;
	    var sw = style.sWidth;
	    var sh = style.sHeight;
	    var sx = style.sx || 0;
	    var sy = style.sy || 0;
	    var hasCrop = sw && sh;
	    var vmlEl = this._vmlEl;
	
	    if (!vmlEl) {
	      // FIXME 使用 group 在 left, top 都不是 0 的时候就无法显示了。
	      // vmlEl = vmlCore.createNode('group');
	      vmlEl = vmlCore.doc.createElement('div');
	      initRootElStyle(vmlEl);
	      this._vmlEl = vmlEl;
	    }
	
	    var vmlElStyle = vmlEl.style;
	    var hasRotation = false;
	    var m;
	    var scaleX = 1;
	    var scaleY = 1;
	
	    if (this.transform) {
	      m = this.transform;
	      scaleX = sqrt(m[0] * m[0] + m[1] * m[1]);
	      scaleY = sqrt(m[2] * m[2] + m[3] * m[3]);
	      hasRotation = m[1] || m[2];
	    }
	
	    if (hasRotation) {
	      // If filters are necessary (rotation exists), create them
	      // filters are bog-slow, so only create them if abbsolutely necessary
	      // The following check doesn't account for skews (which don't exist
	      // in the canvas spec (yet) anyway.
	      // From excanvas
	      var p0 = [x, y];
	      var p1 = [x + dw, y];
	      var p2 = [x, y + dh];
	      var p3 = [x + dw, y + dh];
	      applyTransform(p0, p0, m);
	      applyTransform(p1, p1, m);
	      applyTransform(p2, p2, m);
	      applyTransform(p3, p3, m);
	      var maxX = mathMax(p0[0], p1[0], p2[0], p3[0]);
	      var maxY = mathMax(p0[1], p1[1], p2[1], p3[1]);
	      var transformFilter = [];
	      transformFilter.push('M11=', m[0] / scaleX, comma, 'M12=', m[2] / scaleY, comma, 'M21=', m[1] / scaleX, comma, 'M22=', m[3] / scaleY, comma, 'Dx=', round(x * scaleX + m[4]), comma, 'Dy=', round(y * scaleY + m[5]));
	      vmlElStyle.padding = '0 ' + round(maxX) + 'px ' + round(maxY) + 'px 0'; // FIXME DXImageTransform 在 IE11 的兼容模式下不起作用
	
	      vmlElStyle.filter = imageTransformPrefix + '.Matrix(' + transformFilter.join('') + ', SizingMethod=clip)';
	    } else {
	      if (m) {
	        x = x * scaleX + m[4];
	        y = y * scaleY + m[5];
	      }
	
	      vmlElStyle.filter = '';
	      vmlElStyle.left = round(x) + 'px';
	      vmlElStyle.top = round(y) + 'px';
	    }
	
	    var imageEl = this._imageEl;
	    var cropEl = this._cropEl;
	
	    if (!imageEl) {
	      imageEl = vmlCore.doc.createElement('div');
	      this._imageEl = imageEl;
	    }
	
	    var imageELStyle = imageEl.style;
	
	    if (hasCrop) {
	      // Needs know image original width and height
	      if (!(ow && oh)) {
	        var tmpImage = new Image();
	        var self = this;
	
	        tmpImage.onload = function () {
	          tmpImage.onload = null;
	          ow = tmpImage.width;
	          oh = tmpImage.height; // Adjust image width and height to fit the ratio destinationSize / sourceSize
	
	          imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
	          imageELStyle.height = round(scaleY * oh * dh / sh) + 'px'; // Caching image original width, height and src
	
	          self._imageWidth = ow;
	          self._imageHeight = oh;
	          self._imageSrc = image;
	        };
	
	        tmpImage.src = image;
	      } else {
	        imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
	        imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';
	      }
	
	      if (!cropEl) {
	        cropEl = vmlCore.doc.createElement('div');
	        cropEl.style.overflow = 'hidden';
	        this._cropEl = cropEl;
	      }
	
	      var cropElStyle = cropEl.style;
	      cropElStyle.width = round((dw + sx * dw / sw) * scaleX);
	      cropElStyle.height = round((dh + sy * dh / sh) * scaleY);
	      cropElStyle.filter = imageTransformPrefix + '.Matrix(Dx=' + -sx * dw / sw * scaleX + ',Dy=' + -sy * dh / sh * scaleY + ')';
	
	      if (!cropEl.parentNode) {
	        vmlEl.appendChild(cropEl);
	      }
	
	      if (imageEl.parentNode != cropEl) {
	        cropEl.appendChild(imageEl);
	      }
	    } else {
	      imageELStyle.width = round(scaleX * dw) + 'px';
	      imageELStyle.height = round(scaleY * dh) + 'px';
	      vmlEl.appendChild(imageEl);
	
	      if (cropEl && cropEl.parentNode) {
	        vmlEl.removeChild(cropEl);
	        this._cropEl = null;
	      }
	    }
	
	    var filterStr = '';
	    var alpha = style.opacity;
	
	    if (alpha < 1) {
	      filterStr += '.Alpha(opacity=' + round(alpha * 100) + ') ';
	    }
	
	    filterStr += imageTransformPrefix + '.AlphaImageLoader(src=' + image + ', SizingMethod=scale)';
	    imageELStyle.filter = filterStr;
	    vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2); // Append to root
	
	    append(vmlRoot, vmlEl); // Text
	
	    if (style.text != null) {
	      this.drawRectText(vmlRoot, this.getBoundingRect());
	    }
	  };
	
	  ZImage.prototype.onRemove = function (vmlRoot) {
	    remove(vmlRoot, this._vmlEl);
	    this._vmlEl = null;
	    this._cropEl = null;
	    this._imageEl = null;
	    this.removeRectText(vmlRoot);
	  };
	
	  ZImage.prototype.onAdd = function (vmlRoot) {
	    append(vmlRoot, this._vmlEl);
	    this.appendRectText(vmlRoot);
	  };
	  /***************************************************
	   * TEXT
	   **************************************************/
	
	
	  var DEFAULT_STYLE_NORMAL = 'normal';
	  var fontStyleCache = {};
	  var fontStyleCacheCount = 0;
	  var MAX_FONT_CACHE_SIZE = 100;
	  var fontEl = document.createElement('div');
	
	  var getFontStyle = function (fontString) {
	    var fontStyle = fontStyleCache[fontString];
	
	    if (!fontStyle) {
	      // Clear cache
	      if (fontStyleCacheCount > MAX_FONT_CACHE_SIZE) {
	        fontStyleCacheCount = 0;
	        fontStyleCache = {};
	      }
	
	      var style = fontEl.style;
	      var fontFamily;
	
	      try {
	        style.font = fontString;
	        fontFamily = style.fontFamily.split(',')[0];
	      } catch (e) {}
	
	      fontStyle = {
	        style: style.fontStyle || DEFAULT_STYLE_NORMAL,
	        variant: style.fontVariant || DEFAULT_STYLE_NORMAL,
	        weight: style.fontWeight || DEFAULT_STYLE_NORMAL,
	        size: parseFloat(style.fontSize || 12) | 0,
	        family: fontFamily || 'Microsoft YaHei'
	      };
	      fontStyleCache[fontString] = fontStyle;
	      fontStyleCacheCount++;
	    }
	
	    return fontStyle;
	  };
	
	  var textMeasureEl; // Overwrite measure text method
	
	  textContain.$override('measureText', function (text, textFont) {
	    var doc = vmlCore.doc;
	
	    if (!textMeasureEl) {
	      textMeasureEl = doc.createElement('div');
	      textMeasureEl.style.cssText = 'position:absolute;top:-20000px;left:0;' + 'padding:0;margin:0;border:none;white-space:pre;';
	      vmlCore.doc.body.appendChild(textMeasureEl);
	    }
	
	    try {
	      textMeasureEl.style.font = textFont;
	    } catch (ex) {// Ignore failures to set to invalid font.
	    }
	
	    textMeasureEl.innerHTML = ''; // Don't use innerHTML or innerText because they allow markup/whitespace.
	
	    textMeasureEl.appendChild(doc.createTextNode(text));
	    return {
	      width: textMeasureEl.offsetWidth
	    };
	  });
	  var tmpRect = new BoundingRect();
	
	  var drawRectText = function (vmlRoot, rect, textRect, fromTextEl) {
	    var style = this.style; // Optimize, avoid normalize every time.
	
	    this.__dirty && textHelper.normalizeTextStyle(style, true);
	    var text = style.text; // Convert to string
	
	    text != null && (text += '');
	
	    if (!text) {
	      return;
	    } // Convert rich text to plain text. Rich text is not supported in
	    // IE8-, but tags in rich text template will be removed.
	
	
	    if (style.rich) {
	      var contentBlock = textContain.parseRichText(text, style);
	      text = [];
	
	      for (var i = 0; i < contentBlock.lines.length; i++) {
	        var tokens = contentBlock.lines[i].tokens;
	        var textLine = [];
	
	        for (var j = 0; j < tokens.length; j++) {
	          textLine.push(tokens[j].text);
	        }
	
	        text.push(textLine.join(''));
	      }
	
	      text = text.join('\n');
	    }
	
	    var x;
	    var y;
	    var align = style.textAlign;
	    var verticalAlign = style.textVerticalAlign;
	    var fontStyle = getFontStyle(style.font); // FIXME encodeHtmlAttribute ?
	
	    var font = fontStyle.style + ' ' + fontStyle.variant + ' ' + fontStyle.weight + ' ' + fontStyle.size + 'px "' + fontStyle.family + '"';
	    textRect = textRect || textContain.getBoundingRect(text, font, align, verticalAlign); // Transform rect to view space
	
	    var m = this.transform; // Ignore transform for text in other element
	
	    if (m && !fromTextEl) {
	      tmpRect.copy(rect);
	      tmpRect.applyTransform(m);
	      rect = tmpRect;
	    }
	
	    if (!fromTextEl) {
	      var textPosition = style.textPosition;
	      var distance = style.textDistance; // Text position represented by coord
	
	      if (textPosition instanceof Array) {
	        x = rect.x + parsePercent(textPosition[0], rect.width);
	        y = rect.y + parsePercent(textPosition[1], rect.height);
	        align = align || 'left';
	      } else {
	        var res = textContain.adjustTextPositionOnRect(textPosition, rect, distance);
	        x = res.x;
	        y = res.y; // Default align and baseline when has textPosition
	
	        align = align || res.textAlign;
	        verticalAlign = verticalAlign || res.textVerticalAlign;
	      }
	    } else {
	      x = rect.x;
	      y = rect.y;
	    }
	
	    x = textContain.adjustTextX(x, textRect.width, align);
	    y = textContain.adjustTextY(y, textRect.height, verticalAlign); // Force baseline 'middle'
	
	    y += textRect.height / 2; // var fontSize = fontStyle.size;
	    // 1.75 is an arbitrary number, as there is no info about the text baseline
	    // switch (baseline) {
	    // case 'hanging':
	    // case 'top':
	    //     y += fontSize / 1.75;
	    //     break;
	    //     case 'middle':
	    //         break;
	    //     default:
	    //     // case null:
	    //     // case 'alphabetic':
	    //     // case 'ideographic':
	    //     // case 'bottom':
	    //         y -= fontSize / 2.25;
	    //         break;
	    // }
	    // switch (align) {
	    //     case 'left':
	    //         break;
	    //     case 'center':
	    //         x -= textRect.width / 2;
	    //         break;
	    //     case 'right':
	    //         x -= textRect.width;
	    //         break;
	    // case 'end':
	    // align = elementStyle.direction == 'ltr' ? 'right' : 'left';
	    // break;
	    // case 'start':
	    // align = elementStyle.direction == 'rtl' ? 'right' : 'left';
	    // break;
	    // default:
	    //     align = 'left';
	    // }
	
	    var createNode = vmlCore.createNode;
	    var textVmlEl = this._textVmlEl;
	    var pathEl;
	    var textPathEl;
	    var skewEl;
	
	    if (!textVmlEl) {
	      textVmlEl = createNode('line');
	      pathEl = createNode('path');
	      textPathEl = createNode('textpath');
	      skewEl = createNode('skew'); // FIXME Why here is not cammel case
	      // Align 'center' seems wrong
	
	      textPathEl.style['v-text-align'] = 'left';
	      initRootElStyle(textVmlEl);
	      pathEl.textpathok = true;
	      textPathEl.on = true;
	      textVmlEl.from = '0 0';
	      textVmlEl.to = '1000 0.05';
	      append(textVmlEl, skewEl);
	      append(textVmlEl, pathEl);
	      append(textVmlEl, textPathEl);
	      this._textVmlEl = textVmlEl;
	    } else {
	      // 这里是在前面 appendChild 保证顺序的前提下
	      skewEl = textVmlEl.firstChild;
	      pathEl = skewEl.nextSibling;
	      textPathEl = pathEl.nextSibling;
	    }
	
	    var coords = [x, y];
	    var textVmlElStyle = textVmlEl.style; // Ignore transform for text in other element
	
	    if (m && fromTextEl) {
	      applyTransform(coords, coords, m);
	      skewEl.on = true;
	      skewEl.matrix = m[0].toFixed(3) + comma + m[2].toFixed(3) + comma + m[1].toFixed(3) + comma + m[3].toFixed(3) + ',0,0'; // Text position
	
	      skewEl.offset = (round(coords[0]) || 0) + ',' + (round(coords[1]) || 0); // Left top point as origin
	
	      skewEl.origin = '0 0';
	      textVmlElStyle.left = '0px';
	      textVmlElStyle.top = '0px';
	    } else {
	      skewEl.on = false;
	      textVmlElStyle.left = round(x) + 'px';
	      textVmlElStyle.top = round(y) + 'px';
	    }
	
	    textPathEl.string = encodeHtmlAttribute(text); // TODO
	
	    try {
	      textPathEl.style.font = font;
	    } // Error font format
	    catch (e) {}
	
	    updateFillAndStroke(textVmlEl, 'fill', {
	      fill: style.textFill,
	      opacity: style.opacity
	    }, this);
	    updateFillAndStroke(textVmlEl, 'stroke', {
	      stroke: style.textStroke,
	      opacity: style.opacity,
	      lineDash: style.lineDash
	    }, this);
	    textVmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2); // Attached to root
	
	    append(vmlRoot, textVmlEl);
	  };
	
	  var removeRectText = function (vmlRoot) {
	    remove(vmlRoot, this._textVmlEl);
	    this._textVmlEl = null;
	  };
	
	  var appendRectText = function (vmlRoot) {
	    append(vmlRoot, this._textVmlEl);
	  };
	
	  var list = [RectText, Displayable, ZImage, Path, Text]; // In case Displayable has been mixed in RectText
	
	  for (var i = 0; i < list.length; i++) {
	    var proto = list[i].prototype;
	    proto.drawRectText = drawRectText;
	    proto.removeRectText = removeRectText;
	    proto.appendRectText = appendRectText;
	  }
	
	  Text.prototype.brushVML = function (vmlRoot) {
	    var style = this.style;
	
	    if (style.text != null) {
	      this.drawRectText(vmlRoot, {
	        x: style.x || 0,
	        y: style.y || 0,
	        width: 0,
	        height: 0
	      }, this.getBoundingRect(), true);
	    } else {
	      this.removeRectText(vmlRoot);
	    }
	  };
	
	  Text.prototype.onRemove = function (vmlRoot) {
	    this.removeRectText(vmlRoot);
	  };
	
	  Text.prototype.onAdd = function (vmlRoot) {
	    this.appendRectText(vmlRoot);
	  };
	}

/***/ }),
/* 1124 */
/***/ (function(module, exports, __webpack_require__) {

	var env = __webpack_require__(930);
	
	var urn = 'urn:schemas-microsoft-com:vml';
	var win = typeof window === 'undefined' ? null : window;
	var vmlInited = false;
	var doc = win && win.document;
	
	function createNode(tagName) {
	  return doCreateNode(tagName);
	} // Avoid assign to an exported variable, for transforming to cjs.
	
	
	var doCreateNode;
	
	if (doc && !env.canvasSupported) {
	  try {
	    !doc.namespaces.zrvml && doc.namespaces.add('zrvml', urn);
	
	    doCreateNode = function (tagName) {
	      return doc.createElement('<zrvml:' + tagName + ' class="zrvml">');
	    };
	  } catch (e) {
	    doCreateNode = function (tagName) {
	      return doc.createElement('<' + tagName + ' xmlns="' + urn + '" class="zrvml">');
	    };
	  }
	} // From raphael
	
	
	function initVML() {
	  if (vmlInited || !doc) {
	    return;
	  }
	
	  vmlInited = true;
	  var styleSheets = doc.styleSheets;
	
	  if (styleSheets.length < 31) {
	    doc.createStyleSheet().addRule('.zrvml', 'behavior:url(#default#VML)');
	  } else {
	    // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx
	    styleSheets[0].addRule('.zrvml', 'behavior:url(#default#VML)');
	  }
	}
	
	exports.doc = doc;
	exports.createNode = createNode;
	exports.initVML = initVML;

/***/ }),
/* 1125 */
/***/ (function(module, exports, __webpack_require__) {

	var zrLog = __webpack_require__(947);
	
	var vmlCore = __webpack_require__(1124);
	
	var _util = __webpack_require__(931);
	
	var each = _util.each;
	
	/**
	 * VML Painter.
	 *
	 * @module zrender/vml/Painter
	 */
	function parseInt10(val) {
	  return parseInt(val, 10);
	}
	/**
	 * @alias module:zrender/vml/Painter
	 */
	
	
	function VMLPainter(root, storage) {
	  vmlCore.initVML();
	  this.root = root;
	  this.storage = storage;
	  var vmlViewport = document.createElement('div');
	  var vmlRoot = document.createElement('div');
	  vmlViewport.style.cssText = 'display:inline-block;overflow:hidden;position:relative;width:300px;height:150px;';
	  vmlRoot.style.cssText = 'position:absolute;left:0;top:0;';
	  root.appendChild(vmlViewport);
	  this._vmlRoot = vmlRoot;
	  this._vmlViewport = vmlViewport;
	  this.resize(); // Modify storage
	
	  var oldDelFromStorage = storage.delFromStorage;
	  var oldAddToStorage = storage.addToStorage;
	
	  storage.delFromStorage = function (el) {
	    oldDelFromStorage.call(storage, el);
	
	    if (el) {
	      el.onRemove && el.onRemove(vmlRoot);
	    }
	  };
	
	  storage.addToStorage = function (el) {
	    // Displayable already has a vml node
	    el.onAdd && el.onAdd(vmlRoot);
	    oldAddToStorage.call(storage, el);
	  };
	
	  this._firstPaint = true;
	}
	
	VMLPainter.prototype = {
	  constructor: VMLPainter,
	  getType: function () {
	    return 'vml';
	  },
	
	  /**
	   * @return {HTMLDivElement}
	   */
	  getViewportRoot: function () {
	    return this._vmlViewport;
	  },
	  getViewportRootOffset: function () {
	    var viewportRoot = this.getViewportRoot();
	
	    if (viewportRoot) {
	      return {
	        offsetLeft: viewportRoot.offsetLeft || 0,
	        offsetTop: viewportRoot.offsetTop || 0
	      };
	    }
	  },
	
	  /**
	   * 刷新
	   */
	  refresh: function () {
	    var list = this.storage.getDisplayList(true, true);
	
	    this._paintList(list);
	  },
	  _paintList: function (list) {
	    var vmlRoot = this._vmlRoot;
	
	    for (var i = 0; i < list.length; i++) {
	      var el = list[i];
	
	      if (el.invisible || el.ignore) {
	        if (!el.__alreadyNotVisible) {
	          el.onRemove(vmlRoot);
	        } // Set as already invisible
	
	
	        el.__alreadyNotVisible = true;
	      } else {
	        if (el.__alreadyNotVisible) {
	          el.onAdd(vmlRoot);
	        }
	
	        el.__alreadyNotVisible = false;
	
	        if (el.__dirty) {
	          el.beforeBrush && el.beforeBrush();
	          (el.brushVML || el.brush).call(el, vmlRoot);
	          el.afterBrush && el.afterBrush();
	        }
	      }
	
	      el.__dirty = false;
	    }
	
	    if (this._firstPaint) {
	      // Detached from document at first time
	      // to avoid page refreshing too many times
	      // FIXME 如果每次都先 removeChild 可能会导致一些填充和描边的效果改变
	      this._vmlViewport.appendChild(vmlRoot);
	
	      this._firstPaint = false;
	    }
	  },
	  resize: function (width, height) {
	    var width = width == null ? this._getWidth() : width;
	    var height = height == null ? this._getHeight() : height;
	
	    if (this._width != width || this._height != height) {
	      this._width = width;
	      this._height = height;
	      var vmlViewportStyle = this._vmlViewport.style;
	      vmlViewportStyle.width = width + 'px';
	      vmlViewportStyle.height = height + 'px';
	    }
	  },
	  dispose: function () {
	    this.root.innerHTML = '';
	    this._vmlRoot = this._vmlViewport = this.storage = null;
	  },
	  getWidth: function () {
	    return this._width;
	  },
	  getHeight: function () {
	    return this._height;
	  },
	  clear: function () {
	    if (this._vmlViewport) {
	      this.root.removeChild(this._vmlViewport);
	    }
	  },
	  _getWidth: function () {
	    var root = this.root;
	    var stl = root.currentStyle;
	    return (root.clientWidth || parseInt10(stl.width)) - parseInt10(stl.paddingLeft) - parseInt10(stl.paddingRight) | 0;
	  },
	  _getHeight: function () {
	    var root = this.root;
	    var stl = root.currentStyle;
	    return (root.clientHeight || parseInt10(stl.height)) - parseInt10(stl.paddingTop) - parseInt10(stl.paddingBottom) | 0;
	  }
	}; // Not supported methods
	
	function createMethodNotSupport(method) {
	  return function () {
	    zrLog('In IE8.0 VML mode painter not support method "' + method + '"');
	  };
	} // Unsupported methods
	
	
	each(['getLayer', 'insertLayer', 'eachLayer', 'eachBuiltinLayer', 'eachOtherLayer', 'getLayers', 'modLayer', 'delLayer', 'clearLayer', 'toDataURL', 'pathToImage'], function (name) {
	  VMLPainter.prototype[name] = createMethodNotSupport(name);
	});
	var _default = VMLPainter;
	module.exports = _default;

/***/ }),
/* 1126 */,
/* 1127 */,
/* 1128 */,
/* 1129 */,
/* 1130 */,
/* 1131 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _dic = __webpack_require__(588);
	
	__webpack_require__(1132);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Level = function (_React$Component) {
	    _inherits(Level, _React$Component);
	
	    function Level(props) {
	        _classCallCheck(this, Level);
	
	        return _possibleConstructorReturn(this, (Level.__proto__ || Object.getPrototypeOf(Level)).call(this, props));
	    }
	
	    _createClass(Level, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {}
	    }, {
	        key: 'render',
	        value: function render() {
	            var value = this.props.value;
	            if (value == 1 || value == 0) {
	                return _react2["default"].createElement(
	                    'span',
	                    { className: 'item-level level-1' },
	                    _dic.LEVEL[value]
	                );
	            } else if (value == 2) {
	                return _react2["default"].createElement(
	                    'span',
	                    { className: 'item-level level-2' },
	                    _dic.LEVEL[value]
	                );
	            } else {
	                return _react2["default"].createElement(
	                    'span',
	                    { className: 'item-level level-3' },
	                    _dic.LEVEL[value] || "未知"
	                );
	            }
	        }
	    }]);
	
	    return Level;
	}(_react2["default"].Component);
	
	exports["default"] = Level;

/***/ }),
/* 1132 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 1133 */,
/* 1134 */,
/* 1135 */,
/* 1136 */,
/* 1137 */,
/* 1138 */,
/* 1139 */,
/* 1140 */,
/* 1141 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _loader = __webpack_require__(410);
	
	var _loader2 = _interopRequireDefault(_loader);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.template = (0, _loader2["default"])(function (a) {
	            return __webpack_require__.e/* require */(21, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(1142)("./" + props.type)]; (a.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
	        });
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: "componentWillReceiveProps",
	        value: function componentWillReceiveProps(nextProps) {
	            if (nextProps.type !== this.props.type) {
	                this.template = (0, _loader2["default"])(function (a) {
	                    return __webpack_require__.e/* require */(21/* duplicate */, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(1142)("./" + nextProps.type)]; (a.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}.bind(this));
	                });
	            }
	        }
	    }, {
	        key: "getConditionsValue",
	        value: function getConditionsValue(value) {
	            this.props.conditionsValue(_extends({}, value, { key: Date.now() }));
	        }
	    }, {
	        key: "render",
	        value: function render() {
	            var props = this.props;
	
	            return _react2["default"].createElement(this.template, {
	                conditionsValue: this.getConditionsValue.bind(this),
	                northLayoutHeight: props.northLayoutHeight,
	                defaultValue: props.defaultValue,
	                increase: props.increase,
	                increaseKey: props.increaseKey,
	                taskId: props.taskId,
	                taskName: props.taskName,
	                uploadListLengthCallback: props.uploadListLengthCallback
	            });
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	exports["default"] = App;

/***/ }),
/* 1142 */,
/* 1143 */,
/* 1144 */,
/* 1145 */,
/* 1146 */,
/* 1147 */,
/* 1148 */,
/* 1149 */,
/* 1150 */,
/* 1151 */,
/* 1152 */,
/* 1153 */,
/* 1154 */,
/* 1155 */,
/* 1156 */,
/* 1157 */,
/* 1158 */,
/* 1159 */,
/* 1160 */,
/* 1161 */,
/* 1162 */,
/* 1163 */,
/* 1164 */,
/* 1165 */,
/* 1166 */,
/* 1167 */,
/* 1168 */,
/* 1169 */,
/* 1170 */,
/* 1171 */,
/* 1172 */,
/* 1173 */,
/* 1174 */,
/* 1175 */,
/* 1176 */,
/* 1177 */,
/* 1178 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.HistorySearch = exports.SearchRecord = exports.SearchDay = exports.SearchPerson = undefined;
	
	var _list_searchPerson = __webpack_require__(1179);
	
	var _list_searchPerson2 = _interopRequireDefault(_list_searchPerson);
	
	var _list_searchDay = __webpack_require__(1200);
	
	var _list_searchDay2 = _interopRequireDefault(_list_searchDay);
	
	var _list_searchRecord = __webpack_require__(1201);
	
	var _list_searchRecord2 = _interopRequireDefault(_list_searchRecord);
	
	var _list_historySearch = __webpack_require__(1202);
	
	var _list_historySearch2 = _interopRequireDefault(_list_historySearch);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	exports.SearchPerson = _list_searchPerson2["default"];
	exports.SearchDay = _list_searchDay2["default"];
	exports.SearchRecord = _list_searchRecord2["default"];
	exports.HistorySearch = _list_historySearch2["default"];

/***/ }),
/* 1179 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _switch = __webpack_require__(481);
	
	var _switch2 = _interopRequireDefault(_switch);
	
	var _checkbox = __webpack_require__(845);
	
	var _checkbox2 = _interopRequireDefault(_checkbox);
	
	var _radio = __webpack_require__(805);
	
	var _radio2 = _interopRequireDefault(_radio);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _dec, _class, _class2, _temp;
	//import Export from '../../components/export';
	
	
	__webpack_require__(484);
	
	__webpack_require__(601);
	
	__webpack_require__(820);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _withSubscription = __webpack_require__(1180);
	
	var _withSubscription2 = _interopRequireDefault(_withSubscription);
	
	var _pagination = __webpack_require__(867);
	
	var _pagination2 = _interopRequireDefault(_pagination);
	
	var _dic = __webpack_require__(588);
	
	var _autoHide = __webpack_require__(876);
	
	var _autoHide2 = _interopRequireDefault(_autoHide);
	
	var _icon = __webpack_require__(477);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _moment = __webpack_require__(662);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _tableList = __webpack_require__(1187);
	
	var _tableList2 = _interopRequireDefault(_tableList);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var RadioButton = _radio2["default"].Button;
	var RadioGroup = _radio2["default"].Group;
	
	//http://localhost:4001/ibody/mock/findResult,///search/findIntelliSearchResult.do
	var App = (_dec = (0, _withSubscription2["default"])("/mock/search/findSearchResult.do"), _dec(_class = (_temp = _class2 = function (_Component) {
	    _inherits(App, _Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.state = {
	            listType: 'imageList'
	        };
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'bodySearchHander',
	        value: function bodySearchHander(item) {
	            //以人搜人
	            var param = {
	                componentId: 'ibody',
	                componentMenuId: '0200',
	                param: 'imageUrl=' + item.target_pic_url,
	                url: '',
	                name: '',
	                callback: { "function": '', param: '' },
	                reload: true
	            };
	            top.window.goToApp(param);
	        }
	    }, {
	        key: 'faceSearchFaceHandler',
	        value: function faceSearchFaceHandler(item) {
	            //以脸搜脸
	            var param = {
	                componentId: 'iface',
	                componentMenuId: 'query_0',
	                param: 'imageUrl=' + item.target_pic_url,
	                url: '',
	                name: '',
	                callback: { "function": '', param: '' },
	                reload: true
	            };
	            top.window.goToApp(param);
	        }
	    }, {
	        key: 'faceIdSearchHander',
	        value: function faceIdSearchHander(item) {
	            //以脸搜证
	            var param = {
	                componentId: 'iface',
	                componentMenuId: 'query_2',
	                param: 'imageUrl=' + item.target_pic_url,
	                url: '',
	                name: '',
	                callback: { "function": '', param: '' },
	                reload: true
	            };
	            top.window.goToApp(param);
	        }
	    }, {
	        key: 'onChange',
	        value: function onChange(e) {
	            this.setState({
	                listType: e.target.value
	            });
	        }
	    }, {
	        key: 'onClick',
	        value: function onClick(item, type, index) {
	            if (type === 'faceIdSearchHander') {
	                this.faceIdSearchHander(item);
	            } else if (type === 'bodySearchHander') {
	                this.bodySearchHander(item);
	            } else if (type === 'clickRow') {
	                this.props.onClick(this.props.data.jobId, index);
	            } else {
	                this.props.controlHander(item, type, { "jobId": this.props.data.jobId, "currentId": index, "type": this.props.type });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var props = this.props,
	                state = this.state;
	
	            return _react2["default"].createElement(
	                'div',
	                { className: 'image-list-container', style: { width: props.width || '100%' } },
	                _react2["default"].createElement(
	                    'div',
	                    { className: 'image-list-banner' },
	                    props.chooseState && state.listType === 'imageList' && _react2["default"].createElement(
	                        'div',
	                        { className: 'choose-all-checkbox' },
	                        _react2["default"].createElement(
	                            _checkbox2["default"],
	                            { onChange: function onChange(e) {
	                                    return props.chooseAllChange(e);
	                                }, checked: props.checkedAll, list: props.data.list, dataNum: props.dataNum },
	                            '\u5168\u9009'
	                        )
	                    ),
	                    !props.chooseState && _react2["default"].createElement(
	                        'div',
	                        null,
	                        _react2["default"].createElement(
	                            'div',
	                            { className: 'image-list-switch', style: { marginLeft: 8 } },
	                            props.browser.width >= 1440 && !props.layout.switchState && _react2["default"].createElement(
	                                'span',
	                                null,
	                                _react2["default"].createElement(_switch2["default"], { defaultChecked: false, size: 'small', onChange: props.switchChange }),
	                                ' \u53F3\u4FA7\u4FE1\u606F'
	                            )
	                        ),
	                        _react2["default"].createElement(
	                            'div',
	                            { className: 'image-list-change' },
	                            _react2["default"].createElement(
	                                RadioGroup,
	                                { onChange: this.onChange.bind(this), defaultValue: state.listType },
	                                _react2["default"].createElement(
	                                    RadioButton,
	                                    { value: 'imageList' },
	                                    _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-menu' })
	                                ),
	                                _react2["default"].createElement(
	                                    RadioButton,
	                                    { value: 'tableList' },
	                                    _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-menu-leftbar' })
	                                )
	                            )
	                        )
	                    )
	                ),
	                state.listType === 'imageList' ? _react2["default"].createElement(
	                    'div',
	                    { className: 'image-list-content' },
	                    props.data && props.data.list && props.data.list.map(function (item, index) {
	                        return _react2["default"].createElement(
	                            'div',
	                            { className: 'image-list-items', key: index },
	                            _react2["default"].createElement(
	                                'div',
	                                { className: 'image-list-items-c' },
	                                _react2["default"].createElement(
	                                    'div',
	                                    { className: 'pic-container', style: { width: "222px", height: "222px" } },
	                                    _react2["default"].createElement('img', { onClick: function onClick() {
	                                            return props.onClick(props.data.jobId, index, 'group-day');
	                                        }, src: item.facePicUrl, width: 222, height: 222 }),
	                                    item.linkFaceBodyId && _react2["default"].createElement(
	                                        'div',
	                                        { className: 'relation-icon' },
	                                        _react2["default"].createElement('i', { className: 'correlation-face' })
	                                    ),
	                                    props.chooseState && _react2["default"].createElement(
	                                        'div',
	                                        { className: 'choose-one-checkbox' },
	                                        _react2["default"].createElement(_checkbox2["default"], { onChange: function onChange(e) {
	                                                return props.chooseOneChange(e);
	                                            }, checked: props.checkedArray[index], item: item, index: index, dataNum: props.dataNum })
	                                    )
	                                ),
	                                _react2["default"].createElement(
	                                    'div',
	                                    { className: 'image-list-items-infos' },
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'image-list-list' },
	                                        _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-face-name', className: 'icon-cls', style: { fontSize: 12 } }),
	                                        _react2["default"].createElement(
	                                            'p',
	                                            null,
	                                            item.name
	                                        )
	                                    ),
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'image-list-list' },
	                                        _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-face-identity', className: 'icon-cls', style: { fontSize: 12 } }),
	                                        _react2["default"].createElement(
	                                            'p',
	                                            null,
	                                            item.humanId
	                                        )
	                                    ),
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'image-list-list' },
	                                        _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-clock', className: 'icon-cls', style: { fontSize: 12 } }),
	                                        _react2["default"].createElement(
	                                            'a',
	                                            { onClick: function onClick() {
	                                                    return props.onClick(props.data.jobId, index, 'group-day');
	                                                } },
	                                            item.dayNum + "天"
	                                        )
	                                    )
	                                )
	                            )
	                        );
	                    })
	                ) : _react2["default"].createElement(
	                    'div',
	                    { className: 'table-list-content' },
	                    _react2["default"].createElement(_tableList2["default"], { data: props.data, type: props.type, onClick: this.onClick.bind(this), rowSelection: props.chooseState ? props.rowSelection : null })
	                ),
	                !props.hidePagination && _react2["default"].createElement(
	                    'div',
	                    { className: 'imagelist-bottom' },
	                    _react2["default"].createElement(_pagination2["default"], {
	                        current: props.currentPage,
	                        total: props.data.total,
	                        pageSize: props.pageSize,
	                        showSizeChanger: true,
	                        onShowSizeChange: props.onShowSizeChange,
	                        onChange: props.onPageChange,
	                        pageSizeOptions: _dic.PAGESIZEOPTIONS,
	                        showQuickJumper: true
	                    })
	                )
	            );
	        }
	    }]);
	
	    return App;
	}(_react.Component), _class2.defaultProps = {
	    viewRoute: "#/search/person",
	    type: "searchPerson"
	}, _temp)) || _class);
	exports["default"] = App;

/***/ }),
/* 1180 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(158);
	
	var _redux = __webpack_require__(177);
	
	var _actions = __webpack_require__(272);
	
	var _http = __webpack_require__(277);
	
	var _http2 = _interopRequireDefault(_http);
	
	var _maps = __webpack_require__(909);
	
	var _tool = __webpack_require__(896);
	
	var _maps2 = __webpack_require__(897);
	
	var _loading = __webpack_require__(1181);
	
	var _loading2 = _interopRequireDefault(_loading);
	
	var _lib = __webpack_require__(1183);
	
	var _btools = __webpack_require__(1184);
	
	var _btools2 = _interopRequireDefault(_btools);
	
	__webpack_require__(1186);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var withSubscription = function withSubscription() {
	    var requestUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	
	    return function (WrappedComponent) {
	        var _class, _temp;
	
	        return (0, _reactRedux.connect)(function (state) {
	            return { browser: state.browser, layout: state.layout, user: state.user };
	        }, function (dispatch) {
	            return (0, _redux.bindActionCreators)({ switchState: _actions.switchState }, dispatch);
	        })((_temp = _class = function (_Component) {
	            _inherits(_class, _Component);
	
	            function _class(props) {
	                _classCallCheck(this, _class);
	
	                var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));
	
	                _this.state = {
	                    data: {},
	                    width: 0,
	                    height: 0,
	                    currentPage: 1,
	                    pageSize: _this.props.pageSize,
	                    show_targetLocationModal: false,
	                    item: {},
	                    targetLocationModalUrl: _maps.targetLocationFullScreenUrl,
	                    count: 100,
	                    chooseState: false,
	                    checkedAll: false,
	                    chooseData: [],
	                    checkedArray: [],
	                    defaultSortValue: '0',
	                    defaultRelationValue: 'all',
	                    currentIndex: 0
	                };
	                return _this;
	            }
	
	            _createClass(_class, [{
	                key: 'componentWillReceiveProps',
	                value: function componentWillReceiveProps(nextProps) {
	                    this.changeWidth(nextProps);
	                    if (nextProps.conditions && nextProps.conditions.key !== this.props.conditions.key) {
	                        this.setState({
	                            currentPage: 1
	                        });
	                        if (!nextProps.conditions.pageNo) {
	                            nextProps.conditions.pageNo = 1;
	                            nextProps.conditions.pageSize = this.state.pageSize;
	                        }
	                        if (nextProps.conditions.sortField) {
	                            this.setState({
	                                defaultSortValue: nextProps.conditions.sortField
	                            });
	                        }
	                        if (nextProps.conditions.filterLink) {
	                            this.setState({
	                                defaultRelationValue: nextProps.conditions.filterLink
	                            });
	                        }
	                        this.fetch(nextProps.conditions);
	                    }
	                }
	            }, {
	                key: 'componentWillMount',
	                value: function componentWillMount() {
	                    var props = this.props,
	                        state = this.state;
	
	                    this.changeWidth(props);
	                    if (props.conditions) {
	                        props.conditions.pageNo = 1;
	                        props.conditions.pageSize = state.pageSize;
	                        this.fetch(props.conditions);
	                    }
	                }
	            }, {
	                key: 'changeWidth',
	                value: function changeWidth(props) {
	                    var width = void 0,
	                        browserWidth = void 0;
	                    if (props.width) {
	                        width = props.width;
	                    } else {
	                        browserWidth = props.browser.width;
	                        width = browserWidth - (browserWidth < 1280 ? 0 : !props.layout.switchState ? 0 || 1 : props.layout.eastWidth || 1);
	                    }
	                    var changeWidth = width - width % props.cardWidth;
	                    this.setState({
	                        width: changeWidth,
	                        count: !props.isGroup ? 100 : changeWidth / props.cardWidth
	                    });
	                }
	            }, {
	                key: 'fetch',
	                value: function fetch() {
	                    var _this2 = this;
	
	                    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	                    _loading2["default"].showLoading('large');
	                    // 组请求的数据源，组目前存在于上次数据结构中的snapInfos；
	                    // 其它子系统有用到组的，要对内嵌数据命名统一；
	                    // groupType只限于以脸搜证，内嵌数据在一起的；
	                    if (this.props.groupType === 'group') {
	                        var jobId = this.props.value.jobId;
	                        var currentId = this.props.value.currentId;
	                        _http2["default"].storage.getData(jobId).then(function (_ref) {
	                            var data = _ref.data;
	
	                            data.list[currentId].snapInfos.map(function (item) {
	                                item.bkgUrl = data.list[currentId].bkgUrl;
	                                item.registerGenderValue = data.list[currentId].registerGenderValue;
	                                item.nationValue = data.list[currentId].nationValue;
	                                item.bornTime = data.list[currentId].bornTime;
	                                item.name = data.list[currentId].name;
	                                item.certificateNumber = data.list[currentId].certificateNumber;
	                                item.address = data.list[currentId].address;
	                            });
	                            var d = {
	                                "list": data.list[currentId].snapInfos || [],
	                                "name": data.list[currentId].name,
	                                "certificateNumber": data.list[currentId].certificateNumber,
	                                "comprehensiveInfos": params.comprehensiveInfos,
	                                "uploadImgUrl": params.uploadImgUrl
	                            };
	                            _http2["default"].storage.setData(d).then(function (jobId) {
	                                d['jobId'] = jobId;
	                                if (d.list && data.list.length > 0) {
	                                    _this2.setState({
	                                        data: d,
	                                        currentIndex: 0
	                                    });
	                                    _this2.props.callback({
	                                        jobId: jobId,
	                                        // 首次回调默认下标0的元素
	                                        currentId: 0
	                                    });
	                                } else {
	                                    _this2.props.emptyCallback();
	                                }
	                            })["catch"](function (e) {
	                                return _http2["default"].showError(e);
	                            });
	                        })["catch"](function (e) {
	                            return _http2["default"].showError(e);
	                        }).then(function () {
	                            _loading2["default"].hideLoading();
	                        });
	                        return;
	                    }
	                    //按日聚合 kongzhe
	                    if (this.props.groupType === 'day') {
	                        var _jobId = this.props.value.jobId;
	                        var _currentId = this.props.value.currentId;
	                        _http2["default"].storage.getData(_jobId).then(function (_ref2) {
	                            var data = _ref2.data;
	
	                            data.list[_currentId].dayList.map(function (item) {
	                                item.name = data.list[_currentId].name;
	                                item.humanId = data.list[_currentId].humanId;
	                                item.gender = data.list[_currentId].gender;
	                            });
	                            var d = {
	                                "list": data.list[_currentId].dayList || [],
	                                "name": data.list[_currentId].name,
	                                "humanId": data.list[_currentId].humanId,
	                                "gender": data.list[_currentId].gender,
	                                "comprehensiveInfos": params.comprehensiveInfos,
	                                "uploadImgUrl": params.uploadImgUrl
	                            };
	                            _http2["default"].storage.setData(d).then(function (jobId) {
	                                d['jobId'] = jobId;
	                                if (d.list && data.list.length > 0) {
	                                    _this2.setState({
	                                        data: d,
	                                        currentIndex: 0
	                                    });
	                                    _this2.props.callback({
	                                        jobId: jobId,
	                                        // 首次回调默认下标0的元素
	                                        currentId: 0
	                                    });
	                                } else {
	                                    _this2.props.emptyCallback();
	                                }
	                            })["catch"](function (e) {
	                                return _http2["default"].showError(e);
	                            });
	                        })["catch"](function (e) {
	                            return _http2["default"].showError(e);
	                        }).then(function () {
	                            _loading2["default"].hideLoading();
	                        });
	                        return;
	                    }
	                    if (requestUrl) {
	                        _http2["default"].post(requestUrl, params).then(function (_ref3) {
	                            var data = _ref3.data;
	
	                            // 存入comprehensiveInfos, uploadImgUrl
	                            data['comprehensiveInfos'] = params.comprehensiveInfos;
	                            data['uploadImgUrl'] = params.uploadImgUrl || params.groupBkgUrl;
	                            // 存入localStorage
	                            _http2["default"].storage.setData(data).then(function (jobId) {
	                                data['jobId'] = jobId;
	                                if (data.list && data.list.length > 0) {
	                                    _this2.setState({
	                                        data: data,
	                                        currentIndex: 0
	                                    });
	                                    _this2.props.callback({
	                                        jobId: jobId,
	                                        // 首次回调默认下标0的元素
	                                        currentId: 0,
	                                        groupIndex: params.groupIndex,
	                                        type: _this2.props.type
	                                    });
	                                } else {
	                                    _this2.setState({
	                                        data: {}
	                                    });
	                                    _this2.props.emptyCallback();
	                                }
	                            })["catch"](function (e) {
	                                return _http2["default"].showError(e);
	                            });
	                        })["catch"](function (e) {
	                            _http2["default"].showError(e);
	                            _this2.props.emptyCallback();
	                        }).then(function () {
	                            _loading2["default"].hideLoading();
	                        });
	                    }
	                }
	            }, {
	                key: 'onClick',
	                value: function onClick(jobId, index, type, rowKey, groupBkgUrl) {
	                    var browserWidth = this.browser.width;
	                    if ((browserWidth < 1280 || this.layout.eastWidth === 0 || !this.switchState) && type && type.indexOf('group') === -1) {
	                        this.openView(jobId, index, this.type);
	                    } else {
	                        this.callback({
	                            jobId: jobId,
	                            "currentId": index,
	                            type: type,
	                            rowKey: rowKey,
	                            groupBkgUrl: groupBkgUrl
	                        });
	                    }
	                    this.setStateCopy({
	                        currentIndex: index
	                    });
	                }
	            }, {
	                key: 'openView',
	                value: function openView(jobId, index, type) {
	                    var url = '#view/' + type + '?index=' + index + '&jobId=' + jobId;
	                    (0, _tool.goToApp)({
	                        url: url,
	                        title: "目标详情"
	                    });
	                }
	            }, {
	                key: 'onPageChange',
	                value: function onPageChange(page) {
	                    this.setState({
	                        currentPage: page
	                    });
	                    var state = this.state,
	                        props = this.props;
	
	                    var taskId = state.data.taskId;
	                    var conditions = props.conditions;
	                    if (conditions) {
	                        conditions.pageNo = page;
	                        conditions.pageSize = state.pageSize;
	                        if (taskId) {
	                            conditions.taskId = taskId;
	                        }
	                        this.fetch(conditions);
	                    }
	                }
	            }, {
	                key: 'onShowSizeChange',
	                value: function onShowSizeChange(currentPage, pageSize) {
	                    this.setState({
	                        currentPage: 1,
	                        pageSize: pageSize
	                    });
	                    var state = this.state,
	                        props = this.props;
	
	                    var taskId = state.data.taskId;
	                    var conditions = props.conditions;
	                    if (conditions) {
	                        conditions.pageNo = 1;
	                        conditions.pageSize = pageSize;
	                        if (taskId) {
	                            conditions.taskId = taskId;
	                        }
	                        this.fetch(conditions);
	                    }
	                }
	
	                /**
	                 * 关联人员，车辆，人体过滤
	                 */
	
	            }, {
	                key: 'relationMenuClick',
	                value: function relationMenuClick(value) {
	                    var props = this.props,
	                        state = this.state;
	
	                    var taskId = state.data.taskId;
	                    if (props.conditions) {
	                        props.conditions.pageNo = 1;
	                        props.conditions.pageSize = props.pageSize;
	                        props.conditions.filterLink = value;
	                        this.setState({
	                            defaultRelationValue: value
	                        });
	                        this.fetch(props.conditions);
	                    }
	                }
	
	                /**
	                 * 相似度，时间排序过滤
	                 * sortField
	                 * 可选，结果查询排序字段，0相似度，1抓拍时间；默认相似度
	                 */
	
	            }, {
	                key: 'sortMenuClick',
	                value: function sortMenuClick(value) {
	                    var props = this.props,
	                        state = this.state;
	
	                    var taskId = state.data.taskId;
	                    if (props.conditions) {
	                        props.conditions.pageNo = 1;
	                        props.conditions.pageSize = props.pageSize;
	                        props.conditions.sortField = value;
	                        if (taskId) {
	                            props.conditions.taskId = taskId;
	                        }
	                        this.setState({
	                            defaultSortValue: value
	                        });
	                        this.fetch(props.conditions);
	                    }
	                }
	            }, {
	                key: 'switchChange',
	                value: function switchChange(checked) {
	                    this.props.switchState(checked);
	                }
	
	                /**
	                 * 卡片下方操作按钮，只操作 查看详情、地图定位、加入暂存架、添加到条件、视频回放 5个常用方法；
	                 * 子系统中特殊的操作方法，自行在被包裹的组件内实现；
	                 * @param item {Object}
	                 * @param type (String)
	                 * @param point {Object}
	                 */
	
	            }, {
	                key: 'controlHander',
	                value: function controlHander(item, type, point) {
	                    switch (type) {
	                        // 查看详情
	                        case "document":
	                            this.openView(point.jobId, point.currentId, point.type);
	                            break;
	                        // 地图定位
	                        case "local":
	                            var browserWidth = this.props.browser.width;
	                            var _switchState = this.props.layout.switchState;
	                            var eastWidth = this.props.layout.eastWidth;
	                            if (browserWidth < 1440 || !_switchState || eastWidth === 0) {
	                                this.setState({
	                                    show_targetLocationModal: true,
	                                    item: item
	                                });
	                            } else {
	                                if (point) {
	                                    this.props.callback({
	                                        jobId: point.jobId,
	                                        currentId: point.currentId,
	                                        type: type
	                                    });
	                                    this.setState({
	                                        currentIndex: point.currentId
	                                    });
	                                }
	                            }
	                            break;
	                        // 加入暂存架
	                        case "cartAdd":
	                            (0, _lib.addToStorage)(item);
	                            break;
	                        // 添加到条件
	                        case "photoAdd":
	                            if (this.props.photoAddCallback) {
	                                this.props.photoAddCallback(item);
	                            }
	                            break;
	                        // 视频回放
	                        case "playback":
	                            var cameraIndexCode = item.cameraIndexCode;
	                            var createTimeLong = item.createTimeLong;
	                            var playerParam = this.props.user.interfaceInfo.playerParam;
	                            _btools2["default"].playBack(cameraIndexCode, createTimeLong, playerParam, point);
	                            break;
	                        default:
	                            break;
	
	                    }
	                }
	
	                //地图定位关闭弹窗后回调
	
	            }, {
	                key: 'closeTargetLocationModalCallback',
	                value: function closeTargetLocationModalCallback(show_targetLocationModal) {
	                    this.setState({
	                        show_targetLocationModal: show_targetLocationModal
	                    });
	                }
	
	                //导出全选
	
	            }, {
	                key: 'chooseAllChange',
	                value: function chooseAllChange(e) {
	                    if (e.target.checked) {
	                        this.setState({
	                            checkedAll: true,
	                            chooseData: Array.from(e.target.list),
	                            checkedArray: new Array(e.target.dataNum).fill(true)
	                        });
	                    } else {
	                        this.setState({
	                            checkedAll: false,
	                            chooseData: [],
	                            checkedArray: new Array(e.target.dataNum).fill(false)
	                        });
	                    }
	                }
	
	                //勾选导出
	
	            }, {
	                key: 'chooseOneChange',
	                value: function chooseOneChange(e) {
	                    var _state = this.state,
	                        chooseData = _state.chooseData,
	                        checkedArray = _state.checkedArray;
	
	                    if (e.target.checked) {
	                        checkedArray[e.target.index] = true;
	                        var checkedLen = checkedArray.filter(function (item) {
	                            return item;
	                        }).length;
	                        var checkedAll = !checkedArray.some(function (x) {
	                            return x == false;
	                        }) && checkedLen == e.target.dataNum;
	                        chooseData[e.target.index] = e.target.item;
	                        this.setState({
	                            chooseData: Array.from(chooseData),
	                            checkedArray: checkedArray,
	                            checkedAll: checkedAll
	                        });
	                    } else {
	                        checkedArray[e.target.index] = false;
	                        var _checkedLen = checkedArray.filter(function (item) {
	                            return item;
	                        }).length;
	                        var _checkedAll = _checkedLen != 0 ? !(checkedArray.some(function (x) {
	                            return x == true;
	                        }) && _checkedLen != e.target.dataNum) : false;
	                        chooseData[e.target.index] = undefined;
	                        this.setState({
	                            chooseData: chooseData,
	                            checkedArray: checkedArray,
	                            checkedAll: _checkedAll
	                        });
	                    }
	                }
	            }, {
	                key: 'exportState',
	                value: function exportState(key, chooseState) {
	                    // 选中导出约定key值为2
	                    if (key && key === '2') {
	                        this.setState({
	                            chooseState: chooseState
	                        });
	                    }
	                    if (!chooseState) {
	                        this.setState({
	                            checkedAll: false,
	                            chooseData: [],
	                            checkedArray: []
	                        });
	                    }
	                }
	            }, {
	                key: 'getDom',
	                value: function getDom(dom) {}
	            }, {
	                key: 'render',
	                value: function render() {
	                    var _this3 = this;
	
	                    var props = _extends({}, this.props, {
	                        width: this.state.width,
	                        height: this.state.height,
	                        count: this.state.count,
	                        defaultSortValue: this.state.defaultSortValue,
	                        defaultRelationValue: this.state.defaultRelationValue,
	                        onClick: this.onClick,
	                        openView: this.openView,
	                        pageSize: this.state.pageSize,
	                        onPageChange: this.onPageChange.bind(this),
	                        onShowSizeChange: this.onShowSizeChange.bind(this),
	                        relationMenuClick: this.relationMenuClick.bind(this),
	                        sortMenuClick: this.sortMenuClick.bind(this),
	                        switchChange: this.switchChange.bind(this),
	                        setStateCopy: this.setState.bind(this),
	                        controlHander: this.controlHander.bind(this),
	                        currentPage: this.state.currentPage,
	                        chooseState: this.state.chooseState,
	                        checkedAll: this.state.checkedAll,
	                        chooseData: this.state.chooseData.filter(function (item) {
	                            return item;
	                        }),
	                        checkedArray: this.state.checkedArray,
	                        dataNum: this.state.data && this.state.data.list ? this.state.data.list.length : 0,
	                        chooseAllChange: this.chooseAllChange.bind(this),
	                        chooseOneChange: this.chooseOneChange.bind(this),
	                        exportState: this.exportState.bind(this),
	                        fetch: this.fetch.bind(this),
	                        currentIndex: this.state.currentIndex //当前激活状态的目标
	                    });
	                    var rowSelection = { //列表勾选
	                        onChange: function onChange(selectedRowKeys, selectedRows) {
	                            _this3.setState({
	                                chooseData: selectedRows
	                            });
	                        },
	                        onSelectAll: function onSelectAll(selected, selectedRows, changeRows) {
	                            _this3.setState({
	                                chooseData: selectedRows
	                            });
	                        }
	                    };
	                    var _state2 = this.state,
	                        item = _state2.item,
	                        targetLocationModalUrl = _state2.targetLocationModalUrl,
	                        show_targetLocationModal = _state2.show_targetLocationModal;
	
	                    var targetLocationData = {
	                        name: item.collect_address,
	                        longitude: item.longitude,
	                        latitude: item.latitude
	                    };
	                    return _react2["default"].createElement(
	                        'div',
	                        null,
	                        _react2["default"].createElement(WrappedComponent, _extends({}, props, { data: this.state.data, rowSelection: rowSelection,
	                            ref: function ref(dom) {
	                                return _this3.getDom(dom);
	                            } })),
	                        _react2["default"].createElement(_maps2.TargetLocationModal, {
	                            url: targetLocationModalUrl,
	                            data: targetLocationData,
	                            visible: show_targetLocationModal,
	                            closeCallback: this.closeTargetLocationModalCallback.bind(this)
	                        })
	                    );
	                }
	            }]);
	
	            return _class;
	        }(_react.Component), _class.defaultProps = {
	            pageSize: 20,
	            cardWidth: 240,
	            isGroup: false
	        }, _temp));
	    };
	};
	
	exports["default"] = withSubscription;

/***/ }),
/* 1181 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	__webpack_require__(1182);
	
	var Cpt = function Cpt(type, Component) {
	    var ele = void 0;
	    if (!Component) {
	        ele = document.body;
	    } else {
	        ele = Component;
	    }
	    var node = document.createElement('div');
	    var arr = [];
	    arr.push(node);
	    for (var i = 0; i < ele.childNodes.length; i++) {
	        arr.push(ele.childNodes[i]);
	        ele.removeChild(ele.firstChild);
	        i--;
	    }
	    for (var j = 0; j < arr.length; j++) {
	        ele.appendChild(arr[j]);
	    }
	    ele.firstChild.style.height = ele.offsetHeight + 'px';
	    ele.firstChild.style.width = ele.offsetWidth + 'px';
	
	    if (!type || type === 'default') {
	        ele.firstChild.className = 'loading-container-default';
	    } else if (type === 'large') {
	        ele.firstChild.className = 'loading-container-large';
	    } else if (type === 'small') {
	        ele.firstChild.className = 'loading-container-small';
	    } else if (type === 'mini') {
	        ele.firstChild.className = 'loading-container-mini';
	    }
	};
	var rCpt = function rCpt(Component) {
	    var ele = void 0;
	    if (!Component) {
	        ele = document.body;
	    } else {
	        ele = Component;
	    }
	    ele.removeChild(ele.firstChild);
	};
	exports["default"] = {
	    showLoading: function showLoading(type, Component) {
	        Cpt(type, Component);
	    },
	    hideLoading: function hideLoading(Component) {
	        rCpt(Component);
	    }
	};

/***/ }),
/* 1182 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 1183 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.addToStorage = undefined;
	
	var _message2 = __webpack_require__(500);
	
	var _message3 = _interopRequireDefault(_message2);
	
	__webpack_require__(580);
	
	var _uuidJs = __webpack_require__(305);
	
	var _uuidJs2 = _interopRequireDefault(_uuidJs);
	
	var _http = __webpack_require__(277);
	
	var _http2 = _interopRequireDefault(_http);
	
	var _moment = __webpack_require__(662);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _dic = __webpack_require__(588);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function addToStorage(storageData) {
	    var hide = _message3["default"].loading('正在加载，请稍候...', 0);
	    _http2["default"].post('/tempshelf/batchSaveRes.do', transforData(storageData)).then(function (response) {
	        return _message3["default"].success('操作成功');
	    })["catch"](function (e) {
	        return _http2["default"].showError(e);
	    }).then(hide);
	}
	
	exports.addToStorage = addToStorage;
	
	
	function transforData(data) {
	    if (CONTEXTPATH === 'iface') {
	        var facePicUrl = data.facePicUrl,
	            bkgUrl = data.bkgUrl,
	            linkFaceBodyId = data.linkFaceBodyId,
	            linkFaceVehicleId = data.linkFaceVehicleId,
	            linkFaceMacId = data.linkFaceMacId,
	            cameraName = data.cameraName,
	            faceTime = data.faceTime,
	            longitude = data.longitude,
	            latitude = data.latitude,
	            ethnic = data.ethnic,
	            ethnicValue = data.ethnicValue,
	            gender = data.gender,
	            genderValue = data.genderValue,
	            glass = data.glass,
	            glassValue = data.glassValue,
	            ageGroup = data.ageGroup,
	            ageGroupValue = data.ageGroupValue,
	            smile = data.smile,
	            smileValue = data.smileValue;
	
	        return {
	            docIndexCode: '',
	            list: [{
	                picUrl: facePicUrl,
	                zone: cameraName,
	                passTime: faceTime,
	                type: CONTEXTPATH,
	                longitude: longitude,
	                latitude: latitude,
	                resourceIndexCode: _uuidJs2["default"].create().toString(),
	                mapDisPlay: "",
	                privateProperties: JSON.stringify({
	                    bkgUrl: bkgUrl,
	                    gender: gender,
	                    glass: glass,
	                    ageGroup: ageGroup,
	                    smile: smile,
	                    ethnic: ethnic,
	                    genderValue: genderValue,
	                    glassValue: glassValue,
	                    ageGroupValue: ageGroupValue,
	                    smileValue: smileValue,
	                    ethnicValue: ethnicValue,
	                    linkFaceBodyId: linkFaceBodyId,
	                    linkFaceVehicleId: linkFaceVehicleId,
	                    linkFaceMacId: linkFaceMacId
	                })
	            }]
	        };
	    } else if (CONTEXTPATH === 'xnamelist') {
	        return {};
	    } else if (CONTEXTPATH === 'ibody') {
	        return {
	            docIndexCode: '',
	            list: [{
	                picUrl: data.target_pic_url,
	                zone: data.collect_address,
	                passTime: data.createTime,
	                longitude: data.longitude,
	                latitude: data.latitude,
	                type: CONTEXTPATH,
	                mapDisPlay: "",
	                resourceIndexCode: _uuidJs2["default"].create().toString(),
	                rowKey: data.rowKey,
	                privateProperties: JSON.stringify({
	                    targetGender: data.gender_t,
	                    jacketColor: data.jacet_color_t,
	                    isBag: data.bag_t,
	                    isThings: data.things_t,
	                    isHat: data.hat_t
	                })
	            }]
	        };
	    } else if (CONTEXTPATH === 'ipersonid') {
	        return {
	            docIndexCode: '',
	            list: [{
	                picUrl: data.passPicUrl,
	                zone: data.collect_address,
	                passTime: data.passTime,
	                longitude: data.longitude,
	                latitude: data.latitude,
	                type: CONTEXTPATH,
	                mapDisPlay: "",
	                resourceIndexCode: "",
	                privateProperties: JSON.stringify({
	                    gender: "1",
	                    personName: data.name,
	                    identifyNo: data.identifyNo,
	                    homeAddr: data.homeAddr,
	                    birthTime: data.birthTime,
	                    nationalCode: data.nationalCode,
	                    nationalName: data.nationalName,
	                    passRecordId: data.passRecordId,
	                    deviceIndexcode: data.deviceIndexcode
	                })
	            }]
	        };
	    } else if (CONTEXTPATH === 'ivehicleps') {
	        return {
	            docIndexCode: "",
	            list: [{
	                picUrl: data.imagePath,
	                zone: data.collect_address,
	                passTime: data.passTime,
	                longitude: data.longitude,
	                latitude: data.latitude,
	                type: CONTEXTPATH,
	                mapDisPlay: "",
	                resourceIndexCode: _uuidJs2["default"].create().toString(),
	                privateProperties: JSON.stringify({
	                    plateNo: data.plateNo,
	                    plateCrossingName: data.crossingName,
	                    directionName: data.directionName,
	                    vehicleSpeed: data.vehicleSpeed,
	                    laneName: data.laneName,
	                    imagePath: data.imagePath
	                })
	            }]
	        };
	    } else if (CONTEXTPATH === 'iwifi') {
	        var _list = [];
	        if (data.identityValue) {
	            _list = [{
	                picUrl: "",
	                zone: data.devName,
	                passTime: (0, _moment2["default"])(data.collectTime).format(_dic.FORMAT_DATETIME_TO_UTC),
	                type: "iwifi-identity",
	                longitude: data.longitude,
	                latitude: data.latitude,
	                resourceIndexCode: _uuidJs2["default"].create().toString(),
	                mapDisPlay: "",
	                privateProperties: JSON.stringify({
	                    identityType: data.identityType,
	                    identityValue: data.identityValue
	                })
	            }];
	        } else {
	            var devName = data.devName,
	                collectTime = data.collectTime,
	                macAddress = data.macAddress,
	                fieldIntensity = data.fieldIntensity,
	                remainTimeStr = data.remainTimeStr,
	                terminalBrand = data.terminalBrand,
	                _longitude = data.longitude,
	                _latitude = data.latitude;
	
	            _list = [{
	                picUrl: "",
	                zone: devName,
	                passTime: (0, _moment2["default"])(collectTime).format(_dic.FORMAT_DATETIME_TO_UTC),
	                type: "iwifi-mac",
	                longitude: _longitude,
	                latitude: _latitude,
	                resourceIndexCode: _uuidJs2["default"].create().toString(),
	                mapDisPlay: "",
	                privateProperties: JSON.stringify({
	                    macAddress: macAddress,
	                    fieldIntensity: fieldIntensity,
	                    terminalBrand: terminalBrand,
	                    remainTimeStr: remainTimeStr
	                })
	            }];
	        }
	        return {
	            docIndexCode: '',
	            list: _list
	        };
	    } else if (CONTEXTPATH === 'ifusion') {
	        var _list2 = [];
	        if (data.data.smile) {
	            _list2.push({
	                picUrl: data.smallImageUrl,
	                zone: data.location,
	                passTime: data.passTime,
	                type: "iface",
	                longitude: data.longitude,
	                latitude: data.latitude,
	                resourceIndexCode: _uuidJs2["default"].create().toString(),
	                mapDisPlay: "",
	                privateProperties: JSON.stringify({
	                    bkgUrl: data.imageUrl,
	                    gender: data.data.gender,
	                    glass: data.data.glasses,
	                    ageGroup: data.data.ageGroup,
	                    smile: data.data.smile,
	                    ethnic: data.data.highRiskGroup,
	                    linkFaceBodyId: data.data.linkFaceBodyId,
	                    linkFaceVehicleId: data.data.linkFaceVehicleId
	                })
	            });
	        } else if (data.data.thing) {
	            _list2.push({
	                picUrl: data.smallImageUrl,
	                zone: data.location,
	                passTime: data.passTime,
	                type: "ibody",
	                longitude: data.longitude,
	                latitude: data.latitude,
	                resourceIndexCode: _uuidJs2["default"].create().toString(),
	                mapDisPlay: "",
	                privateProperties: JSON.stringify({
	                    targetGender: data.data.gender,
	                    jacketColor: data.data.jacketColor,
	                    isBag: data.data.bag,
	                    isThings: data.data.thing,
	                    isHat: data.data.hat
	                })
	            });
	        } else if (data.data.plateNo) {
	            _list2.push({
	                picUrl: data.smallImageUrl,
	                zone: data.location,
	                passTime: data.passTime,
	                type: "ivehicleps",
	                longitude: data.longitude,
	                latitude: data.latitude,
	                resourceIndexCode: _uuidJs2["default"].create().toString(),
	                mapDisPlay: "",
	                privateProperties: JSON.stringify({
	                    plateNo: data.data.plateNo,
	                    plateColorName: data.data.plateColor,
	                    violativeActionName: data.data.vehicleState,
	                    laneName: data.data.laneName,
	                    directionName: data.data.laneDirection,
	                    vehicleLogoName: data.data.vehicleLogo,
	                    vehicleSubLogoName: data.data.plateType,
	                    vehicleModelName: data.data.vehicleModel,
	                    imagePath: data.imageUrl
	                })
	            });
	        }
	        return {
	            docIndexCode: '',
	            list: _list2
	        };
	    }
	}

/***/ }),
/* 1184 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _modal = __webpack_require__(307);
	
	var _modal2 = _interopRequireDefault(_modal);
	
	__webpack_require__(398);
	
	var _base = __webpack_require__(1185);
	
	var _base2 = _interopRequireDefault(_base);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var confirm = _modal2["default"].confirm;
	
	var initSocket = true;
	var socket;
	
	/**
	 * cameraIndexCode:'330108000002673509,330108000002673510'//多个用逗号隔开
	 * playerParam对象属性
	 * @nginxIp:'10.2.145.103',//部署平台IP
	 * @nginxPort:'80',//部署平台端口
	 * @playerToken:'',//sg,用于平台播放器,下载器可不传
	 * @pluginIpPort:'http://10.2.145.103:80'//插件下载IP端口
	 * playBackTime:30//不传默认30秒
	 */
	module.exports = {
	    playBack: function playBack(cameraIndexCode, createTimeLong, playerParam, playBackTime) {
	        var nginxIp = playerParam.nginxIp,
	            nginxPort = playerParam.nginxPort,
	            playerToken = playerParam.playerToken;
	
	        var preOldTime = parseInt((createTimeLong - (playBackTime ? playBackTime : 30) * 1000) / 1000); //默认前30秒
	        var afterOldTime = parseInt((createTimeLong + (playBackTime ? playBackTime : 30) * 1000) / 1000); //默认后30秒
	        var protocol = document.location.protocol.indexOf("https") > -1 ? 'https' : 'http';
	        var cameraNum = cameraIndexCode.split(",").length;
	        var wndCount = 1;
	        if (cameraNum <= 1) {
	            wndCount = 1;
	        } else if (1 < cameraNum <= 4) {
	            wndCount = 4;
	        } else {
	            wndCount = 9;
	        }
	        var camList = '';
	        if (cameraNum == 1) {
	            camList = cameraIndexCode + "_" + preOldTime + "_" + afterOldTime;
	        } else {
	            var camListArray = [];
	            var cameraArray = cameraIndexCode.split(",");
	            for (var i = 0; i < cameraNum; i++) {
	                camListArray.push(cameraArray[i] + "_" + preOldTime + "_" + afterOldTime);
	            }
	            camList = camListArray.join(',');
	        }
	        var url = "btoolsprotocol://CenterUrl:" + protocol + "://" + nginxIp + ":" + nginxPort + "/portal;Toollist:PROT_btoolpplayerprotocol;CmdLine:btoolpplayerprotocol://ReqType:PlayBack;VersionTag:UNIV1.0;language:zh_US;clear:2;WndCount:" + wndCount + ";NginxIp:" + nginxIp + ";NginxPort:" + nginxPort + ";sg:" + playerToken + ";CamList:" + camList + ";protocol:" + protocol + ";appType:vas;archiveCode:;gridtrack:1;" + (wndCount == 1 ? "MiniUI:1;" : "");
	        checkingIeChromeBtool(url, playerParam);
	    },
	    downLoad: function downLoad(exportUrl, conditions, playerParam) {
	        var nginxIp = playerParam.nginxIp,
	            nginxPort = playerParam.nginxPort;
	
	        var protocol = document.location.protocol.indexOf("https") > -1 ? 'https' : 'http';
	        var conditionString = _base2["default"].encode(JSON.stringify(conditions));
	        var url = "btoolsprotocol://CenterUrl:" + protocol + "://" + nginxIp + ":" + nginxPort + "/portal;Toollist:PROT_btooldownloadprotocol;CmdLine:btooldownloadprotocol://postUrl:" + exportUrl + ";postFields:" + conditionString + ";";
	        checkingIeChromeBtool(url, playerParam);
	    }
	};
	
	function checkingIeChromeBtool(url, playerParam) {
	    if (/msie/.test(navigator.userAgent.toLowerCase())) {
	        //IE
	        checkTool('btoolsprotocol', function (isInstall) {
	            if (isInstall) {
	                var ocx = document.getElementById("HikToolCheckOCX");
	                try {
	                    // 启动播放器
	                    ocx.StartupToolByCmd('btoolsprotocol', url);
	                } catch (e) {
	                    openBtoolPluginDailog(playerParam);
	                }
	            } else {
	                openBtoolPluginDailog(playerParam);
	            }
	        });
	    } else {
	        //chrome
	        var clientCheck = '{"comment":{"commenttype":"checkapp", "context":"btoolsprotocol:"}}';
	        webSocketConnect(clientCheck, url, playerParam, function (data) {
	            if (data.indexOf("btoolsprotocol") > -1) {
	                if (checkAppExist(data) == 1) {
	                    var startCommand = '{"comment":{"commenttype":"startapp", "context":"btoolsprotocol:", "commentcmd":"' + url + '"}}';
	                    socket.send(startCommand);
	                } else {
	                    openBtoolPluginDailog(playerParam);
	                }
	            }
	        });
	    }
	}
	//chrome检测工具包括后续工具通信 选择文件
	function webSocketConnect(checkMsg, hikUrl, playerParam, callback) {
	    //   let host = "wss://" + playerParam.nginxIp +":"+ playerParam.nginxPort + "/WebS_Js";
	    var host = "wss://127.0.0.1:18001/WebS_Js";
	    try {
	        if (!socket) {
	            socket = new WebSocket(host);
	        } else {
	            socket.send(checkMsg);
	        }
	        socket.onopen = function () {
	            socket.send(checkMsg);
	        };
	        socket.onmessage = function (msg) {
	            var data = msg.data;
	            if (data == '') {
	                return;
	            }
	            callback && callback(data);
	        };
	        socket.onclose = function () {
	            socket = null;
	            if (initSocket) {
	                openBtoolPluginDailog(playerParam);
	            } else {
	                //window.location.href = hikUrl;
	            }
	        };
	    } catch (e) {
	        alert(e);
	    }
	}
	//chrome通过返回Json报文检测是否按照工具
	function checkAppExist(data) {
	    initSocket = false;
	    var resultCode = 0;
	    var resultJson = eval("(" + data + ")");
	    if (resultJson) {
	        resultCode = resultJson.comment.resultCode;
	        return resultCode;
	    } else {
	        return resultCode;
	    }
	}
	//打开未安装平台播放器弹窗
	function openBtoolPluginDailog(playerParam) {
	    confirm({
	        title: '是否安装控件',
	        content: '检测到您未安装相关控件,是否立即安装',
	        onOk: function onOk() {
	            window.open(playerParam.pluginIpPort + "/portal/out/getPackageById.do?id=btools");
	        },
	        onCancel: function onCancel() {}
	    });
	}
	
	function checkTool(id, callBack) {
	    //通过这个控件来测试播放器是否安装
	    var ocx = document.getElementById('HikToolCheckOCX');
	    var bstrResult = 0;
	    try {
	        //如果控件安装了，结果为1
	        bstrResult = ocx.CheckToolStatus(id);
	        var ret = ocx.StartupAppAccpetor(); //开启应用事件监听，开启后才可以收到来自外部应用的消息！！！
	    } catch (e) {
	        bstrResult = 0;
	    }
	    bstrResult = bstrResult == 1 ? true : false;
	    callBack(bstrResult);
	}

/***/ }),
/* 1185 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */
	;(function(root) {
	
		// Detect free variables `exports`.
		var freeExports = typeof exports == 'object' && exports;
	
		// Detect free variable `module`.
		var freeModule = typeof module == 'object' && module &&
			module.exports == freeExports && module;
	
		// Detect free variable `global`, from Node.js or Browserified code, and use
		// it as `root`.
		var freeGlobal = typeof global == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}
	
		/*--------------------------------------------------------------------------*/
	
		var InvalidCharacterError = function(message) {
			this.message = message;
		};
		InvalidCharacterError.prototype = new Error;
		InvalidCharacterError.prototype.name = 'InvalidCharacterError';
	
		var error = function(message) {
			// Note: the error messages used throughout this file match those used by
			// the native `atob`/`btoa` implementation in Chromium.
			throw new InvalidCharacterError(message);
		};
	
		var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
		// http://whatwg.org/html/common-microsyntaxes.html#space-character
		var REGEX_SPACE_CHARACTERS = /[\t\n\f\r ]/g;
	
		// `decode` is designed to be fully compatible with `atob` as described in the
		// HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob
		// The optimized base64-decoding algorithm used is based on @atk’s excellent
		// implementation. https://gist.github.com/atk/1020396
		var decode = function(input) {
			input = String(input)
				.replace(REGEX_SPACE_CHARACTERS, '');
			var length = input.length;
			if (length % 4 == 0) {
				input = input.replace(/==?$/, '');
				length = input.length;
			}
			if (
				length % 4 == 1 ||
				// http://whatwg.org/C#alphanumeric-ascii-characters
				/[^+a-zA-Z0-9/]/.test(input)
			) {
				error(
					'Invalid character: the string to be decoded is not correctly encoded.'
				);
			}
			var bitCounter = 0;
			var bitStorage;
			var buffer;
			var output = '';
			var position = -1;
			while (++position < length) {
				buffer = TABLE.indexOf(input.charAt(position));
				bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;
				// Unless this is the first of a group of 4 characters…
				if (bitCounter++ % 4) {
					// …convert the first 8 bits to a single ASCII character.
					output += String.fromCharCode(
						0xFF & bitStorage >> (-2 * bitCounter & 6)
					);
				}
			}
			return output;
		};
	
		// `encode` is designed to be fully compatible with `btoa` as described in the
		// HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa
		var encode = function(input) {
			input = String(input);
			if (/[^\0-\xFF]/.test(input)) {
				// Note: no need to special-case astral symbols here, as surrogates are
				// matched, and the input is supposed to only contain ASCII anyway.
				error(
					'The string to be encoded contains characters outside of the ' +
					'Latin1 range.'
				);
			}
			var padding = input.length % 3;
			var output = '';
			var position = -1;
			var a;
			var b;
			var c;
			var d;
			var buffer;
			// Make sure any padding is handled outside of the loop.
			var length = input.length - padding;
	
			while (++position < length) {
				// Read three bytes, i.e. 24 bits.
				a = input.charCodeAt(position) << 16;
				b = input.charCodeAt(++position) << 8;
				c = input.charCodeAt(++position);
				buffer = a + b + c;
				// Turn the 24 bits into four chunks of 6 bits each, and append the
				// matching character for each of them to the output.
				output += (
					TABLE.charAt(buffer >> 18 & 0x3F) +
					TABLE.charAt(buffer >> 12 & 0x3F) +
					TABLE.charAt(buffer >> 6 & 0x3F) +
					TABLE.charAt(buffer & 0x3F)
				);
			}
	
			if (padding == 2) {
				a = input.charCodeAt(position) << 8;
				b = input.charCodeAt(++position);
				buffer = a + b;
				output += (
					TABLE.charAt(buffer >> 10) +
					TABLE.charAt((buffer >> 4) & 0x3F) +
					TABLE.charAt((buffer << 2) & 0x3F) +
					'='
				);
			} else if (padding == 1) {
				buffer = input.charCodeAt(position);
				output += (
					TABLE.charAt(buffer >> 2) +
					TABLE.charAt((buffer << 4) & 0x3F) +
					'=='
				);
			}
	
			return output;
		};
	
		var base64 = {
			'encode': encode,
			'decode': decode,
			'version': '0.1.0'
		};
	
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return base64;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}	else if (freeExports && !freeExports.nodeType) {
			if (freeModule) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = base64;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (var key in base64) {
					base64.hasOwnProperty(key) && (freeExports[key] = base64[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.base64 = base64;
		}
	
	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(190)(module), (function() { return this; }())))

/***/ }),
/* 1186 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 1187 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _table = __webpack_require__(836);
	
	var _table2 = _interopRequireDefault(_table);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	__webpack_require__(861);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _autoHide = __webpack_require__(876);
	
	var _autoHide2 = _interopRequireDefault(_autoHide);
	
	var _icon = __webpack_require__(477);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	__webpack_require__(1188);
	
	var _deepcopy = __webpack_require__(1189);
	
	var _deepcopy2 = _interopRequireDefault(_deepcopy);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _require = __webpack_require__(1197),
	    COLUMNS_MAP = _require.COLUMNS_MAP,
	    CONTROL_MAP = _require.CONTROL_MAP;
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.state = {
	            currentIndex: props.currentIndex
	        };
	        var type = props.type;
	
	        _this.columns = COLUMNS_MAP[type] || [];
	        if (props.customColumns) {
	            props.customColumns.map(function (item, index) {
	                if (_this.columns.filter(function (columnItem) {
	                    return columnItem.dataIndex == item.column.dataIndex;
	                }).length == 0) {
	                    _this.columns.splice(item.serial - 1, 0, item.column);
	                }
	            });
	        }
	        if (CONTROL_MAP[type] && CONTROL_MAP[type].length > 0) {
	            _this.columns = [].concat(_toConsumableArray(_this.columns), [{
	                title: '操作',
	                key: 'operation',
	                render: function render(text, record, index) {
	                    var controlList = (0, _deepcopy2["default"])(CONTROL_MAP[type]);
	                    if (type === "historySearch") {
	                        var alarmType = record.alarmType;
	
	                        if (alarmType == '1') {
	                            controlList.splice(3, 1);
	                        } else if (alarmType == '2') {
	                            controlList.splice(2, 1);
	                        } else {
	                            controlList.splice(2, 2);
	                        }
	                    }
	                    return _react2["default"].createElement(
	                        'div',
	                        { className: 'table-list-control' },
	                        _react2["default"].createElement(_autoHide2["default"], {
	                            total_width: 120,
	                            width: 24,
	                            list: controlList,
	                            renderItem: function renderItem(item) {
	                                return _react2["default"].createElement(
	                                    'div',
	                                    { className: 'text-center', style: { lineHeight: 1.5 } },
	                                    _react2["default"].createElement(
	                                        _icon2["default"],
	                                        { type: item.type, title: item.title, onClick: function onClick(e) {
	                                                e.stopPropagation();props.onClick(record, item.clickFunc, index);
	                                            } },
	                                        ' '
	                                    )
	                                );
	                            },
	                            renderHidden: function renderHidden(item) {
	                                return _react2["default"].createElement(
	                                    'div',
	                                    { className: 'text-center', style: { lineHeight: 2 } },
	                                    _react2["default"].createElement(
	                                        _icon2["default"],
	                                        { type: item.type, title: item.title, onClick: function onClick(e) {
	                                                e.stopPropagation();props.onClick(record, item.clickFunc, index);
	                                            } },
	                                        ' '
	                                    )
	                                );
	                            }
	                        })
	                    );
	                }
	            }]);
	        }
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var _this2 = this;
	
	            var type = nextProps.type;
	            this.columns = COLUMNS_MAP[type] || [];
	            if (nextProps.customColumns) {
	                nextProps.customColumns.map(function (item, index) {
	                    if (_this2.columns.filter(function (columnItem) {
	                        return columnItem.dataIndex == item.column.dataIndex;
	                    }).length == 0) {
	                        _this2.columns.splice(item.serial - 1, 0, item.column);
	                    }
	                });
	            }
	            if (CONTROL_MAP[type] && CONTROL_MAP[type].length > 0) {
	                var controlList = CONTROL_MAP[type];
	                this.columns = [].concat(_toConsumableArray(this.columns), [{
	                    title: '操作',
	                    key: 'operation',
	                    render: function render(text, record, index) {
	                        if (type === "historySearch") {
	                            var alarmType = record.alarmType;
	
	                            if (alarmType == '1') {
	                                controlList.splice(3, 1);
	                            } else if (alarmType == '2') {
	                                controlList.splice(2, 1);
	                            } else {
	                                controlList.splice(2, 2);
	                            }
	                        }
	                        return _react2["default"].createElement(
	                            'div',
	                            { className: 'table-list-control' },
	                            _react2["default"].createElement(_autoHide2["default"], {
	                                total_width: 120,
	                                width: 24,
	                                list: controlList,
	                                renderItem: function renderItem(item) {
	                                    return _react2["default"].createElement(
	                                        'div',
	                                        { className: 'text-center', style: { lineHeight: 1.5 } },
	                                        _react2["default"].createElement(
	                                            _icon2["default"],
	                                            { type: item.type, title: item.title, onClick: function onClick(e) {
	                                                    e.stopPropagation();nextProps.onClick(record, item.clickFunc, index);
	                                                } },
	                                            ' '
	                                        )
	                                    );
	                                },
	                                renderHidden: function renderHidden(item) {
	                                    return _react2["default"].createElement(
	                                        'div',
	                                        { className: 'text-center', style: { lineHeight: 2 } },
	                                        _react2["default"].createElement(
	                                            _icon2["default"],
	                                            { type: item.type, title: item.title, onClick: function onClick(e) {
	                                                    e.stopPropagation();nextProps.onClick(record, item.clickFunc, index);
	                                                } },
	                                            ' '
	                                        )
	                                    );
	                                }
	                            })
	                        );
	                    }
	                }]);
	            }
	            if (nextProps.currentIndex != this.state.currentIndex) {
	                this.setState({
	                    currentIndex: nextProps.currentIndex
	                });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var state = this.state,
	                props = this.props;
	
	            return _react2["default"].createElement(_table2["default"], {
	                columns: this.columns,
	                dataSource: props.data ? props.data.list : [],
	                pagination: false,
	                onRowClick: function onRowClick(record, index) {
	                    props.onClick(record, 'clickRow', index);
	                },
	                rowSelection: props.rowSelection ? props.rowSelection : null,
	                rowClassName: function rowClassName(record, index) {
	                    return index === state.currentIndex ? 'cursor-pointer table-list-active' : 'cursor-pointer';
	                }
	            });
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	exports["default"] = App;

/***/ }),
/* 1188 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 1189 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1190);


/***/ }),
/* 1190 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _copy = __webpack_require__(1191);
	
	var _polyfill = __webpack_require__(1196);
	
	function defaultCustomizer(target) {
	  return void 0;
	}
	
	function deepcopy(target) {
	  var customizer = arguments.length <= 1 || arguments[1] === void 0 ? defaultCustomizer : arguments[1];
	
	  if (target === null) {
	    // copy null
	    return null;
	  }
	
	  var resultValue = (0, _copy.copyValue)(target);
	
	  if (resultValue !== null) {
	    // copy some primitive types
	    return resultValue;
	  }
	
	  var resultCollection = (0, _copy.copyCollection)(target, customizer),
	      clone = resultCollection !== null ? resultCollection : target;
	
	  var visited = [target],
	      reference = [clone];
	
	  // recursively copy from collection
	  return recursiveCopy(target, customizer, clone, visited, reference);
	}
	
	function recursiveCopy(target, customizer, clone, visited, reference) {
	  if (target === null) {
	    // copy null
	    return null;
	  }
	
	  var resultValue = (0, _copy.copyValue)(target);
	
	  if (resultValue !== null) {
	    // copy some primitive types
	    return resultValue;
	  }
	
	  var keys = (0, _polyfill.getKeys)(target).concat((0, _polyfill.getSymbols)(target));
	
	  var i = void 0,
	      len = void 0;
	
	  var key = void 0,
	      value = void 0,
	      index = void 0,
	      resultCopy = void 0,
	      result = void 0,
	      ref = void 0;
	
	  for (i = 0, len = keys.length; i < len; ++i) {
	    key = keys[i];
	    value = target[key];
	    index = (0, _polyfill.indexOf)(visited, value);
	
	    resultCopy = void 0;
	    result = void 0;
	    ref = void 0;
	
	    if (index === -1) {
	      resultCopy = (0, _copy.copy)(value, customizer);
	      result = resultCopy !== null ? resultCopy : value;
	
	      if (value !== null && /^(?:function|object)$/.test(typeof value)) {
	        visited.push(value);
	        reference.push(result);
	      }
	    } else {
	      // circular reference
	      ref = reference[index];
	    }
	
	    clone[key] = ref || recursiveCopy(value, customizer, result, visited, reference);
	  }
	
	  return clone;
	}
	
	exports['default'] = deepcopy;
	module.exports = exports['default'];

/***/ }),
/* 1191 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	exports.__esModule = true;
	exports.copyValue = exports.copyCollection = exports.copy = void 0;
	
	var _polyfill = __webpack_require__(1196);
	
	var toString = Object.prototype.toString;
	
	function copy(target, customizer) {
	  var resultValue = copyValue(target);
	
	  if (resultValue !== null) {
	    return resultValue;
	  }
	
	  return copyCollection(target, customizer);
	}
	
	function copyCollection(target, customizer) {
	  if (typeof customizer !== 'function') {
	    throw new TypeError('customizer is must be a Function');
	  }
	
	  if (typeof target === 'function') {
	    var source = String(target);
	
	    // NOTE:
	    //
	    //   https://gist.github.com/jdalton/5e34d890105aca44399f
	    //
	    //   - https://gist.github.com/jdalton/5e34d890105aca44399f#gistcomment-1283831
	    //   - http://es5.github.io/#x15
	    //
	    //   native functions does not have prototype:
	    //
	    //       Object.toString.prototype  // => undefined
	    //       (function() {}).prototype  // => {}
	    //
	    //   but cannot detect native constructor:
	    //
	    //       typeof Object     // => 'function'
	    //       Object.prototype  // => {}
	    //
	    //   and cannot detect null binded function:
	    //
	    //       String(Math.abs)
	    //         // => 'function abs() { [native code] }'
	    //
	    //     Firefox, Safari:
	    //       String((function abs() {}).bind(null))
	    //         // => 'function abs() { [native code] }'
	    //
	    //     Chrome:
	    //       String((function abs() {}).bind(null))
	    //         // => 'function () { [native code] }'
	    if (/^\s*function\s*\S*\([^\)]*\)\s*{\s*\[native code\]\s*}/.test(source)) {
	      // native function
	      return target;
	    } else {
	      // user defined function
	      return new Function('return ' + String(source))();
	    }
	  }
	
	  var targetClass = toString.call(target);
	
	  if (targetClass === '[object Array]') {
	    return [];
	  }
	
	  if (targetClass === '[object Object]' && target.constructor === Object) {
	    return {};
	  }
	
	  if (targetClass === '[object Date]') {
	    // NOTE:
	    //
	    //   Firefox need to convert
	    //
	    //   Firefox:
	    //     var date = new Date;
	    //     +date;            // 1420909365967
	    //     +new Date(date);  // 1420909365000
	    //     +new Date(+date); // 1420909365967
	    //
	    //   Chrome:
	    //     var date = new Date;
	    //     +date;            // 1420909757913
	    //     +new Date(date);  // 1420909757913
	    //     +new Date(+date); // 1420909757913
	    return new Date(target.getTime());
	  }
	
	  if (targetClass === '[object RegExp]') {
	    // NOTE:
	    //
	    //   Chrome, Safari:
	    //     (new RegExp).source => "(?:)"
	    //
	    //   Firefox:
	    //     (new RegExp).source => ""
	    //
	    //   Chrome, Safari, Firefox:
	    //     String(new RegExp) => "/(?:)/"
	    var regexpText = String(target),
	        slashIndex = regexpText.lastIndexOf('/');
	
	    return new RegExp(regexpText.slice(1, slashIndex), regexpText.slice(slashIndex + 1));
	  }
	
	  if ((0, _polyfill.isBuffer)(target)) {
	    var buffer = new Buffer(target.length);
	
	    target.copy(buffer);
	
	    return buffer;
	  }
	
	  var customizerResult = customizer(target);
	
	  if (customizerResult !== void 0) {
	    return customizerResult;
	  }
	
	  return null;
	}
	
	function copyValue(target) {
	  var targetType = typeof target;
	
	  // copy String, Number, Boolean, undefined and Symbol
	  // without null and Function
	  if (target !== null && targetType !== 'object' && targetType !== 'function') {
	    return target;
	  }
	
	  return null;
	}
	
	exports.copy = copy;
	exports.copyCollection = copyCollection;
	exports.copyValue = copyValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1192).Buffer))

/***/ }),
/* 1192 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict'
	
	var base64 = __webpack_require__(1193)
	var ieee754 = __webpack_require__(1194)
	var isArray = __webpack_require__(1195)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.
	
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()
	
	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()
	
	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}
	
	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}
	
	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }
	
	  return that
	}
	
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	
	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }
	
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}
	
	Buffer.poolSize = 8192 // not used by this implementation
	
	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}
	
	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }
	
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }
	
	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }
	
	  return fromObject(that, value)
	}
	
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}
	
	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}
	
	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}
	
	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}
	
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}
	
	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}
	
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}
	
	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }
	
	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)
	
	  var actual = that.write(string, encoding)
	
	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }
	
	  return that
	}
	
	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer
	
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }
	
	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }
	
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}
	
	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)
	
	    if (that.length === 0) {
	      return that
	    }
	
	    obj.copy(that, 0, 0, len)
	    return that
	  }
	
	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }
	
	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}
	
	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	
	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }
	
	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}
	
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }
	
	  var len = string.length
	  if (len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }
	
	  if (end === undefined || end > this.length) {
	    end = this.length
	  }
	
	  if (end <= 0) {
	    return ''
	  }
	
	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0
	
	  if (end <= start) {
	    return ''
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true
	
	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}
	
	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}
	
	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}
	
	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }
	
	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }
	
	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0
	
	  if (this === target) return 0
	
	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)
	
	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)
	
	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1
	
	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }
	
	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }
	
	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }
	
	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length
	
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }
	
	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }
	
	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }
	
	  return -1
	}
	
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}
	
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }
	
	    res.push(codePoint)
	    i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }
	
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	  var i
	
	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }
	
	  return len
	}
	
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }
	
	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }
	
	  if (end <= start) {
	    return this
	  }
	
	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0
	
	  if (!val) val = 0
	
	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }
	
	        // valid lead
	        leadSurrogate = codePoint
	
	        continue
	      }
	
	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }
	
	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }
	
	    leadSurrogate = null
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 1193 */
/***/ (function(module, exports) {

	'use strict'
	
	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray
	
	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}
	
	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63
	
	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }
	
	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}
	
	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return (b64.length * 3 / 4) - placeHoldersCount(b64)
	}
	
	function toByteArray (b64) {
	  var i, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)
	
	  arr = new Arr((len * 3 / 4) - placeHolders)
	
	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len
	
	  var L = 0
	
	  for (i = 0; i < l; i += 4) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  return arr
	}
	
	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}
	
	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = ((uint8[i] << 16) & 0xFF0000) + ((uint8[i + 1] << 8) & 0xFF00) + (uint8[i + 2] & 0xFF)
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}
	
	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3
	
	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }
	
	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }
	
	  parts.push(output)
	
	  return parts.join('')
	}


/***/ }),
/* 1194 */
/***/ (function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}


/***/ }),
/* 1195 */
/***/ (function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 1196 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	exports.__esModule = true;
	var toString = Object.prototype.toString;
	
	var isBuffer = typeof Buffer !== 'undefined' ? function isBuffer(obj) {
	  return Buffer.isBuffer(obj);
	} : function isBuffer() {
	  // always return false in browsers
	  return false;
	};
	
	var getKeys = typeof Object.keys === 'function' ? function getKeys(obj) {
	  return Object.keys(obj);
	} : function getKeys(obj) {
	  var objType = typeof obj;
	
	  if (obj === null || objType !== 'function' && objType !== 'object') {
	    throw new TypeError('obj must be an Object');
	  }
	
	  var resultKeys = [],
	      key = void 0;
	
	  for (key in obj) {
	    Object.prototype.hasOwnProperty.call(obj, key) && resultKeys.push(key);
	  }
	
	  return resultKeys;
	};
	
	var getSymbols = typeof Symbol === 'function' ? function getSymbols(obj) {
	  return Object.getOwnPropertySymbols(obj);
	} : function getSymbols() {
	  // always return empty Array when Symbol is not supported
	  return [];
	};
	
	// NOTE:
	//
	//   Array.prototype.indexOf is cannot find NaN (in Chrome)
	//   Array.prototype.includes is can find NaN (in Chrome)
	//
	//   this function can find NaN, because use SameValue algorithm
	function indexOf(array, s) {
	  if (toString.call(array) !== '[object Array]') {
	    throw new TypeError('array must be an Array');
	  }
	
	  var i = void 0,
	      len = void 0,
	      value = void 0;
	
	  for (i = 0, len = array.length; i < len; ++i) {
	    value = array[i];
	
	    // NOTE:
	    //
	    //   it is SameValue algorithm
	    //   http://stackoverflow.com/questions/27144277/comparing-a-variable-with-itself
	    //
	    // eslint-disable-next-line no-self-compare
	    if (value === s || value !== value && s !== s) {
	      return i;
	    }
	  }
	
	  return -1;
	}
	
	exports.getKeys = getKeys;
	exports.getSymbols = getSymbols;
	exports.indexOf = indexOf;
	exports.isBuffer = isBuffer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1192).Buffer))

/***/ }),
/* 1197 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.CONTROL_MAP = exports.COLUMNS_MAP = undefined;
	
	var _progress = __webpack_require__(799);
	
	var _progress2 = _interopRequireDefault(_progress);
	
	__webpack_require__(816);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _imageHoverMore = __webpack_require__(1198);
	
	var _imageHoverMore2 = _interopRequireDefault(_imageHoverMore);
	
	var _index = __webpack_require__(588);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	// import ImageHover from 'components/imageHover';
	var COLUMNS_MAP = {
	    historySearch: [{
	        title: '序号',
	        dataIndex: 'index',
	        key: 'index',
	        render: function render(text, record, index) {
	            return index + 1;
	        }
	    }, {
	        title: '抓拍',
	        dataIndex: 'snapPicUrl',
	        key: 'snapPicUrl',
	        render: function render(text, record, index) {
	            return record.snapPicUrl ? _react2["default"].createElement(
	                'span',
	                null,
	                _react2["default"].createElement(_imageHoverMore2["default"], { srcs: [record.snapPicUrl, record.faceUrl], verticalAlign: "middle", similarity: record.similarity, bigImgWidth: 142 })
	            ) : _react2["default"].createElement(
	                'span',
	                null,
	                '\u65E0'
	            );
	        }
	    }, {
	        title: '人员姓名',
	        dataIndex: 'personName',
	        key: 'personName'
	    }, {
	        title: '身份证号',
	        dataIndex: 'idCard',
	        key: 'idCard'
	    }, {
	        title: '人员类别',
	        dataIndex: 'personType',
	        key: 'personType'
	        // render: (text, record, index) => PERSON_TYPE[text]
	    }, {
	        title: '车牌号',
	        dataIndex: 'plateNum',
	        key: 'plateNum',
	        render: function render(text, record, index) {
	            return text || '未采集';
	        }
	    }, {
	        title: 'MAC',
	        dataIndex: 'macAddress',
	        key: 'macAddress',
	        render: function render(text, record, index) {
	            return text || '未采集';
	        }
	    }, {
	        title: 'RFID',
	        dataIndex: 'rfid',
	        key: 'rfid',
	        render: function render(text, record, index) {
	            return text || '未采集';
	        }
	    }, {
	        title: '告警级别',
	        dataIndex: 'alarmLevel',
	        key: 'alarmLevel',
	        render: function render(text, record, index) {
	            return _index.LEVEL[text];
	        }
	    }, {
	        title: '告警时间',
	        dataIndex: 'alarmTime',
	        key: 'alarmTime'
	    }, {
	        title: '告警地点',
	        dataIndex: 'deviceName',
	        key: 'deviceName'
	    }],
	    searchPerson: [{
	        title: '序号',
	        dataIndex: 'index',
	        key: 'index',
	        render: function render(text, record, index) {
	            return index + 1;
	        }
	    }, {
	        title: '抓拍',
	        dataIndex: 'facePicUrl',
	        key: 'facePicUrl',
	        render: function render(text, record, index) {
	            return _react2["default"].createElement(
	                'span',
	                null,
	                _react2["default"].createElement(ImageHover, { src: record.facePicUrl })
	            );
	        }
	    }, {
	        title: '人员姓名',
	        dataIndex: 'name',
	        key: 'name'
	    }, {
	        title: '身份证号',
	        dataIndex: 'humanId',
	        key: 'humanId'
	    }, {
	        title: '性别',
	        dataIndex: 'gender',
	        key: 'gender',
	        render: function render(text, record, index) {
	            return SEX[text];
	        }
	    }, {
	        title: '出现天数',
	        dataIndex: 'dayNum',
	        key: 'dayNum'
	    }],
	    searchDay: [{
	        title: '序号',
	        dataIndex: 'index',
	        key: 'index',
	        render: function render(text, record, index) {
	            return index + 1;
	        }
	    }, {
	        title: '抓拍',
	        dataIndex: 'facePicUrl',
	        key: 'facePicUrl',
	        render: function render(text, record, index) {
	            return _react2["default"].createElement(
	                'span',
	                null,
	                _react2["default"].createElement(ImageHover, { src: record.facePicUrl })
	            );
	        }
	    }, {
	        title: '人员姓名',
	        dataIndex: 'name',
	        key: 'name'
	    }, {
	        title: '身份证号',
	        dataIndex: 'humanId',
	        key: 'humanId'
	    }, {
	        title: '日期',
	        dataIndex: 'date',
	        key: 'date'
	    }, {
	        title: '出现次数',
	        dataIndex: 'appearNum',
	        key: 'appearNum'
	    }],
	    searchRecord: [{
	        title: '序号',
	        dataIndex: 'index',
	        key: 'index',
	        render: function render(text, record, index) {
	            return index + 1;
	        }
	    }, {
	        title: '抓拍',
	        dataIndex: 'facePicUrl',
	        key: 'facePicUrl',
	        render: function render(text, record, index) {
	            return _react2["default"].createElement(
	                'span',
	                null,
	                _react2["default"].createElement(ImageHover, { src: record.facePicUrl })
	            );
	        }
	    }, {
	        title: '人员姓名',
	        dataIndex: 'name',
	        key: 'name'
	    }, {
	        title: '身份证号',
	        dataIndex: 'humanId',
	        key: 'humanId'
	    }, {
	        title: '抓拍时间',
	        dataIndex: 'captureTime',
	        key: 'captureTime'
	    }, {
	        title: '抓拍机名称',
	        dataIndex: 'cameraName',
	        key: 'cameraName'
	    }],
	    personSearch: [{
	        title: '序号',
	        dataIndex: 'index',
	        key: 'index',
	        render: function render(text, record, index) {
	            return index + 1;
	        }
	    }, {
	        title: '抓拍',
	        dataIndex: 'faceUrl',
	        key: 'faceUrl',
	        render: function render(text, record, index) {
	            return _react2["default"].createElement(
	                'span',
	                null,
	                _react2["default"].createElement(ImageHover, { src: record.target_sub_url })
	            );
	        }
	    }, {
	        title: '相似度',
	        dataIndex: 'similarity',
	        key: 'similarity',
	        render: function render(text, record, index) {
	            return _react2["default"].createElement(
	                'div',
	                { className: 'table-list-progress' },
	                _react2["default"].createElement(_progress2["default"], { percent: 30 })
	            );
	        }
	    }, {
	        title: '采集地点',
	        dataIndex: 'deviceName',
	        key: 'deviceName',
	        render: function render(text, record, index) {
	            return "江陵路月明路口";
	        }
	    }, {
	        title: '采集时间',
	        dataIndex: 'faceTime',
	        key: 'faceTime',
	        render: function render(text, record, index) {
	            return "2017-11-21 07:08:09";
	        }
	    }, {
	        title: '性别',
	        dataIndex: 'sex',
	        key: 'sex',
	        render: function render(text, record, index) {
	            return "男";
	        }
	    }, {
	        title: '年龄段',
	        dataIndex: 'ageRange',
	        key: 'ageRange',
	        render: function render(text, record, index) {
	            return "青年";
	        }
	    }, {
	        title: '关联推荐',
	        key: 'related',
	        render: function render(text, record, index) {
	            if (record.linkFaceBodyId) {
	                return _react2["default"].createElement(
	                    'div',
	                    { className: 'table-list-control table-list-control-relation' },
	                    _react2["default"].createElement('i', { className: 'correlation-face' })
	                );
	            } else {
	                return _react2["default"].createElement(
	                    'span',
	                    null,
	                    '--'
	                );
	            }
	        }
	    }]
	};
	var CONTROL_MAP = {
	    historySearch: [
	    /*{
	        controlTitle: "查看详情",
	        type: "lidaicon-h-document",
	        clickFunc: "document"
	    },*/{
	        controlTitle: "视频回放",
	        type: "lidaicon-video-playback",
	        clickFunc: "playback"
	    }, {
	        controlTitle: "以脸搜脸",
	        type: "lidaicon-face-search",
	        clickFunc: "faceSearchFaceHandler"
	    }, {
	        controlTitle: "车辆查询",
	        type: "lidaicon-vehicle-search",
	        clickFunc: "vehicleSearch"
	    }],
	
	    bodySearch: [{
	        controlTitle: "查看详情",
	        type: "lidaicon-h-document",
	        clickFunc: "document"
	    }],
	    searchDay: [{
	        controlTitle: "查看详情",
	        type: "lidaicon-h-document",
	        clickFunc: "document"
	    }]
	};
	
	exports.COLUMNS_MAP = COLUMNS_MAP;
	exports.CONTROL_MAP = CONTROL_MAP;

/***/ }),
/* 1198 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _icon = __webpack_require__(477);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	__webpack_require__(1199);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = function (_React$Component) {
		_inherits(App, _React$Component);
	
		function App(props) {
			_classCallCheck(this, App);
	
			var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
			_this.state = {
				isShow: false
			};
			return _this;
		}
	
		_createClass(App, [{
			key: 'mouseEnter',
			value: function mouseEnter(event) {
				var _props = this.props,
				    verticalAlign = _props.verticalAlign,
				    bigImgWidth = _props.bigImgWidth;
	
				var rect = event.target.getBoundingClientRect();
				var bigImg = this.refs.big;
				var arrow = this.refs.arrow;
				if (verticalAlign === 'middle') {
					bigImg.style.top = (rect.top + rect.bottom) / 2 - 16 - bigImgWidth / 2 + 'px';
					arrow.style.top = 16 + bigImgWidth / 2 - 4 + 'px';
				} else if (verticalAlign === 'bottom') {
					bigImg.style.top = rect.bottom - 16 - bigImgWidth - 16 + 'px';
					arrow.style.top = 16 + bigImgWidth + 16 - rect.height / 2 - 4 + 'px';
				} else {
					bigImg.style.top = rect.top + 'px';
					arrow.style.top = rect.height / 2 - 4 + 'px';
				}
				bigImg.style.left = rect.right + 'px';
				this.setState({
					isShow: true
				});
			}
		}, {
			key: 'mouseLeave',
			value: function mouseLeave() {
				this.setState({
					isShow: false
				});
			}
		}, {
			key: 'render',
			value: function render() {
				var _context;
	
				var _props2 = this.props,
				    srcs = _props2.srcs,
				    className = _props2.className,
				    _props2$width = _props2.width,
				    width = _props2$width === undefined ? 28 : _props2$width,
				    _props2$bigImgWidth = _props2.bigImgWidth,
				    bigImgWidth = _props2$bigImgWidth === undefined ? width * 4 : _props2$bigImgWidth,
				    similarity = _props2.similarity;
				var isShow = this.state.isShow;
	
				width = parseFloat(width);
				if (isNaN(width)) {
					width = 28;
				}
				return _react2["default"].createElement(
					'div',
					{ className: 'imgHover',
						style: { width: width, height: width },
						onMouseEnter: this.mouseEnter.bind(this),
						onMouseLeave: this.mouseLeave.bind(this) },
					_react2["default"].createElement('img', {
						src: srcs[0],
						className: 'imgHover-small-img ' + className,
						width: width,
						height: width
					}),
					_react2["default"].createElement(
						'div',
						{
							ref: 'big',
							style: { visibility: isShow ? 'visible' : 'hidden' },
							className: 'imgHover-big-img big-img-wrapper'
						},
						_react2["default"].createElement(
							'div',
							{ className: 'image-hover-more-big-img-content' },
							_react2["default"].createElement('div', { ref: 'arrow', className: 'image-hover-left-arrow' }),
							_react2["default"].createElement('img', {
								src: srcs[0],
								style: { width: bigImgWidth + 'px', height: bigImgWidth + 'px' }
							}),
							_react2["default"].createElement('img', {
								src: srcs[1],
								style: { width: bigImgWidth + 'px', height: bigImgWidth + 'px', marginLeft: 8 }
							}),
							similarity && _react2["default"].createElement(
								'div',
								{ className: 'items-pre' },
								(similarity * 100).toFixed(2),
								'%'
							),
							this.props.operationFunction && _react2["default"].createElement(
								'div',
								{ className: 'operation-wrapper' },
								_react2["default"].createElement(
									'div',
									{ className: 'operation-content' },
									this.props.operationIcon && _react2["default"].createElement(_icon2["default"], { type: this.props.operationIcon, onClick: (_context = this.props).operationFunction.bind(_context) }),
									this.props.operationText && this.props.operationText
								)
							)
						)
					)
				);
			}
		}]);
	
		return App;
	}(_react2["default"].Component);
	
	exports["default"] = App;

/***/ }),
/* 1199 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 1200 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _switch = __webpack_require__(481);
	
	var _switch2 = _interopRequireDefault(_switch);
	
	var _radio = __webpack_require__(805);
	
	var _radio2 = _interopRequireDefault(_radio);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _dec, _class, _class2, _temp;
	//import Export from '../../components/export';
	
	
	__webpack_require__(484);
	
	__webpack_require__(820);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _withSubscription = __webpack_require__(1180);
	
	var _withSubscription2 = _interopRequireDefault(_withSubscription);
	
	var _pagination = __webpack_require__(867);
	
	var _pagination2 = _interopRequireDefault(_pagination);
	
	var _dic = __webpack_require__(588);
	
	var _autoHide = __webpack_require__(876);
	
	var _autoHide2 = _interopRequireDefault(_autoHide);
	
	var _topPath = __webpack_require__(487);
	
	var _topPath2 = _interopRequireDefault(_topPath);
	
	var _icon = __webpack_require__(477);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _moment = __webpack_require__(662);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _index = __webpack_require__(588);
	
	var _tableList = __webpack_require__(1187);
	
	var _tableList2 = _interopRequireDefault(_tableList);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var RadioButton = _radio2["default"].Button;
	var RadioGroup = _radio2["default"].Group;
	
	//http://localhost:4001/ibody/mock/findResult,///search/findIntelliSearchResult.do
	var App = (_dec = (0, _withSubscription2["default"])(""), _dec(_class = (_temp = _class2 = function (_Component) {
	    _inherits(App, _Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.state = {
	            listType: 'imageList'
	        };
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'bodySearchHander',
	        value: function bodySearchHander(item) {
	            //以人搜人
	            var param = {
	                componentId: 'ibody',
	                componentMenuId: '0200',
	                param: 'imageUrl=' + item.target_pic_url,
	                url: '',
	                name: '',
	                callback: { "function": '', param: '' },
	                reload: true
	            };
	            top.window.goToApp(param);
	        }
	    }, {
	        key: 'faceSearchFaceHandler',
	        value: function faceSearchFaceHandler(item) {
	            //以脸搜脸
	            var param = {
	                componentId: 'iface',
	                componentMenuId: 'query_0',
	                param: 'imageUrl=' + item.target_pic_url,
	                url: '',
	                name: '',
	                callback: { "function": '', param: '' },
	                reload: true
	            };
	            top.window.goToApp(param);
	        }
	    }, {
	        key: 'faceIdSearchHander',
	        value: function faceIdSearchHander(item) {
	            //以脸搜证
	            var param = {
	                componentId: 'iface',
	                componentMenuId: 'query_2',
	                param: 'imageUrl=' + item.target_pic_url,
	                url: '',
	                name: '',
	                callback: { "function": '', param: '' },
	                reload: true
	            };
	            top.window.goToApp(param);
	        }
	    }, {
	        key: 'onChange',
	        value: function onChange(e) {
	            this.setState({
	                listType: e.target.value
	            });
	        }
	    }, {
	        key: 'onClick',
	        value: function onClick(item, type, index) {
	            if (type === 'faceIdSearchHander') {
	                this.faceIdSearchHander(item);
	            } else if (type === 'bodySearchHander') {
	                this.bodySearchHander(item);
	            } else if (type === 'clickRow') {
	                this.props.onClick(this.props.data.jobId, index);
	            } else {
	                this.props.controlHander(item, type, { "jobId": this.props.data.jobId, "currentId": index, "type": this.props.type });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var props = this.props,
	                state = this.state;
	
	            return _react2["default"].createElement(
	                'div',
	                { className: 'image-list-container', style: { width: props.width || '100%' } },
	                _react2["default"].createElement(
	                    'div',
	                    { className: 'image-list-banner' },
	                    _react2["default"].createElement(
	                        'div',
	                        { className: 'faceCard-group-topPath' },
	                        _react2["default"].createElement(_topPath2["default"], { goBack: props.goBack, list: [props.data.name] })
	                    ),
	                    _react2["default"].createElement(
	                        'div',
	                        { className: 'image-list-switch', style: { marginLeft: 8 } },
	                        props.browser.width >= 1440 && !props.layout.switchState && _react2["default"].createElement(
	                            'span',
	                            null,
	                            _react2["default"].createElement(_switch2["default"], { defaultChecked: false, size: 'small', onChange: props.switchChange }),
	                            ' \u53F3\u4FA7\u4FE1\u606F'
	                        )
	                    ),
	                    _react2["default"].createElement(
	                        'div',
	                        { className: 'image-list-change' },
	                        _react2["default"].createElement(
	                            RadioGroup,
	                            { onChange: this.onChange.bind(this), defaultValue: state.listType },
	                            _react2["default"].createElement(
	                                RadioButton,
	                                { value: 'imageList' },
	                                _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-menu' })
	                            ),
	                            _react2["default"].createElement(
	                                RadioButton,
	                                { value: 'tableList' },
	                                _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-menu-leftbar' })
	                            )
	                        )
	                    )
	                ),
	                state.listType === 'imageList' ? _react2["default"].createElement(
	                    'div',
	                    { className: 'image-list-content' },
	                    props.data && props.data.list && props.data.list.map(function (item, index) {
	                        return _react2["default"].createElement(
	                            'div',
	                            { className: 'image-list-items', key: index },
	                            _react2["default"].createElement(
	                                'div',
	                                { className: 'image-list-items-c', ref: 'image-list-refs' },
	                                _react2["default"].createElement(
	                                    'div',
	                                    { className: 'pic-container', style: { width: "222px", height: "222px" } },
	                                    _react2["default"].createElement('img', { onClick: function onClick() {
	                                            return props.onClick(props.data.jobId, index, 'group-record');
	                                        }, src: item.facePicUrl, width: 222, height: 222 })
	                                ),
	                                _react2["default"].createElement(
	                                    'div',
	                                    { className: 'image-list-items-infos' },
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'image-list-list' },
	                                        _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-face-name', className: 'icon-cls', style: { fontSize: 12 } }),
	                                        _react2["default"].createElement(
	                                            'p',
	                                            { title: props.data.name },
	                                            props.data.name
	                                        )
	                                    ),
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'image-list-list' },
	                                        _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-face-identity', className: 'icon-cls', style: { fontSize: 12 } }),
	                                        _react2["default"].createElement(
	                                            'p',
	                                            null,
	                                            props.data.humanId
	                                        )
	                                    ),
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'image-list-list' },
	                                        _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-clock', className: 'icon-cls', style: { fontSize: 12 } }),
	                                        _react2["default"].createElement(
	                                            'p',
	                                            null,
	                                            item.date
	                                        )
	                                    ),
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'image-list-list' },
	                                        _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-aim-lg-f', className: 'icon-cls', style: { fontSize: 12 } }),
	                                        _react2["default"].createElement(
	                                            'p',
	                                            { title: item.appearNum },
	                                            item.appearNum
	                                        )
	                                    )
	                                )
	                            )
	                        );
	                    })
	                ) : _react2["default"].createElement(
	                    'div',
	                    { className: 'table-list-content' },
	                    _react2["default"].createElement(_tableList2["default"], { data: props.data, type: props.type, onClick: this.onClick.bind(this) })
	                )
	            );
	        }
	    }]);
	
	    return App;
	}(_react.Component), _class2.defaultProps = {
	    viewRoute: "#/search/day",
	    type: "searchDay"
	}, _temp)) || _class);
	exports["default"] = App;

/***/ }),
/* 1201 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _switch = __webpack_require__(481);
	
	var _switch2 = _interopRequireDefault(_switch);
	
	var _radio = __webpack_require__(805);
	
	var _radio2 = _interopRequireDefault(_radio);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _dec, _class, _class2, _temp;
	//import Export from '../../components/export';
	
	
	__webpack_require__(484);
	
	__webpack_require__(820);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _http = __webpack_require__(277);
	
	var _http2 = _interopRequireDefault(_http);
	
	var _withSubscription = __webpack_require__(1180);
	
	var _withSubscription2 = _interopRequireDefault(_withSubscription);
	
	var _pagination = __webpack_require__(867);
	
	var _pagination2 = _interopRequireDefault(_pagination);
	
	var _dic = __webpack_require__(588);
	
	var _autoHide = __webpack_require__(876);
	
	var _autoHide2 = _interopRequireDefault(_autoHide);
	
	var _topPath = __webpack_require__(487);
	
	var _topPath2 = _interopRequireDefault(_topPath);
	
	var _icon = __webpack_require__(477);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _moment = __webpack_require__(662);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _index = __webpack_require__(588);
	
	var _tableList = __webpack_require__(1187);
	
	var _tableList2 = _interopRequireDefault(_tableList);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var RadioButton = _radio2["default"].Button;
	var RadioGroup = _radio2["default"].Group;
	
	//http://localhost:4001/ibody/mock/findResult,///search/findIntelliSearchResult.do
	var App = (_dec = (0, _withSubscription2["default"])("/mock/search/findSearchRecord.do"), _dec(_class = (_temp = _class2 = function (_Component) {
	    _inherits(App, _Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.state = {
	            listType: 'imageList',
	            path: {}
	        };
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            if (this.props.value) {
	                this.fetchData(this.props.value);
	            }
	        }
	
	        //从localStorage根据ID获取详情信息
	
	    }, {
	        key: 'fetchData',
	        value: function fetchData(value) {
	            var _this2 = this;
	
	            var jobId = value.jobId;
	            var currentId = value.currentId;
	            _http2["default"].storage.getData(jobId).then(function (_ref) {
	                var data = _ref.data;
	
	                _this2.setState({
	                    path: data.list[currentId]
	                });
	            })["catch"](function (e) {});
	        }
	    }, {
	        key: 'bodySearchHander',
	        value: function bodySearchHander(item) {
	            //以人搜人
	            var param = {
	                componentId: 'ibody',
	                componentMenuId: '0200',
	                param: 'imageUrl=' + item.target_pic_url,
	                url: '',
	                name: '',
	                callback: { "function": '', param: '' },
	                reload: true
	            };
	            top.window.goToApp(param);
	        }
	    }, {
	        key: 'faceSearchFaceHandler',
	        value: function faceSearchFaceHandler(item) {
	            //以脸搜脸
	            var param = {
	                componentId: 'iface',
	                componentMenuId: 'query_0',
	                param: 'imageUrl=' + item.target_pic_url,
	                url: '',
	                name: '',
	                callback: { "function": '', param: '' },
	                reload: true
	            };
	            top.window.goToApp(param);
	        }
	    }, {
	        key: 'faceIdSearchHander',
	        value: function faceIdSearchHander(item) {
	            //以脸搜证
	            var param = {
	                componentId: 'iface',
	                componentMenuId: 'query_2',
	                param: 'imageUrl=' + item.target_pic_url,
	                url: '',
	                name: '',
	                callback: { "function": '', param: '' },
	                reload: true
	            };
	            top.window.goToApp(param);
	        }
	    }, {
	        key: 'onChange',
	        value: function onChange(e) {
	            this.setState({
	                listType: e.target.value
	            });
	        }
	    }, {
	        key: 'onClick',
	        value: function onClick(item, type, index) {
	            if (type === 'faceIdSearchHander') {
	                this.faceIdSearchHander(item);
	            } else if (type === 'bodySearchHander') {
	                this.bodySearchHander(item);
	            } else if (type === 'clickRow') {
	                this.props.onClick(this.props.data.jobId, index);
	            } else {
	                this.props.controlHander(item, type, { "jobId": this.props.data.jobId, "currentId": index, "type": this.props.type });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var props = this.props,
	                state = this.state;
	
	            return _react2["default"].createElement(
	                'div',
	                { className: 'image-list-container', style: { width: props.width || '100%' } },
	                _react2["default"].createElement(
	                    'div',
	                    { className: 'image-list-banner' },
	                    _react2["default"].createElement(
	                        'div',
	                        { className: 'faceCard-group-topPath' },
	                        _react2["default"].createElement(_topPath2["default"], { goBack: props.goBack, list: [state.path.name, state.path.date] })
	                    ),
	                    _react2["default"].createElement(
	                        'div',
	                        { className: 'image-list-switch', style: { marginLeft: 8 } },
	                        props.browser.width >= 1440 && !props.layout.switchState && _react2["default"].createElement(
	                            'span',
	                            null,
	                            _react2["default"].createElement(_switch2["default"], { defaultChecked: false, size: 'small', onChange: props.switchChange }),
	                            ' \u53F3\u4FA7\u4FE1\u606F'
	                        )
	                    ),
	                    _react2["default"].createElement(
	                        'div',
	                        { className: 'image-list-change' },
	                        _react2["default"].createElement(
	                            RadioGroup,
	                            { onChange: this.onChange.bind(this), defaultValue: state.listType },
	                            _react2["default"].createElement(
	                                RadioButton,
	                                { value: 'imageList' },
	                                _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-menu' })
	                            ),
	                            _react2["default"].createElement(
	                                RadioButton,
	                                { value: 'tableList' },
	                                _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-menu-leftbar' })
	                            )
	                        )
	                    )
	                ),
	                state.listType === 'imageList' ? _react2["default"].createElement(
	                    'div',
	                    { className: 'image-list-content' },
	                    props.data && props.data.list && props.data.list.map(function (item, index) {
	                        return _react2["default"].createElement(
	                            'div',
	                            { className: 'image-list-items', key: index },
	                            _react2["default"].createElement(
	                                'div',
	                                { className: 'image-list-items-c', ref: 'image-list-refs' },
	                                _react2["default"].createElement(
	                                    'div',
	                                    { className: 'pic-container', style: { width: "222px", height: "222px" } },
	                                    _react2["default"].createElement('img', { onClick: function onClick() {
	                                            return props.onClick(props.data.jobId, index);
	                                        }, src: item.facePicUrl, width: 222, height: 222 })
	                                ),
	                                _react2["default"].createElement(
	                                    'div',
	                                    { className: 'image-list-items-infos' },
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'image-list-list' },
	                                        _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-clock', className: 'icon-cls', style: { fontSize: 12 } }),
	                                        _react2["default"].createElement(
	                                            'p',
	                                            null,
	                                            (0, _moment2["default"])(item.captureTime).format(_dic.FORMAT_DATETIME)
	                                        )
	                                    ),
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'image-list-list' },
	                                        _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-local', className: 'icon-cls', style: { fontSize: 12 } }),
	                                        _react2["default"].createElement(
	                                            'p',
	                                            { title: item.cameraName },
	                                            item.cameraName
	                                        )
	                                    )
	                                )
	                            )
	                        );
	                    })
	                ) : _react2["default"].createElement(
	                    'div',
	                    { className: 'table-list-content' },
	                    _react2["default"].createElement(_tableList2["default"], { data: props.data, type: props.type, onClick: this.onClick.bind(this) })
	                ),
	                !props.hidePagination && _react2["default"].createElement(
	                    'div',
	                    { className: 'imagelist-bottom' },
	                    _react2["default"].createElement(_pagination2["default"], {
	                        current: props.currentPage,
	                        total: props.data.total,
	                        pageSize: props.pageSize,
	                        showSizeChanger: true,
	                        onShowSizeChange: props.onShowSizeChange,
	                        onChange: props.onPageChange,
	                        pageSizeOptions: _dic.PAGESIZEOPTIONS,
	                        showQuickJumper: true
	                    })
	                )
	            );
	        }
	    }]);
	
	    return App;
	}(_react.Component), _class2.defaultProps = {
	    viewRoute: "#/search/day",
	    type: "searchRecord"
	}, _temp)) || _class);
	exports["default"] = App;

/***/ }),
/* 1202 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _switch = __webpack_require__(481);
	
	var _switch2 = _interopRequireDefault(_switch);
	
	var _checkbox = __webpack_require__(845);
	
	var _checkbox2 = _interopRequireDefault(_checkbox);
	
	var _modal = __webpack_require__(307);
	
	var _modal2 = _interopRequireDefault(_modal);
	
	var _select = __webpack_require__(505);
	
	var _select2 = _interopRequireDefault(_select);
	
	var _radio = __webpack_require__(805);
	
	var _radio2 = _interopRequireDefault(_radio);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _dec, _class, _class2, _temp;
	// import Export from 'components/export';
	
	
	__webpack_require__(484);
	
	__webpack_require__(601);
	
	__webpack_require__(398);
	
	__webpack_require__(582);
	
	__webpack_require__(820);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(158);
	
	var _withSubscription = __webpack_require__(1180);
	
	var _withSubscription2 = _interopRequireDefault(_withSubscription);
	
	var _pagination = __webpack_require__(867);
	
	var _pagination2 = _interopRequireDefault(_pagination);
	
	var _dic = __webpack_require__(588);
	
	var _autoHide = __webpack_require__(876);
	
	var _autoHide2 = _interopRequireDefault(_autoHide);
	
	var _icon = __webpack_require__(477);
	
	var _icon2 = _interopRequireDefault(_icon);
	
	var _level = __webpack_require__(1131);
	
	var _level2 = _interopRequireDefault(_level);
	
	var _moment = __webpack_require__(662);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _tableList = __webpack_require__(1187);
	
	var _tableList2 = _interopRequireDefault(_tableList);
	
	var _tool = __webpack_require__(896);
	
	var _exTools = __webpack_require__(1203);
	
	var _exTools2 = _interopRequireDefault(_exTools);
	
	__webpack_require__(1204);
	
	var _index = __webpack_require__(588);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var RadioButton = _radio2["default"].Button;
	var RadioGroup = _radio2["default"].Group;
	
	var ip = document.location.hostname;
	var protocol = document.location.protocol;
	var port = document.location.port;
	var Option = _select2["default"].Option;
	
	
	// @withSubscription("/mock/historySearch/historySearch.do")
	var App = (_dec = (0, _withSubscription2["default"])("/control-web/historyAlarm/getHistoryAlarmInfo"), _dec(_class = (_temp = _class2 = function (_Component) {
	    _inherits(App, _Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.state = {
	            listType: 'imageList',
	            currentIndex: props.currentIndex
	        };
	        _this.interfaceInfo = props.user.interfaceInfo;
	        _this.faceUrl = props.user.interfaceInfo.face || "";
	        _this.vehicleUrl = props.user.interfaceInfo.vehicle || "";
	        _this.videoPlay = props.user.interfaceInfo.videoPlay || {};
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var props = this.props;
	
	            if (nextProps.currentIndex != this.state.currentIndex) {
	                this.setState({
	                    currentIndex: nextProps.currentIndex
	                });
	            }
	
	            if (JSON.stringify(nextProps.user.interfaceInfo) !== "{}" && JSON.stringify(nextProps.user.interfaceInfo) !== JSON.stringify(this.interfaceInfo)) {
	                this.interfaceInfo = props.user.interfaceInfo || {};
	                this.faceUrl = props.user.interfaceInfo.face || "";
	                this.vehicleUrl = props.user.interfaceInfo.vehicle || "";
	                this.videoPlay = props.user.interfaceInfo.videoPlay || {};
	            }
	        }
	    }, {
	        key: 'bodySearchHander',
	        value: function bodySearchHander(item) {
	            var url = protocol + "//" + ip + ":" + port + "/ibody-web/index.do#personSearch?imageUrl=" + item.target_pic_url;
	            (0, _tool.goToApp)({
	                url: url,
	                title: "以人搜人"
	            });
	            /*        let param = {
	                        url:protocol + "//" + ip + ":" + port + "/ibody-web/index.do#personSearch,
	                        param:'imageUrl=' + item.target_pic_url,
	                        title: "以人搜人"
	                    };
	                    goToApp(param);*/
	        }
	    }, {
	        key: 'faceSearchFaceHandler',
	        value: function faceSearchFaceHandler(item) {
	            var url = void 0;
	            if (item.linkFaceBodyId) {
	                url = protocol + "//" + ip + ":" + port + "/iface-web/index.do#snapshot?linkFaceBodyId=" + item.linkFaceBodyId;
	            } else {
	                // url = protocol + "//" + ip + ":" + port + "/iface-web/index.do#snapshot?faceUrl=" + item.snapPicUrl;
	                // url = "http://10.33.42.85:8091/fas/web/snapshot.action?model=bs&faceUrl=" + item.snapPicUrl;
	                url = this.faceUrl + "faceUrl=" + encodeURIComponent(item.snapPicUrl);
	            }
	            (0, _tool.goToApp)({
	                url: url,
	                title: "以脸搜脸"
	            });
	            /*        let param = {
	                        url:protocol + "//" + ip + ":" + port + "/iface-web/index.do#snapshot,
	                        param:'faceUrl=' + item.target_pic_url,
	                        title: "以脸搜脸"
	                    };
	                    goToApp(param);*/
	        }
	    }, {
	        key: 'vehicleSearchHandler',
	        value: function vehicleSearchHandler(item) {
	            // let url = protocol + "//" + ip + ":" + port + "/bms/web/vehicleSearch/index.do?queryType=1&plateInfo=" + item.plateNum;
	            // let url = "https://10.33.42.174/bms/web/vehicleSearch/index.do?queryType=1&plateInfo=" + item.plateNum;
	            var url = this.vehicleUrl + "plateInfo=" + encodeURIComponent(item.plateNum);
	            (0, _tool.goToApp)({
	                url: url,
	                title: "车辆查询"
	            });
	            /*        let param = {
	                        url:protocol + "//" + ip + ":" + port + "/iface-web/index.do#faceCard
	                        param:'faceUrl=' + item.target_pic_url,
	                        title: "以脸搜证"
	                    };
	                    goToApp(param);*/
	        }
	
	        //视频回放
	
	    }, {
	        key: 'videoPlayBack',
	        value: function videoPlayBack(item) {
	            var state = this.state;
	
	
	            var cameraIndexCode = item.relateCamera;
	            var createTimeLong = (0, _moment2["default"])(item.alarmTime).valueOf();
	            var playerParam = {
	                authIp: this.videoPlay.ip || '',
	                authPort: this.videoPlay.port || '443',
	                loginTgt: this.videoPlay.tgt || ''
	                // pluginIpPort: 'http://10.2.145.103:80'
	            };
	            if (!cameraIndexCode) {
	                _modal2["default"].info({
	                    title: '提示',
	                    content: '无关联点位，无法进行视频回放'
	                });
	                return;
	            }
	            // let createTimeLong=item.createTimeLong;
	            // let playerParam=this.props.user.interfaceInfo.playerParam;
	            _exTools2["default"].playBack(cameraIndexCode, createTimeLong, playerParam);
	        }
	    }, {
	        key: 'onChange',
	        value: function onChange(e) {
	            this.setState({
	                listType: e.target.value,
	                chooseData: []
	            });
	        }
	    }, {
	        key: 'onClick',
	        value: function onClick(item, type, index) {
	            if (type === 'playback') {
	                this.videoPlayBack(item);
	            } else if (type === 'faceSearchFaceHandler') {
	                this.faceSearchFaceHandler(item);
	            } else if (type === 'vehicleSearch') {
	                this.vehicleSearchHandler(item);
	            } else if (type === 'clickRow') {
	                this.props.onClick(this.props.data.jobId, index);
	                this.setState({
	                    currentIndex: index
	                });
	            } else {
	                this.props.controlHander(item, type, { "jobId": this.props.data.jobId, "currentId": index, "type": this.props.type });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            var props = this.props,
	                state = this.state;
	            var loading = props.loading,
	                data = props.data;
	
	            var showData = data && data.list;
	            return loading ? _react2["default"].createElement('div', null) : _react2["default"].createElement(
	                'div',
	                { className: 'image-list-container', style: { width: props.width || '100%' } },
	                showData && _react2["default"].createElement(
	                    'div',
	                    { className: 'image-list-banner' },
	                    props.chooseState && state.listType === 'imageList' && _react2["default"].createElement(
	                        'div',
	                        { className: props.chooseData.length > 0 && props.chooseData.length < props.data.list.length ? "choose-all-checkbox choose-half-checkbox" : "choose-all-checkbox" },
	                        _react2["default"].createElement(
	                            _checkbox2["default"],
	                            { onChange: function onChange(e) {
	                                    return props.chooseAllChange(e);
	                                }, checked: props.checkedAll, list: props.data.list, dataNum: props.dataNum },
	                            '\u5168\u9009'
	                        )
	                    ),
	                    !props.chooseState && _react2["default"].createElement(
	                        'div',
	                        null,
	                        _react2["default"].createElement(
	                            'div',
	                            { className: 'image-list-switch', style: { marginLeft: 8 } },
	                            props.browser.width >= 1440 && !props.layout.switchState && _react2["default"].createElement(
	                                'span',
	                                null,
	                                _react2["default"].createElement(_switch2["default"], { defaultChecked: false, size: 'small', onChange: props.switchChange }),
	                                ' \u53F3\u4FA7\u4FE1\u606F'
	                            )
	                        ),
	                        _react2["default"].createElement(
	                            'div',
	                            { className: 'image-list-change' },
	                            _react2["default"].createElement(
	                                RadioGroup,
	                                { onChange: this.onChange.bind(this), defaultValue: state.listType },
	                                _react2["default"].createElement(
	                                    RadioButton,
	                                    { value: 'imageList' },
	                                    _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-menu' })
	                                ),
	                                _react2["default"].createElement(
	                                    RadioButton,
	                                    { value: 'tableList' },
	                                    _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-list' })
	                                )
	                            )
	                        )
	                    )
	                ),
	                state.listType === 'imageList' ? _react2["default"].createElement(
	                    'div',
	                    { className: 'image-list-content' },
	                    props.data && props.data.list && props.data.list.map(function (item, index) {
	                        var controlList = [
	                        //<Icon type="lidaicon-h-document" title="查看详情" onClick={() => props.controlHander(item, 'document', {"jobId": props.data.jobId, "currentId": index, "type": props.type})}/>,
	                        _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-video-playback', title: '\u89C6\u9891\u56DE\u653E', onClick: function onClick() {
	                                return _this2.videoPlayBack(item);
	                            } })];
	                        if (item.alarmType == 1) {
	                            controlList.push(_react2["default"].createElement(_icon2["default"], { type: 'lidaicon-face-search', title: '\u4EE5\u8138\u641C\u8138', onClick: function onClick() {
	                                    return _this2.faceSearchFaceHandler(item);
	                                } }));
	                        } else if (item.alarmType == 2) {
	                            controlList.push(_react2["default"].createElement(_icon2["default"], { type: 'lidaicon-vehicle-search', title: '\u8F66\u8F86\u67E5\u8BE2', onClick: function onClick() {
	                                    return _this2.vehicleSearchHandler(item);
	                                } }));
	                        }
	                        return _react2["default"].createElement(
	                            'div',
	                            { className: 'image-list-items-double', key: item.alarmId },
	                            _react2["default"].createElement(
	                                'div',
	                                { className: 'image-list-items-c', ref: 'image-list-refs' },
	                                _react2["default"].createElement(
	                                    'div',
	                                    { className: 'items-head' },
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'items-head-place' },
	                                        item.deviceName
	                                    ),
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'items-head-level' },
	                                        _react2["default"].createElement(_level2["default"], { value: item.alarmLevel })
	                                    )
	                                ),
	                                _react2["default"].createElement(
	                                    'div',
	                                    { className: 'items-double', onClick: function onClick() {
	                                            return props.onClick(props.data.jobId, index);
	                                        } },
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'items-c-single' },
	                                        _react2["default"].createElement('img', { onClick: function onClick() {
	                                                return props.onClick(props.data.jobId, index);
	                                            }, src: item.snapPicUrl || __webpack_require__(1609), width: 142, height: 142 })
	                                    ),
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'items-c-single' },
	                                        _react2["default"].createElement('img', { onClick: function onClick() {
	                                                return props.onClick(props.data.jobId, index);
	                                            }, src: item.faceUrl || __webpack_require__(1610), width: 142, height: 142 })
	                                    ),
	                                    item.alarmType == 1 && _react2["default"].createElement(
	                                        'div',
	                                        { className: 'items-pre' },
	                                        (item.similarity * 100).toFixed(2),
	                                        '%'
	                                    )
	                                ),
	                                _react2["default"].createElement(
	                                    'div',
	                                    { className: 'image-list-items-infos' },
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'image-list-items-infos-single' },
	                                        _react2["default"].createElement(
	                                            'div',
	                                            { className: 'image-list-list-single' },
	                                            _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-vehicle', className: 'icon-cls', style: { fontSize: 12 } }),
	                                            _react2["default"].createElement(
	                                                'p',
	                                                null,
	                                                item.plateNum || "未采集"
	                                            )
	                                        ),
	                                        _react2["default"].createElement(
	                                            'div',
	                                            { className: 'image-list-list-single' },
	                                            _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-wifi-terminal', className: 'icon-cls', style: { fontSize: 12 } }),
	                                            _react2["default"].createElement(
	                                                'p',
	                                                null,
	                                                item.macAddress || "未采集"
	                                            )
	                                        ),
	                                        _react2["default"].createElement(
	                                            'div',
	                                            { className: 'image-list-list-single' },
	                                            _react2["default"].createElement('i', { className: 'icon-cls rfid-icon', style: { fontSize: 12 } }),
	                                            _react2["default"].createElement(
	                                                'p',
	                                                null,
	                                                item.rfid || "未采集"
	                                            )
	                                        ),
	                                        _react2["default"].createElement(
	                                            'div',
	                                            { className: 'image-list-list-single' },
	                                            _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-clock', className: 'icon-cls', style: { fontSize: 12 } }),
	                                            _react2["default"].createElement(
	                                                'p',
	                                                null,
	                                                (0, _moment2["default"])(item.alarmTime).format(_dic.FORMAT_DATETIME)
	                                            )
	                                        )
	                                    ),
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'image-list-items-infos-single', style: { paddingLeft: 4 } },
	                                        _react2["default"].createElement(
	                                            'div',
	                                            { className: 'image-list-list-single' },
	                                            _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-face-name', className: 'icon-cls', style: { fontSize: 12 } }),
	                                            _react2["default"].createElement(
	                                                'p',
	                                                null,
	                                                item.personName
	                                            )
	                                        ),
	                                        _react2["default"].createElement(
	                                            'div',
	                                            { className: 'image-list-list-single' },
	                                            _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-face-identity', className: 'icon-cls', style: { fontSize: 12 } }),
	                                            _react2["default"].createElement(
	                                                'p',
	                                                null,
	                                                item.idCard
	                                            )
	                                        ),
	                                        _react2["default"].createElement(
	                                            'div',
	                                            { className: 'image-list-list-single' },
	                                            _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-h-users', className: 'icon-cls', style: { fontSize: 12 } }),
	                                            _react2["default"].createElement(
	                                                'p',
	                                                null,
	                                                item.personType
	                                            )
	                                        ),
	                                        _react2["default"].createElement(
	                                            'div',
	                                            { className: 'image-list-list-single' },
	                                            _react2["default"].createElement(_icon2["default"], { type: 'lidaicon-aim', className: 'icon-cls', style: { fontSize: 12 } }),
	                                            _react2["default"].createElement(
	                                                'p',
	                                                null,
	                                                item.taskName
	                                            )
	                                        )
	                                    ),
	                                    _react2["default"].createElement(
	                                        'div',
	                                        { className: 'image-list-control' },
	                                        _react2["default"].createElement(_autoHide2["default"], {
	                                            total_width: 150,
	                                            width: 24,
	                                            list: controlList,
	                                            renderItem: function renderItem(icon) {
	                                                return _react2["default"].createElement(
	                                                    'div',
	                                                    { className: 'text-center', style: { lineHeight: 1.5 } },
	                                                    icon
	                                                );
	                                            },
	                                            renderHidden: function renderHidden(icon) {
	                                                return _react2["default"].createElement(
	                                                    'div',
	                                                    { className: 'text-center', style: { lineHeight: 2 } },
	                                                    icon
	                                                );
	                                            }
	                                        })
	                                    )
	                                )
	                            )
	                        );
	                    })
	                ) : _react2["default"].createElement(
	                    'div',
	                    { className: 'table-list-content' },
	                    _react2["default"].createElement(_tableList2["default"], { data: props.data, type: props.type, onClick: this.onClick.bind(this), currentIndex: state.currentIndex, rowSelection: props.chooseState ? props.rowSelection : null })
	                ),
	                !props.hidePagination && _react2["default"].createElement(
	                    'div',
	                    { className: 'imagelist-bottom' },
	                    _react2["default"].createElement(_pagination2["default"], {
	                        current: props.currentPage,
	                        total: props.data.total,
	                        pageSize: props.pageSize,
	                        showSizeChanger: true,
	                        onShowSizeChange: props.onShowSizeChange,
	                        onChange: props.onPageChange,
	                        pageSizeOptions: _dic.PAGESIZEOPTIONS,
	                        showQuickJumper: true
	                    })
	                )
	            );
	        }
	    }]);
	
	    return App;
	}(_react.Component), _class2.defaultProps = {
	    viewRoute: "#view/bodySearch",
	    type: "historySearch"
	}, _temp)) || _class);
	exports["default"] = (0, _reactRedux.connect)(function (state) {
	    return { user: state.user };
	})(App);

/***/ }),
/* 1203 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _modal = __webpack_require__(307);
	
	var _modal2 = _interopRequireDefault(_modal);
	
	__webpack_require__(398);
	
	var _base = __webpack_require__(1185);
	
	var _base2 = _interopRequireDefault(_base);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var confirm = _modal2["default"].confirm;
	
	var initSocket = true;
	var socket;
	var interval = 10; //回放前后时间间隔，默认10秒
	
	/**
	 * cameraIndexCode:'330108000002673509,330108000002673510'//多个用逗号隔开
	 * playerParam对象属性
	 * @nginxIp:'10.2.145.103',//部署平台IP
	 * @nginxPort:'80',//部署平台端口
	 * @loginTgt:'',//sg,用于平台播放器,下载器可不传
	 * @pluginIpPort:'http://10.2.145.103:80'//插件下载IP端口
	 * playBackTime:30//不传默认30秒
	 */
	module.exports = {
	    playBack: function playBack(cameraIndexCode, createTimeLong, playerParam, playBackTime) {
	        var authIp = playerParam.authIp,
	            authPort = playerParam.authPort,
	            loginTgt = playerParam.loginTgt;
	
	        var preOldTime = parseInt((createTimeLong - (playBackTime ? playBackTime : interval) * 1000) / 1000);
	        var afterOldTime = parseInt((createTimeLong + (playBackTime ? playBackTime : interval) * 1000) / 1000);
	        // let protocol = (document.location.protocol.indexOf("https") >-1) ? 'https':'http';
	        /*let cameraNum = cameraIndexCode.split(",").length;
	        let wndCount = 1;
	        if(cameraNum<=1){
	            wndCount=1;
	        }else if(1<cameraNum<=4){
	            wndCount=4;
	        }else{
	            wndCount=9;
	        }
	        let camList='';
	        if(cameraNum==1){
	            camList=cameraIndexCode + "_" + preOldTime + "_" + afterOldTime;
	        }else{
	            let camListArray=[];
	            let cameraArray=cameraIndexCode.split(",");
	            for(let i=0;i<cameraNum;i++){
	                camListArray.push(cameraArray[i] + "_" + preOldTime + "_" + afterOldTime);
	            }
	            camList=camListArray.join(',');
	        }*/
	        var url = "hikvideoclient://ReqType:PlayBack;MiniUI:1;VersionTag:UNIV1.0;ImpIp:" + authIp + ";ImpPort:" + authPort + ";HttpsFlag:1" + ";CamList:" + cameraIndexCode + "_" + preOldTime + "_" + afterOldTime + ";User:" + loginTgt + ";easyMode:1;";
	
	        // let url = "btoolsprotocol://CenterUrl:"+ protocol +"://"+nginxIp+":"+nginxPort+"/portal;Toollist:PROT_btoolpplayerprotocol;CmdLine:btoolpplayerprotocol://ReqType:PlayBack;VersionTag:UNIV1.0;language:zh_US;clear:2;WndCount:"+wndCount+";NginxIp:"+nginxIp+";NginxPort:"+nginxPort+";sg:"+loginTgt+";CamList:"+ camList +";protocol:"+ protocol +";appType:vas;archiveCode:;gridtrack:1;"+ (wndCount==1?"MiniUI:1;":"");
	        // checkingIeChromeBtool(url,playerParam);
	        checkingIeChromeVideoClient(url, playerParam);
	    }
	};
	
	//ie、chrome检测VideoClient
	function checkingIeChromeVideoClient(url, playerParam) {
	    if (/msie/.test(navigator.userAgent.toLowerCase())) {
	        //IE
	        checkTool('hikvideoclient', function (isInstall) {
	            if (isInstall) {
	                var ocx = document.getElementById("HikToolCheckOCX");
	                try {
	                    // 启动播放器
	                    ocx.StartupToolByCmd('hikvideoclient', url);
	                } catch (e) {
	                    openVideoClientPluginDailog(playerParam);
	                }
	            } else {
	                openVideoClientPluginDailog(playerParam);
	            }
	        });
	    } else {
	        //chrome
	        var clientCheck = '{"comment":{"commenttype":"checkapp", "context":"hikvideoclient:"}}';
	        webSocketConnect(clientCheck, url, playerParam, function (data) {
	            if (checkAppExist(data) == 1) {
	                var startCommand = '{"comment":{"commenttype":"startapp", "context":"hikvideoclient:", "commentcmd":"' + url + '"}}';
	                socket.send(startCommand);
	            } else {
	                openVideoClientPluginDailog(playerParam);
	            }
	        });
	    }
	}
	
	//打开未安装平台播放器（回放前后30秒、在线录像预览）弹窗
	function openVideoClientPluginDailog(playerParam) {
	    confirm({
	        title: '是否安装控件',
	        content: '检测到您未安装相关控件,是否立即安装',
	        onOk: function onOk() {
	            window.open("//" + playerParam.authIp + '/cas/eportal/software!listHomePage.action');
	            // window.open(playerParam.pluginIpPort+"/portal/out/getPackageById.do?id=btools");
	        },
	        onCancel: function onCancel() {}
	    });
	}
	
	function checkTool(id, callBack) {
	    //通过这个控件来测试播放器是否安装
	    var ocx = document.getElementById('HikToolCheckOCX');
	    var bstrResult = 0;
	    try {
	        //如果控件安装了，结果为1
	        bstrResult = ocx.CheckToolStatus(id);
	        var ret = ocx.StartupAppAccpetor(); //开启应用事件监听，开启后才可以收到来自外部应用的消息！！！
	    } catch (e) {
	        bstrResult = 0;
	    }
	    bstrResult = bstrResult == 1 ? true : false;
	    callBack(bstrResult);
	}
	
	//chrome通过返回Json报文检测是否按照工具
	function checkAppExist(data) {
	    initSocket = false;
	    var resultCode = 0;
	    var resultJson = eval("(" + data + ")");
	    if (resultJson) {
	        resultCode = resultJson.comment.resultCode;
	        return resultCode;
	    } else {
	        return resultCode;
	    }
	}
	
	//chrome检测工具包括后续工具通信 选择文件
	function webSocketConnect(checkMsg, hikUrl, playerParam, callback) {
	    //   let host = "wss://" + playerParam.nginxIp +":"+ playerParam.nginxPort + "/WebS_Js";
	    // let host = "wss://127.0.0.1:18001/WebS_Js";
	    var host = "wss://" + playerParam.authIp + ":" + playerParam.authPort + "/WebS_Js";
	    try {
	        if (!socket) {
	            socket = new WebSocket(host);
	        } else {
	            socket.send(checkMsg);
	        }
	        socket.onopen = function () {
	            socket.send(checkMsg);
	        };
	        socket.onmessage = function (msg) {
	            var data = msg.data;
	            if (data == '') {
	                return;
	            }
	            callback && callback(data);
	        };
	        socket.onclose = function () {
	            socket = null;
	            /*if(initSocket){
	                openBtoolPluginDailog(playerParam);
	            }else{
	                //window.location.href = hikUrl;
	            }*/
	        };
	    } catch (e) {
	        alert(e);
	    }
	}
	
	/*function checkingIeChromeBtool(url,playerParam){
	    if (/msie/.test(navigator.userAgent.toLowerCase())){//IE
	        checkTool('btoolsprotocol',function(isInstall){
	                if(isInstall){
	                    let ocx = document.getElementById("HikToolCheckOCX");
	                    try {
	                    // 启动播放器
	                        ocx.StartupToolByCmd('btoolsprotocol', url);
	                    } catch (e) {
	                        openBtoolPluginDailog(playerParam);
	                    }
	                }else{
	                        openBtoolPluginDailog(playerParam);
	                }
	             });
	    }else{//chrome
	        let clientCheck = '{"comment":{"commenttype":"checkapp", "context":"btoolsprotocol:"}}';
	        webSocketConnect(clientCheck,url,playerParam,function(data){
	            if(data.indexOf("btoolsprotocol")>-1){
	                if(checkAppExist(data)==1){
	                    let startCommand = '{"comment":{"commenttype":"startapp", "context":"btoolsprotocol:", "commentcmd":"'+url+'"}}';
	                    socket.send(startCommand);
	                }else{
	                    openBtoolPluginDailog(playerParam);
	                }               
	            }
	
	        });
	    }   
	}
	
	//打开未安装平台播放器弹窗
	function openBtoolPluginDailog(playerParam){ 
	    confirm({
	        title: '是否安装控件',
	        content: '检测到您未安装相关控件,是否立即安装',
	        onOk() {
	            window.open(playerParam.pluginIpPort+"/portal/out/getPackageById.do?id=btools");
	        },
	        onCancel() {},
	    });
	}*/

/***/ }),
/* 1204 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 1205 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _class, _temp;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	__webpack_require__(1206);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = (_temp = _class = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	    }
	
	    _createClass(App, [{
	        key: 'render',
	        value: function render() {
	            var state = this.state,
	                props = this.props;
	
	            return _react2["default"].createElement(
	                'div',
	                { className: 'initial-page-wrapper' },
	                _react2["default"].createElement(
	                    'div',
	                    { className: 'initial-page-box-wrapper' },
	                    !props.status ? !props.search ? _react2["default"].createElement(
	                        'div',
	                        { className: 'initial-page-box' },
	                        _react2["default"].createElement(
	                            'div',
	                            { className: 'initial-page-box-inner' },
	                            _react2["default"].createElement(
	                                'div',
	                                { className: 'initial-page-box-img' },
	                                _react2["default"].createElement('i', { className: 'initial-page' })
	                            ),
	                            _react2["default"].createElement(
	                                'div',
	                                { className: 'initial-page-f-text' },
	                                props.firstText
	                            ),
	                            _react2["default"].createElement(
	                                'div',
	                                { className: 'initial-page-s-text' },
	                                props.secondText
	                            )
	                        )
	                    ) : _react2["default"].createElement(
	                        'div',
	                        { className: 'initial-page-box' },
	                        _react2["default"].createElement(
	                            'div',
	                            { className: 'initial-page-box-inner' },
	                            _react2["default"].createElement(
	                                'div',
	                                { className: 'initial-page-box-img' },
	                                _react2["default"].createElement('i', { className: 'default-search-page' })
	                            ),
	                            _react2["default"].createElement(
	                                'div',
	                                { className: 'initial-page-f-text' },
	                                props.firstText
	                            ),
	                            _react2["default"].createElement(
	                                'div',
	                                { className: 'initial-page-s-text' },
	                                props.secondText
	                            )
	                        )
	                    ) : _react2["default"].createElement(
	                        'div',
	                        { className: 'initial-empty-page-box' },
	                        _react2["default"].createElement(
	                            'div',
	                            { className: 'initial-empty-page-box-inner' },
	                            _react2["default"].createElement(
	                                'div',
	                                { className: 'initial-empty-page-box-img' },
	                                _react2["default"].createElement('i', { className: 'empty-page' }),
	                                _react2["default"].createElement(
	                                    'div',
	                                    { className: 'initial-empty-page-f-text' },
	                                    props.emptyFirstText
	                                ),
	                                _react2["default"].createElement(
	                                    'div',
	                                    { className: 'initial-empty-page-s-text' },
	                                    props.emptySecondText
	                                )
	                            )
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component), _class.defaultProps = {
	    firstText: "请先输入条件，点查询才有结果",
	    secondText: "",
	    emptyFirstText: "抱歉，搜索无结果",
	    emptySecondText: ""
	}, _temp);
	exports["default"] = App;

/***/ }),
/* 1206 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 1207 */,
/* 1208 */,
/* 1209 */,
/* 1210 */,
/* 1211 */,
/* 1212 */,
/* 1213 */,
/* 1214 */,
/* 1215 */,
/* 1216 */,
/* 1217 */,
/* 1218 */,
/* 1219 */,
/* 1220 */,
/* 1221 */,
/* 1222 */,
/* 1223 */,
/* 1224 */,
/* 1225 */,
/* 1226 */,
/* 1227 */,
/* 1228 */,
/* 1229 */,
/* 1230 */,
/* 1231 */,
/* 1232 */,
/* 1233 */,
/* 1234 */,
/* 1235 */,
/* 1236 */,
/* 1237 */,
/* 1238 */,
/* 1239 */,
/* 1240 */,
/* 1241 */,
/* 1242 */,
/* 1243 */,
/* 1244 */,
/* 1245 */,
/* 1246 */,
/* 1247 */,
/* 1248 */,
/* 1249 */,
/* 1250 */,
/* 1251 */,
/* 1252 */,
/* 1253 */,
/* 1254 */,
/* 1255 */,
/* 1256 */,
/* 1257 */,
/* 1258 */,
/* 1259 */,
/* 1260 */,
/* 1261 */,
/* 1262 */,
/* 1263 */,
/* 1264 */,
/* 1265 */,
/* 1266 */,
/* 1267 */,
/* 1268 */,
/* 1269 */,
/* 1270 */,
/* 1271 */,
/* 1272 */,
/* 1273 */,
/* 1274 */,
/* 1275 */,
/* 1276 */,
/* 1277 */,
/* 1278 */,
/* 1279 */,
/* 1280 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _loader = __webpack_require__(410);
	
	var _loader2 = _interopRequireDefault(_loader);
	
	var _reactRedux = __webpack_require__(158);
	
	var _layout = __webpack_require__(480);
	
	var _conditions = __webpack_require__(1141);
	
	var _conditions2 = _interopRequireDefault(_conditions);
	
	var _imageListDetail = __webpack_require__(878);
	
	var _imageListDetail2 = _interopRequireDefault(_imageListDetail);
	
	var _imageListPreview = __webpack_require__(1178);
	
	var _initialPage = __webpack_require__(1205);
	
	var _initialPage2 = _interopRequireDefault(_initialPage);
	
	var _charts = __webpack_require__(925);
	
	__webpack_require__(1281);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var App = function (_React$Component) {
	    _inherits(App, _React$Component);
	
	    function App(props) {
	        _classCallCheck(this, App);
	
	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	        _this.state = {
	            // 默认无条件为null
	            conditions: null,
	            content_north_h: 112,
	            chart_height: 300,
	            emptyStatus: false,
	            uploadImgList: null,
	            imageListType: 'person',
	            value: null,
	            valuePerson: null,
	            valueDay: null
	        };
	
	        window.onresize = function () {
	            return _this.resizePage();
	        };
	        return _this;
	    }
	
	    _createClass(App, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.resizePage();
	        }
	    }, {
	        key: 'resizePage',
	        value: function resizePage() {
	            this.refs.outTimeLine && this.refs.outTimeLine.resizeChart();
	            this.refs.outHabitLine && this.refs.outHabitLine.resizeChart();
	        }
	    }, {
	        key: 'getConditionsValue',
	        value: function getConditionsValue(value) {
	            this.setState({
	                conditions: value
	            });
	        }
	    }, {
	        key: 'changeNorthHeight',
	        value: function changeNorthHeight(h) {
	            this.setState({
	                content_north_h: h
	            });
	        }
	    }, {
	        key: 'emptyCallback',
	        value: function emptyCallback() {
	            this.setState({
	                conditions: null,
	                emptyStatus: true
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var state = this.state,
	                props = this.props;
	
	            var eastH = props.browser.height - state.content_north_h - 16;
	            return _react2["default"].createElement(
	                'div',
	                null,
	                _react2["default"].createElement(
	                    _layout.ContentLayoutNorth,
	                    { height: state.content_north_h },
	                    _react2["default"].createElement(_conditions2["default"], { type: 'lawSearch', conditionsValue: this.getConditionsValue.bind(this),
	                        northLayoutHeight: this.changeNorthHeight.bind(this) })
	                ),
	                _react2["default"].createElement(
	                    _layout.ContentLayoutCenter,
	                    null,
	                    !state.conditions ? _react2["default"].createElement(_initialPage2["default"], { status: state.emptyStatus }) : _react2["default"].createElement(
	                        'div',
	                        { className: 'charts' },
	                        _react2["default"].createElement(
	                            'div',
	                            { className: 'chart_left' },
	                            _react2["default"].createElement(
	                                'div',
	                                { className: 'chart-title' },
	                                '\u5E38\u53BB\u5730\u70B9'
	                            ),
	                            _react2["default"].createElement(
	                                'ul',
	                                { className: 'law-l-cont-box' },
	                                _react2["default"].createElement(
	                                    'li',
	                                    null,
	                                    _react2["default"].createElement(
	                                        'span',
	                                        { className: 'fr fs14' },
	                                        '7'
	                                    ),
	                                    _react2["default"].createElement(
	                                        'span',
	                                        { className: 'law-li-num num1' },
	                                        '1'
	                                    ),
	                                    '\u6C5F\u5357\u5927\u9053\u6C5F\u9675\u8DEF\u53E3'
	                                ),
	                                _react2["default"].createElement(
	                                    'li',
	                                    null,
	                                    _react2["default"].createElement(
	                                        'span',
	                                        { className: 'fr fs14' },
	                                        '5'
	                                    ),
	                                    _react2["default"].createElement(
	                                        'span',
	                                        { className: 'law-li-num num2' },
	                                        '2'
	                                    ),
	                                    '\u6EE8\u5EB7\u8DEF\u5730\u94C1\u53E3'
	                                ),
	                                _react2["default"].createElement(
	                                    'li',
	                                    null,
	                                    _react2["default"].createElement(
	                                        'span',
	                                        { className: 'fr fs14' },
	                                        '4'
	                                    ),
	                                    _react2["default"].createElement(
	                                        'span',
	                                        { className: 'law-li-num num3' },
	                                        '3'
	                                    ),
	                                    '\u6C5F\u5357\u597D\u82D1\u5C0F\u533A\u5357\u95E8'
	                                ),
	                                _react2["default"].createElement(
	                                    'li',
	                                    null,
	                                    _react2["default"].createElement(
	                                        'span',
	                                        { className: 'fr fs14' },
	                                        '3'
	                                    ),
	                                    _react2["default"].createElement(
	                                        'span',
	                                        { className: 'law-li-num' },
	                                        '4'
	                                    ),
	                                    '\u660E\u6708\u6C5F\u535724\u5E62'
	                                ),
	                                _react2["default"].createElement(
	                                    'li',
	                                    { className: 'bt-border-no' },
	                                    _react2["default"].createElement(
	                                        'span',
	                                        { className: 'fr fs14' },
	                                        '3'
	                                    ),
	                                    _react2["default"].createElement(
	                                        'span',
	                                        { className: 'law-li-num' },
	                                        '5'
	                                    ),
	                                    '\u9F99\u7FD4\u6865C\u53E3'
	                                )
	                            )
	                        ),
	                        _react2["default"].createElement(
	                            'div',
	                            { className: 'chart_center' },
	                            _react2["default"].createElement(
	                                'div',
	                                { className: 'chart-title' },
	                                '\u591C\u51FA\u65F6\u95F4'
	                            ),
	                            _react2["default"].createElement(_charts.OutTimeLine, { ref: "outTimeLine", height: state.chart_height })
	                        ),
	                        _react2["default"].createElement(
	                            'div',
	                            { className: 'chart_right' },
	                            _react2["default"].createElement(
	                                'div',
	                                { className: 'chart-title' },
	                                '\u591C\u51FA\u5468\u671F'
	                            ),
	                            _react2["default"].createElement(_charts.OutHabitLine, { ref: "outHabitLine", height: state.chart_height })
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return App;
	}(_react2["default"].Component);
	
	exports["default"] = (0, _reactRedux.connect)(function (state) {
	    return { browser: state.browser };
	})(App);

/***/ }),
/* 1281 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 1282 */,
/* 1283 */,
/* 1284 */,
/* 1285 */,
/* 1286 */,
/* 1287 */,
/* 1288 */,
/* 1289 */,
/* 1290 */,
/* 1291 */,
/* 1292 */,
/* 1293 */,
/* 1294 */,
/* 1295 */,
/* 1296 */,
/* 1297 */,
/* 1298 */,
/* 1299 */,
/* 1300 */,
/* 1301 */,
/* 1302 */,
/* 1303 */,
/* 1304 */,
/* 1305 */,
/* 1306 */,
/* 1307 */,
/* 1308 */,
/* 1309 */,
/* 1310 */,
/* 1311 */,
/* 1312 */,
/* 1313 */,
/* 1314 */,
/* 1315 */,
/* 1316 */,
/* 1317 */,
/* 1318 */,
/* 1319 */,
/* 1320 */,
/* 1321 */,
/* 1322 */,
/* 1323 */,
/* 1324 */,
/* 1325 */,
/* 1326 */,
/* 1327 */,
/* 1328 */,
/* 1329 */,
/* 1330 */,
/* 1331 */,
/* 1332 */,
/* 1333 */,
/* 1334 */,
/* 1335 */,
/* 1336 */,
/* 1337 */,
/* 1338 */,
/* 1339 */,
/* 1340 */,
/* 1341 */,
/* 1342 */,
/* 1343 */,
/* 1344 */,
/* 1345 */,
/* 1346 */,
/* 1347 */,
/* 1348 */,
/* 1349 */,
/* 1350 */,
/* 1351 */,
/* 1352 */,
/* 1353 */,
/* 1354 */,
/* 1355 */,
/* 1356 */,
/* 1357 */,
/* 1358 */,
/* 1359 */,
/* 1360 */,
/* 1361 */,
/* 1362 */,
/* 1363 */,
/* 1364 */,
/* 1365 */,
/* 1366 */,
/* 1367 */,
/* 1368 */,
/* 1369 */,
/* 1370 */,
/* 1371 */,
/* 1372 */,
/* 1373 */,
/* 1374 */,
/* 1375 */,
/* 1376 */,
/* 1377 */,
/* 1378 */,
/* 1379 */,
/* 1380 */,
/* 1381 */,
/* 1382 */,
/* 1383 */,
/* 1384 */,
/* 1385 */,
/* 1386 */,
/* 1387 */,
/* 1388 */,
/* 1389 */,
/* 1390 */,
/* 1391 */,
/* 1392 */,
/* 1393 */,
/* 1394 */,
/* 1395 */,
/* 1396 */,
/* 1397 */,
/* 1398 */,
/* 1399 */,
/* 1400 */,
/* 1401 */,
/* 1402 */,
/* 1403 */,
/* 1404 */,
/* 1405 */,
/* 1406 */,
/* 1407 */,
/* 1408 */,
/* 1409 */,
/* 1410 */,
/* 1411 */,
/* 1412 */,
/* 1413 */,
/* 1414 */,
/* 1415 */,
/* 1416 */,
/* 1417 */,
/* 1418 */,
/* 1419 */,
/* 1420 */,
/* 1421 */,
/* 1422 */,
/* 1423 */,
/* 1424 */,
/* 1425 */,
/* 1426 */,
/* 1427 */,
/* 1428 */,
/* 1429 */,
/* 1430 */,
/* 1431 */,
/* 1432 */,
/* 1433 */,
/* 1434 */,
/* 1435 */,
/* 1436 */,
/* 1437 */,
/* 1438 */,
/* 1439 */,
/* 1440 */,
/* 1441 */,
/* 1442 */,
/* 1443 */,
/* 1444 */,
/* 1445 */,
/* 1446 */,
/* 1447 */,
/* 1448 */,
/* 1449 */,
/* 1450 */,
/* 1451 */,
/* 1452 */,
/* 1453 */,
/* 1454 */,
/* 1455 */,
/* 1456 */,
/* 1457 */,
/* 1458 */,
/* 1459 */,
/* 1460 */,
/* 1461 */,
/* 1462 */,
/* 1463 */,
/* 1464 */,
/* 1465 */,
/* 1466 */,
/* 1467 */,
/* 1468 */,
/* 1469 */,
/* 1470 */,
/* 1471 */,
/* 1472 */,
/* 1473 */,
/* 1474 */,
/* 1475 */,
/* 1476 */,
/* 1477 */,
/* 1478 */,
/* 1479 */,
/* 1480 */,
/* 1481 */,
/* 1482 */,
/* 1483 */,
/* 1484 */,
/* 1485 */,
/* 1486 */,
/* 1487 */,
/* 1488 */,
/* 1489 */,
/* 1490 */,
/* 1491 */,
/* 1492 */,
/* 1493 */,
/* 1494 */,
/* 1495 */,
/* 1496 */,
/* 1497 */,
/* 1498 */,
/* 1499 */,
/* 1500 */,
/* 1501 */,
/* 1502 */,
/* 1503 */,
/* 1504 */,
/* 1505 */,
/* 1506 */,
/* 1507 */,
/* 1508 */,
/* 1509 */,
/* 1510 */,
/* 1511 */,
/* 1512 */,
/* 1513 */,
/* 1514 */,
/* 1515 */,
/* 1516 */,
/* 1517 */,
/* 1518 */,
/* 1519 */,
/* 1520 */,
/* 1521 */,
/* 1522 */,
/* 1523 */,
/* 1524 */,
/* 1525 */,
/* 1526 */,
/* 1527 */,
/* 1528 */,
/* 1529 */,
/* 1530 */,
/* 1531 */,
/* 1532 */,
/* 1533 */,
/* 1534 */,
/* 1535 */,
/* 1536 */,
/* 1537 */,
/* 1538 */,
/* 1539 */,
/* 1540 */,
/* 1541 */,
/* 1542 */,
/* 1543 */,
/* 1544 */,
/* 1545 */,
/* 1546 */,
/* 1547 */,
/* 1548 */,
/* 1549 */,
/* 1550 */,
/* 1551 */,
/* 1552 */,
/* 1553 */,
/* 1554 */,
/* 1555 */,
/* 1556 */,
/* 1557 */,
/* 1558 */,
/* 1559 */,
/* 1560 */,
/* 1561 */,
/* 1562 */,
/* 1563 */,
/* 1564 */,
/* 1565 */,
/* 1566 */,
/* 1567 */,
/* 1568 */,
/* 1569 */,
/* 1570 */,
/* 1571 */,
/* 1572 */,
/* 1573 */,
/* 1574 */,
/* 1575 */,
/* 1576 */,
/* 1577 */,
/* 1578 */,
/* 1579 */,
/* 1580 */,
/* 1581 */,
/* 1582 */,
/* 1583 */,
/* 1584 */,
/* 1585 */,
/* 1586 */,
/* 1587 */,
/* 1588 */,
/* 1589 */,
/* 1590 */,
/* 1591 */,
/* 1592 */,
/* 1593 */,
/* 1594 */,
/* 1595 */,
/* 1596 */,
/* 1597 */,
/* 1598 */,
/* 1599 */,
/* 1600 */,
/* 1601 */,
/* 1602 */,
/* 1603 */,
/* 1604 */,
/* 1605 */,
/* 1606 */,
/* 1607 */,
/* 1608 */,
/* 1609 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "images/nopic.c42842c085ea706b35aa81a653e8a87f.png";

/***/ }),
/* 1610 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "images/noface.16fd8bf930be74c7148c7f8c343833d0.jpg";

/***/ })
]));
//# sourceMappingURL=map/36.map